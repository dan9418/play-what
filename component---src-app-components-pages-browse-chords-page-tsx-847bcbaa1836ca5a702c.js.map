{"version":3,"file":"component---src-app-components-pages-browse-chords-page-tsx-847bcbaa1836ca5a702c.js","mappings":"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","sources":["webpack://play-what/./src/app/components/shared/ui/Card.tsx","webpack://play-what/./src/core/IntervalQuality.constants.ts","webpack://play-what/./src/core/Interval.utils.ts","webpack://play-what/./src/app/components/shared/ui/Table.tsx","webpack://play-what/./src/app/components/pages/browse/cards/CollectionTable.tsx","webpack://play-what/./src/app/components/pages/browse/cards/CollectionCard.tsx","webpack://play-what/./src/app/components/pages/browse/chords.page.tsx","webpack://play-what/./src/app/components/shared/layout/ColumnManager.tsx"],"sourcesContent":["import React, { PropsWithChildren } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface ICardHeaderProps {\r\n  title: string;\r\n  level?: number;\r\n  action?: any;\r\n}\r\n\r\nexport const StyledCardHeader = styled.div`\r\n  margin-bottom: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport const CardHeader: React.FC<ICardHeaderProps> = ({\r\n  title,\r\n  level = 2,\r\n  action = null,\r\n}) => {\r\n  const AsTag: any = `h${level}`;\r\n  return (\r\n    <StyledCardHeader>\r\n      <AsTag>{title}</AsTag>\r\n      {action}\r\n    </StyledCardHeader>\r\n  );\r\n};\r\n\r\nexport interface ICardProps extends PropsWithChildren<any> {\r\n  title?: string;\r\n  subtitle?: string;\r\n  action?: any;\r\n  level?: number;\r\n}\r\n\r\nexport const StyledCard = styled.div`\r\n  background: ${(props) => props.theme?.surface?.card};\r\n  width: 100%;\r\n  border-radius: 16px;\r\n  padding: 16px;\r\n`;\r\n\r\nconst Card: React.FC<ICardProps> = ({\r\n  title,\r\n  subtitle,\r\n  action,\r\n  children,\r\n  level = 1,\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <StyledCard {...rest}>\r\n      {title && <CardHeader title={title} action={action} level={level} />}\r\n      {subtitle && <CardHeader title={subtitle} level={level + 1} />}\r\n      {children}\r\n    </StyledCard>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import ArrayUtils from \"./primitives/Array.utils\";\r\nimport { IPreset, PresetMap } from \"./Core.constants\";\r\n\r\nexport enum IntervalQualityId {\r\n  Diminished = \"diminished\",\r\n  Minor = \"minor\",\r\n  Perfect = \"perfect\",\r\n  Major = \"major\",\r\n  Augmented = \"augmented\",\r\n}\r\n\r\nexport interface IIntervalQualityPreset extends IPreset<IntervalQualityId> {\r\n  symbol: string;\r\n  down?: IntervalQualityId;\r\n  up?: IntervalQualityId;\r\n}\r\n\r\nexport const INTERVAL_QUALITY_PRESET_MAP: PresetMap<\r\n  IntervalQualityId,\r\n  IIntervalQualityPreset\r\n> = new Map([\r\n  [\r\n    IntervalQualityId.Diminished,\r\n    {\r\n      presetId: IntervalQualityId.Diminished,\r\n      name: \"Diminished\",\r\n      symbol: \"d\",\r\n      down: undefined,\r\n      up: IntervalQualityId.Minor,\r\n    },\r\n  ],\r\n  [\r\n    IntervalQualityId.Minor,\r\n    {\r\n      presetId: IntervalQualityId.Minor,\r\n      name: \"Minor\",\r\n      symbol: \"m\",\r\n      down: IntervalQualityId.Diminished,\r\n      up: IntervalQualityId.Major,\r\n    },\r\n  ],\r\n  [\r\n    IntervalQualityId.Perfect,\r\n    {\r\n      presetId: IntervalQualityId.Perfect,\r\n      name: \"Perfect\",\r\n      symbol: \"P\",\r\n      down: IntervalQualityId.Diminished,\r\n      up: IntervalQualityId.Augmented,\r\n    },\r\n  ],\r\n  [\r\n    IntervalQualityId.Major,\r\n    {\r\n      presetId: IntervalQualityId.Major,\r\n      name: \"Major\",\r\n      symbol: \"M\",\r\n      down: IntervalQualityId.Minor,\r\n      up: IntervalQualityId.Augmented,\r\n    },\r\n  ],\r\n  [\r\n    IntervalQualityId.Augmented,\r\n    {\r\n      presetId: IntervalQualityId.Augmented,\r\n      name: \"Augmented\",\r\n      symbol: \"A\",\r\n      down: IntervalQualityId.Major,\r\n      up: undefined,\r\n    },\r\n  ],\r\n]);\r\n\r\nexport const INTERVAL_QUALITY_PRESETS = ArrayUtils.mapToArray(\r\n  INTERVAL_QUALITY_PRESET_MAP\r\n);\r\n","import { getFrequency } from \"./Frequency.utils\";\r\nimport {\r\n  CORE_INTERVALS,\r\n  getExtensionInversionId,\r\n  IIntervalPreset,\r\n  IntervalId,\r\n  INTERVAL_PRESET_MAP,\r\n} from \"./Interval.constants\";\r\nimport {\r\n  IIntervalQualityPreset,\r\n  IntervalQualityId,\r\n  INTERVAL_QUALITY_PRESET_MAP,\r\n} from \"./IntervalQuality.constants\";\r\nimport { IPod, MAX_POD } from \"./Pod.constants\";\r\nimport { reducePod } from \"./Pod.utils\";\r\n\r\nconst getIsExtended = (pod: IPod): boolean => {\r\n  return pod[0] > MAX_POD[0] || pod[1] > MAX_POD[1];\r\n};\r\n\r\nexport const getName = (pod: IPod) => {\r\n  const reduced = reducePod(pod);\r\n\r\n  const [noteIndex, d] = reduced;\r\n  const degreeIntervals = CORE_INTERVALS[d] as IIntervalPreset[];\r\n  if (!degreeIntervals) return \"?\";\r\n\r\n  const pIvl = degreeIntervals[0];\r\n  const loIvl = pIvl;\r\n  const hiIvl = degreeIntervals[degreeIntervals.length - 1];\r\n\r\n  // determine core interval and quality\r\n  let ivl: IIntervalPreset | undefined;\r\n  let quality: IIntervalQualityPreset | undefined;\r\n  if (degreeIntervals.length === 1) {\r\n    ivl = pIvl; // perfect\r\n    quality = INTERVAL_QUALITY_PRESET_MAP.get(\r\n      IntervalQualityId.Perfect\r\n    ) as IIntervalQualityPreset;\r\n  } else if (noteIndex <= loIvl.pod[0]) {\r\n    ivl = loIvl; // minor\r\n    quality = INTERVAL_QUALITY_PRESET_MAP.get(\r\n      IntervalQualityId.Minor\r\n    ) as IIntervalQualityPreset;\r\n  } else if (noteIndex >= hiIvl.pod[0]) {\r\n    ivl = hiIvl; // major\r\n    quality = INTERVAL_QUALITY_PRESET_MAP.get(\r\n      IntervalQualityId.Major\r\n    ) as IIntervalQualityPreset;\r\n  }\r\n\r\n  const offset = (ivl as IIntervalPreset).pod[0] - reduced[0];\r\n\r\n  if (offset === 0)\r\n    return `${(quality as IIntervalQualityPreset).symbol}${d + 1}`;\r\n  else if (offset > 0)\r\n    quality = INTERVAL_QUALITY_PRESET_MAP.get(\r\n      IntervalQualityId.Diminished\r\n    ) as IIntervalQualityPreset;\r\n  // dim\r\n  else if (offset < 0)\r\n    quality = INTERVAL_QUALITY_PRESET_MAP.get(\r\n      IntervalQualityId.Augmented\r\n    ) as IIntervalQualityPreset; // aug\r\n\r\n  const count = Math.abs(offset);\r\n  const qualityStr = (quality as IIntervalQualityPreset).symbol.repeat(count);\r\n\r\n  let value = `${qualityStr}${d + 1}`;\r\n\r\n  const isExtended = getIsExtended(pod);\r\n\r\n  if (isExtended) {\r\n    value = getExtensionInversionId(value as IntervalId);\r\n  }\r\n\r\n  return value;\r\n};\r\n\r\nexport const getNameFromId = (presetId: IntervalId) => {\r\n  return (INTERVAL_PRESET_MAP.get(presetId) as IIntervalPreset).name || \"\";\r\n};\r\n\r\nexport const getRatio = (pod: IPod) => {\r\n  const [p] = pod;\r\n\r\n  const baseline = getFrequency(0);\r\n  const compareTo = getFrequency(p);\r\n\r\n  const ratio = compareTo / baseline;\r\n\r\n  return `1:${ratio.toFixed(2)}`;\r\n};\r\n","import { Link } from \"gatsby\";\r\nimport React, { Fragment, ReactNode } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledTable = styled.table``;\r\n\r\ntype TOmit = undefined | null | false;\r\n\r\nconst getIsTypeOmit = (data: any): data is TOmit =>\r\n  data === undefined || data === null || data === false;\r\n\r\n// Col\r\n\r\nexport interface IColConfig {\r\n  isHeader?: boolean;\r\n  content: any;\r\n  colSpan?: number;\r\n  className?: string;\r\n  link?: string;\r\n}\r\n\r\ninterface IColProps extends IColConfig {\r\n  index: number;\r\n}\r\n\r\ntype TCol = string | number | IColConfig | ReactNode;\r\n\r\nconst Col: React.FC<IColProps> = ({\r\n  index,\r\n  isHeader,\r\n  content,\r\n  colSpan,\r\n  className,\r\n  link,\r\n}) => {\r\n  const ColTag = isHeader ? \"th\" : \"td\";\r\n  const WrapperTag = link ? Link : Fragment;\r\n  const wrapperProps: any = link ? { to: link } : {};\r\n\r\n  return (\r\n    <ColTag colSpan={colSpan} className={className}>\r\n      <WrapperTag {...wrapperProps}>{content || \"\"}</WrapperTag>\r\n    </ColTag>\r\n  );\r\n};\r\n\r\n// Row\r\n\r\nexport interface IRowConfig {\r\n  cols: (TCol | TOmit)[];\r\n  className?: string;\r\n  isHeader?: boolean;\r\n  headerColIndicies?: number[];\r\n}\r\n\r\nconst getIsConfig = (col: TCol): col is IColConfig =>\r\n  typeof col === \"object\" && col !== null && col.hasOwnProperty(\"content\");\r\n\r\nconst Row: React.FC<IRowConfig> = ({\r\n  cols,\r\n  isHeader,\r\n  className,\r\n  headerColIndicies = [],\r\n}) => {\r\n  return (\r\n    <tr className={className}>\r\n      {cols.map((col: any, i) => {\r\n        if (getIsTypeOmit(col)) return null;\r\n        const isConfig = getIsConfig(col);\r\n        const colConfig = !isConfig ? { content: col } : col;\r\n        return (\r\n          <Col\r\n            key={i}\r\n            index={i}\r\n            isHeader={isHeader || headerColIndicies.includes(i)}\r\n            {...colConfig}\r\n          />\r\n        );\r\n      })}\r\n    </tr>\r\n  );\r\n};\r\n\r\n// Table Section\r\n\r\ninterface ITableSectionConfig {\r\n  Tag: \"thead\" | \"tfoot\" | \"tbody\";\r\n  rows: (IRowConfig | TOmit)[];\r\n  headerColIndicies?: number[];\r\n}\r\n\r\nconst TableSection: React.FC<ITableSectionConfig> = ({\r\n  Tag,\r\n  rows,\r\n  headerColIndicies,\r\n}) => (\r\n  <Tag>\r\n    {rows.map((row, i) => {\r\n      if (getIsTypeOmit(row)) return null;\r\n      return (\r\n        <Row\r\n          key={i}\r\n          isHeader={Tag !== \"tbody\"}\r\n          headerColIndicies={headerColIndicies}\r\n          {...row}\r\n        />\r\n      );\r\n    })}\r\n  </Tag>\r\n);\r\n\r\n// Table\r\n\r\ninterface IColGroup {\r\n  span?: number;\r\n  className?: string;\r\n}\r\n\r\nexport interface ITableConfig {\r\n  thead?: (IRowConfig | TOmit)[];\r\n  tfoot?: (IRowConfig | TOmit)[];\r\n  tbody: (IRowConfig | TOmit)[];\r\n  styles?: any;\r\n  caption?: string;\r\n  colGroups?: IColGroup[];\r\n  className?: string;\r\n  headerColIndicies?: number[];\r\n}\r\n\r\nexport const Table: React.FC<ITableConfig> = ({\r\n  thead,\r\n  tfoot,\r\n  tbody,\r\n  styles,\r\n  colGroups,\r\n  caption,\r\n  headerColIndicies,\r\n  className,\r\n}) => {\r\n  return (\r\n    <StyledTable css={styles} className={className}>\r\n      {colGroups && (\r\n        <colgroup>\r\n          {colGroups.map((cg, i) => (\r\n            <col key={i} {...cg} />\r\n          ))}\r\n        </colgroup>\r\n      )}\r\n      {caption && <caption>{caption}</caption>}\r\n      {thead && (\r\n        <TableSection\r\n          Tag=\"thead\"\r\n          rows={thead}\r\n          headerColIndicies={headerColIndicies}\r\n        />\r\n      )}\r\n      {tfoot && (\r\n        <TableSection\r\n          Tag=\"tfoot\"\r\n          rows={tfoot}\r\n          headerColIndicies={headerColIndicies}\r\n        />\r\n      )}\r\n      {tbody && (\r\n        <TableSection\r\n          Tag=\"tbody\"\r\n          rows={tbody}\r\n          headerColIndicies={headerColIndicies}\r\n        />\r\n      )}\r\n    </StyledTable>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { css } from \"styled-components\";\r\nimport { PresetType } from \"../../../../../core/Core.constants\";\r\nimport { AnyPodListPreset } from \"../../../../../core/Core.derived\";\r\nimport { getName as getIntervalName } from \"../../../../../core/Interval.utils\";\r\nimport { INotePreset, NoteId } from \"../../../../../core/Note.constants\";\r\nimport { getName as getNoteName } from \"../../../../../core/Note.utils\";\r\nimport { IPod } from \"../../../../../core/Pod.constants\";\r\nimport { addPods, getRootedName } from \"../../../../../core/Pod.utils\";\r\nimport { getModelRoute } from \"../../../../../core/Routing.utils\";\r\nimport { Breakpoint, MediaQuery } from \"../../../../styles/breakpoint\";\r\nimport { Table } from \"../../../shared/ui/Table\";\r\n\r\nconst SEMITONES = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\r\n\r\nconst tableStyles = css`\r\n  width: 100%;\r\n  margin: auto;\r\n  border-collapse: collapse;\r\n  white-space: nowrap;\r\n\r\n  td {\r\n    &:not(:first-child) {\r\n      font-size: 80%;\r\n    }\r\n  }\r\n\r\n  td,\r\n  th {\r\n    line-height: 32px;\r\n    text-align: center;\r\n\r\n    &:not(:first-child) {\r\n      width: 32px;\r\n      height: 32px;\r\n\r\n      display: none;\r\n      ${MediaQuery.Tablet} {\r\n        display: table-cell;\r\n      }\r\n    }\r\n\r\n    &:first-child {\r\n      text-align: left;\r\n      padding: 0 8px;\r\n    }\r\n  }\r\n\r\n  td {\r\n    //border-right: 1px solid ${(props) => props.theme?.utils?.border};\r\n    //border-bottom: 1px solid ${(props) => props.theme?.utils?.border};\r\n    &.active {\r\n      background-color: ${(props) => props.theme?.surface?.bg};\r\n    }\r\n  }\r\n\r\n  thead {\r\n    text-transform: uppercase;\r\n    font-size: 80%;\r\n\r\n    @media (max-width: ${Breakpoint.Tablet - 1}px) {\r\n      display: none;\r\n    }\r\n    tr th {\r\n      background-color: ${(props) => props.theme?.surface?.nav};\r\n      color: ${({ theme }) => theme?.text?.inverted};\r\n    }\r\n\r\n    th:first-child {\r\n      border-radius: 8px 0 0 8px;\r\n    }\r\n    th:last-child {\r\n      border-radius: 0 8px 8px 0;\r\n    }\r\n  }\r\n\r\n  a {\r\n    display: block;\r\n  }\r\n`;\r\n\r\nconst getSemitoneCol = (\r\n  pods: IPod[],\r\n  h: number,\r\n  semitones: number[],\r\n  rootNotePreset?: INotePreset\r\n) => {\r\n  const index = pods.findIndex((ivl) => ivl[0] + 1 === h);\r\n  const className = semitones.includes(h) ? \"active\" : undefined;\r\n  if (index < 0) {\r\n    return {\r\n      className,\r\n      content: \"\",\r\n    };\r\n  }\r\n  const text = rootNotePreset\r\n    ? getNoteName(addPods(rootNotePreset.pod, pods[index]))\r\n    : getIntervalName(pods[index]);\r\n  return {\r\n    className,\r\n    content: text,\r\n  };\r\n};\r\n\r\nexport interface ICollectionTableProps {\r\n  data: AnyPodListPreset[];\r\n  rootNotePreset?: INotePreset;\r\n  semitones?: number[];\r\n  presetType: PresetType;\r\n}\r\n\r\nconst CollectionTable: React.FC<ICollectionTableProps> = ({\r\n  data,\r\n  semitones = [],\r\n  rootNotePreset,\r\n  presetType,\r\n}) => {\r\n  return (\r\n    <Table\r\n      styles={tableStyles}\r\n      thead={[\r\n        {\r\n          cols: [\r\n            \"Name\",\r\n            {\r\n              colSpan: 12,\r\n              content: rootNotePreset ? \"Notes\" : \"Intervals\",\r\n            },\r\n          ],\r\n        },\r\n      ]}\r\n      tbody={data.map((d, i) => {\r\n        return {\r\n          cols: [\r\n            {\r\n              link: getModelRoute(\r\n                presetType,\r\n                d.presetId,\r\n                rootNotePreset ? (rootNotePreset.presetId as NoteId) : undefined\r\n              ),\r\n              content: getRootedName(d, rootNotePreset),\r\n            },\r\n            ...SEMITONES.map((h, i) =>\r\n              getSemitoneCol(d.pods, h, semitones, rootNotePreset)\r\n            ),\r\n          ],\r\n        };\r\n      })}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CollectionTable;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { PresetType } from \"../../../../../core/Core.constants\";\r\nimport { AnyPodListPreset } from \"../../../../../core/Core.derived\";\r\nimport Card, { ICardProps } from \"../../../shared/ui/Card\";\r\nimport CollectionTable from \"./CollectionTable\";\r\n\r\ninterface ICollectionCardProps extends ICardProps {\r\n  data: AnyPodListPreset[];\r\n  description?: string;\r\n  presetType: PresetType;\r\n}\r\n\r\nconst StyledCollectionCard = styled(Card)`\r\n  p {\r\n    margin: 16px 0;\r\n  }\r\n`;\r\n\r\nconst CollectionCard: React.FC<ICollectionCardProps> = ({\r\n  description,\r\n  data,\r\n  presetType,\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <StyledCollectionCard {...rest}>\r\n      {description && <p>{description}</p>}\r\n      <CollectionTable presetType={presetType} data={data} />\r\n    </StyledCollectionCard>\r\n  );\r\n};\r\n\r\nexport default CollectionCard;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { CHORD_PRESETS } from \"../../../../core/Chord.constants\";\r\nimport { PresetType, Tag } from \"../../../../core/Core.constants\";\r\nimport ColumnManager from \"../../shared/layout/ColumnManager\";\r\nimport PageLayout from \"../../shared/layout/PageLayout\";\r\nimport CollectionCard from \"./cards/CollectionCard\";\r\n\r\nconst StyledChordsPage = styled(PageLayout)`\r\n  .intro {\r\n    padding: 0 16px;\r\n    margin-bottom: 16px;\r\n  }\r\n`;\r\n\r\nconst ChordsPage: React.FC = () => {\r\n  return (\r\n    <StyledChordsPage title=\"Chords\" subtitle=\"The foundation of harmony\">\r\n      <div>\r\n        <p className=\"intro\">\r\n          A chord is a collection of musical notes, usually played\r\n          simultaneously. Chords are defined by their first note (the&nbsp;\r\n          <em>root</em>) and its relationship to the following notes (\r\n          <em>intervals</em>).\r\n        </p>\r\n      </div>\r\n      <ColumnManager>\r\n        <CollectionCard\r\n          presetType={PresetType.Chord}\r\n          title=\"Triads\"\r\n          description={`\r\n            A triad is the most basic type of chord. It consists of 3\r\n            intervals (a root, a third, and a fifth). The specific thirds and\r\n            fifths used determine the type (or quality) of the triad.\r\n          `}\r\n          data={CHORD_PRESETS.filter((chord) => chord.tags.includes(Tag.Triad))}\r\n        />\r\n        <CollectionCard\r\n          presetType={PresetType.Chord}\r\n          title=\"Seventh Chords\"\r\n          description={`\r\n            A seventh chord is a triad with an additional seventh interval\r\n            stacked on top.\r\n          `}\r\n          data={CHORD_PRESETS.filter(\r\n            (chord) =>\r\n              chord.tags.includes(Tag.Seventh) &&\r\n              !chord.tags.includes(Tag.Extended)\r\n          )}\r\n        />\r\n        <CollectionCard\r\n          presetType={PresetType.Chord}\r\n          title=\"Sixth Chords\"\r\n          description={`\r\n            A sixth chord is a triad with an additional sixth interval stacked\r\n            on top. They are similar in function to seventh chords.\r\n          `}\r\n          data={CHORD_PRESETS.filter(\r\n            (chord) =>\r\n              chord.tags.includes(Tag.Sixth) &&\r\n              !chord.tags.includes(Tag.Extended)\r\n          )}\r\n        />\r\n        <CollectionCard\r\n          presetType={PresetType.Chord}\r\n          title=\"Suspended Chords\"\r\n          description={`\r\n            A suspended chord is a like a triad, except it sustitutes a second\r\n            or fourth interval in place of the third.\r\n          `}\r\n          data={CHORD_PRESETS.filter((chord) =>\r\n            chord.tags.includes(Tag.Suspended)\r\n          )}\r\n        />\r\n        <CollectionCard\r\n          presetType={PresetType.Chord}\r\n          title=\"Extended Chords\"\r\n          description={`\r\n            An extended chord contains extended intervals. [INCOMPLETE]\r\n          `}\r\n          data={CHORD_PRESETS.filter((chord) =>\r\n            chord.tags.includes(Tag.Extended)\r\n          )}\r\n        />\r\n        {/* Altered Chords */}\r\n      </ColumnManager>\r\n    </StyledChordsPage>\r\n  );\r\n};\r\n\r\nexport default ChordsPage;\r\n","import React, { PropsWithChildren } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { MediaQuery } from \"../../../styles/breakpoint\";\r\n\r\ninterface IStyledColumnManagerProps {\r\n  $tablet?: string[];\r\n  $desktop?: string[];\r\n}\r\n\r\nexport const StyledColumnManager = styled.div<IStyledColumnManagerProps>`\r\n  display: grid;\r\n  gap: 16px;\r\n  grid-template-columns: 1fr;\r\n\r\n  ${({ $tablet }) =>\r\n    $tablet\r\n      ? `\r\n        ${MediaQuery.Tablet} {\r\n            grid-template-columns: ${$tablet.join(\" \")}\r\n        }\r\n    `\r\n      : \"\"}\r\n\r\n  ${({ $desktop }) =>\r\n    $desktop\r\n      ? `\r\n        ${MediaQuery.Desktop} {\r\n            grid-template-columns: ${$desktop.join(\" \")}\r\n        }\r\n    `\r\n      : ``}\r\n`;\r\n\r\nexport interface IColumnManagerProps extends PropsWithChildren {\r\n  tablet?: string[];\r\n  desktop?: string[];\r\n}\r\n\r\nconst ColumnManager: React.FC<IColumnManagerProps> = ({\r\n  tablet,\r\n  desktop,\r\n  children,\r\n}) => {\r\n  return (\r\n    <StyledColumnManager $tablet={tablet} $desktop={desktop}>\r\n      {children}\r\n    </StyledColumnManager>\r\n  );\r\n};\r\n\r\nexport default ColumnManager;\r\n"],"names":["StyledCardHeader","styled","CardHeader","_ref","title","level","action","AsTag","React","StyledCard","props","theme","_props$theme","surface","_props$theme$surface","card","_ref2","subtitle","children","rest","IntervalQualityId","INTERVAL_QUALITY_PRESET_MAP","Map","Diminished","presetId","name","symbol","down","undefined","up","Minor","Major","Perfect","Augmented","ArrayUtils","getName","pod","reduced","reducePod","noteIndex","d","degreeIntervals","CORE_INTERVALS","pIvl","loIvl","hiIvl","length","ivl","quality","get","offset","count","Math","abs","value","repeat","isExtended","MAX_POD","getIsExtended","getExtensionInversionId","StyledTable","getIsTypeOmit","data","Col","index","isHeader","content","colSpan","className","link","ColTag","WrapperTag","Link","Fragment","wrapperProps","to","Row","cols","headerColIndicies","map","col","i","isConfig","hasOwnProperty","getIsConfig","colConfig","key","includes","TableSection","_ref3","Tag","rows","row","Table","_ref4","thead","tfoot","tbody","styles","colGroups","caption","cg","SEMITONES","tableStyles","css","MediaQuery","bg","Breakpoint","_props$theme2","_props$theme2$surface","nav","text","_theme$text","inverted","semitones","rootNotePreset","presetType","getModelRoute","getRootedName","h","pods","findIndex","getNoteName","addPods","getIntervalName","getSemitoneCol","StyledCollectionCard","Card","description","CollectionTable","StyledChordsPage","PageLayout","displayName","componentId","ColumnManager","CollectionCard","PresetType","CHORD_PRESETS","chord","tags","StyledColumnManager","$tablet","join","$desktop","tablet","desktop"],"sourceRoot":""}