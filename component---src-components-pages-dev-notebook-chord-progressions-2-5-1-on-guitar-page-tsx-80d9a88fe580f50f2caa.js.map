{"version":3,"file":"component---src-components-pages-dev-notebook-chord-progressions-2-5-1-on-guitar-page-tsx-80d9a88fe580f50f2caa.js","mappings":"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","sources":["webpack://play-what/./src/components/pages/dev/notebook/chord-progressions/2-5-1-on-guitar.page.tsx","webpack://play-what/./src/components/ui/Card.tsx","webpack://play-what/./src/components/ui/FretboardCell.tsx","webpack://play-what/./src/components/ui/SmartCard.tsx","webpack://play-what/./src/components/ui/Table.tsx","webpack://play-what/./src/viewers/fret-table/FretFlag.tsx","webpack://play-what/./src/viewers/fret-table/FretTable.tsx","webpack://play-what/./src/viewers/fretboard/Fretboard.tuning.ts","webpack://play-what/./src/viewers/fretboard/Fretboard.utils.ts","webpack://play-what/./src/viewers/fretboard/Fretboard.voicing.ts"],"sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Chord from \"../../../../../core/models/Chord\";\r\nimport {\r\n  ChordId,\r\n  NoteId,\r\n  ScaleId,\r\n} from \"../../../../../core/models/Model.constants\";\r\nimport Note from \"../../../../../core/models/Note\";\r\nimport Scale from \"../../../../../core/models/Scale\";\r\nimport { DEFAULT_DEGREE_COLOR_SCHEME } from \"../../../../../core/theory/Degree.constants\";\r\nimport { IFretProps } from \"../../../../../viewers/fretboard/Fretboard.utils\";\r\nimport { VOICING_PRESET_MAP } from \"../../../../../viewers/fretboard/Fretboard.voicing\";\r\nimport PageLayout from \"../../../../layout/PageLayout\";\r\nimport FretboardCell from \"../../../../ui/FretboardCell\";\r\nimport SmartCard, { ICardConfig } from \"../../../../ui/SmartCard\";\r\n\r\nconst StyledCAGEDPage = styled(PageLayout)``;\r\n\r\nconst ROOT = Note.fromId(NoteId.C);\r\n\r\nconst MAJOR = new Scale(ScaleId.Ionian, { root: ROOT });\r\nconst MAJOR_NOTES = MAJOR.notes as Note[];\r\n\r\nconst MINOR = new Scale(ScaleId.Ionian, { root: ROOT });\r\nconst MINOR_NOTES = MINOR.notes as Note[];\r\n\r\nconst MAJOR_ITEMS = [\r\n  {\r\n    model: Chord,\r\n    modelId: ChordId.Min7,\r\n    rootId: MAJOR_NOTES[1].modelId,\r\n    voicingId: null,\r\n  },\r\n  {\r\n    model: Chord,\r\n    modelId: ChordId.Dom7,\r\n    rootId: MAJOR_NOTES[4].modelId,\r\n    voicingId: null,\r\n  },\r\n  {\r\n    model: Chord,\r\n    modelId: ChordId.Maj7,\r\n    rootId: MAJOR_NOTES[0].modelId,\r\n    voicingId: null,\r\n  },\r\n];\r\n\r\nconst MINOR_ITEMS = [\r\n  {\r\n    model: Chord,\r\n    modelId: ChordId.HalfDim7,\r\n    rootId: MINOR_NOTES[2].modelId,\r\n    voicingId: null,\r\n  },\r\n  {\r\n    model: Chord,\r\n    modelId: ChordId.Min7,\r\n    rootId: MINOR_NOTES[4].modelId,\r\n    voicingId: null,\r\n  },\r\n  {\r\n    model: Chord,\r\n    modelId: ChordId.Min7,\r\n    rootId: MINOR_NOTES[0].modelId,\r\n    voicingId: null,\r\n  },\r\n];\r\n\r\nconst getColor = (fretProps: IFretProps) => {\r\n  const { stringIndex, fretIndex, tuning, model } = fretProps;\r\n  // @ts-ignore\r\n  const noteIndex = tuning[stringIndex] + fretIndex;\r\n  // @ts-ignore\r\n  const [interval, note] = model.tryGetPodPairAtPitch(noteIndex);\r\n\r\n  if (!note) return;\r\n\r\n  if (interval.pod[1] === 0) return DEFAULT_DEGREE_COLOR_SCHEME[0];\r\n  if (interval.pod[1] === 2) return DEFAULT_DEGREE_COLOR_SCHEME[4];\r\n  if (interval.pod[1] === 4) return \"black\";\r\n  if (interval.pod[1] === 6) return \"black\";\r\n  return \"black\";\r\n};\r\n\r\nconst getRows = (items: any[]) => {\r\n  return [\r\n    {\r\n      cols: items.map((item) => {\r\n        const { model, modelId, rootId, voicingId } = item as any;\r\n        const instance = new model(modelId, {\r\n          root: Note.fromId(rootId),\r\n        });\r\n        const voicing = voicingId\r\n          ? VOICING_PRESET_MAP.get(voicingId)\r\n          : undefined;\r\n        const fretRange = [1, 14] as [number, number];\r\n        return {\r\n          content: (\r\n            <FretboardCell\r\n              caption={instance.getName()}\r\n              fretboardConfig={{\r\n                model: instance,\r\n                voicing,\r\n                fretRange,\r\n                showFretNumbers: false,\r\n                showFretDots: false,\r\n                colorMapFn: getColor,\r\n              }}\r\n            />\r\n          ),\r\n        };\r\n      }),\r\n    },\r\n  ];\r\n};\r\n\r\nconst getCardConfigs = (): ICardConfig[] => {\r\n  return [\r\n    {\r\n      title: \"Major II-V-I\",\r\n      table: {\r\n        thead: [{ cols: [\"II\", \"V\", \"I\"] }],\r\n        tbody: getRows(MAJOR_ITEMS),\r\n      },\r\n    },\r\n    {\r\n      title: \"Minor ii-v-i\",\r\n      table: {\r\n        thead: [{ cols: [\"ii\", \"v\", \"i\"] }],\r\n        tbody: getRows(MINOR_ITEMS),\r\n      },\r\n    },\r\n  ];\r\n};\r\n\r\nconst Page: React.FC<any> = () => {\r\n  return (\r\n    <StyledCAGEDPage title=\"Chord Progressions\">\r\n      <SmartCard cards={getCardConfigs()} />\r\n    </StyledCAGEDPage>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledCard = styled.div`\r\n    background: ${props => props.theme.surface.card};\r\n    width: 100%;\r\n    border-radius: 16px;\r\n    padding: 16px;\r\n\r\n    .header {\r\n        margin-bottom: 16px;\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 8px;\r\n        justify-content: space-between;\r\n    }\r\n`;\r\n\r\nexport const CardHeader: React.FC<any> = ({ title, level = 2, action = null }) => {\r\n    const AsTag: any = `h${level}`;\r\n    return (\r\n        <div className=\"header\">\r\n            <AsTag>{title}</AsTag>\r\n            {action}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Card: React.FC<any> = ({ title, subtitle, action, children, level, ...rest }) => {\r\n    return (\r\n        <StyledCard {...rest}>\r\n            {title &&\r\n                <CardHeader title={title} action={action} level={level} />\r\n            }\r\n            {subtitle &&\r\n                <CardHeader title={subtitle} level={level + 1} />\r\n            }\r\n            {children}\r\n        </StyledCard >\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport FretTable from \"../../viewers/fret-table/FretTable\";\r\nimport { IFretboardProps } from \"../../viewers/fretboard/Fretboard.utils\";\r\n\r\nexport const StyledFretboardCell = styled.div`\r\n  padding: 8px;\r\n  .caption {\r\n    font-weight: bold;\r\n    font-size: 90%;\r\n    text-align: center;\r\n    margin-top: 8px;\r\n  }\r\n`;\r\n\r\ninterface IFretboardCellProps {\r\n  fretboardConfig: IFretboardProps;\r\n  caption?: string;\r\n}\r\n\r\nconst FretboardCell: React.FC<IFretboardCellProps> = ({\r\n  fretboardConfig,\r\n  caption,\r\n}) => {\r\n  return (\r\n    <StyledFretboardCell>\r\n      <FretTable {...fretboardConfig} />\r\n      {caption && <div className=\"caption\">{caption}</div>}\r\n    </StyledFretboardCell>\r\n  );\r\n};\r\n\r\nexport default FretboardCell;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Card, { StyledCard } from \"./Card\";\r\nimport { ITableConfig, Table } from \"./Table\";\r\n\r\nexport const StyledSmartCard = styled.div`\r\n  overflow-x: scroll;\r\n  ${StyledCard} {\r\n    min-width: 1024px;\r\n    margin-top: 16px;\r\n    > table {\r\n      table-layout: fixed;\r\n      width: 100%;\r\n      > tbody > tr > td {\r\n        vertical-align: top;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport interface ICardConfig {\r\n  title: string;\r\n  table: ITableConfig;\r\n}\r\n\r\ninterface ISmartCardProps {\r\n  cards: ICardConfig[];\r\n}\r\n\r\nconst SmartCard: React.FC<ISmartCardProps> = ({ cards }) => {\r\n  return (\r\n    <StyledSmartCard>\r\n      {cards.map((card) => {\r\n        return (\r\n          <Card title={card.title}>\r\n            <Table {...card.table} />\r\n          </Card>\r\n        );\r\n      })}\r\n    </StyledSmartCard>\r\n  );\r\n};\r\n\r\nexport default SmartCard;\r\n","import { Link } from \"gatsby\";\r\nimport React, { Fragment, ReactNode } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledTable = styled.table``;\r\n\r\ntype TOmit = undefined | null | false;\r\n\r\nconst getIsTypeOmit = (data: any): data is TOmit =>\r\n  data === undefined || data === null || data === false;\r\n\r\n// Col\r\n\r\nexport interface IColConfig {\r\n  isHeader?: boolean;\r\n  content: any;\r\n  colSpan?: number;\r\n  className?: string;\r\n  link?: string;\r\n}\r\n\r\ninterface IColProps extends IColConfig {\r\n  index: number;\r\n}\r\n\r\ntype TCol = string | number | IColConfig | ReactNode;\r\n\r\nconst Col: React.FC<IColProps> = ({\r\n  index,\r\n  isHeader,\r\n  content,\r\n  colSpan,\r\n  className,\r\n  link,\r\n}) => {\r\n  const ColTag = isHeader ? \"th\" : \"td\";\r\n  const WrapperTag = link ? Link : Fragment;\r\n  const wrapperProps: any = link ? { to: link } : {};\r\n\r\n  return (\r\n    <ColTag colSpan={colSpan} className={className}>\r\n      <WrapperTag {...wrapperProps}>{content || \"\"}</WrapperTag>\r\n    </ColTag>\r\n  );\r\n};\r\n\r\n// Row\r\n\r\nexport interface IRowConfig {\r\n  cols: (TCol | TOmit)[];\r\n  className?: string;\r\n  isHeader?: boolean;\r\n  headerColIndicies?: number[];\r\n}\r\n\r\nconst getIsConfig = (col: TCol): col is IColConfig =>\r\n  typeof col === \"object\" && col !== null && col.hasOwnProperty(\"content\");\r\n\r\nconst Row: React.FC<IRowConfig> = ({\r\n  cols,\r\n  isHeader,\r\n  className,\r\n  headerColIndicies = [],\r\n}) => {\r\n  return (\r\n    <tr className={className}>\r\n      {cols.map((col: any, i) => {\r\n        if (getIsTypeOmit(col)) return null;\r\n        const isConfig = getIsConfig(col);\r\n        const colConfig = !isConfig ? { content: col } : col;\r\n        return (\r\n          <Col\r\n            key={i}\r\n            index={i}\r\n            isHeader={isHeader || headerColIndicies.includes(i)}\r\n            {...colConfig}\r\n          />\r\n        );\r\n      })}\r\n    </tr>\r\n  );\r\n};\r\n\r\n// Table Section\r\n\r\ninterface ITableSectionConfig {\r\n  Tag: \"thead\" | \"tfoot\" | \"tbody\";\r\n  rows: (IRowConfig | TOmit)[];\r\n  headerColIndicies?: number[];\r\n}\r\n\r\nconst TableSection: React.FC<ITableSectionConfig> = ({\r\n  Tag,\r\n  rows,\r\n  headerColIndicies,\r\n}) => (\r\n  <Tag>\r\n    {rows.map((row, i) => {\r\n      if (getIsTypeOmit(row)) return null;\r\n      return (\r\n        <Row\r\n          key={i}\r\n          isHeader={Tag !== \"tbody\"}\r\n          headerColIndicies={headerColIndicies}\r\n          {...row}\r\n        />\r\n      );\r\n    })}\r\n  </Tag>\r\n);\r\n\r\n// Table\r\n\r\ninterface IColGroup {\r\n  span?: number;\r\n  className?: string;\r\n}\r\n\r\nexport interface ITableConfig {\r\n  thead?: (IRowConfig | TOmit)[];\r\n  tfoot?: (IRowConfig | TOmit)[];\r\n  tbody: (IRowConfig | TOmit)[];\r\n  styles?: any;\r\n  caption?: string;\r\n  colGroups?: IColGroup[];\r\n  className?: string;\r\n  headerColIndicies?: number[];\r\n}\r\n\r\nexport const Table: React.FC<ITableConfig> = ({\r\n  thead,\r\n  tfoot,\r\n  tbody,\r\n  styles,\r\n  colGroups,\r\n  caption,\r\n  headerColIndicies,\r\n  className,\r\n}) => {\r\n  return (\r\n    <StyledTable css={styles} className={className}>\r\n      {colGroups && (\r\n        <colgroup>\r\n          {colGroups.map((cg, i) => (\r\n            <col key={i} {...cg} />\r\n          ))}\r\n        </colgroup>\r\n      )}\r\n      {caption && <caption>{caption}</caption>}\r\n      {thead && (\r\n        <TableSection\r\n          Tag=\"thead\"\r\n          rows={thead}\r\n          headerColIndicies={headerColIndicies}\r\n        />\r\n      )}\r\n      {tfoot && (\r\n        <TableSection\r\n          Tag=\"tfoot\"\r\n          rows={tfoot}\r\n          headerColIndicies={headerColIndicies}\r\n        />\r\n      )}\r\n      {tbody && (\r\n        <TableSection\r\n          Tag=\"tbody\"\r\n          rows={tbody}\r\n          headerColIndicies={headerColIndicies}\r\n        />\r\n      )}\r\n    </StyledTable>\r\n  );\r\n};\r\n","import * as React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface IFretFlagProps {\r\n  color?: string;\r\n  text?: string | number;\r\n  opacity?: number;\r\n}\r\n\r\nexport const StyledFretFlag = styled.div<{\r\n  $color?: string;\r\n  $opacity?: number;\r\n}>`\r\n  height: 16px;\r\n  width: 16px;\r\n  background: ${(props) => props.$color || \"\"};\r\n  opacity: ${(props) => props.$opacity || 1};\r\n  border-radius: 100%;\r\n  z-index: 1;\r\n`;\r\n\r\nconst FretFlag: React.FC<IFretFlagProps> = ({ color, text, opacity }) => {\r\n  return (\r\n    <StyledFretFlag $color={color} $opacity={opacity}>\r\n      {text}\r\n    </StyledFretFlag>\r\n  );\r\n};\r\n\r\nexport default FretFlag;\r\n","import * as React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { IColConfig, IRowConfig, Table } from \"../../components/ui/Table\";\r\nimport {\r\n  DEFAULT_FRETBOARD_PROPS,\r\n  getDotsForFret,\r\n  IFretboardProps,\r\n} from \"../fretboard/Fretboard.utils\";\r\nimport FretFlag from \"./FretFlag\";\r\nconst StyledFretTable = styled.div``;\r\n\r\nconst tableStyles = css`\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  td,\r\n  th {\r\n    min-width: 18px;\r\n    text-align: center;\r\n  }\r\n  tbody td {\r\n    background-color: #e8dbb8;\r\n\r\n    border-right: 1px solid grey;\r\n    &:first-child {\r\n      border-left: 1px solid grey;\r\n    }\r\n    .fret-content {\r\n      min-height: 32px;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      position: relative;\r\n    }\r\n    .fret-string {\r\n      height: 1px;\r\n      background: #bbb;\r\n      width: 100%;\r\n      position: absolute;\r\n      margin: auto 0;\r\n    }\r\n  }\r\n  tbody tr {\r\n    &:first-child {\r\n      border-top: 1px solid grey;\r\n    }\r\n    &:last-child {\r\n      border-bottom: 1px solid grey;\r\n    }\r\n  }\r\n`;\r\n\r\nconst FretTable: React.FC<IFretboardProps> = (userProps) => {\r\n  const props = { ...DEFAULT_FRETBOARD_PROPS, ...userProps };\r\n\r\n  const { fretRange, showFretDots, showFretNumbers, tuning, colorMapFn } =\r\n    props;\r\n  const [lo, hi] = fretRange as [number, number];\r\n\r\n  const numFrets = hi - lo + 1;\r\n  const numStrings = (tuning as number[]).length;\r\n\r\n  const fretNums: number[] = [];\r\n  for (let i = 0; i < numFrets; i++) {\r\n    fretNums.push(lo + i);\r\n  }\r\n\r\n  const fretDots: string[] = [];\r\n  for (let i = 0; i < numFrets; i++) {\r\n    fretDots.push(getDotsForFret(lo + i));\r\n  }\r\n\r\n  const strings: IRowConfig[] = [];\r\n  for (let s = 0; s < numStrings; s++) {\r\n    const frets: IColConfig[] = [];\r\n    for (let f = lo; f <= hi; f++) {\r\n      frets.push({\r\n        content: (\r\n          <div className=\"fret-content\">\r\n            <div className=\"fret-string\" />\r\n            <FretFlag\r\n              color={(colorMapFn as any)({\r\n                stringIndex: s,\r\n                fretIndex: f,\r\n                ...props,\r\n              })}\r\n              text=\"\"\r\n              opacity={1}\r\n            />\r\n          </div>\r\n        ),\r\n      });\r\n    }\r\n    strings.push({\r\n      cols: frets,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <StyledFretTable>\r\n      <Table\r\n        thead={showFretNumbers ? [{ cols: fretNums }] : undefined}\r\n        tfoot={showFretDots ? [{ cols: fretDots }] : undefined}\r\n        tbody={strings}\r\n        styles={tableStyles}\r\n      />\r\n    </StyledFretTable>\r\n  );\r\n};\r\n\r\nexport default FretTable;\r\n","import ArrayUtils from \"../../core/general/Array.utils\";\r\nimport Note from '../../core/models/Note';\r\nimport { NoteId } from './../../core/models/Model.constants';\r\n\r\nexport enum TuningId {\r\n    Standard = 'standard',\r\n    StandardSeven = 'standard-seven',\r\n    StandardBass = 'standard-bass',\r\n    Flat = 'flat',\r\n    DoubleFlat = 'double-flat',\r\n    DropD = 'drop-d',\r\n    DADGAD = 'dadgad',\r\n    Banjo = 'banjo',\r\n    Violin = 'violin',\r\n    OpenA = 'open-a',\r\n    OpenB = 'open-b',\r\n    OpenC = 'open-c',\r\n    OpenD = 'open-d',\r\n    OpenE = 'open-e',\r\n    OpenF = 'open-f',\r\n    OpenG = 'open-g',\r\n}\r\n\r\nexport interface ITuning {\r\n    id: TuningId;\r\n    name: string;\r\n    value: number[]\r\n}\r\n\r\nconst formatPreset = (id: TuningId, name: string, value: number[]): ITuning => ({\r\n    id,\r\n    name,\r\n    value\r\n});\r\n\r\nconst getPitch = (noteId: NoteId, octave: number): number => Note.getNote(noteId, octave).pod[0];\r\n\r\nexport const TUNING_PRESET_MAP = new Map<TuningId, ITuning>([\r\n    [TuningId.Standard, formatPreset(\r\n        TuningId.Standard,\r\n        'Standard Guitar',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.Flat, formatPreset(\r\n        TuningId.Flat,\r\n        'Flat Gtr',\r\n        [\r\n            getPitch(NoteId.Eb, 5),\r\n            getPitch(NoteId.Bb, 4),\r\n            getPitch(NoteId.Gb, 4),\r\n            getPitch(NoteId.Db, 4),\r\n            getPitch(NoteId.Ab, 3),\r\n            getPitch(NoteId.Eb, 3)\r\n        ]\r\n    )],\r\n    [TuningId.DoubleFlat, formatPreset(\r\n        TuningId.DoubleFlat,\r\n        'Double Flat Gtr',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.F, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.StandardSeven, formatPreset(\r\n        TuningId.StandardSeven,\r\n        'Standard 7-String Gtr',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3),\r\n            getPitch(NoteId.B, 3)\r\n        ]\r\n    )],\r\n    [TuningId.StandardBass, formatPreset(\r\n        TuningId.StandardBass,\r\n        'Standard Bass',\r\n        [\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3),\r\n            getPitch(NoteId.A, 2),\r\n            getPitch(NoteId.E, 2)\r\n        ]\r\n    )],\r\n    [TuningId.DropD, formatPreset(\r\n        TuningId.DropD,\r\n        'Drop D Gtr',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.DADGAD, formatPreset(\r\n        TuningId.DADGAD,\r\n        'DADGAD',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    // Unconfirmed\r\n    /*[TuningId.Banjo, formatPreset(\r\n        TuningId.Banjo,\r\n        'Banjo',\r\n        [\r\n            getPitch(NoteId.G, 5),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],*/\r\n    // Unconfirmed\r\n    [TuningId.Violin, formatPreset(\r\n        TuningId.Violin,\r\n        'Violin',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 4)\r\n        ]\r\n    )],\r\n    [TuningId.OpenA, formatPreset(\r\n        TuningId.OpenA,\r\n        'Open A',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.E, 4),\r\n            getPitch(NoteId.Cs, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenB, formatPreset(\r\n        TuningId.OpenB,\r\n        'Open B',\r\n        [\r\n            getPitch(NoteId.Ds, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Fs, 4),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Fs, 3),\r\n            getPitch(NoteId.B, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenC, formatPreset(\r\n        TuningId.OpenC,\r\n        'Open C',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.C, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenD, formatPreset(\r\n        TuningId.OpenD,\r\n        'Open D',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.Fs, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenE, formatPreset(\r\n        TuningId.OpenE,\r\n        'Open E',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Gs, 4),\r\n            getPitch(NoteId.E, 4),\r\n            getPitch(NoteId.B, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenF, formatPreset(\r\n        TuningId.OpenF,\r\n        'Open F',\r\n        [\r\n            getPitch(NoteId.F, 5),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.F, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.F, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenG, formatPreset(\r\n        TuningId.OpenG,\r\n        'Open G',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )]\r\n]);\r\n\r\nexport const FRETBOARD_TUNING_VALUES = ArrayUtils.mapToArray(TUNING_PRESET_MAP);\r\n","import Chord from \"../../core/models/Chord\";\r\nimport IntervalSpan from \"../../core/models/Interval\";\r\nimport { IModelConfig } from \"../../core/models/Model.constants\";\r\nimport Note from \"../../core/models/Note\";\r\nimport Scale from \"../../core/models/Scale\";\r\nimport { ITuning, TuningId, TUNING_PRESET_MAP } from \"./Fretboard.tuning\";\r\nimport { IVoicing } from \"./Fretboard.voicing\";\r\n\r\nexport interface IFretLabelProps {\r\n  note?: Note;\r\n  color?: string;\r\n  freq?: number;\r\n}\r\n\r\nexport interface IFretboardProps {\r\n  fretRange?: [number, number];\r\n  showFretDots?: boolean;\r\n  showFretNumbers?: boolean;\r\n  colorMapFn?: (fretProps: IFretProps) => string | undefined;\r\n  voicing?: IVoicing;\r\n  tuning?: number[]; // ITuning,\r\n  model?: Chord | Scale;\r\n}\r\n\r\nexport interface IFretProps extends IFretboardProps {\r\n  stringIndex: number;\r\n  fretIndex: number;\r\n}\r\n\r\nexport const DOTTED_FRET_INDICES = [\r\n  true,\r\n  false,\r\n  false,\r\n  true,\r\n  false,\r\n  true,\r\n  false,\r\n  true,\r\n  false,\r\n  true,\r\n  false,\r\n  false,\r\n];\r\n\r\nexport const FRET_SIZE_RATIO = Math.pow(1 / 2, 1 / 12);\r\n\r\nexport const isIntervalInVoicing = (\r\n  interval: IntervalSpan,\r\n  voicing: IVoicing,\r\n  stringIndex: number\r\n) => {\r\n  if (!voicing || !voicing.value) return true;\r\n  const v = voicing.value[stringIndex];\r\n  const d = interval.getDegree();\r\n  if (Array.isArray(v)) {\r\n    return v.some((n) => doesVoicingValueMatch(d, n));\r\n  } else if (typeof v === \"number\") {\r\n    return doesVoicingValueMatch(d, v);\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const getFretColor = (props: IFretProps): string | undefined => {\r\n  const { stringIndex, fretIndex, tuning, model, voicing } = props;\r\n  const noteIndex = tuning[stringIndex] + fretIndex;\r\n  const [interval, note] = model.tryGetPodPairAtPitch(noteIndex);\r\n\r\n  if (!note) return;\r\n\r\n  if (voicing && !isIntervalInVoicing(interval, voicing, stringIndex)) {\r\n    return `#00000011`;\r\n  }\r\n\r\n  return interval.getColor();\r\n};\r\n\r\nexport const DEFAULT_FRETBOARD_PROPS: IFretboardProps = {\r\n  fretRange: [1, 12],\r\n  tuning: TUNING_PRESET_MAP.get(TuningId.Standard).value,\r\n  showFretDots: true,\r\n  showFretNumbers: true,\r\n  colorMapFn: getFretColor,\r\n};\r\n\r\nexport const getFretRatios = (numFrets: number): number[] => {\r\n  const ratios = [];\r\n  for (let i = 1; i <= numFrets; i++) {\r\n    ratios.push(i <= 1 ? 1 : ratios[i - 2] * FRET_SIZE_RATIO);\r\n  }\r\n  return ratios;\r\n};\r\n\r\nexport const getDotsForFret = (fretNumber: number): string => {\r\n  if (fretNumber === 0) return \"\";\r\n  const mod = fretNumber % 12;\r\n  if (mod === 0) return \"• •\";\r\n  else if (DOTTED_FRET_INDICES[mod]) return \"•\";\r\n  return \"\";\r\n};\r\n\r\nconst doesVoicingValueMatch = (d: number, v: number) => {\r\n  return d + 1 === v;\r\n};\r\n","import ArrayUtils from \"../../core/general/Array.utils\";\r\n\r\nexport enum VoicingId {\r\n    None = 'None',\r\n    Chord_Triad_CShape_1 = 'Chord_Triad_CShape_1',\r\n    Chord_Triad_AShape_1 = 'Chord_Triad_AShape_1',\r\n    Chord_Triad_GShape_1 = 'Chord_Triad_GShape_1',\r\n    Chord_Triad_EShape_1 = 'Chord_Triad_EShape_1',\r\n    Chord_Triad_DShape_1 = 'Chord_Triad_DShape_1',\r\n    Chord_Sixth_CShape_1 = 'Chord_Sixth_CShape_1',\r\n    Chord_Sixth_AShape_1 = 'Chord_Sixth_AShape_1',\r\n    Chord_Sixth_GShape_1 = 'Chord_Sixth_GShape_1',\r\n    Chord_Sixth_EShape_1 = 'Chord_Sixth_EShape_1',\r\n    Chord_Sixth_DShape_1 = 'Chord_Sixth_DShape_1',\r\n    Chord_Seventh_CShape_1 = 'Chord_Seventh_CShape_1',\r\n    Chord_Seventh_AShape_1 = 'Chord_Seventh_AShape_1',\r\n    Chord_Seventh_GShape_1 = 'Chord_Seventh_GShape_1',\r\n    Chord_Seventh_EShape_1 = 'Chord_Seventh_EShape_1',\r\n    Chord_Seventh_DShape_1 = 'Chord_Seventh_DShape_1',\r\n    Chord_Shell_E_37 = 'Chord_Shell_E_37',\r\n    Chord_Shell_E_73 = 'Chord_Shell_E_73',\r\n    Chord_Shell_A_37 = 'Chord_Shell_A_37',\r\n    Chord_Shell_A_73 = 'Chord_Shell_A_73',\r\n    Chord_Shell_D_37 = 'Chord_Shell_D_37',\r\n    Chord_Shell_D_73 = 'Chord_Shell_D_73',\r\n    Scale_DoubleOctave_CShape_1 = 'Scale_DoubleOctave_CShape_1',\r\n    Scale_DoubleOctave_CShape_2 = 'Scale_DoubleOctave_CShape_2',\r\n    Scale_DoubleOctave_AShape_1 = 'Scale_DoubleOctave_AShape_1',\r\n    Scale_DoubleOctave_GShape_1 = 'Scale_DoubleOctave_GShape_1',\r\n    Scale_DoubleOctave_EShape_1 = 'Scale_DoubleOctave_EShape_1',\r\n    Scale_DoubleOctave_EShape_2 = 'Scale_DoubleOctave_EShape_2',\r\n    Scale_DoubleOctave_DShape_1 = 'Scale_DoubleOctave_DShape_1',\r\n}\r\n\r\nexport interface IVoicing {\r\n    id: VoicingId;\r\n    name: string;\r\n    value: (number | number[])[]\r\n}\r\n\r\nconst formatPreset = (id: VoicingId, name: string, value: (number | number[])[]): IVoicing => ({\r\n    id,\r\n    name,\r\n    value\r\n});\r\n\r\nexport const VOICING_PRESET_MAP = new Map<VoicingId, IVoicing>([\r\n    // Triads\r\n    [VoicingId.Chord_Triad_CShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_CShape_1,\r\n        'C Shape Triad',\r\n        [3, 1, 5, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Triad_AShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_AShape_1,\r\n        'A Shape Triad',\r\n        [5, 3, 1, 5, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Triad_GShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_GShape_1,\r\n        'G Shape Triad',\r\n        [1, 5, 1, 5, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Triad_EShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_EShape_1,\r\n        'E Shape Triad',\r\n        [1, 5, 3, 1, 5, 1]\r\n    )],\r\n    [VoicingId.Chord_Triad_DShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_DShape_1,\r\n        'D Shape Triad',\r\n        [3, 1, 5, 1, null, null]\r\n    )],\r\n    // Sixths\r\n    [VoicingId.Chord_Sixth_CShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_CShape_1,\r\n        'C Shape 6th Chord',\r\n        [3, 6, 5, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Sixth_AShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_AShape_1,\r\n        'A Shape 6th Chord',\r\n        [5, 3, 6, 5, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Sixth_GShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_GShape_1,\r\n        'G Shape 6th Chord',\r\n        [6, 5, 1, 5, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Sixth_EShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_EShape_1,\r\n        'E Shape 6th Chord',\r\n        [1, 5, 3, 6, 5, 1]\r\n    )],\r\n    [VoicingId.Chord_Sixth_DShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_DShape_1,\r\n        'D Shape 6th Chord',\r\n        [3, 6, 5, 1, null, null]\r\n    )],\r\n    // Sevenths\r\n    [VoicingId.Chord_Seventh_CShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_CShape_1,\r\n        'C Shape 7th Chord',\r\n        [3, 7, 5, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Seventh_AShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_AShape_1,\r\n        'A Shape 7th Chord',\r\n        [5, 3, 7, 5, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Seventh_GShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_GShape_1,\r\n        'G Shape 7th Chord',\r\n        [7, 5, 1, 5, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Seventh_EShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_EShape_1,\r\n        'E Shape 7th Chord',\r\n        [1, 5, 3, 7, 5, 1]\r\n    )],\r\n    [VoicingId.Chord_Seventh_DShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_DShape_1,\r\n        'D Shape 7th Chord',\r\n        [3, 7, 5, 1, null, null]\r\n    )],\r\n    // Shells\r\n    [VoicingId.Chord_Shell_E_37, formatPreset(\r\n        VoicingId.Chord_Shell_E_37,\r\n        'Shell E 3-7',\r\n        [null, null, null, 7, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Shell_E_73, formatPreset(\r\n        VoicingId.Chord_Shell_E_73,\r\n        'Shell E 7-3',\r\n        [null, null, 3, 7, null, 1]\r\n    )],\r\n    [VoicingId.Chord_Shell_A_37, formatPreset(\r\n        VoicingId.Chord_Shell_A_37,\r\n        'Shell A 3-7',\r\n        [null, null, 7, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Shell_A_73, formatPreset(\r\n        VoicingId.Chord_Shell_A_73,\r\n        'Shell A 7-3',\r\n        [null, 3, 7, null, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Shell_D_37, formatPreset(\r\n        VoicingId.Chord_Shell_D_37,\r\n        'Shell D 3-7',\r\n        [null, 7, 3, 1, null, null]\r\n    )],\r\n    [VoicingId.Chord_Shell_D_73, formatPreset(\r\n        VoicingId.Chord_Shell_D_73,\r\n        'Shell D 7-3',\r\n        [3, 7, null, 1, null, null]\r\n    )],\r\n    // CAGED Scales\r\n    [VoicingId.Scale_DoubleOctave_EShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_EShape_1,\r\n        'E Shape Scale (Locrian)',\r\n        [[1, 2, 3], [6, 7], [3, 4, 5], [7, 1, 2], [4, 5, 6], [1, 2, 3]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_EShape_2, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_EShape_2,\r\n        'E Shape Scale (Ionian)',\r\n        [[7, 1, 2], [5, 6], [2, 3, 4], [6, 7, 1], [3, 4, 5], [1, 2]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_DShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_DShape_1,\r\n        'D Shape Scale (Dorian)',\r\n        [[1, 2, 3], [5, 6, 7], [2, 3, 4], [6, 7, 1], [4, 5], [1, 2, 3]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_CShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_CShape_1,\r\n        'C Shape Scale (Phrygian)',\r\n        [[1, 2, 3], [5, 6, 7], [3, 4], [7, 1, 2], [4, 5, 6], [1, 2, 3]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_CShape_2, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_CShape_2,\r\n        'C Shape Scale (Lydian)',\r\n        [[7, 1, 2], [4, 5, 6], [2, 3], [6, 7, 1], [3, 4, 5], [1, 2]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_AShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_AShape_1,\r\n        'A Shape Scale (Mixolydian)',\r\n        [[1, 2], [5, 6, 7], [2, 3, 4], [6, 7, 1], [3, 4, 5], [1, 2]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_GShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_GShape_1,\r\n        'G Shape Scale (Aeolian)',\r\n        [[1, 2, 3], [5, 6, 7], [2, 3, 4], [7, 1], [4, 5, 6], [1, 2, 3]]\r\n    )]\r\n])\r\n\r\nexport const VOICING_PRESETS = ArrayUtils.mapToArray(VOICING_PRESET_MAP);\r\n"],"names":["StyledCAGEDPage","styled","PageLayout","withConfig","ROOT","Note","NoteId","MAJOR_NOTES","Scale","ScaleId","root","notes","MINOR_NOTES","MAJOR_ITEMS","model","Chord","modelId","ChordId","rootId","voicingId","MINOR_ITEMS","getColor","fretProps","stringIndex","fretIndex","tuning","noteIndex","tryGetPodPairAtPitch","interval","pod","DEFAULT_DEGREE_COLOR_SCHEME","getRows","items","cols","map","item","instance","voicing","VOICING_PRESET_MAP","undefined","content","React","FretboardCell","caption","getName","fretboardConfig","fretRange","showFretNumbers","showFretDots","colorMapFn","title","SmartCard","cards","table","thead","tbody","StyledCard","props","theme","surface","card","CardHeader","level","action","AsTag","className","subtitle","children","rest","StyledFretboardCell","FretTable","StyledSmartCard","Card","Table","StyledTable","getIsTypeOmit","data","Col","index","isHeader","colSpan","link","ColTag","WrapperTag","Link","Fragment","wrapperProps","to","Row","headerColIndicies","col","i","isConfig","hasOwnProperty","getIsConfig","colConfig","key","includes","TableSection","Tag","rows","row","tfoot","styles","colGroups","cg","StyledFretFlag","$color","$opacity","color","text","opacity","StyledFretTable","tableStyles","css","userProps","DEFAULT_FRETBOARD_PROPS","lo","hi","numFrets","numStrings","length","fretNums","push","fretDots","getDotsForFret","strings","s","frets","f","FretFlag","TuningId","formatPreset","id","name","value","getPitch","noteId","octave","TUNING_PRESET_MAP","Map","Standard","Flat","DoubleFlat","StandardSeven","StandardBass","DropD","DADGAD","Violin","OpenA","OpenB","OpenC","OpenD","OpenE","OpenF","OpenG","FRETBOARD_TUNING_VALUES","ArrayUtils","DOTTED_FRET_INDICES","isIntervalInVoicing","Math","pow","v","d","getDegree","Array","isArray","some","n","doesVoicingValueMatch","fretNumber","mod","VoicingId","Chord_Triad_CShape_1","Chord_Triad_AShape_1","Chord_Triad_GShape_1","Chord_Triad_EShape_1","Chord_Triad_DShape_1","Chord_Sixth_CShape_1","Chord_Sixth_AShape_1","Chord_Sixth_GShape_1","Chord_Sixth_EShape_1","Chord_Sixth_DShape_1","Chord_Seventh_CShape_1","Chord_Seventh_AShape_1","Chord_Seventh_GShape_1","Chord_Seventh_EShape_1","Chord_Seventh_DShape_1","Chord_Shell_E_37","Chord_Shell_E_73","Chord_Shell_A_37","Chord_Shell_A_73","Chord_Shell_D_37","Chord_Shell_D_73","Scale_DoubleOctave_EShape_1","Scale_DoubleOctave_EShape_2","Scale_DoubleOctave_DShape_1","Scale_DoubleOctave_CShape_1","Scale_DoubleOctave_CShape_2","Scale_DoubleOctave_AShape_1","Scale_DoubleOctave_GShape_1","VOICING_PRESETS"],"sourceRoot":""}