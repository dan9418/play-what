{"version":3,"file":"component---src-pages-dev-practice-chord-progressions-tsx-f1da57fddd617f92f732.js","mappings":"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","sources":["webpack://play-what/./src/components/layout/PageBody.tsx","webpack://play-what/./src/components/pages/dev/ChordProgressionsPage.tsx","webpack://play-what/./src/pages/dev/practice/chord-progressions.tsx"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const StyledPageBody = styled.div`\r\n\twidth: 100%;\r\n\t//max-width: 1920px;\r\n\tmax-width: 1024px;\r\n\tmin-height: calc(100vh - 96px);\r\n    \r\n\tmargin: auto;\r\n\tpadding: 16px;\r\n`\r\n","import React, { useState } from \"react\";\r\nimport styled from 'styled-components';\r\nimport ArrayUtils from \"../../../core/general/Array.utils\";\r\nimport Chord from \"../../../core/models/Chord\";\r\nimport { ChordId, NoteId, ScaleId } from \"../../../core/models/Model.constants\";\r\nimport { NOTE_PRESETS, NOTE_PRESET_MAP } from \"../../../core/models/Model.presets\";\r\nimport Note from \"../../../core/models/Note\";\r\nimport Scale from \"../../../core/models/Scale\";\r\nimport Fretboard from \"../../../viewers/fretboard/Fretboard\";\r\nimport { IFretProps } from \"../../../viewers/fretboard/Fretboard.utils\";\r\nimport { VOICING_PRESET_MAP } from \"../../../viewers/fretboard/Fretboard.voicing\";\r\nimport DropdownInput from \"../../inputs/DropdownInput\";\r\nimport { StyledPageBody } from \"../../layout/PageBody\";\r\nimport PageTitle from \"../../layout/PageTitle\";\r\nimport Card, { StyledCard } from \"../../ui/Card\";\r\nimport InputRow, { StyledInputRow } from \"../../ui/InputRow\";\r\n\r\nconst StyledCAGEDPage = styled(StyledPageBody)`\r\n\t    \r\n    ${StyledCard}, ${StyledInputRow} {\r\n        margin-top: 16px;\r\n        table {\r\n            width: 100%;\r\n\r\n            td {\r\n                width: 33%;\r\n                padding: 24px 2px 16px;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst CAGEDPage: React.FC<any> = () => {\r\n    const [rootPreset, setRootPreset] = useState(NOTE_PRESET_MAP.get(NoteId.C));\r\n\r\n    const root = new Note(rootPreset.value);\r\n    const majorScale = new Scale(ScaleId.Ionian, { root });\r\n    const minorScale = new Scale(ScaleId.Ionian, { root });\r\n\r\n    const majorItems = [\r\n        {\r\n            model: Chord,\r\n            modelId: ChordId.Min7,\r\n            rootId: majorScale.notes[1].modelId,\r\n            voicingId: null\r\n        },\r\n        {\r\n            model: Chord,\r\n            modelId: ChordId.Dom7,\r\n            rootId: majorScale.notes[4].modelId,\r\n            voicingId: null\r\n        },\r\n        {\r\n            model: Chord,\r\n            modelId: ChordId.Maj7,\r\n            rootId: majorScale.notes[0].modelId,\r\n            voicingId: null\r\n        }\r\n    ];\r\n\r\n    const minorItems = [\r\n        {\r\n            model: Chord,\r\n            modelId: ChordId.HalfDim7,\r\n            rootId: minorScale.notes[2].modelId,\r\n            voicingId: null\r\n        },\r\n        {\r\n            model: Chord,\r\n            modelId: ChordId.Min7,\r\n            rootId: minorScale.notes[4].modelId,\r\n            voicingId: null\r\n        },\r\n        {\r\n            model: Chord,\r\n            modelId: ChordId.Min7,\r\n            rootId: minorScale.notes[0].modelId,\r\n            voicingId: null\r\n        }\r\n    ];\r\n\r\n    const getColor = (fretProps: IFretProps) => {\r\n        const { stringIndex, fretIndex, tuning, model, voicing } = fretProps;\r\n        const noteIndex = tuning[stringIndex] + fretIndex;\r\n        const [interval, note] = model.tryGetPodPairAtPitch(noteIndex);\r\n\r\n        if (!note) return;\r\n\r\n        if (interval.pod[1] === 0) return 'red';\r\n        if (interval.pod[1] === 2) return 'blue';\r\n        if (interval.pod[1] === 4) return 'black';\r\n        if (interval.pod[1] === 6) return 'black';\r\n        return 'black';\r\n    };\r\n\r\n    return (\r\n        <StyledCAGEDPage>\r\n            <PageTitle title=\"Chord Progressions\" />\r\n            <InputRow label=\"Root\">\r\n                <DropdownInput options={NOTE_PRESETS} value={rootPreset} setValue={p => {\r\n                    setRootPreset(p);\r\n                }} />\r\n            </InputRow>\r\n            <Card title=\"Major II-V-I\" >\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>II</th>\r\n                            <th>V</th>\r\n                            <th>I</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr >\r\n                            {majorItems.map(item => {\r\n                                const { model, modelId, rootId, voicingId } = item as any;\r\n                                const instance = new model(modelId, { root: Note.fromId(rootId) });\r\n\r\n                                return (\r\n                                    <td key={modelId}>\r\n                                        <h3>{modelId}</h3>\r\n                                        <Fretboard\r\n                                            model={instance}\r\n                                            voicing={voicingId ? VOICING_PRESET_MAP.get(voicingId) : undefined}\r\n                                            colorMapFn={getColor}\r\n                                            fretRange={[1, 14]}\r\n                                        />\r\n                                    </td>\r\n                                );\r\n                            })}\r\n                        </tr>\r\n                        <tr >\r\n                            {ArrayUtils.rotate([...majorItems], 1).map(item => {\r\n                                const { model, modelId, rootId, voicingId } = item as any;\r\n                                const instance = new model(modelId, { root: Note.fromId(rootId) });\r\n\r\n                                return (\r\n                                    <td key={modelId}>\r\n                                        <h3>{modelId}</h3>\r\n                                        <Fretboard\r\n                                            model={instance}\r\n                                            voicing={voicingId ? VOICING_PRESET_MAP.get(voicingId) : undefined}\r\n                                            colorMapFn={getColor}\r\n                                            fretRange={[1, 14]}\r\n                                        />\r\n                                    </td>\r\n                                );\r\n                            })}\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </Card>\r\n            <Card title=\"Minor ii-v-i\" >\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ii</th>\r\n                            <th>v</th>\r\n                            <th>i</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr >\r\n                            {minorItems.map(item => {\r\n                                const { model, modelId, rootId, voicingId } = item as any;\r\n                                const instance = new model(modelId, { root: Note.fromId(rootId) });\r\n\r\n                                return (\r\n                                    <td key={modelId}>\r\n                                        <h3>{modelId}</h3>\r\n                                        <Fretboard\r\n                                            model={instance}\r\n                                            voicing={voicingId ? VOICING_PRESET_MAP.get(voicingId) : undefined}\r\n                                            colorMapFn={getColor}\r\n                                            fretRange={[1, 14]}\r\n                                        />\r\n                                    </td>\r\n                                );\r\n                            })}\r\n                        </tr>\r\n                        <tr>\r\n                            {ArrayUtils.rotate([...minorItems], 1).map(item => {\r\n                                const { model, modelId, rootId, voicingId } = item as any;\r\n                                const instance = new model(modelId, { root: Note.fromId(rootId) });\r\n\r\n                                return (\r\n                                    <td key={modelId}>\r\n                                        <h3>{modelId}</h3>\r\n                                        <Fretboard\r\n                                            model={instance}\r\n                                            voicing={voicingId ? VOICING_PRESET_MAP.get(voicingId) : undefined}\r\n                                            colorMapFn={getColor}\r\n                                            fretRange={[1, 14]}\r\n                                        />\r\n                                    </td>\r\n                                );\r\n                            })}\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </Card>\r\n        </StyledCAGEDPage>\r\n    );\r\n};\r\n\r\nexport default CAGEDPage;\r\n","import ChordProgressionsPage from \"../../../components/pages/dev/ChordProgressionsPage\";\r\n\r\nexport default ChordProgressionsPage;\r\n"],"names":["StyledPageBody","styled","StyledCAGEDPage","withConfig","StyledCard","StyledInputRow","useState","NOTE_PRESET_MAP","NoteId","rootPreset","setRootPreset","root","Note","value","majorScale","Scale","ScaleId","minorScale","majorItems","model","Chord","modelId","ChordId","rootId","notes","voicingId","minorItems","getColor","fretProps","stringIndex","fretIndex","tuning","noteIndex","voicing","tryGetPodPairAtPitch","interval","pod","React","PageTitle","title","InputRow","label","DropdownInput","options","NOTE_PRESETS","setValue","p","Card","map","item","instance","key","Fretboard","VOICING_PRESET_MAP","undefined","colorMapFn","fretRange","ArrayUtils"],"sourceRoot":""}