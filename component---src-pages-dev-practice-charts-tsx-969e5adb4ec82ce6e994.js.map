{"version":3,"file":"component---src-pages-dev-practice-charts-tsx-969e5adb4ec82ce6e994.js","mappings":"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","sources":["webpack://play-what/./src/components/inputs/DropdownInput.tsx","webpack://play-what/./src/components/breadcrumb-list/BreadcrumbList.tsx","webpack://play-what/./src/components/layout/PageTitle.tsx","webpack://play-what/./src/components/ui/Card.tsx","webpack://play-what/./src/components/ui/InputRow.tsx","webpack://play-what/./src/core/models/Chord.ts","webpack://play-what/./src/core/models/Interval.ts","webpack://play-what/./src/core/models/PodList.ts","webpack://play-what/./src/core/models/Chart.presets.ts","webpack://play-what/./src/core/models/Chart.constants.ts","webpack://play-what/./src/components/pages/dev/ChartsPage.tsx","webpack://play-what/./src/pages/dev/practice/charts.tsx"],"sourcesContent":["import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nconst StyledDropdownInput = styled.select`\r\n\tfont-size: 110%;\r\n    min-width: 128px;\r\n\r\n\tpadding: 4px 8px;\r\n\r\n    cursor: pointer;\r\n    border-radius: 4px;\r\n\r\n\toption {\r\n\t\tcursor: pointer;\r\n\t}\r\n`;\r\n\r\ninterface IDropdownInputProps {\r\n\tvalue: any;\r\n\tsetValue: Function;\r\n\toptions: any[];\r\n\tidProperty?: string;\r\n\tdisplayProperty?: string;\r\n}\r\n\r\nconst DropdownInput: React.FC<IDropdownInputProps> = props => {\r\n\tconst { value, setValue, options, idProperty, displayProperty } = props;\r\n\r\n\treturn (\r\n\t\t<StyledDropdownInput\r\n\t\t\tclassName='dropdown-input'\r\n\t\t\tonChange={e => setValue(options[e.target.selectedIndex], e.target.selectedIndex)}\r\n\t\t\tvalue={value ? value[idProperty || 'id'] : ''}\r\n\t\t>\r\n\t\t\t{(options || []).map((v, i) => (\r\n\t\t\t\t<option key={i} value={v[idProperty || 'id']}>{displayProperty ? v[displayProperty] : v.name}</option>\r\n\t\t\t))}\r\n\t\t</StyledDropdownInput>\r\n\t);\r\n}\r\n\r\nexport default DropdownInput;\r\n","import { Link } from \"gatsby\";\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { usePageProps } from \"../../contexts/PagePropsContext\";\r\nimport Icon from \"../ui/Icon\";\r\n\r\nconst StyledBreadcrumbList = styled.ul`\r\n    font-size: 80%;\r\n    padding: 0 0 8px 0;\r\n    @media(min-width: 512px) {\r\n        font-size: 110%;\r\n        padding: 0 0 16px 0;\r\n    }\r\n\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    gap: 8px;\r\n    white-space: nowrap;\r\n    text-transform: capitalize;\r\n    svg {\r\n        margin-right: 8px;\r\n    }\r\n\r\n    span {\r\n        color: ${props => props.theme.text.secondary};\r\n    }\r\n`\r\n\r\nconst BreadcrumbList = () => {\r\n    const { path } = usePageProps();\r\n    let pieces = path.split('/');\r\n    const paths = [];\r\n    pieces.reduce((prev, cur, i, arr) => {\r\n        const path = `${prev}/${cur}`.replace('//', '/') || '/';\r\n        const isLink = !['root', 'practice', 'test', 'experimental'].includes(cur);\r\n        const text = i === 0 ? 'Home' : cur.replaceAll('-', ' ').replace(' sharp', '#').replace(' flat', 'b');\r\n\r\n        const Tag = isLink ? Link : 'span';\r\n        const to = isLink ? path : undefined;\r\n\r\n        paths.push(\r\n            <li key={i}>\r\n                {i > 0 && <Icon iconId=\"next\" size={10} color=\"grey\" />}\r\n                <Tag to={to}>{text}</Tag>\r\n            </li>\r\n        );\r\n        return path;\r\n    }, '/');\r\n    return <StyledBreadcrumbList>{paths.slice(0, paths.length - 1)}</StyledBreadcrumbList>;\r\n}\r\n\r\nexport default BreadcrumbList;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport BreadcrumbList from '../breadcrumb-list/BreadcrumbList';\r\nimport SEO from \"../utils/SEO\";\r\n\r\nconst StyledPageTitle = styled.div`\r\n    width: 100%;\r\n\r\n    .header {\r\n        border-bottom: 1px solid ${({ theme }) => theme.utils.border};    \r\n        width: 100%;\r\n        margin: auto;\r\n        padding-bottom: 8px;\r\n        @media(min-width: 512px) {\r\n            padding-bottom: 16px;\r\n        }\r\n\r\n        > h1 {\r\n            width: 100%;\r\n            font-size: 150%;\r\n            @media(min-width: 512px) {\r\n                font-size: 300%;\r\n            }\r\n            text-align: left;\r\n            color: ${({ theme }) => theme.text.primary};;\r\n        }\r\n\r\n        > h2 {\r\n            margin-top: 4px;\r\n            width: 100%;\r\n            text-align: left;\r\n            color: ${({ theme }) => theme.text.secondary};;\r\n            font-size: 80%;\r\n            @media(min-width: 512px) {\r\n                font-size: 100%;\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst PageTitle: React.FC<any> = ({ title, subtitle, children }) => {\r\n    return (\r\n        <>\r\n            <SEO title={title} />\r\n            <BreadcrumbList />\r\n            <StyledPageTitle>\r\n                <div className=\"header\">\r\n                    <h1>{title}</h1>\r\n                    {subtitle && <h2>{subtitle}</h2>}\r\n                </div>\r\n                {children}\r\n            </StyledPageTitle>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PageTitle;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledCard = styled.div`\r\n    background: ${props => props.theme.surface.card};\r\n    width: 100%;\r\n    border-radius: 16px;\r\n    padding: 16px;\r\n\r\n    .header {\r\n        margin-bottom: 16px;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n    }\r\n`;\r\n\r\nexport const CardHeader = ({ title, action = null }) => (\r\n    <div className=\"header\">\r\n        <h2>{title}</h2>\r\n        {action}\r\n    </div>\r\n);\r\n\r\nconst Card: React.FC<any> = ({ title, action, children, ...rest }) => {\r\n    return (\r\n        <StyledCard {...rest}>\r\n            {title &&\r\n                <CardHeader title={title} action={action} />\r\n            }\r\n            {children}\r\n        </StyledCard >\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledInputRow = styled.div`\r\n    display: flex;\r\n    align-items: flex-start;\r\n    flex-direction: column;\r\n    width: 100%;\r\n\r\n    ${props => props.$y ? '' : `\r\n        @media(min-width: 512px) {\r\n            align-items: center;\r\n            flex-direction: row;\r\n            justify-content: space-between;\r\n            //margin-bottom: 8px;\r\n        }\r\n    `}\r\n\r\n    > label {\r\n        color: ${({ theme }) => theme.dark3};\r\n        font-weight: bold;\r\n        margin: 8px;\r\n        white-space: nowrap;\r\n    }\r\n`;\r\n\r\nconst InputRow = ({ label, children, y = false, ...rest }) => {\r\n    return (\r\n        <StyledInputRow $y={y} {...rest}>\r\n            <label>{label}</label>\r\n            <div>\r\n                {children}\r\n            </div>\r\n        </StyledInputRow>\r\n    );\r\n}\r\n\r\nexport default InputRow;\r\n","import Model from './Model';\r\nimport { ChordId, IPod, ModelId } from './Model.constants';\r\nimport { CHORD_PRESETS, CHORD_PRESET_MAP } from './Model.presets';\r\nimport { arePodListsEqual, reducePodList } from './Pod.static';\r\nimport PodList from './PodList';\r\n\r\nconst getSymbol = (degree, quality) => {\r\n    switch (degree) {\r\n        case 1: {\r\n            switch (quality) {\r\n                case ChordId.MajTriad:\r\n                case ChordId.Maj7:\r\n                    return 'I';\r\n                case ChordId.MinTriad:\r\n                case ChordId.Min7:\r\n                    return 'i';\r\n                case ChordId.Dom7:\r\n                    return 'I⁷';\r\n                case ChordId.HalfDim7:\r\n                    return 'i ̽';\r\n                case ChordId.AugTriad:\r\n                    return 'I+';\r\n                case ChordId.DimTriad:\r\n                    return 'i°';\r\n            }\r\n        }\r\n        case 2: {\r\n            switch (quality) {\r\n                case ChordId.MajTriad:\r\n                case ChordId.Maj7:\r\n                    return 'II';\r\n                case ChordId.MinTriad:\r\n                case ChordId.Min7:\r\n                    return 'ii';\r\n                case ChordId.Dom7:\r\n                    return 'II⁷';\r\n                case ChordId.HalfDim7:\r\n                    return 'ii ̽';\r\n                case ChordId.AugTriad:\r\n                    return 'II+';\r\n                case ChordId.DimTriad:\r\n                    return 'ii°';\r\n            }\r\n        }\r\n        case 3: {\r\n            switch (quality) {\r\n                case ChordId.MajTriad:\r\n                case ChordId.Maj7:\r\n                    return 'III';\r\n                case ChordId.MinTriad:\r\n                case ChordId.Min7:\r\n                    return 'iiii';\r\n                case ChordId.Dom7:\r\n                    return 'III⁷';\r\n                case ChordId.HalfDim7:\r\n                    return 'iii ̽';\r\n                case ChordId.AugTriad:\r\n                    return 'III+';\r\n                case ChordId.DimTriad:\r\n                    return 'iii°';\r\n            }\r\n        }\r\n        case 4: {\r\n            switch (quality) {\r\n                case ChordId.MajTriad:\r\n                case ChordId.Maj7:\r\n                    return 'IV';\r\n                case ChordId.MinTriad:\r\n                case ChordId.Min7:\r\n                    return 'iv';\r\n                case ChordId.Dom7:\r\n                    return 'IV⁷';\r\n                case ChordId.HalfDim7:\r\n                    return 'iv ̽';\r\n                case ChordId.AugTriad:\r\n                    return 'IV+';\r\n                case ChordId.DimTriad:\r\n                    return 'iv°';\r\n            }\r\n        }\r\n        case 5: {\r\n            switch (quality) {\r\n                case ChordId.MajTriad:\r\n                case ChordId.Maj7:\r\n                    return 'V';\r\n                case ChordId.MinTriad:\r\n                case ChordId.Min7:\r\n                    return 'v';\r\n                case ChordId.Dom7:\r\n                    return 'V⁷';\r\n                case ChordId.HalfDim7:\r\n                    return 'v ̽';\r\n                case ChordId.AugTriad:\r\n                    return 'V+';\r\n                case ChordId.DimTriad:\r\n                    return 'v°';\r\n            }\r\n        }\r\n        case 6: {\r\n            switch (quality) {\r\n                case ChordId.MajTriad:\r\n                case ChordId.Maj7:\r\n                    return 'VI';\r\n                case ChordId.MinTriad:\r\n                case ChordId.Min7:\r\n                    return 'vi';\r\n                case ChordId.Dom7:\r\n                    return 'VI⁷';\r\n                case ChordId.HalfDim7:\r\n                    return 'vi ̽';\r\n                case ChordId.AugTriad:\r\n                    return 'VI+';\r\n                case ChordId.DimTriad:\r\n                    return 'vi°';\r\n            }\r\n        }\r\n        case 7: {\r\n            switch (quality) {\r\n                case ChordId.MajTriad:\r\n                case ChordId.Maj7:\r\n                    return 'VII';\r\n                case ChordId.MinTriad:\r\n                case ChordId.Min7:\r\n                    return 'vii';\r\n                case ChordId.Dom7:\r\n                    return 'VII⁷';\r\n                case ChordId.HalfDim7:\r\n                    return 'vii ̽';\r\n                case ChordId.AugTriad:\r\n                    return 'VII+';\r\n                case ChordId.DimTriad:\r\n                    return 'vii°';\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default class Chord extends PodList {\r\n\r\n    modelId = ModelId.Chord;\r\n\r\n    constructor(id: ChordId, options = undefined) {\r\n        super(CHORD_PRESET_MAP, id, options);\r\n    }\r\n\r\n    getNumeral(n) {\r\n        return getSymbol(n, this.id);\r\n    }\r\n\r\n    static fromValue = (value: IPod[]) => Model.fromValue(CHORD_PRESETS, Chord, value, arePodListsEqual, reducePodList);\r\n}\r\n","import { DEFAULT_DEGREE_COLOR_SCHEME } from \"../theory/Degree.constants\";\r\nimport TuningUtils from \"../tuning/Tuning.utils\";\r\nimport Model from \"./Model\";\r\nimport { IntervalId, INTERVAL_QUALITY, IPod } from './Model.constants';\r\nimport { CHORD_PRESETS, CORE_INTERVALS, INTERVAL_PRESETS, INTERVAL_PRESET_MAP, SCALE_PRESETS } from './Model.presets';\r\nimport Pod from \"./Pod\";\r\nimport { arePodsEqual, listContainsSubset, reducePod } from \"./Pod.static\";\r\n\r\nexport default class IntervalSpan extends Pod {\r\n\r\n    id: IntervalId;\r\n    offset: number;\r\n\r\n    constructor(id: IntervalId) {\r\n        super(INTERVAL_PRESET_MAP.get(id));\r\n    }\r\n\r\n    static fromValue = (value: IPod) => Model.fromValue(INTERVAL_PRESETS, IntervalSpan, value, arePodsEqual, reducePod);\r\n\r\n    getColor(): string | undefined {\r\n        return this.equals(new IntervalSpan(IntervalId.P1)) ?\r\n            'red' : '#333';\r\n\r\n        return DEFAULT_DEGREE_COLOR_SCHEME[this.pod[1]];\r\n    }\r\n\r\n    getName() {\r\n        const reduced = reducePod(this.pod);\r\n\r\n        const [noteIndex, d] = reduced;\r\n        const degreeIntervals = CORE_INTERVALS[d];\r\n        if (!degreeIntervals) return '?';\r\n\r\n        const pIvl = degreeIntervals[0];\r\n        const loIvl = pIvl;\r\n        const hiIvl = degreeIntervals[degreeIntervals.length - 1];\r\n\r\n        // determine core interval and quality\r\n        let ivl = null;\r\n        let quality = null;\r\n        if (degreeIntervals.length === 1) {\r\n            ivl = pIvl; // perfect\r\n            quality = INTERVAL_QUALITY.perfect;\r\n        }\r\n        else if (noteIndex <= loIvl.value[0]) {\r\n            ivl = loIvl; // minor\r\n            quality = INTERVAL_QUALITY.min;\r\n        }\r\n        else if (noteIndex >= hiIvl.value[0]) {\r\n            ivl = hiIvl; // major\r\n            quality = INTERVAL_QUALITY.maj;\r\n        }\r\n\r\n        const offset = ivl.value[0] - reduced[0];\r\n\r\n        this.offset = offset;\r\n\r\n        if (offset === 0) return `${quality.symbol}${d + 1}`;\r\n        else if (offset > 0) quality = INTERVAL_QUALITY.dim; // dim\r\n        else if (offset < 0) quality = INTERVAL_QUALITY.aug; // aug\r\n\r\n        const count = Math.abs(offset);\r\n        const qualityStr = quality.symbol.repeat(count);\r\n\r\n        const value = `${qualityStr}${d + 1}`;\r\n\r\n        /*if (isExtended) {\r\n            console.log('x', value);\r\n            if (value === 'm2') value = 'b9'\r\n            else if (value === 'M2') value = '9'\r\n            else if (value === 'm3') value = '#9'\r\n            else if (value === 'M3') value = 'b11'\r\n            else if (value === 'P4') value = '11'\r\n            else if (value === 'A4' || value === 'd5') value = '#11'\r\n            else if (value === 'm6') value = 'b13'\r\n            else if (value === 'M6') value = '13'\r\n            else if (value === 'm7') value = '#13'\r\n        }*/\r\n\r\n        return value;\r\n    }\r\n\r\n    getRatio() {\r\n        const [p] = this.pod;\r\n\r\n        const baseline = TuningUtils.getFrequency(0);\r\n        const compareTo = TuningUtils.getFrequency(p);\r\n\r\n        const ratio = compareTo / baseline;\r\n\r\n        return `1:${ratio.toFixed(2)}`;\r\n    }\r\n\r\n    isInSuperset(superset: IPod[]) {\r\n        if (superset.length <= 1) return false;\r\n        return listContainsSubset(superset, [this.pod]);\r\n    }\r\n\r\n    getSupersets() {\r\n        const result = [];\r\n\r\n        const chords = CHORD_PRESETS.filter(preset =>\r\n            this.isInSuperset(preset.value)\r\n        );\r\n\r\n        if (chords.length) {\r\n            result.push({\r\n                modelName: 'Chords',\r\n                values: chords\r\n            });\r\n        }\r\n\r\n        const scales = SCALE_PRESETS.filter(preset =>\r\n            this.isInSuperset(preset.value)\r\n        );\r\n\r\n        if (scales.length) {\r\n            result.push({\r\n                modelName: 'Scales',\r\n                values: scales\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n}\r\n","import IntervalSpan from './Interval';\r\nimport Model from './Model';\r\nimport { ChordId, IPod, ModelId, ScaleId } from './Model.constants';\r\nimport { CHORD_PRESETS, SCALE_PRESETS } from './Model.presets';\r\nimport Note from './Note';\r\nimport { addPods, arePodListsEqual, getIndexOfPodAtPitch, getShortName, listContainsSubset } from './Pod.static';\r\n\r\nexport interface IPodListOptions {\r\n    root?: Note;\r\n}\r\n\r\nexport default class PodList extends Model {\r\n\r\n    modelId: ModelId | undefined;\r\n    id: ChordId | ScaleId;\r\n    root: Note;\r\n    podList: IPod[];\r\n    intervals: IntervalSpan[];\r\n    notePods?: IPod[];\r\n    notes?: Note;\r\n\r\n    constructor(presetMap, presetId: ChordId | ScaleId, options?: IPodListOptions) {\r\n        super();\r\n\r\n        const preset = presetMap.get(presetId);\r\n        if (!preset) throw new Error(`Unknown presetId: ${presetId}`);\r\n\r\n        this.modelId = preset.modelId;\r\n        this.id = preset.id;\r\n        this.name = preset.name;\r\n        this.tags = preset.tags;\r\n        this.aliases = preset.aliases;\r\n        this.podList = preset.value;\r\n        this.intervals = preset.value.map(pod => IntervalSpan.fromValue(pod));\r\n\r\n        if (options && options.root) {\r\n            this.applyRoot(options.root);\r\n        }\r\n    }\r\n\r\n    equals(B: PodList) {\r\n        return arePodListsEqual(this.podList, B.podList);\r\n    }\r\n\r\n    getName = () => {\r\n        return `${this.root ? `${this.root.name} ` : ''}${this.name}`;\r\n    }\r\n\r\n    getShortName = () => {\r\n        return getShortName(this.name)\r\n    }\r\n\r\n    applyRoot(root: Note) {\r\n        let notes;\r\n        let notePods;\r\n        try {\r\n            notePods = this.intervals.map(ivl => addPods(ivl.pod, root.pod));\r\n            notes = notePods.map(pod => new Note(pod));\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n            throw new Error('Unable to apply root');\r\n        }\r\n        this.root = root;\r\n        this.notes = notes;\r\n        this.notePods = notePods;\r\n        this.name = this.getName();\r\n        return this;\r\n    }\r\n\r\n    getIntervalListString(): string {\r\n        const nameArr = this.intervals.map(ivl => ivl.getName());\r\n        return nameArr.join(', ');\r\n    }\r\n\r\n    isInSuperset(superset: IPod[]) {\r\n        if (superset.length <= this.podList.length) return false;\r\n        return listContainsSubset(superset, this.podList);\r\n    }\r\n\r\n    containsSubset(subset: IPod[]) {\r\n        if (subset.length >= this.podList.length) return false;\r\n        return listContainsSubset(this.podList, subset);\r\n    }\r\n\r\n    getSubchords() {\r\n        return CHORD_PRESETS.filter(preset =>\r\n            this.containsSubset(preset.value)\r\n        );\r\n    }\r\n\r\n    getSuperchords() {\r\n        return CHORD_PRESETS.filter(preset =>\r\n            this.isInSuperset(preset.value)\r\n        );\r\n    }\r\n\r\n    getSubscales() {\r\n        return SCALE_PRESETS.filter(preset =>\r\n            this.containsSubset(preset.value)\r\n        );\r\n    }\r\n\r\n    getSuperscales() {\r\n        return SCALE_PRESETS.filter(preset =>\r\n            this.isInSuperset(preset.value)\r\n        );\r\n    }\r\n\r\n    getPreview() {\r\n        return this.getIntervalListString();\r\n    }\r\n\r\n    tryGetPodPairAtPitch(noteIndex: number): [IntervalSpan, Note] {\r\n        const index = getIndexOfPodAtPitch(this.notePods, noteIndex, false);\r\n\r\n        if (index == null) return [undefined, undefined];\r\n\r\n        return [\r\n            this.intervals[index],\r\n            this.notes[index]\r\n        ];\r\n    }\r\n}\r\n","import { IChartConfig } from \"./Chart.constants\";\r\nimport { ChordId, NoteId } from './Model.constants';\r\n\r\nexport const AUTUMN_LEAVES_CONFIG: IChartConfig = {\r\n    name: 'Autumn Leaves',\r\n    sections: [\r\n        {\r\n            name: 'A',\r\n            chords: [\r\n                [NoteId.C, ChordId.Min7, 4],\r\n                [NoteId.F, ChordId.Dom7, 4],\r\n                [NoteId.Bb, ChordId.Maj7, 4],\r\n                [NoteId.Eb, ChordId.Maj7, 4],\r\n                [NoteId.A, ChordId.HalfDim7, 4],\r\n                [NoteId.D, ChordId.Dom7, 4],\r\n                [NoteId.G, ChordId.Min6, 8]\r\n            ]\r\n        },\r\n        {\r\n            name: 'A\\'',\r\n            chords: [\r\n                [NoteId.C, ChordId.Min7, 4],\r\n                [NoteId.F, ChordId.Dom7, 4],\r\n                [NoteId.Bb, ChordId.Maj7, 4],\r\n                [NoteId.Eb, ChordId.Maj7, 4],\r\n                [NoteId.A, ChordId.HalfDim7, 4],\r\n                [NoteId.D, ChordId.Dom7, 4],\r\n                [NoteId.G, ChordId.Min6, 8]\r\n            ]\r\n        },\r\n        {\r\n            name: 'B',\r\n            chords: [\r\n                [NoteId.A, ChordId.Maj6, 4],\r\n                [NoteId.D, ChordId.Dom7, 4],\r\n                [NoteId.G, ChordId.Dom7, 8],\r\n                [NoteId.C, ChordId.Min7, 4],\r\n                [NoteId.F, ChordId.Min7, 4],\r\n                [NoteId.Bb, ChordId.Min7, 8]\r\n            ]\r\n        },\r\n        {\r\n            name: 'C',\r\n            chords: [\r\n                [NoteId.A, ChordId.HalfDim7, 4],\r\n                [NoteId.D, ChordId.Dom7, 4],\r\n                [NoteId.G, ChordId.Min7, 2],\r\n                [NoteId.C, ChordId.Dom7, 2],\r\n                [NoteId.F, ChordId.Min7, 2],\r\n                [NoteId.Bb, ChordId.Dom7, 2],\r\n                [NoteId.A, ChordId.HalfDim7, 4],\r\n                [NoteId.D, ChordId.Dom7, 4],\r\n                [NoteId.G, ChordId.Min7, 8]\r\n            ]\r\n        }\r\n    ]\r\n}\r\n\r\nexport const BLUE_BOSSA_CONFIG: IChartConfig = {\r\n    name: 'Blue Bossa',\r\n    sections: [\r\n        {\r\n            name: 'A',\r\n            chords: [\r\n                [NoteId.C, ChordId.Min7, 8],\r\n                [NoteId.F, ChordId.Min6, 4],\r\n                [NoteId.Bb, ChordId.Dom7, 4],\r\n                [NoteId.D, ChordId.HalfDim7, 4],\r\n                [NoteId.G, ChordId.Dom7, 4],\r\n                [NoteId.C, ChordId.Min7, 8]\r\n            ]\r\n        },\r\n        {\r\n            name: 'B',\r\n            chords: [\r\n                [NoteId.Eb, ChordId.Min7, 4],\r\n                [NoteId.Ab, ChordId.Dom7, 4],\r\n                [NoteId.Db, ChordId.Maj7, 8],\r\n                [NoteId.D, ChordId.HalfDim7, 4],\r\n                [NoteId.G, ChordId.Dom7, 4],\r\n                [NoteId.C, ChordId.Min7, 4],\r\n                [NoteId.D, ChordId.HalfDim7, 2],\r\n                [NoteId.G, ChordId.Dom7, 2]\r\n            ]\r\n        }\r\n    ]\r\n}\r\n\r\nexport const ALL_OF_ME_CONFIG: IChartConfig = {\r\n    name: 'All of Me',\r\n    sections: [\r\n        {\r\n            name: 'A',\r\n            chords: [\r\n                [NoteId.C, ChordId.Maj6, 4],\r\n                [NoteId.E, ChordId.Dom7, 4],\r\n                [NoteId.A, ChordId.Dom7, 4],\r\n                [NoteId.D, ChordId.Min7, 4]\r\n            ]\r\n        },\r\n        {\r\n            name: 'B',\r\n            chords: [\r\n                [NoteId.E, ChordId.Dom7, 4],\r\n                [NoteId.A, ChordId.Min7, 4],\r\n                [NoteId.D, ChordId.Dom7, 4],\r\n                [NoteId.D, ChordId.Min7, 2],\r\n                [NoteId.G, ChordId.Dom7, 2]\r\n            ]\r\n        },\r\n        {\r\n            name: 'A\\'',\r\n            chords: [\r\n                [NoteId.C, ChordId.Maj6, 4],\r\n                [NoteId.E, ChordId.Dom7, 4],\r\n                [NoteId.A, ChordId.Dom7, 4],\r\n                [NoteId.D, ChordId.Min7, 4]\r\n            ]\r\n        },\r\n        {\r\n            name: 'C',\r\n            chords: [\r\n                [NoteId.F, ChordId.Maj6, 2],\r\n                [NoteId.F, ChordId.Min6, 2],\r\n                [NoteId.C, ChordId.Maj7, 2],\r\n                [NoteId.A, ChordId.Dom7, 2],\r\n                [NoteId.D, ChordId.Min7, 2],\r\n                [NoteId.G, ChordId.Dom7, 2],\r\n                [NoteId.C, ChordId.Maj6, 4]\r\n            ]\r\n        }\r\n    ]\r\n}\r\n\r\nexport const IT_COULD_HAPPEN_TO_YOU_CONFIG: IChartConfig = {\r\n    name: 'It Could Happen To You',\r\n    sections: [\r\n        {\r\n            name: 'A',\r\n            chords: [\r\n                [NoteId.Eb, ChordId.Maj7, 4],\r\n                [NoteId.G, ChordId.HalfDim7, 2],\r\n                [NoteId.C, /*ChordId.Dom7b9*/ChordId.Dom7, 2],\r\n                [NoteId.F, ChordId.Min7, 4],\r\n                [NoteId.A, ChordId.HalfDim7, 2],\r\n                [NoteId.D, /*ChordId.Dom7b9*/ChordId.Dom7, 2],\r\n                [NoteId.Eb, ChordId.Maj7, 4],\r\n                [NoteId.Ab, ChordId.Dom7, 4],\r\n                [NoteId.G, ChordId.HalfDim7, 4],\r\n                [NoteId.C, /*ChordId.Dom7b9*/ChordId.Dom7, 4]\r\n            ]\r\n        },\r\n        {\r\n            name: 'B',\r\n            chords: [\r\n                [NoteId.F, ChordId.Min7, 4],\r\n                [NoteId.Ab, ChordId.Min6, 4],\r\n                [NoteId.Eb, ChordId.Maj7, 4],\r\n                [NoteId.D, ChordId.HalfDim7, 2],\r\n                [NoteId.G, /*ChordId.Dom7b9*/ChordId.Dom7, 2],\r\n                [NoteId.C, ChordId.Min7, 4],\r\n                [NoteId.F, ChordId.Dom7, 4],\r\n                [NoteId.F, ChordId.Min7, 4],\r\n                [NoteId.Bb, ChordId.Dom7, 4]\r\n            ]\r\n        },\r\n        {\r\n            name: 'A\\'',\r\n            chords: [\r\n                [NoteId.Eb, ChordId.Maj7, 4],\r\n                [NoteId.G, ChordId.HalfDim7, 2],\r\n                [NoteId.C, /*ChordId.Dom7b9*/ChordId.Dom7, 2],\r\n                [NoteId.F, ChordId.Min7, 4],\r\n                [NoteId.A, ChordId.HalfDim7, 2],\r\n                [NoteId.D, /*ChordId.Dom7b9*/ChordId.Dom7, 2],\r\n                [NoteId.Eb, ChordId.Maj7, 4],\r\n                [NoteId.Ab, ChordId.Dom7, 4],\r\n                [NoteId.G, ChordId.HalfDim7, 4],\r\n                [NoteId.C, /*ChordId.Dom7b9*/ChordId.Dom7, 4]\r\n            ]\r\n        },\r\n        {\r\n            name: 'C',\r\n            chords: [\r\n                [NoteId.F, ChordId.Min7, 4],\r\n                [NoteId.Ab, ChordId.Min6, 4],\r\n                [NoteId.Eb, ChordId.Maj7, 2],\r\n                [NoteId.Ab, ChordId.Dom7, 2],\r\n                [NoteId.G, ChordId.HalfDim7, 2],\r\n                [NoteId.C, /*ChordId.Dom7b9*/ChordId.Dom7, 2],\r\n                [NoteId.F, ChordId.Min7, 4],\r\n                [NoteId.Bb, /*ChordId.Dom7b9*/ChordId.Dom7, 4],\r\n                [NoteId.Eb, ChordId.Maj7, 8]\r\n            ]\r\n        }\r\n    ]\r\n}\r\n\r\nexport const SWEET_GEORGIA_BROWN_CONFIG: IChartConfig = {\r\n    name: 'Sweet Georgia Brown',\r\n    sections: [\r\n        {\r\n            name: 'A',\r\n            chords: [\r\n                [NoteId.F, ChordId.Dom7, 16],\r\n                [NoteId.Bb, ChordId.Dom7, 16]\r\n            ]\r\n        },\r\n        {\r\n            name: 'B',\r\n            chords: [\r\n                [NoteId.Eb, ChordId.Dom7, 16],\r\n                [NoteId.Ab, ChordId.Maj7, 4],\r\n                [NoteId.Bb, ChordId.Dom7, 2],\r\n                [NoteId.Eb, ChordId.Min7, 2],\r\n                [NoteId.Ab, ChordId.Dom7, 4],\r\n                [NoteId.G, ChordId.Dom7, 2],\r\n                [NoteId.C, ChordId.Dom7, 2]\r\n            ]\r\n        },\r\n        {\r\n            name: 'A\\'',\r\n            chords: [\r\n                [NoteId.F, ChordId.Dom7, 16],\r\n                [NoteId.Bb, ChordId.Dom7, 16]\r\n            ]\r\n        },\r\n        {\r\n            name: 'C',\r\n            chords: [\r\n                [NoteId.F, ChordId.Min7, 4],\r\n                [NoteId.G, ChordId.HalfDim7, 2],\r\n                [NoteId.C, /*ChordId.Dom7b9*/ChordId.Dom7, 2],\r\n                [NoteId.F, ChordId.Min7, 4],\r\n                [NoteId.G, ChordId.HalfDim7, 2],\r\n                [NoteId.C, /*ChordId.Dom7b9*/ChordId.Dom7, 2],\r\n                [NoteId.Ab, ChordId.Dom7, 2],\r\n                [NoteId.G, ChordId.Dom7, 2],\r\n                [NoteId.Gb, ChordId.Dom7, 2],\r\n                [NoteId.F, ChordId.Dom7, 2],\r\n                [NoteId.Bb, ChordId.Min7, 2],\r\n                [NoteId.Eb, ChordId.Dom7, 2],\r\n                [NoteId.Ab, ChordId.Maj7, 4]\r\n            ]\r\n        }\r\n    ]\r\n}\r\n\r\nexport const SO_WHAT_CONFIG: IChartConfig = {\r\n    name: 'So What',\r\n    sections: [\r\n        {\r\n            name: 'A',\r\n            chords: [\r\n                [NoteId.D, ChordId.Min7, 4],\r\n                [NoteId.D, ChordId.Min7, 4],\r\n                [NoteId.Eb, ChordId.Min7, 4],\r\n                [NoteId.D, ChordId.Min7, 4]\r\n            ]\r\n        }\r\n    ]\r\n}\r\n\r\nexport const ON_GREEN_DOLPIN_STREET_CONFIG: IChartConfig = {\r\n    name: 'On Green Dolphin Street',\r\n    sections: [\r\n        {\r\n            name: 'A',\r\n            chords: [\r\n                [NoteId.C, ChordId.Maj7, 8],\r\n                [NoteId.C, ChordId.Min7, 8],\r\n                [NoteId.D, ChordId.Dom7, 4],\r\n                [NoteId.Db, ChordId.Maj7, 4],\r\n                [NoteId.C, ChordId.Maj7, 4],\r\n                [NoteId.E, ChordId.Min7, 2],\r\n                [NoteId.A, ChordId.Maj7, 2]\r\n            ]\r\n        },\r\n        {\r\n            name: 'B',\r\n            chords: [\r\n                [NoteId.D, ChordId.Min7, 4],\r\n                [NoteId.G, ChordId.Dom7, 4],\r\n                [NoteId.C, ChordId.Maj7, 8],\r\n                [NoteId.F, ChordId.Min7, 4],\r\n                [NoteId.Bb, ChordId.Dom7, 4],\r\n                [NoteId.Eb, ChordId.Maj7, 4],\r\n                [NoteId.D, ChordId.Min7, 2],\r\n                [NoteId.G, ChordId.Dom7, 2]\r\n            ]\r\n        },\r\n        {\r\n            name: 'A\\'',\r\n            chords: [\r\n                [NoteId.C, ChordId.Maj7, 8],\r\n                [NoteId.C, ChordId.Min7, 8],\r\n                [NoteId.D, ChordId.Dom7, 4],\r\n                [NoteId.Db, ChordId.Maj7, 4],\r\n                [NoteId.C, ChordId.Maj7, 4],\r\n                [NoteId.E, ChordId.Min7, 2],\r\n                [NoteId.A, ChordId.Maj7, 2]\r\n            ]\r\n        },\r\n        {\r\n            name: 'C',\r\n            chords: [\r\n                [NoteId.D, ChordId.Min7, 4],\r\n                [NoteId.B, ChordId.HalfDim7, 2],\r\n                [NoteId.E, /*ChordId.Dom7b9*/ChordId.Dom7, 2],\r\n                [NoteId.A, ChordId.Min7, 4],\r\n                [NoteId.Fs, ChordId.HalfDim7, 2],\r\n                [NoteId.B, /*ChordId.Dom7b9*/ChordId.Dom7, 2],\r\n                [NoteId.E, ChordId.Min7, 2],\r\n                [NoteId.A, ChordId.Min7, 2],\r\n                [NoteId.D, ChordId.Min7, 2],\r\n                [NoteId.G, ChordId.Maj7, 2],\r\n                [NoteId.C, ChordId.Maj7, 8]\r\n            ]\r\n        }\r\n    ]\r\n}\r\n\r\nexport const HAVE_YOU_MET_MISS_JONES_CONFIG: IChartConfig = {\r\n    name: 'Have You Met Miss Jones?',\r\n    sections: [\r\n        {\r\n            name: 'A',\r\n            chords: [\r\n                [NoteId.F, ChordId.Maj7, 4],\r\n                [NoteId.Fs, ChordId.DimTriad, 4],\r\n                [NoteId.G, ChordId.Min7, 4],\r\n                [NoteId.C, ChordId.Dom7, 4],\r\n                [NoteId.A, ChordId.Min7, 4],\r\n                [NoteId.D, ChordId.Min7, 4],\r\n                [NoteId.G, ChordId.Min7, 4],\r\n                [NoteId.C, ChordId.Dom7, 4]\r\n            ]\r\n        },\r\n        {\r\n            name: 'B',\r\n            chords: [\r\n                [NoteId.Bb, ChordId.Maj7, 4],\r\n                [NoteId.Ab, ChordId.Min7, 2],\r\n                [NoteId.Db, ChordId.Dom7, 2],\r\n                [NoteId.Gb, ChordId.Maj7, 4],\r\n                [NoteId.E, ChordId.Min7, 2],\r\n                [NoteId.A, ChordId.Dom7, 2],\r\n                [NoteId.D, ChordId.Maj7, 4],\r\n                [NoteId.Ab, ChordId.Min7, 2],\r\n                [NoteId.Db, ChordId.Dom7, 2],\r\n                [NoteId.Gb, ChordId.Maj7, 4],\r\n                [NoteId.G, ChordId.Min7, 2],\r\n                [NoteId.C, ChordId.Dom7, 2]\r\n            ]\r\n        },\r\n        {\r\n            name: 'A\\'',\r\n            chords: [\r\n                [NoteId.F, ChordId.Maj7, 4],\r\n                [NoteId.Fs, ChordId.DimTriad, 4],\r\n                [NoteId.G, ChordId.Min7, 4],\r\n                [NoteId.C, ChordId.Dom7, 4],\r\n                [NoteId.A, ChordId.Min7, 4],\r\n                [NoteId.D, ChordId.Min7, 4],\r\n                [NoteId.G, ChordId.Min7, 2],\r\n                [NoteId.C, ChordId.Dom7, 2],\r\n                [NoteId.F, ChordId.Dom7, 4]\r\n            ]\r\n        },\r\n        {\r\n            name: 'A\\'\\'',\r\n            chords: [\r\n                [NoteId.F, ChordId.Maj7, 4],\r\n                [NoteId.Fs, ChordId.DimTriad, 4],\r\n                [NoteId.G, ChordId.Min7, 4],\r\n                [NoteId.C, ChordId.Dom7, 4],\r\n                [NoteId.A, ChordId.Min7, 4],\r\n                [NoteId.D, ChordId.Min7, 4],\r\n                [NoteId.G, ChordId.Min7, 2],\r\n                [NoteId.C, ChordId.Dom7, 2],\r\n                [NoteId.F, ChordId.Maj7, 4]\r\n            ]\r\n        }\r\n    ]\r\n}\r\n\r\nexport const ALL_THE_THINGS_YOU_ARE_CONFIG: IChartConfig = {\r\n    name: 'All The Things You Are',\r\n    sections: [\r\n        {\r\n            name: 'A',\r\n            chords: [\r\n                [NoteId.F, ChordId.Min7, 4],\r\n                [NoteId.Bb, ChordId.Min7, 4],\r\n                [NoteId.Eb, ChordId.Dom7, 4],\r\n                [NoteId.Ab, ChordId.Maj7, 4],\r\n                [NoteId.Db, ChordId.Maj7, 4],\r\n                [NoteId.G, ChordId.Dom7, 4],\r\n                [NoteId.C, ChordId.Maj7, 8]\r\n            ]\r\n        },\r\n        {\r\n            name: 'A\\'',\r\n            chords: [\r\n                [NoteId.C, ChordId.Min7, 4],\r\n                [NoteId.F, ChordId.Min7, 4],\r\n                [NoteId.Bb, ChordId.Dom7, 4],\r\n                [NoteId.Eb, ChordId.Maj7, 4],\r\n                [NoteId.Ab, ChordId.Maj7, 4],\r\n                [NoteId.A, ChordId.Min7, 2],\r\n                [NoteId.D, ChordId.Dom7, 2],\r\n                [NoteId.G, ChordId.Maj7, 4],\r\n                [NoteId.E, ChordId.Dom7, 4]\r\n            ]\r\n        },\r\n        {\r\n            name: 'B',\r\n            chords: [\r\n                [NoteId.A, ChordId.Min7, 4],\r\n                [NoteId.D, ChordId.Dom7, 4],\r\n                [NoteId.G, ChordId.Maj7, 8],\r\n                [NoteId.Fs, ChordId.Min7, 4],\r\n                [NoteId.B, ChordId.Dom7, 4],\r\n                [NoteId.E, ChordId.Maj7, 4],\r\n                [NoteId.C, ChordId.Dom7, 4]\r\n            ]\r\n        },\r\n        {\r\n            name: 'A\\'\\'',\r\n            chords: [\r\n                [NoteId.F, ChordId.Min7, 4],\r\n                [NoteId.Bb, ChordId.Min7, 4],\r\n                [NoteId.Eb, ChordId.Dom7, 4],\r\n                [NoteId.Ab, ChordId.Maj7, 4],\r\n                [NoteId.Db, ChordId.Maj7, 4],\r\n                [NoteId.G, ChordId.Maj7, 4],\r\n                [NoteId.C, ChordId.Min7, 4],\r\n                [NoteId.B, ChordId.DimTriad, 4],\r\n                [NoteId.Bb, ChordId.Min7, 4],\r\n                [NoteId.Eb, ChordId.Dom7, 4],\r\n                [NoteId.Ab, ChordId.Maj7, 8]\r\n            ]\r\n        }\r\n    ]\r\n}\r\n\r\nexport const STELLA_BY_STARLIGHT_CONFIG: IChartConfig = {\r\n    name: 'Stella By Starlight',\r\n    sections: [\r\n        {\r\n            name: 'A',\r\n            chords: [\r\n                [NoteId.E, ChordId.HalfDim7, 4],\r\n                [NoteId.A, ChordId.Dom7, 4],\r\n                [NoteId.C, ChordId.Min7, 4],\r\n                [NoteId.F, ChordId.Dom7, 4],\r\n                [NoteId.F, ChordId.Min7, 4],\r\n                [NoteId.Bb, ChordId.Dom7, 4],\r\n                [NoteId.Eb, ChordId.Maj7, 4],\r\n                [NoteId.Ab, ChordId.Dom7, 4]\r\n            ]\r\n        },\r\n        {\r\n            name: 'B',\r\n            chords: [\r\n                [NoteId.Bb, ChordId.Maj7, 4],\r\n                [NoteId.E, ChordId.HalfDim7, 2],\r\n                [NoteId.A, /*ChordId.Dom7b9*/ChordId.Dom7, 2],\r\n                [NoteId.D, ChordId.Min7, 4],\r\n                [NoteId.Bb, ChordId.Min7, 2],\r\n                [NoteId.Eb, ChordId.Maj7, 2],\r\n                [NoteId.F, ChordId.Maj7, 4],\r\n                [NoteId.E, ChordId.HalfDim7, 2],\r\n                [NoteId.A, /*ChordId.Dom7b9*/ChordId.Dom7, 2],\r\n                [NoteId.A, ChordId.HalfDim7, 4],\r\n                [NoteId.D, /*ChordId.Dom7b9*/ChordId.Dom7, 4]\r\n            ]\r\n        },\r\n        {\r\n            name: 'C',\r\n            chords: [\r\n                [NoteId.G, ChordId.Dom7, 8],\r\n                [NoteId.C, ChordId.Min7, 8],\r\n                [NoteId.Ab, ChordId.Dom7, 8],\r\n                [NoteId.Bb, ChordId.Maj7, 8]\r\n            ]\r\n        },\r\n        {\r\n            name: 'A\\'',\r\n            chords: [\r\n                [NoteId.E, ChordId.HalfDim7, 4],\r\n                [NoteId.A, /*ChordId.Dom7b9*/ChordId.Dom7, 4],\r\n                [NoteId.D, ChordId.HalfDim7, 4],\r\n                [NoteId.G, /*ChordId.Dom7b9*/ChordId.Dom7, 4],\r\n                [NoteId.C, ChordId.HalfDim7, 4],\r\n                [NoteId.F, /*ChordId.Dom7b9*/ChordId.Dom7, 4],\r\n                [NoteId.Bb, ChordId.Maj7, 8]\r\n            ]\r\n        }\r\n\r\n    ]\r\n}\r\n\r\nexport const OUT_OF_NOWHERE_CONFIG: IChartConfig = {\r\n    name: 'Out Of Nowhere',\r\n    sections: [\r\n        {\r\n            name: 'A',\r\n            chords: [\r\n                [NoteId.G, ChordId.Maj7, 8],\r\n                [NoteId.Bb, ChordId.Min7, 4],\r\n                [NoteId.Eb, ChordId.Dom7, 4],\r\n                [NoteId.G, ChordId.MajTriad, 8],\r\n                [NoteId.B, ChordId.Min7, 4],\r\n                [NoteId.E, /*ChordId.Dom7b9*/ChordId.Dom7, 4]\r\n            ]\r\n        },\r\n        {\r\n            name: 'B',\r\n            chords: [\r\n                [NoteId.A, ChordId.Min7, 4],\r\n                [NoteId.E, /*ChordId.Dom7b9*/ChordId.Dom7, 4],\r\n                [NoteId.A, ChordId.Min7, 8],\r\n                [NoteId.Eb, ChordId.Dom7, 8],\r\n                [NoteId.A, ChordId.Min7, 4],\r\n                [NoteId.D, ChordId.Dom7, 4]\r\n            ]\r\n        },\r\n        {\r\n            name: 'A\\'',\r\n            chords: [\r\n                [NoteId.G, ChordId.Maj7, 8],\r\n                [NoteId.Bb, ChordId.Min7, 4],\r\n                [NoteId.Eb, ChordId.Dom7, 4],\r\n                [NoteId.G, ChordId.MajTriad, 8],\r\n                [NoteId.B, ChordId.Min7, 4],\r\n                [NoteId.E, /*ChordId.Dom7b9*/ChordId.Dom7, 4]\r\n            ]\r\n        },\r\n        {\r\n            name: 'C',\r\n            chords: [\r\n                [NoteId.A, ChordId.Min7, 4],\r\n                [NoteId.E, /*ChordId.Dom7b9*/ChordId.Dom7, 4],\r\n                [NoteId.A, ChordId.Min7, 4],\r\n                [NoteId.C, ChordId.Min6, 4],\r\n                [NoteId.B, ChordId.Min7, 2],\r\n                [NoteId.Bb, ChordId.HalfDim7, 2],\r\n                [NoteId.A, ChordId.Min7, 2],\r\n                [NoteId.D, ChordId.Dom7, 2],\r\n                [NoteId.G, ChordId.Maj6, 4],\r\n                [NoteId.A, ChordId.Min7, 2],\r\n                [NoteId.D, ChordId.Dom7, 2]\r\n\r\n            ]\r\n        }\r\n    ]\r\n}\r\n\r\nexport const ITS_A_BLUE_WORLD_CONFIG: IChartConfig = {\r\n    name: 'It\\'s A Blue World',\r\n    sections: [\r\n        {\r\n            name: 'A',\r\n            chords: [\r\n                [NoteId.C, ChordId.Min7, 4],\r\n                [NoteId.F, ChordId.Dom7, 4],\r\n                [NoteId.Bb, ChordId.Maj7, 8],\r\n                [NoteId.F, ChordId.Min7, 4],\r\n                [NoteId.Bb, ChordId.Dom7, 4],\r\n                [NoteId.Eb, ChordId.Maj7, 8]\r\n            ]\r\n        },\r\n        {\r\n            name: 'B',\r\n            chords: [\r\n                [NoteId.Eb, ChordId.Maj7, 4],\r\n                [NoteId.Eb, ChordId.Min7, 2],\r\n                [NoteId.F, ChordId.Dom7, 2],\r\n                [NoteId.Bb, ChordId.Maj7, 4],\r\n                [NoteId.Bb, ChordId.Dom7, 4],\r\n                [NoteId.Eb, ChordId.Min7, 4],\r\n                [NoteId.Gb, ChordId.Maj7, 4],\r\n                [NoteId.F, ChordId.Maj7, 2],\r\n                [NoteId.Gb, ChordId.Maj7, 2],\r\n                [NoteId.F, ChordId.Maj7, 2],\r\n                [NoteId.F, ChordId.Dom7, 2]\r\n            ]\r\n        },\r\n        {\r\n            name: 'A\\'',\r\n            chords: [\r\n                [NoteId.C, ChordId.Min7, 4],\r\n                [NoteId.F, ChordId.Dom7, 4],\r\n                [NoteId.Bb, ChordId.Maj7, 8],\r\n                [NoteId.F, ChordId.Min7, 4],\r\n                [NoteId.Bb, ChordId.Dom7, 4],\r\n                [NoteId.Eb, ChordId.Maj7, 8]\r\n            ]\r\n        },\r\n        {\r\n            name: 'C',\r\n            chords: [\r\n                [NoteId.Eb, ChordId.Maj7, 4],\r\n                [NoteId.Eb, ChordId.Min7, 2],\r\n                [NoteId.Ab, ChordId.Maj7, 2],\r\n                [NoteId.Bb, ChordId.Maj7, 2],\r\n                [NoteId.C, ChordId.Min7, 2],\r\n                [NoteId.D, ChordId.HalfDim7, 2],\r\n                [NoteId.G, ChordId.Dom7, 2],\r\n                [NoteId.C, ChordId.Maj7, 4],\r\n                [NoteId.C, ChordId.Min7, 2],\r\n                [NoteId.F, ChordId.Dom7, 2],\r\n                [NoteId.Bb, ChordId.Maj7, 8]\r\n            ]\r\n        }\r\n    ]\r\n}\r\n\r\nexport const ALONE_AGAIN_CONFIG: IChartConfig = {\r\n    name: 'Alone Again',\r\n    sections: [\r\n        {\r\n            name: 'A',\r\n            chords: [\r\n                [NoteId.G, ChordId.Maj7, 4],\r\n                [NoteId.B, ChordId.Min7, 4],\r\n                [NoteId.D, ChordId.Min7, 4],\r\n                [NoteId.A, ChordId.Min7, 4],\r\n                [NoteId.B, ChordId.Min7, 2],\r\n                [NoteId.E, ChordId.Dom7, 2],\r\n                [NoteId.C, ChordId.Min7, 4],\r\n                [NoteId.G, ChordId.Maj7, 2],\r\n                [NoteId.G, ChordId.AugTriad, 2],\r\n                [NoteId.G, ChordId.Maj6, 2],\r\n                [NoteId.Fs, ChordId.Dom7, 2],\r\n                [NoteId.B, ChordId.Min7, 4],\r\n                [NoteId.D, ChordId.Min7, 2],\r\n                [NoteId.E, ChordId.Dom7, 2],\r\n                [NoteId.A, ChordId.Min7, 4],\r\n                [NoteId.C, ChordId.Min7, 4],\r\n                [NoteId.G, ChordId.Maj7, 4],\r\n                [NoteId.B, ChordId.Min7, 2],\r\n                [NoteId.E, ChordId.Dom7, 2],\r\n                [NoteId.A, ChordId.Min7, 2],\r\n                [NoteId.D, ChordId.Dom7, 2],\r\n                [NoteId.G, ChordId.Maj7, 4]\r\n            ]\r\n        },\r\n        {\r\n            name: 'B',\r\n            chords: [\r\n                [NoteId.Bb, ChordId.Maj7, 4],\r\n                [NoteId.F, ChordId.Maj7, 4],\r\n                [NoteId.C, ChordId.Min7, 2],\r\n                [NoteId.D, ChordId.Dom7, 2],\r\n                [NoteId.Bb, ChordId.Maj7, 4],\r\n                [NoteId.D, ChordId.Maj7, 4],\r\n                [NoteId.A, ChordId.Min7, 2],\r\n                [NoteId.D, ChordId.Dom7, 2]\r\n            ]\r\n        }\r\n    ]\r\n}\r\n","import * as CHARTS from './Chart.presets';\r\nimport Chord from './Chord';\r\nimport { ChordId, NoteId } from './Model.constants';\r\nimport { CHORD_PRESET_MAP, NOTE_PRESET_MAP } from './Model.presets';\r\nimport Note from './Note';\r\n\r\nexport type ISectionChord = [rootId: NoteId, chordId: ChordId, t: number];\r\n\r\nexport interface ISectionConfig {\r\n    name: string;\r\n    chords: ISectionChord[]\r\n}\r\n\r\nexport interface IChartConfig {\r\n    name: string;\r\n    sections: ISectionConfig[]\r\n}\r\n\r\nexport const CHART_PRESETS = Object.values(CHARTS).map(chart => {\r\n    return {\r\n        id: chart.name,\r\n        name: chart.name,\r\n        value: chart\r\n    }\r\n});\r\n\r\ninterface IChordItem {\r\n    t?: number;\r\n    rootName: string;\r\n    structureName: string;\r\n    chord: Chord\r\n}\r\n\r\ninterface ISectionParsed {\r\n    name: string;\r\n    chords: IChordItem[]\r\n}\r\n\r\nexport interface IChartParsed {\r\n    name: string;\r\n    sections: ISectionParsed[]\r\n}\r\n\r\nexport const getParsedChart = (config: IChartConfig): IChartParsed => {\r\n    const sections = [];\r\n\r\n    for (let s = 0; s < config.sections.length; s++) {\r\n        const sectionConfig = config.sections[s];\r\n        const chords = [];\r\n\r\n        for (let c = 0; c < sectionConfig.chords.length; c++) {\r\n            const chordConfig = sectionConfig.chords[c];\r\n            const [noteId, chordId, t] = chordConfig;\r\n\r\n            const root = new Note(NOTE_PRESET_MAP.get(noteId).value || [0, 0]);\r\n            const short = new Chord(chordId);\r\n            const chord = new Chord(chordId, { root });\r\n\r\n            chords.push({\r\n                t,\r\n                rootName: root.name,\r\n                structureName: short.getShortName(),\r\n                chord\r\n            });\r\n            //chords.push(...(new Array(t / 2).fill(chord)));\r\n        }\r\n        sections.push({\r\n            name: sectionConfig.name || 'Section',\r\n            chords\r\n        })\r\n    }\r\n\r\n    return {\r\n        name: config.name,\r\n        sections\r\n    };\r\n}\r\n","import { Link } from \"gatsby\";\r\nimport React, { useState } from \"react\";\r\nimport styled from 'styled-components';\r\nimport { CHART_PRESETS, getParsedChart } from \"../../../core/models/Chart.constants\";\r\nimport DropdownInput from \"../../inputs/DropdownInput\";\r\nimport { StyledPageBody } from \"../../layout/PageBody\";\r\nimport PageTitle from \"../../layout/PageTitle\";\r\nimport Card, { StyledCard } from \"../../ui/Card\";\r\nimport InputRow, { StyledInputRow } from \"../../ui/InputRow\";\r\n\r\nconst StyledPracticePage = styled(StyledPageBody)`\r\n\twidth: 100%;\r\n    max-width: 1024px;\r\n    margin: auto;\r\n    \r\n    ${StyledCard}, ${StyledInputRow} {\r\n        margin: 16px 0;\r\n    }\r\n\r\n    .sections {\r\n        gap: 16px;\r\n\r\n        h3 {\r\n            font-size: 120%;\r\n            margin: 16px 0;\r\n        }\r\n    }\r\n\r\n    .chords {\r\n        display: grid;\r\n        grid-template-columns: repeat(8, 1fr);\r\n        gap: 8px;\r\n    }\r\n\r\n    .chord {\r\n        white-space: nowrap;\r\n        border-radius: 8px;\r\n        //border: 1px solid ${props => props.theme.utils.border};\r\n        background-color: ${props => props.theme.action.interactive};\r\n        color: white;\r\n        //height: 100%;\r\n\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        flex-direction: column;\r\n        gap: 4px;\r\n        @media(min-width: 512px) {\r\n            flex-direction: row;\r\n        }  \r\n\r\n        :hover {\r\n            background-color: ${props => props.theme.action.active};\r\n        }\r\n\r\n        &.t-2 {\r\n            aspect-ratio: 1;\r\n            font-size: 80%;\r\n        }\r\n\r\n        &.t-2 {\r\n            aspect-ratio: 2;\r\n            font-size: 90%;\r\n        }\r\n\r\n        &.t-4 {\r\n            font-size: 100%;\r\n            aspect-ratio: 4;\r\n        }\r\n\r\n        &.t-8 {\r\n            aspect-ratio: 8;\r\n            font-size: 120%;\r\n        }\r\n\r\n        &.t-16 {\r\n            aspect-ratio: 16;\r\n            font-size: 140%;\r\n        }\r\n\r\n        .root-name {\r\n            font-weight: bold;\r\n            font-size: 140%;\r\n        }\r\n\r\n        .structure-name {\r\n            font-size: 100%;\r\n        }\r\n    }\r\n`;\r\n\r\nconst PracticePage: React.FC<any> = () => {\r\n    const [chartPreset, setChartPreset] = useState(CHART_PRESETS[0]);\r\n\r\n    const chart = getParsedChart(chartPreset.value);\r\n\r\n    console.log('dpb chart', chart);\r\n\r\n    return (\r\n        <StyledPracticePage>\r\n            <PageTitle title=\"Chord Charts\" />\r\n            <InputRow label=\"Chart\">\r\n                <DropdownInput options={CHART_PRESETS} value={chartPreset} setValue={setChartPreset} />\r\n            </InputRow>\r\n            <Card title={chart.name}>\r\n                <ul className=\"sections\">\r\n                    {chart.sections.map((s, i) => {\r\n                        return (\r\n                            <li key={i}>\r\n                                <h3>Section {s.name}</h3>\r\n                                <ul className=\"chords\">\r\n                                    {s.chords.map((c, j) => {\r\n                                        const { chord, rootName, structureName, t } = c;\r\n                                        return (\r\n                                            <li key={j} style={{ gridColumn: `span ${t / 2}` }}>\r\n                                                <Link to={`/browse/chords/${chord.id}/root/${chord.root.id}`} className={`chord t-${t}`}>\r\n                                                    <div className=\"root-name\">{rootName}</div>\r\n                                                    <div className=\"structure-name\">{structureName}</div>\r\n                                                </Link>\r\n                                            </li>\r\n                                        );\r\n                                    }\r\n                                    )}\r\n                                </ul>\r\n                            </li>\r\n                        );\r\n                    }\r\n                    )}\r\n                </ul>\r\n            </Card>\r\n        </StyledPracticePage>\r\n    );\r\n};\r\n\r\nexport default PracticePage;\r\n","import ChartsPage from \"../../../components/pages/dev/ChartsPage\";\r\n\r\nexport default ChartsPage;\r\n"],"names":["StyledDropdownInput","styled","props","value","setValue","options","idProperty","displayProperty","className","onChange","e","target","selectedIndex","map","v","i","key","name","StyledBreadcrumbList","theme","text","secondary","pieces","usePageProps","path","split","paths","reduce","prev","cur","arr","replace","isLink","includes","replaceAll","Tag","Link","to","undefined","push","Icon","iconId","size","color","slice","length","StyledPageTitle","utils","border","primary","title","subtitle","children","SEO","StyledCard","surface","card","CardHeader","action","rest","StyledInputRow","$y","dark3","label","y","Chord","id","CHORD_PRESET_MAP","modelId","ModelId","getNumeral","n","degree","quality","ChordId","getSymbol","this","PodList","fromValue","Model","CHORD_PRESETS","arePodListsEqual","reducePodList","IntervalSpan","INTERVAL_PRESET_MAP","getColor","equals","IntervalId","getName","reduced","reducePod","pod","noteIndex","d","degreeIntervals","CORE_INTERVALS","pIvl","loIvl","hiIvl","ivl","INTERVAL_QUALITY","offset","symbol","count","Math","abs","repeat","getRatio","p","baseline","TuningUtils","toFixed","isInSuperset","superset","listContainsSubset","getSupersets","result","chords","preset","modelName","values","scales","SCALE_PRESETS","Pod","INTERVAL_PRESETS","arePodsEqual","presetMap","presetId","root","getShortName","get","Error","tags","aliases","podList","intervals","applyRoot","B","notes","notePods","addPods","Note","console","error","getIntervalListString","join","containsSubset","subset","getSubchords","getSuperchords","getSubscales","getSuperscales","getPreview","tryGetPodPairAtPitch","index","getIndexOfPodAtPitch","AUTUMN_LEAVES_CONFIG","sections","NoteId","BLUE_BOSSA_CONFIG","ALL_OF_ME_CONFIG","IT_COULD_HAPPEN_TO_YOU_CONFIG","SWEET_GEORGIA_BROWN_CONFIG","SO_WHAT_CONFIG","ON_GREEN_DOLPIN_STREET_CONFIG","HAVE_YOU_MET_MISS_JONES_CONFIG","ALL_THE_THINGS_YOU_ARE_CONFIG","STELLA_BY_STARLIGHT_CONFIG","OUT_OF_NOWHERE_CONFIG","ITS_A_BLUE_WORLD_CONFIG","ALONE_AGAIN_CONFIG","CHART_PRESETS","Object","CHARTS","chart","StyledPracticePage","StyledPageBody","interactive","active","useState","chartPreset","setChartPreset","config","s","sectionConfig","c","chordConfig","noteId","chordId","t","NOTE_PRESET_MAP","short","chord","rootName","structureName","getParsedChart","log","PageTitle","InputRow","DropdownInput","Card","j","style","gridColumn"],"sourceRoot":""}