{"version":3,"file":"component---src-app-components-pages-index-page-tsx-6f0f5e59a9aff8e903be.js","mappings":"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","sources":["webpack://play-what/./static/play_what_logo_web.png","webpack://play-what/./src/app/components/pages/home/useRandomModel.ts","webpack://play-what/./src/app/components/pages/home/HomeTiles.tsx","webpack://play-what/./src/app/components/pages/index.page.tsx","webpack://play-what/./src/core/Core.derived.ts","webpack://play-what/./src/core/Routing.utils.ts"],"sourcesContent":["export default __webpack_public_path__ + \"static/play_what_logo_web-b14024555431be76d60a78008dbef88e.png\";","import { useEffect, useState } from \"react\";\r\nimport { PresetType } from \"../../../../core/Core.constants\";\r\nimport { POD_LIST_PRESETS } from \"../../../../core/Core.derived\";\r\nimport { NOTE_PRESETS } from \"../../../../core/Note.constants\";\r\nimport { getModelRoute } from \"../../../../core/Routing.utils\";\r\n\r\nconst useRandomModel = () => {\r\n  const [modelPath, setModelPath] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const id = setInterval(() => {\r\n      const root =\r\n        NOTE_PRESETS[Math.floor(Math.random() * NOTE_PRESETS.length)];\r\n      const structure =\r\n        POD_LIST_PRESETS[Math.floor(Math.random() * POD_LIST_PRESETS.length)];\r\n      //const text = `${root.name} ${structure.name}`;\r\n      const route = getModelRoute(\r\n        PresetType.Chord, // TODO\r\n        structure.presetId,\r\n        root.presetId\r\n      );\r\n\r\n      setModelPath(route);\r\n    }, 2000);\r\n    return () => clearInterval(id);\r\n  }, []);\r\n\r\n  return modelPath;\r\n};\r\n\r\nexport default useRandomModel;\r\n","import { Link } from \"gatsby\";\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { PresetType } from \"../../../../core/Core.constants\";\r\nimport { getModelRoute } from \"../../../../core/Routing.utils\";\r\nimport { MediaQuery } from \"../../../styles/breakpoint\";\r\nimport Icon, { IconId } from \"../../shared/ui/Icon\";\r\nimport useRandomModel from \"./useRandomModel\";\r\n\r\nconst StyledHomeTiles = styled.div`\r\n  display: grid;\r\n  gap: 16px;\r\n  margin: 0 16px;\r\n\r\n  grid-template-columns: 100%;\r\n  ${MediaQuery.Tablet} {\r\n    grid-template-columns: repeat(3, 1fr);\r\n  }\r\n\r\n  a {\r\n    background-color: ${({ theme }) => theme?.surface?.card};\r\n    border-radius: 8px;\r\n    padding: 20px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    gap: 16px;\r\n    border: 1px solid ${({ theme }) => theme?.action?.interactive};\r\n    cursor: pointer;\r\n    color: ${({ theme }) => theme?.action?.interactive};\r\n    width: 100%;\r\n    max-width: 512px;\r\n\r\n    svg,\r\n    svg * {\r\n      fill: ${({ theme }) => theme?.action?.interactive};\r\n    }\r\n    &:hover {\r\n      svg,\r\n      svg * {\r\n        fill: ${({ theme }) => theme?.action?.active};\r\n      }\r\n      border-color: ${({ theme }) => theme?.action?.active};\r\n    }\r\n  }\r\n`;\r\n\r\nconst TILES = [\r\n  /*{\r\n    link: \"/browse\",\r\n    iconId: IconId.Browse,\r\n    text: \"Browse Chords & Scales\",\r\n  },\r\n  {\r\n    link: \"/view/fretboard\",\r\n    iconId: IconId.Guitar,\r\n    text: \"Customize Fretboard\",\r\n  },*/\r\n  {\r\n    link: getModelRoute(PresetType.Chord),\r\n    iconId: IconId.Browse,\r\n    text: \"Chords\",\r\n  },\r\n  {\r\n    link: getModelRoute(PresetType.Scale),\r\n    iconId: IconId.Browse,\r\n    text: \"Scales\",\r\n  },\r\n  {\r\n    link: \"RANDOM\",\r\n    iconId: IconId.Dice,\r\n    text: \"Random Page\",\r\n  },\r\n];\r\n\r\nconst HomeTiles: React.FC = () => {\r\n  const modelPath = useRandomModel();\r\n  return (\r\n    <StyledHomeTiles>\r\n      {TILES.map((tile) => {\r\n        const { link, iconId, text } = tile;\r\n        return (\r\n          <Link key={text} to={link === \"RANDOM\" ? modelPath : link}>\r\n            <Icon iconId={iconId} size={64} />\r\n            {text}\r\n          </Link>\r\n        );\r\n      })}\r\n    </StyledHomeTiles>\r\n  );\r\n};\r\n\r\nexport default HomeTiles;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n// @ts-ignore\r\nimport logoSrc from \"../../../../static/play_what_logo_web.png\";\r\nimport { MediaQuery } from \"../../styles/breakpoint\";\r\nimport PageLayout from \"../shared/layout/PageLayout\";\r\nimport HomeGrid from \"./home/HomeGrid\";\r\nimport HomeTiles from \"./home/HomeTiles\";\r\n\r\nconst StyledHomePage = styled(PageLayout)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  .logo {\r\n    display: block;\r\n    width: 256px;\r\n    margin: 16px auto;\r\n    ${MediaQuery.Tablet} {\r\n      width: 512px;\r\n      margin: 32px auto;\r\n    }\r\n    ${MediaQuery.Desktop} {\r\n      width: 768px;\r\n      margin: 48px auto;\r\n    }\r\n  }\r\n\r\n  .intro {\r\n    max-width: 768px;\r\n    color: ${({ theme }) => theme?.text?.primary};\r\n    text-align: center;\r\n    line-height: 120%;\r\n    font-size: 120%;\r\n    margin: 32px auto;\r\n    ${MediaQuery.Tablet} {\r\n      font-size: 140%;\r\n    }\r\n    ${MediaQuery.Desktop} {\r\n      font-size: 160%;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Page: React.FC = () => {\r\n  return (\r\n    <StyledHomePage isHome>\r\n      <img src={logoSrc} className=\"logo\" />\r\n      <p className=\"intro\">Every chord. Every scale. Every key.</p>\r\n      <HomeTiles />\r\n      {/*<HomeGrid /> */}\r\n    </StyledHomePage>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n","import {\r\n  ChordId,\r\n  CHORD_PRESETS,\r\n  CHORD_PRESET_MAP,\r\n  IChordPreset,\r\n} from \"./Chord.constants\";\r\nimport { PresetType } from \"./Core.constants\";\r\nimport { IntervalId, INTERVAL_PRESET_MAP } from \"./Interval.constants\";\r\nimport { NoteId, NOTE_PRESET_MAP } from \"./Note.constants\";\r\nimport {\r\n  IScalePreset,\r\n  ScaleId,\r\n  SCALE_PRESETS,\r\n  SCALE_PRESET_MAP,\r\n} from \"./Scale.constants\";\r\n\r\nexport type AnyPodListPreset = IChordPreset | IScalePreset;\r\n\r\nexport const POD_LIST_PRESETS: AnyPodListPreset[] = [\r\n  ...SCALE_PRESETS,\r\n  ...CHORD_PRESETS,\r\n];\r\n\r\nexport type PresetId = NoteId | IntervalId | ChordId | ScaleId;\r\n\r\nexport const getPreset = (presetType?: PresetType, presetId?: PresetId) => {\r\n  switch (presetType) {\r\n    case PresetType.Note:\r\n      return NOTE_PRESET_MAP.get(presetId as NoteId);\r\n    case PresetType.Interval:\r\n      return INTERVAL_PRESET_MAP.get(presetId as IntervalId);\r\n    case PresetType.Chord:\r\n      return CHORD_PRESET_MAP.get(presetId as ChordId);\r\n    case PresetType.Scale:\r\n      return SCALE_PRESET_MAP.get(presetId as ScaleId);\r\n  }\r\n};\r\n\r\n// export const logPresetJson = () => {\r\n//   console.log(\"pw-presets notes\", JSON.stringify(NOTE_PRESETS));\r\n//   console.log(\"pw-presets intervals\", JSON.stringify(INTERVAL_PRESETS));\r\n//   console.log(\"pw-presets chords\", JSON.stringify(CHORD_PRESETS));\r\n//   console.log(\"pw-presets scales\", JSON.stringify(SCALE_PRESETS));\r\n// };\r\n","import { PresetType } from \"./Core.constants\";\r\nimport { PresetId } from \"./Core.derived\";\r\nimport { NoteId } from \"./Note.constants\";\r\n\r\nexport const getModelRoute = (\r\n  presetType: PresetType,\r\n  presetId?: PresetId,\r\n  rootId?: NoteId\r\n) => {\r\n  const modelSuffix = presetId ? `/${presetId}` : \"\";\r\n  const rootSuffix = rootId ? `/root/${rootId}` : \"\";\r\n\r\n  return `/browse/${presetType}${modelSuffix}${rootSuffix}/`;\r\n};\r\n"],"names":["modelPath","setModelPath","useState","useEffect","id","setInterval","root","NOTE_PRESETS","Math","floor","random","structure","POD_LIST_PRESETS","route","getModelRoute","PresetType","presetId","clearInterval","StyledHomeTiles","styled","MediaQuery","_ref","theme","surface","_theme$surface","card","_ref2","action","_theme$action","interactive","_ref3","_theme$action2","_ref4","_theme$action3","_ref5","_theme$action4","active","_ref6","_theme$action5","TILES","link","iconId","IconId","text","useRandomModel","React","map","tile","Link","key","to","Icon","size","StyledHomePage","PageLayout","displayName","componentId","_theme$text","primary","isHome","src","logoSrc","className","HomeTiles","SCALE_PRESETS","CHORD_PRESETS","getPreset","presetType","NOTE_PRESET_MAP","INTERVAL_PRESET_MAP","CHORD_PRESET_MAP","SCALE_PRESET_MAP","rootId"],"sourceRoot":""}