{"version":3,"file":"component---src-pages-view-index-tsx-f488998d94dfc47b4307.js","mappings":"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","sources":["webpack://play-what/./src/components/layout/PageBody.tsx","webpack://play-what/./src/components/pages/view/CardSection.tsx","webpack://play-what/./src/components/inputs/ColorSchemeInput.tsx","webpack://play-what/./src/components/pages/view/NotesCol.tsx","webpack://play-what/./src/components/pages/view/ViewPage.tsx","webpack://play-what/./src/pages/view/index.tsx","webpack://play-what/./src/viewers/fretboard/Fretboard.styles.tsx","webpack://play-what/./src/viewers/fretboard/FretLabel.tsx","webpack://play-what/./src/viewers/fretboard/Fretboard.tsx","webpack://play-what/./src/viewers/fretboard/Fretboard.tuning.ts","webpack://play-what/./src/viewers/fretboard/Fretboard.utils.ts","webpack://play-what/./src/viewers/keyboard/Keyboard.defaults.ts","webpack://play-what/./src/viewers/keyboard/Keyboard.styles.tsx","webpack://play-what/./src/viewers/keyboard/KeyboardKey.tsx","webpack://play-what/./src/viewers/keyboard/Keyboard.tsx"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const StyledPageBody = styled.div`\r\n\twidth: 100%;\r\n\t//max-width: 1920px;\r\n\tmax-width: 1024px;\r\n\tmin-height: calc(100vh - 96px);\r\n    \r\n\tmargin: auto;\r\n\tpadding: 16px;\r\n`\r\n","import styled from 'styled-components';\r\nimport React from \"react\";\r\n\r\nconst StyledCardSection = styled.div`\r\n    h3 {\r\n        text-transform: uppercase;\r\n        font-size: 80%;\r\n        margin-bottom: 8px;\r\n        color: ${props => props.theme.text.secondary};\r\n    }\r\n    & > .content {\r\n        background: ${props => props.theme.surface.bg};\r\n        border-radius: 8px;\r\n        padding: 8px;\r\n    }\r\n`;\r\n\r\nconst CardSection = ({ title, children }) => {\r\n    return (\r\n        <StyledCardSection>\r\n            <h3>{title}</h3>\r\n            <div className=\"content\">\r\n                {children}\r\n            </div>\r\n        </StyledCardSection>\r\n    );\r\n}\r\n\r\nexport default CardSection;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nconst StyledColorSchemeInput = styled.div`\r\n\tpadding: 4px 8px;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-end;\r\n    gap: 4px;\r\n\r\n    & > div {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        gap: 4px;\r\n        font-size: 80%;\r\n        color: ${props => props.theme.text.secondary};\r\n    }\r\n\r\n    input {\r\n        height: 32px;\r\n        width: 32px;\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\ninterface IColorSchemeInputProps {\r\n    value: string[];\r\n    setValue: Function;\r\n    labelFn: Function;\r\n}\r\n\r\nconst ColorSchemeInput: React.FC<IColorSchemeInputProps> = props => {\r\n    const { value, setValue, labelFn } = props;\r\n\r\n    return (\r\n        <StyledColorSchemeInput>\r\n            {value.map((v, i) => (\r\n                <div>\r\n                    <input type=\"color\"\r\n                        value={v}\r\n                        onChange={e => setValue([...value.slice(0, i), e.target.value, ...value.slice(i + 1)])}\r\n                    />\r\n                    <label>\r\n                        {labelFn(i)}\r\n                    </label>\r\n                </div>\r\n            ))}\r\n        </StyledColorSchemeInput>\r\n    );\r\n}\r\n\r\nexport default ColorSchemeInput;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport { ColorScheme, COLOR_SCHEMES, IColorScheme } from \"../../../core/color/Color.utils\";\r\nimport Chord from \"../../../core/models/Chord\";\r\nimport { ChordId, IModelConfig, ModelId, ModelType, NoteId, ScaleId } from \"../../../core/models/Model.constants\";\r\nimport { CHORD_PRESETS, NOTE_PRESETS, SCALE_PRESETS } from \"../../../core/models/Model.presets\";\r\nimport Note from \"../../../core/models/Note\";\r\nimport Scale from \"../../../core/models/Scale\";\r\nimport ColorSchemeInput from \"../../inputs/ColorSchemeInput\";\r\nimport DropdownInput from \"../../inputs/DropdownInput\";\r\nimport InputRow from \"../../ui/InputRow\";\r\nimport CardSection from \"./CardSection\";\r\n\r\nconst StyledNotesCol = styled.div`\r\n    display: grid;\r\n    gap: 16px;\r\n    grid-template-columns: 1fr;\r\n`;\r\n\r\nexport const MODEL_TYPE_OPTIONS = [\r\n    {\r\n        id: ModelType.Chord,\r\n        name: 'Chords',\r\n        value: ModelType.Chord,\r\n        data: CHORD_PRESETS\r\n    },\r\n    {\r\n        id: ModelType.Scale,\r\n        name: 'Scales',\r\n        value: ModelType.Scale,\r\n        data: SCALE_PRESETS\r\n    }\r\n]\r\n\r\nexport interface INotesColProps {\r\n    modelType: typeof MODEL_TYPE_OPTIONS[0];\r\n    modelConfig;\r\n    root: IModelConfig | any;\r\n    model: Chord | Scale;\r\n    setModelType?;\r\n    setModelConfig?;\r\n    setRoot?;\r\n    setModel?;\r\n    colorScheme: IColorScheme;\r\n    setColorScheme;\r\n    colorConfig: string[];\r\n    setColorConfig;\r\n}\r\n\r\nexport const DEFAULT_MODEL_TYPE = MODEL_TYPE_OPTIONS[0];\r\nexport const DEFAULT_MODEL_CONFIG = MODEL_TYPE_OPTIONS[0].data[0];\r\nexport const DEFAULT_ROOT = NOTE_PRESETS[0];\r\n//export const DEFAULT_MODEL = new Chord(DEFAULT_MODEL_CONFIG.modelId, { root: Note.fromId(DEFAULT_ROOT.modelId) })\r\n\r\nexport const getNewModel = (modelType: ModelType, modelId: ModelId, root: NoteId) => {\r\n    let newModel;\r\n    if (modelType === ModelType.Chord) {\r\n        newModel = new Chord(modelId as ChordId, { root: Note.fromId(root) })\r\n    }\r\n    else if (modelType === ModelType.Scale) {\r\n        newModel = new Scale(modelId as ScaleId, { root: Note.fromId(root) })\r\n    }\r\n    return newModel;\r\n}\r\n\r\nconst NotesCol: React.FC<INotesColProps> = props => {\r\n\r\n    const { modelType, modelConfig, root, setModelType: _setModelType, setModelConfig: _setModelConfig, setRoot: _setRoot, model, setModel, colorScheme, setColorScheme, colorConfig, setColorConfig } = props;\r\n    const modelOptions = modelType.data;\r\n\r\n    const setModelType = type => {\r\n        _setModelType(type);\r\n        _setModelConfig(type.data[0])\r\n    }\r\n    const setModelConfig = config => {\r\n        let newModel = getNewModel(config.modelType, config.modelId, root.modelId);\r\n        _setModelConfig(config);\r\n        setModel(newModel);\r\n    }\r\n    const setRoot = newRoot => {\r\n        let newModel = getNewModel(modelConfig.modelType, modelConfig.modelId, newRoot.modelId);\r\n        _setRoot(newRoot);\r\n        setModel(newModel);\r\n    }\r\n\r\n    //console.log('dpb', MODEL_TYPE_OPTIONS, modelType, modelOptions, modelConfig)\r\n\r\n    return (\r\n        <StyledNotesCol>\r\n            <CardSection title=\"Root\" >\r\n                <ul>\r\n                    <li>\r\n                        <InputRow label=\"Key Center\">\r\n                            <DropdownInput value={root} setValue={setRoot} options={NOTE_PRESETS} idProperty=\"modelId\" />\r\n                        </InputRow>\r\n                    </li>\r\n                </ul>\r\n            </CardSection>\r\n            <CardSection title=\"Intervals\" >\r\n                <ul>\r\n                    <li>\r\n                        <InputRow label=\"Model Type\">\r\n                            <DropdownInput value={modelType} setValue={setModelType} options={MODEL_TYPE_OPTIONS} idProperty=\"id\" />\r\n                        </InputRow>\r\n                    </li>\r\n                    <li>\r\n                        <InputRow label=\"Preset\">\r\n                            <DropdownInput value={modelConfig} setValue={setModelConfig} options={modelOptions} idProperty=\"modelId\" />\r\n                        </InputRow>\r\n                    </li>\r\n                </ul>\r\n            </CardSection>\r\n            <CardSection title=\"Colors\" >\r\n                <ul>\r\n                    <li>\r\n                        <InputRow label=\"Color Scheme\">\r\n                            <DropdownInput value={colorScheme} setValue={setColorScheme} options={COLOR_SCHEMES} idProperty=\"id\" />\r\n                        </InputRow>\r\n                    </li>\r\n                    <li>\r\n                        <InputRow label=\"Color Config\">\r\n                            <ColorSchemeInput value={colorConfig} setValue={setColorConfig} labelFn={colorScheme.labelFn} />\r\n                        </InputRow>\r\n                    </li>\r\n                </ul>\r\n            </CardSection>\r\n        </StyledNotesCol>\r\n    );\r\n};\r\n\r\nexport default NotesCol;\r\n","import { Link } from \"gatsby\";\r\nimport React from \"react\";\r\nimport styled from 'styled-components';\r\nimport { ChordId, ModelType, NoteId } from \"../../../core/models/Model.constants\";\r\nimport Fretboard from \"../../../viewers/fretboard/Fretboard\";\r\nimport { TuningId, TUNING_PRESET_MAP } from \"../../../viewers/fretboard/Fretboard.tuning\";\r\nimport Keyboard from \"../../../viewers/keyboard/Keyboard\";\r\nimport DEFAULT_KEYBOARD_PROPS from \"../../../viewers/keyboard/Keyboard.defaults\";\r\nimport ColumnManager, { StyledColumnManager } from \"../../column-manager/ColumnManager\";\r\nimport { StyledPageBody } from \"../../layout/PageBody\";\r\nimport PageTitle from \"../../layout/PageTitle\";\r\nimport Card, { StyledCard } from \"../../ui/Card\";\r\nimport { getNewModel } from \"./NotesCol\";\r\n\r\nconst StyledViewPage = styled(StyledPageBody)`\r\n    ${StyledColumnManager} {\r\n        margin-top: 16px;\r\n    }\r\n\r\n    ${StyledCard} {\r\n        background-color: ${props => props.theme.surface.card};\r\n        border: 1px solid ${props => props.theme.status.interactive};\r\n        &:hover {\r\n            border-color: ${props => props.theme.status.active};\r\n        }\r\n\r\n        .fretboard, .keyboard {\r\n            margin: 0;\r\n            & + a {\r\n                padding-top: 16px;\r\n                font-size: 150%;\r\n                font-weight: bold;\r\n                display: block;\r\n                text-align: right;\r\n\r\n                \r\n            }\r\n        }\r\n        .text {\r\n            color: ${props => props.theme.text.secondary};\r\n            margin: 16px 0;\r\n        }\r\n        \r\n    }\r\n`;\r\n\r\nconst COMMON_MODEL = getNewModel(ModelType.Chord, ChordId.MajTriad, NoteId.C);\r\n\r\nconst COMMON_FRETBOARD_PROPS = {\r\n    model: COMMON_MODEL,\r\n    showFretNumbers: false,\r\n    showFretDots: false\r\n}\r\n\r\nconst ViewPage: React.FC<any> = () => {\r\n\r\n    return (\r\n        <StyledViewPage>\r\n            <PageTitle title=\"Instruments\" subtitle=\"Choose an instrument type\" />\r\n            <ColumnManager desktop={['1fr', '1fr']} >\r\n                <Link to='/view/fretboard/'>\r\n                    <Card title=\"Fretboard\">\r\n                        <div className=\"text\">\r\n                            Guitar, Bass, Mandolin, etc...\r\n                        </div>\r\n                        <Fretboard\r\n                            {...COMMON_FRETBOARD_PROPS}\r\n                            tuning={TUNING_PRESET_MAP.get(TuningId.Standard).value}\r\n                        />\r\n                    </Card>\r\n                </Link>\r\n                <Link to='/view/keyboard/'>\r\n                    <Card title=\"Keyboard\">\r\n                        <div className=\"text\">\r\n                            Piano, Synthesizer, etc...\r\n                        </div>\r\n                        <Keyboard\r\n                            model={COMMON_MODEL}\r\n                            keyRange={DEFAULT_KEYBOARD_PROPS.keyRange as [number, number]}\r\n                        />\r\n                    </Card>\r\n                </Link>\r\n            </ColumnManager>\r\n        </StyledViewPage >\r\n    )\r\n};\r\n\r\nexport default ViewPage;\r\n","import ViewPage from \"../../components/pages/view/ViewPage\";\r\n\r\nexport default ViewPage;\r\n","import styled from 'styled-components';\r\n\r\nconst StyledFretboard = styled.div`\r\n    display: inline-grid;\r\n\twidth: 100%;\r\n\tbackground-image: radial-gradient(ellipse, #E8DBB8 0%, #D0B27C 100%);\r\n\tfont-size: 90%;\r\n\tmargin: 16px 0;\r\n\r\n    .fret {\r\n        display: inline-flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        position: relative;\r\n        border-right: 2px solid darkgrey;\r\n    }\r\n\r\n    .fret.open {\r\n        border-right: 3px solid grey;\r\n        background-color: #D0B27C;;\r\n    }\r\n\r\n    /* Used to maintain aspect ratio */\r\n\r\n    .fret::before {\r\n        content: \"\";\r\n        display: block;\r\n        height: 0;\r\n        width: 0;\r\n        margin-top: calc(1/2 * 100%);\r\n    }\r\n\r\n    /* Fret String */\r\n\r\n    .fret-string {\r\n        border-top: 1px solid grey;\r\n        width: 100%;\r\n    }\r\n\r\n    /* Fret Numbers */\r\n\r\n    .fret-number {\r\n        position: absolute;\r\n        bottom: 100%;\r\n    }\r\n\r\n    /* Fret Dots */\r\n\r\n    .fret-dots {\r\n        position: absolute;\r\n        top: 95%;\r\n        font-size: 16px;\r\n        white-space: nowrap;\r\n    }\r\n\r\n    .fret-number, .fret-dots {\r\n        color: #888;\r\n    }\r\n`;\r\n\r\nexport default StyledFretboard;\r\n","\r\nimport * as React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { IFretProps } from \"./Fretboard.utils\";\r\n\r\nconst StyledFretLabel = styled.div`\r\n\tposition: absolute;\r\n\theight: 60%;\r\n\taspect-ratio: 1;\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\tborder-radius: 100%;\r\n\tbackground-color: ${({ $bgColor }) => $bgColor ? $bgColor : 'transparent'};\r\n\tcolor: ${({ $fgColor }) => $fgColor ? $fgColor : ''};\r\n\r\n\t/*cursor: pointer;\r\n\t&:hover {\r\n\t\theight: 80%;\r\n\t}*/\r\n`;\r\n\r\n\r\nconst FretLabel: React.FC<IFretProps> = props => {\r\n\r\n\tconst bgColor = props.colorMapFn(props);\r\n\r\n\tlet fgColor = 'white';\r\n\r\n\treturn (\r\n\t\t<StyledFretLabel $bgColor={bgColor} $fgColor={fgColor} onClick={null} className=\"fret-label\">\r\n\t\t\t{null}\r\n\t\t</StyledFretLabel>\r\n\t);\r\n};\r\n\r\nexport default FretLabel;\r\n","import * as React from \"react\";\r\nimport StyledFretboard from \"./Fretboard.styles\";\r\nimport { DEFAULT_FRETBOARD_PROPS, getDotsForFret, getFretRatios, IFretboardProps, IFretProps } from \"./Fretboard.utils\";\r\nimport FretLabel from \"./FretLabel\";\r\n\r\nexport const Fret: React.FC<IFretProps> = props => {\r\n\r\n\tconst { tuning, stringIndex, fretIndex, showFretNumbers, showFretDots } = props;\r\n\r\n\tconst classes = ['fret'];\r\n\tif (fretIndex === 0)\r\n\t\tclasses.push('open');\r\n\r\n\tconst isLowString = stringIndex === tuning.length - 1;\r\n\tconst isHighString = stringIndex === 0;\r\n\r\n\treturn (\r\n\t\t<div className={classes.join(' ')}>\r\n\t\t\t<div className=\"fret-number\">\r\n\t\t\t\t{showFretNumbers && isHighString && fretIndex > 0 && fretIndex}\r\n\t\t\t</div>\r\n\t\t\t<div className='fret-string' />\r\n\t\t\t<FretLabel {...props} />\r\n\t\t\t<div className=\"fret-dots\">\r\n\t\t\t\t{showFretDots && isLowString && fretIndex > 0 && getDotsForFret(fretIndex)}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst getFrets = (props: IFretboardProps) => {\r\n\tconst { fretRange, tuning } = props;\r\n\tconst [lo, hi] = fretRange;\r\n\r\n\tconst allFrets = [];\r\n\tfor (let s = 0; s < tuning.length; s++) {\r\n\t\tfor (let f = lo; f <= hi; f++) {\r\n\t\t\tallFrets.push(\r\n\t\t\t\t<Fret\r\n\t\t\t\t\tkey={`s${s}-f${f}`}\r\n\t\t\t\t\tstringIndex={s}\r\n\t\t\t\t\tfretIndex={f}\r\n\t\t\t\t\ttuning={tuning}\r\n\t\t\t\t\t{...props}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\treturn allFrets;\r\n};\r\n\r\nconst Fretboard: React.FC<IFretboardProps> = (userProps) => {\r\n\tconst props = { ...DEFAULT_FRETBOARD_PROPS, ...userProps };\r\n\r\n\tconst [lo, hi] = props.fretRange;\r\n\tconst numFrets = hi - lo + 1;\r\n\tconst numStrings = props.tuning.length;\r\n\tconst gridTemplateColumns = getFretRatios(numFrets).map(n => n + 'fr').join(' ');\r\n\tconst gridTemplateRows = `repeat(${numStrings}, 1fr)`;\r\n\tconst fretboardStyles = {\r\n\t\tgridTemplateColumns,\r\n\t\tgridTemplateRows\r\n\t};\r\n\r\n\treturn (\r\n\t\t<StyledFretboard className='fretboard' style={fretboardStyles}>\r\n\t\t\t{getFrets(props)}\r\n\t\t</StyledFretboard>\r\n\t);\r\n};\r\n\r\nexport default Fretboard;\r\n","import ArrayUtils from \"../../core/general/Array.utils\";\r\nimport Note from '../../core/models/Note';\r\nimport { NoteId } from './../../core/models/Model.constants';\r\n\r\nexport enum TuningId {\r\n    Standard = 'standard',\r\n    StandardSeven = 'standard-seven',\r\n    StandardBass = 'standard-bass',\r\n    Flat = 'flat',\r\n    DoubleFlat = 'double-flat',\r\n    DropD = 'drop-d',\r\n    DADGAD = 'dadgad',\r\n    Banjo = 'banjo',\r\n    Violin = 'violin',\r\n    OpenA = 'open-a',\r\n    OpenB = 'open-b',\r\n    OpenC = 'open-c',\r\n    OpenD = 'open-d',\r\n    OpenE = 'open-e',\r\n    OpenF = 'open-f',\r\n    OpenG = 'open-g',\r\n}\r\n\r\nexport interface ITuning {\r\n    id: TuningId;\r\n    name: string;\r\n    value: number[]\r\n}\r\n\r\nconst formatPreset = (id: TuningId, name: string, value: number[]): ITuning => ({\r\n    id,\r\n    name,\r\n    value\r\n});\r\n\r\nconst getPitch = (noteId: NoteId, octave: number): number => Note.getNote(noteId, octave).pod[0];\r\n\r\nexport const TUNING_PRESET_MAP = new Map<TuningId, ITuning>([\r\n    [TuningId.Standard, formatPreset(\r\n        TuningId.Standard,\r\n        'Standard Guitar',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.Flat, formatPreset(\r\n        TuningId.Flat,\r\n        'Flat Gtr',\r\n        [\r\n            getPitch(NoteId.Eb, 5),\r\n            getPitch(NoteId.Bb, 4),\r\n            getPitch(NoteId.Gb, 4),\r\n            getPitch(NoteId.Db, 4),\r\n            getPitch(NoteId.Ab, 3),\r\n            getPitch(NoteId.Eb, 3)\r\n        ]\r\n    )],\r\n    [TuningId.DoubleFlat, formatPreset(\r\n        TuningId.DoubleFlat,\r\n        'Double Flat Gtr',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.F, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.StandardSeven, formatPreset(\r\n        TuningId.StandardSeven,\r\n        'Standard 7-String Gtr',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3),\r\n            getPitch(NoteId.B, 3)\r\n        ]\r\n    )],\r\n    [TuningId.StandardBass, formatPreset(\r\n        TuningId.StandardBass,\r\n        'Standard Bass',\r\n        [\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3),\r\n            getPitch(NoteId.A, 2),\r\n            getPitch(NoteId.E, 2)\r\n        ]\r\n    )],\r\n    [TuningId.DropD, formatPreset(\r\n        TuningId.DropD,\r\n        'Drop D Gtr',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.DADGAD, formatPreset(\r\n        TuningId.DADGAD,\r\n        'DADGAD',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    // Unconfirmed\r\n    /*[TuningId.Banjo, formatPreset(\r\n        TuningId.Banjo,\r\n        'Banjo',\r\n        [\r\n            getPitch(NoteId.G, 5),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],*/\r\n    // Unconfirmed\r\n    [TuningId.Violin, formatPreset(\r\n        TuningId.Violin,\r\n        'Violin',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 4)\r\n        ]\r\n    )],\r\n    [TuningId.OpenA, formatPreset(\r\n        TuningId.OpenA,\r\n        'Open A',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.E, 4),\r\n            getPitch(NoteId.Cs, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenB, formatPreset(\r\n        TuningId.OpenB,\r\n        'Open B',\r\n        [\r\n            getPitch(NoteId.Ds, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Fs, 4),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Fs, 3),\r\n            getPitch(NoteId.B, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenC, formatPreset(\r\n        TuningId.OpenC,\r\n        'Open C',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.C, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenD, formatPreset(\r\n        TuningId.OpenD,\r\n        'Open D',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.Fs, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenE, formatPreset(\r\n        TuningId.OpenE,\r\n        'Open E',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Gs, 4),\r\n            getPitch(NoteId.E, 4),\r\n            getPitch(NoteId.B, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenF, formatPreset(\r\n        TuningId.OpenF,\r\n        'Open F',\r\n        [\r\n            getPitch(NoteId.F, 5),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.F, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.F, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenG, formatPreset(\r\n        TuningId.OpenG,\r\n        'Open G',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )]\r\n]);\r\n\r\nexport const FRETBOARD_TUNING_VALUES = ArrayUtils.mapToArray(TUNING_PRESET_MAP);\r\n","import Chord from '../../core/models/Chord';\r\nimport IntervalSpan from '../../core/models/Interval';\r\nimport { IModelConfig } from '../../core/models/Model.constants';\r\nimport Note from '../../core/models/Note';\r\nimport Scale from '../../core/models/Scale';\r\nimport { ITuning, TuningId, TUNING_PRESET_MAP } from './Fretboard.tuning';\r\nimport { IVoicing } from './Fretboard.voicing';\r\n\r\nexport interface IFretLabelProps {\r\n\tnote?: Note;\r\n\tcolor?: string;\r\n\tfreq?: number;\r\n}\r\n\r\nexport interface IFretboardProps {\r\n\tfretRange?: [number, number];\r\n\tshowFretDots?: boolean;\r\n\tshowFretNumbers?: boolean;\r\n\tcolorMapFn?: (fretProps: IFretProps) => string | undefined;\r\n\tvoicing?: IVoicing,\r\n\ttuning?: number[]; // ITuning,\r\n\tmodel?: Chord | Scale;\r\n}\r\n\r\nexport interface IFretProps extends IFretboardProps {\r\n\tstringIndex: number;\r\n\tfretIndex: number;\r\n}\r\n\r\nexport const DOTTED_FRET_INDICES = [true, false, false, true, false, true, false, true, false, true, false, false];\r\n\r\nexport const FRET_SIZE_RATIO = Math.pow((1 / 2), (1 / 12));\r\n\r\nexport const isIntervalInVoicing = (interval: IntervalSpan, voicing: IVoicing, stringIndex: number) => {\r\n\tif (!voicing || !voicing.value) return true;\r\n\tconst v = voicing.value[stringIndex];\r\n\tconst d = interval.getDegree();\r\n\tif (Array.isArray(v)) {\r\n\t\treturn v.some(n => doesVoicingValueMatch(d, n));\r\n\t}\r\n\telse if (typeof v === 'number') {\r\n\t\treturn doesVoicingValueMatch(d, v);\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nexport const getFretColor = (props: IFretProps): string | undefined => {\r\n\tconst { stringIndex, fretIndex, tuning, model, voicing } = props;\r\n\tconst noteIndex = tuning[stringIndex] + fretIndex;\r\n\tconst [interval, note] = model.tryGetPodPairAtPitch(noteIndex);\r\n\r\n\tif (!note) return;\r\n\r\n\tif (voicing && !isIntervalInVoicing(interval, voicing, stringIndex)) {\r\n\t\treturn `#00000033`\r\n\t}\r\n\r\n\treturn interval.getColor();\r\n}\r\n\r\nexport const DEFAULT_FRETBOARD_PROPS: IFretboardProps = {\r\n\tfretRange: [1, 12],\r\n\ttuning: TUNING_PRESET_MAP.get(TuningId.Standard).value,\r\n\tshowFretDots: true,\r\n\tshowFretNumbers: true,\r\n\tcolorMapFn: getFretColor\r\n};\r\n\r\nexport const getFretRatios = (numFrets: number): number[] => {\r\n\tconst ratios = [];\r\n\tfor (let i = 1; i <= numFrets; i++) {\r\n\t\tratios.push((i <= 1) ? 1 : ratios[i - 2] * FRET_SIZE_RATIO);\r\n\t}\r\n\treturn ratios;\r\n};\r\n\r\nexport const getDotsForFret = (fretNumber: number): string => {\r\n\tconst mod = fretNumber % 12;\r\n\tif (mod === 0)\r\n\t\treturn '• •';\r\n\telse if (DOTTED_FRET_INDICES[mod])\r\n\t\treturn '•';\r\n\treturn '';\r\n};\r\n\r\nconst doesVoicingValueMatch = (d: number, v: number) => {\r\n\treturn d + 1 === v;\r\n}\r\n","import Chord from \"../../core/models/Chord\";\r\nimport Scale from \"../../core/models/Scale\";\r\n\r\nexport enum KeyType {\r\n\tBlack = 'black',\r\n\tWhite = 'white'\r\n}\r\n\r\nexport interface IKeyboardProps {\r\n\tkeyRange: [number, number];\r\n\thideLabel?: boolean;\r\n\tmodel?: Chord | Scale;\r\n\tcolorMapFn?: (fretProps: IKeyboardKeyProps) => string | undefined;\r\n}\r\n\r\nexport interface IKeyboardKeyProps extends IKeyboardProps {\r\n\tnoteIndex: number;\r\n\tscale: number;\r\n\tkeyType: KeyType;\r\n}\r\n\r\nexport const BLACK_KEY_INDICES = [0, 2, 4, 5, 7, 9, 11];\r\n\r\nexport const getKeyColor = (props: IKeyboardKeyProps): string | undefined => {\r\n\tconst { noteIndex, model } = props;\r\n\r\n\tconst [interval, note] = model.tryGetPodPairAtPitch(noteIndex);\r\n\r\n\tif (!note) return;\r\n\r\n\treturn interval.getColor();\r\n}\r\n\r\nconst DEFAULT_KEYBOARD_PROPS = {\r\n\tkeyRange: [-12, 12],\r\n\tcolorMapFn: getKeyColor\r\n};\r\n\r\nexport default DEFAULT_KEYBOARD_PROPS;\r\n","import styled from 'styled-components';\r\n\r\nconst StyledKeyboard = styled.div`\r\n    display: inline-flex;\r\n\twidth: 100%;\r\n\t//min-width: 100px;\r\n    font-size: 12px;\r\n\ttext-align: center;\r\n\tfont-family: sans-serif;\r\n\tmargin: 16px 0;\r\n\r\n    .center {\r\n        text-align: center;\r\n    }\r\n\r\n    /* Key Container */\r\n\r\n    .white-key-container {\r\n        display: inline-block;\r\n    }\r\n\r\n    .black-key-container {\r\n        display: inline-block;\r\n        width: 0px;\r\n    }\r\n\r\n    /* Key */\r\n\r\n    .keyboard-key {\r\n        vertical-align: top;\r\n        position: relative;\r\n        display: inline-flex;\r\n        justify-content: center;\r\n        cursor: pointer;\r\n    }\r\n\r\n    .white-key {\r\n        box-shadow: 0 0 1px 1px black inset;\r\n        border-radius: 0 0 5% 5%;\r\n    }\r\n\r\n    /*.white-key:hover {\r\n        box-shadow: 0 0 1px 2px black inset;\r\n    }*/\r\n\r\n    .black-key {\r\n        box-shadow: 0 0 1px 2px #555 inset;\r\n        z-index: 10;\r\n        border-radius: 0 0 10% 10%;\r\n    }\r\n\r\n    /*.black-key:hover {\r\n        background-color: #333;\r\n        box-shadow: 0 0 1px 2px black inset;\r\n    }*/\r\n\r\n    /* Colors (applied only in absence of degree class) */\r\n\r\n    .white {\r\n        background-color: white;\r\n        color: black;\r\n    }\r\n\r\n    .black {\r\n        background-color: black;\r\n        color: white;\r\n    }\r\n\r\n\r\n    /* Label */\r\n\r\n    .white-key .keyboard-key-label {\r\n        position: absolute;\r\n        height: 100%;\r\n        width: 100%;\r\n        border-radius: 0 0 5% 5%;\r\n        box-shadow: 0 0 1px 1px black inset;\r\n\r\n        padding-bottom: 4px;\r\n        display: flex;\r\n        align-items: flex-end;\r\n        justify-content: center;\r\n    }\r\n\r\n    /*.white-key .keyboard-key-label:hover {\r\n        box-shadow: 0 0 1px 2px black inset;\r\n    }*/\r\n\r\n    .black-key .keyboard-key-label {\r\n        bottom: 105%;\r\n        position: absolute;\r\n        color: black;\r\n    }\r\n`;\r\n\r\nexport default StyledKeyboard;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport ColorUtils from \"../../core/color/Color.utils\";\r\nimport { IKeyboardKeyProps, KeyType } from './Keyboard.defaults';\r\n\r\n// Key dimensions relative to white key width\r\nconst KEY__DIMS = {\r\n\tWhW_WhH: 4.6875, // White key width to white key height\r\n\tWhW_BlW: 0.6250, // White key width to black key width\r\n\tWhW_BlH: 2.9688 // White key width to black hey height\r\n}\r\n\r\nconst getScaleStyles = (keyType, scale) => {\r\n\tswitch (keyType) {\r\n\t\tcase KeyType.White:\r\n\t\t\treturn {\r\n\t\t\t\twidth: scale + 'px',\r\n\t\t\t\theight: KEY__DIMS.WhW_WhH * scale + 'px'\r\n\t\t\t};\r\n\t\tcase KeyType.Black:\r\n\t\t\treturn {\r\n\t\t\t\twidth: KEY__DIMS.WhW_BlW * scale + 'px',\r\n\t\t\t\theight: KEY__DIMS.WhW_BlH * scale + 'px',\r\n\t\t\t\tright: .5 * KEY__DIMS.WhW_BlW * scale + 'px'\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn {\r\n\t\t\t\twidth: '0px',\r\n\t\t\t\theight: '0px'\r\n\t\t\t};\r\n\t}\r\n}\r\n\r\nconst StyledKey = styled.div`\r\n\tbackground-color: ${({ $color }) => $color ? $color : 'transparent'};\r\n\tcolor: ${({ $color }) => ColorUtils.getFgColor($color)};\r\n`;\r\n\r\nconst StyledKeyLabel = styled.div`\r\n\tcolor: ${({ $color }) => ColorUtils.getFgColor($color)};\r\n`;\r\n\r\nconst KeyboardKey: React.FC<IKeyboardKeyProps> = props => {\r\n\r\n\tconst { keyType, noteIndex, scale, hideLabel, model, colorMapFn } = props;\r\n\r\n\tconst bgColor = colorMapFn(props);\r\n\r\n\tconst scaleStyles = getScaleStyles(keyType, scale);\r\n\tconst classes = ['keyboard-key', `${keyType}-key`, keyType];\r\n\r\n\tconst colorStyles = {\r\n\t\tbackgroundColor: bgColor ? bgColor : ''\r\n\t}\r\n\r\n\tconst keyStyles = keyType === KeyType.White ? scaleStyles : { ...scaleStyles, ...colorStyles };\r\n\tconst labelStyles = keyType === KeyType.White ? colorStyles : {};\r\n\r\n\treturn (\r\n\t\t<StyledKey className={`${keyType}-key-container`}>\r\n\t\t\t<div className={classes.join(' ')} style={keyStyles} >\r\n\t\t\t\t<StyledKeyLabel className='keyboard-key-label' style={labelStyles} $color={bgColor}>\r\n\t\t\t\t\t{null}\r\n\t\t\t\t</StyledKeyLabel>\r\n\t\t\t</div>\r\n\t\t</StyledKey>\r\n\t);\r\n}\r\n\r\nexport default KeyboardKey;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport NumberUtils from \"../../core/general/Number.utils\";\r\nimport DEFAULT_PROPS, { BLACK_KEY_INDICES, IKeyboardProps, KeyType } from \"./Keyboard.defaults\";\r\nimport StyledKeyboard from \"./Keyboard.styles\";\r\nimport KeyboardKey from \"./KeyboardKey\";\r\n\r\nconst getKeyboardKeys = (props: IKeyboardProps, viewerWidth: number) => {\r\n\tconst { keyRange } = props;\r\n\tconst [lo, hi] = keyRange;\r\n\tconst keys = [];\r\n\r\n\tlet numBlackKeys = 0;\r\n\tlet numWhiteKeys = 0;\r\n\tfor (let i = lo; i <= hi; i++) {\r\n\t\tconst keyType = BLACK_KEY_INDICES.includes(NumberUtils.modulo(i, 12)) ? KeyType.White : KeyType.Black;\r\n\t\tif (keyType === KeyType.Black) { numBlackKeys++ } else { numWhiteKeys++; }\r\n\t}\r\n\r\n\tfor (let i = lo; i <= hi; i++) {\r\n\t\tconst keyType = BLACK_KEY_INDICES.includes(NumberUtils.modulo(i, 12)) ? KeyType.White : KeyType.Black;\r\n\r\n\t\tkeys.push(\r\n\t\t\t<KeyboardKey\r\n\t\t\t\tkeyType={keyType}\r\n\t\t\t\tkey={i}\r\n\t\t\t\tnoteIndex={i}\r\n\t\t\t\tscale={viewerWidth / numWhiteKeys}\r\n\t\t\t\t{...props}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n\treturn keys;\r\n}\r\n\r\nconst Keyboard: React.FC<IKeyboardProps> = (userProps) => {\r\n\r\n\tconst props = { ...DEFAULT_PROPS, ...userProps };\r\n\r\n\tconst [dims, setDims] = useState([128, 128]);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst resetDimensions = (e) => {\r\n\t\t\tconst el = document.getElementById('keyboard');\r\n\t\t\tsetDims([el.clientWidth, el.clientHeight])\r\n\t\t}\r\n\t\tresetDimensions(null);\r\n\t\twindow.addEventListener('resize', resetDimensions);\r\n\t\treturn () => window.removeEventListener('resize', resetDimensions);\r\n\t}, [])\r\n\r\n\treturn (\r\n\t\t<StyledKeyboard className='keyboard' id='keyboard'>\r\n\t\t\t{getKeyboardKeys(props, dims[0])}\r\n\t\t</StyledKeyboard>\r\n\t);\r\n}\r\n\r\nexport default Keyboard;\r\n"],"names":["StyledPageBody","styled","StyledCardSection","props","theme","text","secondary","surface","bg","title","children","React","className","StyledColorSchemeInput","value","setValue","labelFn","map","v","i","type","onChange","e","slice","target","StyledNotesCol","MODEL_TYPE_OPTIONS","id","ModelType","name","data","CHORD_PRESETS","SCALE_PRESETS","DEFAULT_MODEL_TYPE","DEFAULT_MODEL_CONFIG","DEFAULT_ROOT","NOTE_PRESETS","getNewModel","modelType","modelId","root","newModel","Chord","Note","Scale","modelConfig","_setModelType","setModelType","_setModelConfig","setModelConfig","_setRoot","setRoot","setModel","model","colorScheme","setColorScheme","colorConfig","setColorConfig","modelOptions","CardSection","InputRow","label","DropdownInput","newRoot","options","idProperty","config","COLOR_SCHEMES","ColorSchemeInput","StyledViewPage","withConfig","StyledColumnManager","StyledCard","card","status","interactive","active","COMMON_MODEL","ChordId","NoteId","COMMON_FRETBOARD_PROPS","showFretNumbers","showFretDots","PageTitle","subtitle","ColumnManager","desktop","Link","to","Card","Fretboard","tuning","TUNING_PRESET_MAP","TuningId","Keyboard","keyRange","DEFAULT_KEYBOARD_PROPS","StyledFretLabel","$bgColor","$fgColor","bgColor","colorMapFn","onClick","Fret","stringIndex","fretIndex","classes","push","isLowString","length","isHighString","join","FretLabel","getDotsForFret","userProps","DEFAULT_FRETBOARD_PROPS","fretRange","lo","numFrets","numStrings","fretboardStyles","gridTemplateColumns","getFretRatios","n","gridTemplateRows","StyledFretboard","style","hi","allFrets","s","f","key","getFrets","formatPreset","getPitch","noteId","octave","pod","Map","Standard","Flat","DoubleFlat","StandardSeven","StandardBass","DropD","DADGAD","Violin","OpenA","OpenB","OpenC","OpenD","OpenE","OpenF","OpenG","FRETBOARD_TUNING_VALUES","ArrayUtils","DOTTED_FRET_INDICES","FRET_SIZE_RATIO","Math","pow","isIntervalInVoicing","interval","voicing","d","getDegree","Array","isArray","some","doesVoicingValueMatch","noteIndex","tryGetPodPairAtPitch","getColor","ratios","fretNumber","mod","KeyType","BLACK_KEY_INDICES","KEY__DIMS","StyledKey","$color","ColorUtils","StyledKeyLabel","keyType","scale","hideLabel","scaleStyles","width","height","right","getScaleStyles","colorStyles","backgroundColor","keyStyles","labelStyles","DEFAULT_PROPS","useState","dims","setDims","useEffect","resetDimensions","el","document","getElementById","clientWidth","clientHeight","window","addEventListener","removeEventListener","StyledKeyboard","viewerWidth","keys","numWhiteKeys","NumberUtils","KeyboardKey","getKeyboardKeys"],"sourceRoot":""}