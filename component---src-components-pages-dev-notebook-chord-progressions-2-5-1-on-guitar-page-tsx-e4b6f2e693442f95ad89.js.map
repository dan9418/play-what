{"version":3,"file":"component---src-components-pages-dev-notebook-chord-progressions-2-5-1-on-guitar-page-tsx-e4b6f2e693442f95ad89.js","mappings":"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","sources":["webpack://play-what/./src/components/column-manager/ColumnManager.tsx","webpack://play-what/./src/components/inputs/DropdownInput.tsx","webpack://play-what/./src/components/pages/dev/notebook/chord-progressions/2-5-1-on-guitar.page.tsx","webpack://play-what/./src/components/ui/Card.tsx","webpack://play-what/./src/components/ui/InputRow.tsx","webpack://play-what/./src/components/ui/Table.tsx","webpack://play-what/./src/viewers/fret-table/FretFlag.tsx","webpack://play-what/./src/viewers/fret-table/FretTable.tsx","webpack://play-what/./src/viewers/fretboard/Fretboard.tuning.ts","webpack://play-what/./src/viewers/fretboard/Fretboard.utils.ts","webpack://play-what/./src/viewers/fretboard/Fretboard.voicing.ts"],"sourcesContent":["import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledColumnManager = styled.div`\r\n    display: grid;\r\n    gap: 16px;\r\n    grid-template-columns: 1fr;\r\n\r\n    ${({ $tablet }) => $tablet ? `\r\n        @media(min-width: 512px) {\r\n            grid-template-columns: ${$tablet.join(' ')}\r\n        }\r\n    ` : ''}\r\n\r\n    ${({ $desktop }) => $desktop ? `\r\n        @media(min-width: 1024px) {\r\n            grid-template-columns: ${$desktop.join(' ')}\r\n        }\r\n    ` : ``}\r\n   \r\n`;\r\n\r\nexport interface IColumnManagerProps {\r\n    tablet?: string[];\r\n    desktop?: string[];\r\n}\r\n\r\nconst ColumnManager: React.FC<any> = ({ children, tablet, desktop }) => {\r\n    return (\r\n        <StyledColumnManager $tablet={tablet} $desktop={desktop}>\r\n            {children}\r\n        </StyledColumnManager >\r\n    );\r\n};\r\n\r\nexport default ColumnManager;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nconst StyledDropdownInput = styled.select`\r\n\tfont-size: 110%;\r\n    min-width: 128px;\r\n\r\n\tpadding: 4px 8px;\r\n\r\n    cursor: pointer;\r\n    border-radius: 4px;\r\n\r\n\toption {\r\n\t\tcursor: pointer;\r\n\t}\r\n`;\r\n\r\ninterface IDropdownInputProps {\r\n\tvalue: any;\r\n\tsetValue: Function;\r\n\toptions: any[];\r\n\tidProperty?: string;\r\n\tdisplayProperty?: string;\r\n}\r\n\r\nconst DropdownInput: React.FC<IDropdownInputProps> = props => {\r\n\tconst { value, setValue, options, idProperty, displayProperty } = props;\r\n\r\n\treturn (\r\n\t\t<StyledDropdownInput\r\n\t\t\tclassName='dropdown-input'\r\n\t\t\tonChange={e => setValue(options[e.target.selectedIndex], e.target.selectedIndex)}\r\n\t\t\tvalue={value ? value[idProperty || 'id'] : ''}\r\n\t\t>\r\n\t\t\t{(options || []).map((v, i) => (\r\n\t\t\t\t<option key={i} value={v[idProperty || 'id']}>{displayProperty ? v[displayProperty] : v.name}</option>\r\n\t\t\t))}\r\n\t\t</StyledDropdownInput>\r\n\t);\r\n}\r\n\r\nexport default DropdownInput;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport ArrayUtils from \"../../../../../core/general/Array.utils\";\r\nimport Chord from \"../../../../../core/models/Chord\";\r\nimport {\r\n  ChordId,\r\n  NoteId,\r\n  ScaleId,\r\n} from \"../../../../../core/models/Model.constants\";\r\nimport {\r\n  NOTE_PRESETS,\r\n  NOTE_PRESET_MAP,\r\n} from \"../../../../../core/models/Model.presets\";\r\nimport Note from \"../../../../../core/models/Note\";\r\nimport Scale from \"../../../../../core/models/Scale\";\r\nimport FretTable from \"../../../../../viewers/fret-table/FretTable\";\r\nimport { IFretProps } from \"../../../../../viewers/fretboard/Fretboard.utils\";\r\nimport { VOICING_PRESET_MAP } from \"../../../../../viewers/fretboard/Fretboard.voicing\";\r\nimport ColumnManager from \"../../../../column-manager/ColumnManager\";\r\nimport DropdownInput from \"../../../../inputs/DropdownInput\";\r\nimport PageLayout from \"../../../../layout/PageLayout\";\r\nimport Card, { StyledCard } from \"../../../../ui/Card\";\r\nimport InputRow from \"../../../../ui/InputRow\";\r\n\r\nconst StyledCAGEDPage = styled(PageLayout)`\r\n  ${StyledCard} > table {\r\n    width: 100%;\r\n\r\n    > tbody > tr > td {\r\n      width: 33%;\r\n      padding: 24px 2px 16px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Page: React.FC<any> = () => {\r\n  const [rootPreset, setRootPreset] = useState(NOTE_PRESET_MAP.get(NoteId.C));\r\n\r\n  const root = new Note(rootPreset.value);\r\n  const majorScale = new Scale(ScaleId.Ionian, { root });\r\n  const minorScale = new Scale(ScaleId.Ionian, { root });\r\n\r\n  const majorItems = [\r\n    {\r\n      model: Chord,\r\n      modelId: ChordId.Min7,\r\n      rootId: majorScale.notes[1].modelId,\r\n      voicingId: null,\r\n    },\r\n    {\r\n      model: Chord,\r\n      modelId: ChordId.Dom7,\r\n      rootId: majorScale.notes[4].modelId,\r\n      voicingId: null,\r\n    },\r\n    {\r\n      model: Chord,\r\n      modelId: ChordId.Maj7,\r\n      rootId: majorScale.notes[0].modelId,\r\n      voicingId: null,\r\n    },\r\n  ];\r\n\r\n  const minorItems = [\r\n    {\r\n      model: Chord,\r\n      modelId: ChordId.HalfDim7,\r\n      rootId: minorScale.notes[2].modelId,\r\n      voicingId: null,\r\n    },\r\n    {\r\n      model: Chord,\r\n      modelId: ChordId.Min7,\r\n      rootId: minorScale.notes[4].modelId,\r\n      voicingId: null,\r\n    },\r\n    {\r\n      model: Chord,\r\n      modelId: ChordId.Min7,\r\n      rootId: minorScale.notes[0].modelId,\r\n      voicingId: null,\r\n    },\r\n  ];\r\n\r\n  const getColor = (fretProps: IFretProps) => {\r\n    const { stringIndex, fretIndex, tuning, model, voicing } = fretProps;\r\n    const noteIndex = tuning[stringIndex] + fretIndex;\r\n    const [interval, note] = model.tryGetPodPairAtPitch(noteIndex);\r\n\r\n    if (!note) return;\r\n\r\n    if (interval.pod[1] === 0) return \"red\";\r\n    if (interval.pod[1] === 2) return \"blue\";\r\n    if (interval.pod[1] === 4) return \"black\";\r\n    if (interval.pod[1] === 6) return \"black\";\r\n    return \"black\";\r\n  };\r\n\r\n  return (\r\n    <StyledCAGEDPage title=\"Chord Progressions\">\r\n      <ColumnManager>\r\n        <InputRow label=\"Root\">\r\n          <DropdownInput\r\n            options={NOTE_PRESETS}\r\n            value={rootPreset}\r\n            setValue={(p) => {\r\n              setRootPreset(p);\r\n            }}\r\n          />\r\n        </InputRow>\r\n        <Card title=\"Major II-V-I\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>II</th>\r\n                <th>V</th>\r\n                <th>I</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                {majorItems.map((item) => {\r\n                  const { model, modelId, rootId, voicingId } = item as any;\r\n                  const instance = new model(modelId, {\r\n                    root: Note.fromId(rootId),\r\n                  });\r\n\r\n                  return (\r\n                    <td key={modelId}>\r\n                      <h3>{modelId}</h3>\r\n                      <FretTable\r\n                        model={instance}\r\n                        voicing={\r\n                          voicingId\r\n                            ? VOICING_PRESET_MAP.get(voicingId)\r\n                            : undefined\r\n                        }\r\n                        colorMapFn={getColor}\r\n                        fretRange={[1, 14]}\r\n                      />\r\n                    </td>\r\n                  );\r\n                })}\r\n              </tr>\r\n              <tr>\r\n                {ArrayUtils.rotate([...majorItems], 1).map((item) => {\r\n                  const { model, modelId, rootId, voicingId } = item as any;\r\n                  const instance = new model(modelId, {\r\n                    root: Note.fromId(rootId),\r\n                  });\r\n\r\n                  return (\r\n                    <td key={modelId}>\r\n                      <h3>{modelId}</h3>\r\n                      <FretTable\r\n                        model={instance}\r\n                        voicing={\r\n                          voicingId\r\n                            ? VOICING_PRESET_MAP.get(voicingId)\r\n                            : undefined\r\n                        }\r\n                        colorMapFn={getColor}\r\n                        fretRange={[1, 14]}\r\n                      />\r\n                    </td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </Card>\r\n        <Card title=\"Minor ii-v-i\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>ii</th>\r\n                <th>v</th>\r\n                <th>i</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                {minorItems.map((item) => {\r\n                  const { model, modelId, rootId, voicingId } = item as any;\r\n                  const instance = new model(modelId, {\r\n                    root: Note.fromId(rootId),\r\n                  });\r\n\r\n                  return (\r\n                    <td key={modelId}>\r\n                      <h3>{modelId}</h3>\r\n                      <FretTable\r\n                        model={instance}\r\n                        voicing={\r\n                          voicingId\r\n                            ? VOICING_PRESET_MAP.get(voicingId)\r\n                            : undefined\r\n                        }\r\n                        colorMapFn={getColor}\r\n                        fretRange={[1, 14]}\r\n                      />\r\n                    </td>\r\n                  );\r\n                })}\r\n              </tr>\r\n              <tr>\r\n                {ArrayUtils.rotate([...minorItems], 1).map((item) => {\r\n                  const { model, modelId, rootId, voicingId } = item as any;\r\n                  const instance = new model(modelId, {\r\n                    root: Note.fromId(rootId),\r\n                  });\r\n\r\n                  return (\r\n                    <td key={modelId}>\r\n                      <h3>{modelId}</h3>\r\n                      <FretTable\r\n                        model={instance}\r\n                        voicing={\r\n                          voicingId\r\n                            ? VOICING_PRESET_MAP.get(voicingId)\r\n                            : undefined\r\n                        }\r\n                        colorMapFn={getColor}\r\n                        fretRange={[1, 14]}\r\n                      />\r\n                    </td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </Card>\r\n      </ColumnManager>\r\n    </StyledCAGEDPage>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledCard = styled.div`\r\n    background: ${props => props.theme.surface.card};\r\n    width: 100%;\r\n    border-radius: 16px;\r\n    padding: 16px;\r\n\r\n    .header {\r\n        margin-bottom: 16px;\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 8px;\r\n        justify-content: space-between;\r\n    }\r\n`;\r\n\r\nexport const CardHeader: React.FC<any> = ({ title, level = 2, action = null }) => {\r\n    const AsTag: any = `h${level}`;\r\n    return (\r\n        <div className=\"header\">\r\n            <AsTag>{title}</AsTag>\r\n            {action}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Card: React.FC<any> = ({ title, subtitle, action, children, level, ...rest }) => {\r\n    return (\r\n        <StyledCard {...rest}>\r\n            {title &&\r\n                <CardHeader title={title} action={action} level={level} />\r\n            }\r\n            {subtitle &&\r\n                <CardHeader title={subtitle} level={level + 1} />\r\n            }\r\n            {children}\r\n        </StyledCard >\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledInputRow = styled.div`\r\n    display: flex;\r\n    align-items: flex-start;\r\n    flex-direction: column;\r\n    width: 100%;\r\n\r\n    ${props => props.$y ? '' : `\r\n        @media(min-width: 512px) {\r\n            align-items: center;\r\n            flex-direction: row;\r\n            justify-content: space-between;\r\n            //margin-bottom: 8px;\r\n        }\r\n    `}\r\n\r\n    > label {\r\n        color: ${({ theme }) => theme.dark3};\r\n        font-weight: bold;\r\n        margin: 8px;\r\n        white-space: nowrap;\r\n    }\r\n`;\r\n\r\nconst InputRow = ({ label, children, y = false, ...rest }) => {\r\n    return (\r\n        <StyledInputRow $y={y} {...rest}>\r\n            <label>{label}</label>\r\n            <div>\r\n                {children}\r\n            </div>\r\n        </StyledInputRow>\r\n    );\r\n}\r\n\r\nexport default InputRow;\r\n","import { Link } from \"gatsby\";\r\nimport React, { Fragment, ReactNode } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledTable = styled.table``;\r\n\r\ntype TOmit = undefined | null | false;\r\n\r\nconst getIsTypeOmit = (data: any): data is TOmit =>\r\n  data === undefined || data === null || data === false;\r\n\r\n// Col\r\n\r\nexport interface IColConfig {\r\n  isHeader?: boolean;\r\n  content: any;\r\n  colSpan?: number;\r\n  className?: string;\r\n  link?: string;\r\n}\r\n\r\ninterface IColProps extends IColConfig {\r\n  index: number;\r\n}\r\n\r\ntype TCol = string | number | IColConfig | ReactNode;\r\n\r\nconst Col: React.FC<IColProps> = ({\r\n  index,\r\n  isHeader,\r\n  content,\r\n  colSpan,\r\n  className,\r\n  link,\r\n}) => {\r\n  const ColTag = isHeader ? \"th\" : \"td\";\r\n  const WrapperTag = link ? Link : Fragment;\r\n  const wrapperProps: any = link ? { to: link } : {};\r\n\r\n  return (\r\n    <ColTag colSpan={colSpan} className={className}>\r\n      <WrapperTag {...wrapperProps}>{content || \"\"}</WrapperTag>\r\n    </ColTag>\r\n  );\r\n};\r\n\r\n// Row\r\n\r\nexport interface IRowConfig {\r\n  cols: (TCol | TOmit)[];\r\n  className?: string;\r\n  isHeader?: boolean;\r\n  headerColIndicies?: number[];\r\n}\r\n\r\nconst getIsConfig = (col: TCol): col is IColConfig =>\r\n  typeof col === \"object\" && col !== null && col.hasOwnProperty(\"content\");\r\n\r\nconst Row: React.FC<IRowConfig> = ({\r\n  cols,\r\n  isHeader,\r\n  className,\r\n  headerColIndicies = [],\r\n}) => {\r\n  return (\r\n    <tr className={className}>\r\n      {cols.map((col: any, i) => {\r\n        if (getIsTypeOmit(col)) return null;\r\n        const isConfig = getIsConfig(col);\r\n        const colConfig = !isConfig ? { content: col } : col;\r\n        return (\r\n          <Col\r\n            key={i}\r\n            index={i}\r\n            isHeader={isHeader || headerColIndicies.includes(i)}\r\n            {...colConfig}\r\n          />\r\n        );\r\n      })}\r\n    </tr>\r\n  );\r\n};\r\n\r\n// Table Section\r\n\r\ninterface ITableSectionConfig {\r\n  Tag: \"thead\" | \"tfoot\" | \"tbody\";\r\n  rows: (IRowConfig | TOmit)[];\r\n  headerColIndicies?: number[];\r\n}\r\n\r\nconst TableSection: React.FC<ITableSectionConfig> = ({\r\n  Tag,\r\n  rows,\r\n  headerColIndicies,\r\n}) => (\r\n  <Tag>\r\n    {rows.map((row, i) => {\r\n      if (getIsTypeOmit(row)) return null;\r\n      return (\r\n        <Row\r\n          key={i}\r\n          isHeader={Tag !== \"tbody\"}\r\n          headerColIndicies={headerColIndicies}\r\n          {...row}\r\n        />\r\n      );\r\n    })}\r\n  </Tag>\r\n);\r\n\r\n// Table\r\n\r\ninterface IColGroup {\r\n  span?: number;\r\n  className?: string;\r\n}\r\n\r\ninterface ITableConfig {\r\n  thead?: (IRowConfig | TOmit)[];\r\n  tfoot?: (IRowConfig | TOmit)[];\r\n  tbody: (IRowConfig | TOmit)[];\r\n  styles?: any;\r\n  caption?: string;\r\n  colGroups?: IColGroup[];\r\n  className?: string;\r\n  headerColIndicies?: number[];\r\n}\r\n\r\nexport const Table: React.FC<ITableConfig> = ({\r\n  thead,\r\n  tfoot,\r\n  tbody,\r\n  styles,\r\n  colGroups,\r\n  caption,\r\n  headerColIndicies,\r\n  className,\r\n}) => {\r\n  return (\r\n    <StyledTable css={styles} className={className}>\r\n      {colGroups && (\r\n        <colgroup>\r\n          {colGroups.map((cg, i) => (\r\n            <col key={i} {...cg} />\r\n          ))}\r\n        </colgroup>\r\n      )}\r\n      {caption && <caption>{caption}</caption>}\r\n      {thead && (\r\n        <TableSection\r\n          Tag=\"thead\"\r\n          rows={thead}\r\n          headerColIndicies={headerColIndicies}\r\n        />\r\n      )}\r\n      {tfoot && (\r\n        <TableSection\r\n          Tag=\"tfoot\"\r\n          rows={tfoot}\r\n          headerColIndicies={headerColIndicies}\r\n        />\r\n      )}\r\n      {tbody && (\r\n        <TableSection\r\n          Tag=\"tbody\"\r\n          rows={tbody}\r\n          headerColIndicies={headerColIndicies}\r\n        />\r\n      )}\r\n    </StyledTable>\r\n  );\r\n};\r\n","import * as React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface IFretFlagProps {\r\n  color?: string;\r\n  text?: string | number;\r\n  opacity?: number;\r\n}\r\n\r\nexport const StyledFretFlag = styled.div<{\r\n  $color?: string;\r\n  $opacity?: number;\r\n}>`\r\n  height: 16px;\r\n  width: 16px;\r\n  background: ${(props) => props.$color || \"\"};\r\n  opacity: ${(props) => props.$opacity || 1};\r\n  border-radius: 100%;\r\n  z-index: 1;\r\n`;\r\n\r\nconst FretFlag: React.FC<IFretFlagProps> = ({ color, text, opacity }) => {\r\n  return (\r\n    <StyledFretFlag $color={color} $opacity={opacity}>\r\n      {text}\r\n    </StyledFretFlag>\r\n  );\r\n};\r\n\r\nexport default FretFlag;\r\n","import * as React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { IColConfig, IRowConfig, Table } from \"../../components/ui/Table\";\r\nimport {\r\n  DEFAULT_FRETBOARD_PROPS,\r\n  getDotsForFret,\r\n  IFretboardProps,\r\n} from \"../fretboard/Fretboard.utils\";\r\nimport FretFlag from \"./FretFlag\";\r\nconst StyledFretTable = styled.div``;\r\n\r\nconst tableStyles = css`\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  td,\r\n  th {\r\n    min-width: 18px;\r\n    text-align: center;\r\n  }\r\n  tbody td {\r\n    background-color: #e8dbb8;\r\n\r\n    border-right: 1px solid grey;\r\n    &:first-child {\r\n      border-left: 1px solid grey;\r\n    }\r\n    .fret-content {\r\n      min-height: 32px;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      position: relative;\r\n    }\r\n    .fret-string {\r\n      height: 1px;\r\n      background: #bbb;\r\n      width: 100%;\r\n      position: absolute;\r\n      margin: auto 0;\r\n    }\r\n  }\r\n  tbody tr {\r\n    &:first-child {\r\n      border-top: 1px solid grey;\r\n    }\r\n    &:last-child {\r\n      border-bottom: 1px solid grey;\r\n    }\r\n  }\r\n`;\r\n\r\nconst FretTable: React.FC<IFretboardProps> = (userProps) => {\r\n  const props = { ...DEFAULT_FRETBOARD_PROPS, ...userProps };\r\n\r\n  const { fretRange, showFretDots, showFretNumbers, tuning, colorMapFn } =\r\n    props;\r\n  const [lo, hi] = fretRange as [number, number];\r\n\r\n  const numFrets = hi - lo + 1;\r\n  const numStrings = (tuning as number[]).length;\r\n\r\n  const fretNums: number[] = [];\r\n  for (let i = 0; i < numFrets; i++) {\r\n    fretNums.push(lo + i);\r\n  }\r\n\r\n  const fretDots: string[] = [];\r\n  for (let i = 0; i < numFrets; i++) {\r\n    fretDots.push(getDotsForFret(lo + i));\r\n  }\r\n\r\n  const strings: IRowConfig[] = [];\r\n  for (let s = 0; s < numStrings; s++) {\r\n    const frets: IColConfig[] = [];\r\n    for (let f = lo; f <= hi; f++) {\r\n      frets.push({\r\n        content: (\r\n          <div className=\"fret-content\">\r\n            <div className=\"fret-string\" />\r\n            <FretFlag\r\n              color={(colorMapFn as any)({\r\n                stringIndex: s,\r\n                fretIndex: f,\r\n                ...props,\r\n              })}\r\n              text=\"\"\r\n              opacity={1}\r\n            />\r\n          </div>\r\n        ),\r\n      });\r\n    }\r\n    strings.push({\r\n      cols: frets,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <StyledFretTable>\r\n      <Table\r\n        thead={showFretNumbers ? [{ cols: fretNums }] : undefined}\r\n        tfoot={showFretDots ? [{ cols: fretDots }] : undefined}\r\n        tbody={strings}\r\n        styles={tableStyles}\r\n      />\r\n    </StyledFretTable>\r\n  );\r\n};\r\n\r\nexport default FretTable;\r\n","import ArrayUtils from \"../../core/general/Array.utils\";\r\nimport Note from '../../core/models/Note';\r\nimport { NoteId } from './../../core/models/Model.constants';\r\n\r\nexport enum TuningId {\r\n    Standard = 'standard',\r\n    StandardSeven = 'standard-seven',\r\n    StandardBass = 'standard-bass',\r\n    Flat = 'flat',\r\n    DoubleFlat = 'double-flat',\r\n    DropD = 'drop-d',\r\n    DADGAD = 'dadgad',\r\n    Banjo = 'banjo',\r\n    Violin = 'violin',\r\n    OpenA = 'open-a',\r\n    OpenB = 'open-b',\r\n    OpenC = 'open-c',\r\n    OpenD = 'open-d',\r\n    OpenE = 'open-e',\r\n    OpenF = 'open-f',\r\n    OpenG = 'open-g',\r\n}\r\n\r\nexport interface ITuning {\r\n    id: TuningId;\r\n    name: string;\r\n    value: number[]\r\n}\r\n\r\nconst formatPreset = (id: TuningId, name: string, value: number[]): ITuning => ({\r\n    id,\r\n    name,\r\n    value\r\n});\r\n\r\nconst getPitch = (noteId: NoteId, octave: number): number => Note.getNote(noteId, octave).pod[0];\r\n\r\nexport const TUNING_PRESET_MAP = new Map<TuningId, ITuning>([\r\n    [TuningId.Standard, formatPreset(\r\n        TuningId.Standard,\r\n        'Standard Guitar',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.Flat, formatPreset(\r\n        TuningId.Flat,\r\n        'Flat Gtr',\r\n        [\r\n            getPitch(NoteId.Eb, 5),\r\n            getPitch(NoteId.Bb, 4),\r\n            getPitch(NoteId.Gb, 4),\r\n            getPitch(NoteId.Db, 4),\r\n            getPitch(NoteId.Ab, 3),\r\n            getPitch(NoteId.Eb, 3)\r\n        ]\r\n    )],\r\n    [TuningId.DoubleFlat, formatPreset(\r\n        TuningId.DoubleFlat,\r\n        'Double Flat Gtr',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.F, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.StandardSeven, formatPreset(\r\n        TuningId.StandardSeven,\r\n        'Standard 7-String Gtr',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3),\r\n            getPitch(NoteId.B, 3)\r\n        ]\r\n    )],\r\n    [TuningId.StandardBass, formatPreset(\r\n        TuningId.StandardBass,\r\n        'Standard Bass',\r\n        [\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3),\r\n            getPitch(NoteId.A, 2),\r\n            getPitch(NoteId.E, 2)\r\n        ]\r\n    )],\r\n    [TuningId.DropD, formatPreset(\r\n        TuningId.DropD,\r\n        'Drop D Gtr',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.DADGAD, formatPreset(\r\n        TuningId.DADGAD,\r\n        'DADGAD',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    // Unconfirmed\r\n    /*[TuningId.Banjo, formatPreset(\r\n        TuningId.Banjo,\r\n        'Banjo',\r\n        [\r\n            getPitch(NoteId.G, 5),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],*/\r\n    // Unconfirmed\r\n    [TuningId.Violin, formatPreset(\r\n        TuningId.Violin,\r\n        'Violin',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 4)\r\n        ]\r\n    )],\r\n    [TuningId.OpenA, formatPreset(\r\n        TuningId.OpenA,\r\n        'Open A',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.E, 4),\r\n            getPitch(NoteId.Cs, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenB, formatPreset(\r\n        TuningId.OpenB,\r\n        'Open B',\r\n        [\r\n            getPitch(NoteId.Ds, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Fs, 4),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Fs, 3),\r\n            getPitch(NoteId.B, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenC, formatPreset(\r\n        TuningId.OpenC,\r\n        'Open C',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.C, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenD, formatPreset(\r\n        TuningId.OpenD,\r\n        'Open D',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.Fs, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenE, formatPreset(\r\n        TuningId.OpenE,\r\n        'Open E',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Gs, 4),\r\n            getPitch(NoteId.E, 4),\r\n            getPitch(NoteId.B, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenF, formatPreset(\r\n        TuningId.OpenF,\r\n        'Open F',\r\n        [\r\n            getPitch(NoteId.F, 5),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.F, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.F, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenG, formatPreset(\r\n        TuningId.OpenG,\r\n        'Open G',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )]\r\n]);\r\n\r\nexport const FRETBOARD_TUNING_VALUES = ArrayUtils.mapToArray(TUNING_PRESET_MAP);\r\n","import Chord from \"../../core/models/Chord\";\r\nimport IntervalSpan from \"../../core/models/Interval\";\r\nimport { IModelConfig } from \"../../core/models/Model.constants\";\r\nimport Note from \"../../core/models/Note\";\r\nimport Scale from \"../../core/models/Scale\";\r\nimport { ITuning, TuningId, TUNING_PRESET_MAP } from \"./Fretboard.tuning\";\r\nimport { IVoicing } from \"./Fretboard.voicing\";\r\n\r\nexport interface IFretLabelProps {\r\n  note?: Note;\r\n  color?: string;\r\n  freq?: number;\r\n}\r\n\r\nexport interface IFretboardProps {\r\n  fretRange?: [number, number];\r\n  showFretDots?: boolean;\r\n  showFretNumbers?: boolean;\r\n  colorMapFn?: (fretProps: IFretProps) => string | undefined;\r\n  voicing?: IVoicing;\r\n  tuning?: number[]; // ITuning,\r\n  model?: Chord | Scale;\r\n}\r\n\r\nexport interface IFretProps extends IFretboardProps {\r\n  stringIndex: number;\r\n  fretIndex: number;\r\n}\r\n\r\nexport const DOTTED_FRET_INDICES = [\r\n  true,\r\n  false,\r\n  false,\r\n  true,\r\n  false,\r\n  true,\r\n  false,\r\n  true,\r\n  false,\r\n  true,\r\n  false,\r\n  false,\r\n];\r\n\r\nexport const FRET_SIZE_RATIO = Math.pow(1 / 2, 1 / 12);\r\n\r\nexport const isIntervalInVoicing = (\r\n  interval: IntervalSpan,\r\n  voicing: IVoicing,\r\n  stringIndex: number\r\n) => {\r\n  if (!voicing || !voicing.value) return true;\r\n  const v = voicing.value[stringIndex];\r\n  const d = interval.getDegree();\r\n  if (Array.isArray(v)) {\r\n    return v.some((n) => doesVoicingValueMatch(d, n));\r\n  } else if (typeof v === \"number\") {\r\n    return doesVoicingValueMatch(d, v);\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const getFretColor = (props: IFretProps): string | undefined => {\r\n  const { stringIndex, fretIndex, tuning, model, voicing } = props;\r\n  const noteIndex = tuning[stringIndex] + fretIndex;\r\n  const [interval, note] = model.tryGetPodPairAtPitch(noteIndex);\r\n\r\n  if (!note) return;\r\n\r\n  if (voicing && !isIntervalInVoicing(interval, voicing, stringIndex)) {\r\n    return `#00000011`;\r\n  }\r\n\r\n  return interval.getColor();\r\n};\r\n\r\nexport const DEFAULT_FRETBOARD_PROPS: IFretboardProps = {\r\n  fretRange: [1, 12],\r\n  tuning: TUNING_PRESET_MAP.get(TuningId.Standard).value,\r\n  showFretDots: true,\r\n  showFretNumbers: true,\r\n  colorMapFn: getFretColor,\r\n};\r\n\r\nexport const getFretRatios = (numFrets: number): number[] => {\r\n  const ratios = [];\r\n  for (let i = 1; i <= numFrets; i++) {\r\n    ratios.push(i <= 1 ? 1 : ratios[i - 2] * FRET_SIZE_RATIO);\r\n  }\r\n  return ratios;\r\n};\r\n\r\nexport const getDotsForFret = (fretNumber: number): string => {\r\n  if (fretNumber === 0) return \"\";\r\n  const mod = fretNumber % 12;\r\n  if (mod === 0) return \"• •\";\r\n  else if (DOTTED_FRET_INDICES[mod]) return \"•\";\r\n  return \"\";\r\n};\r\n\r\nconst doesVoicingValueMatch = (d: number, v: number) => {\r\n  return d + 1 === v;\r\n};\r\n","import ArrayUtils from \"../../core/general/Array.utils\";\r\n\r\nexport enum VoicingId {\r\n    None = 'None',\r\n    Chord_Triad_CShape_1 = 'Chord_Triad_CShape_1',\r\n    Chord_Triad_AShape_1 = 'Chord_Triad_AShape_1',\r\n    Chord_Triad_GShape_1 = 'Chord_Triad_GShape_1',\r\n    Chord_Triad_EShape_1 = 'Chord_Triad_EShape_1',\r\n    Chord_Triad_DShape_1 = 'Chord_Triad_DShape_1',\r\n    Chord_Sixth_CShape_1 = 'Chord_Sixth_CShape_1',\r\n    Chord_Sixth_AShape_1 = 'Chord_Sixth_AShape_1',\r\n    Chord_Sixth_GShape_1 = 'Chord_Sixth_GShape_1',\r\n    Chord_Sixth_EShape_1 = 'Chord_Sixth_EShape_1',\r\n    Chord_Sixth_DShape_1 = 'Chord_Sixth_DShape_1',\r\n    Chord_Seventh_CShape_1 = 'Chord_Seventh_CShape_1',\r\n    Chord_Seventh_AShape_1 = 'Chord_Seventh_AShape_1',\r\n    Chord_Seventh_GShape_1 = 'Chord_Seventh_GShape_1',\r\n    Chord_Seventh_EShape_1 = 'Chord_Seventh_EShape_1',\r\n    Chord_Seventh_DShape_1 = 'Chord_Seventh_DShape_1',\r\n    Chord_Shell_E_37 = 'Chord_Shell_E_37',\r\n    Chord_Shell_E_73 = 'Chord_Shell_E_73',\r\n    Chord_Shell_A_37 = 'Chord_Shell_A_37',\r\n    Chord_Shell_A_73 = 'Chord_Shell_A_73',\r\n    Chord_Shell_D_37 = 'Chord_Shell_D_37',\r\n    Chord_Shell_D_73 = 'Chord_Shell_D_73',\r\n    Scale_DoubleOctave_CShape_1 = 'Scale_DoubleOctave_CShape_1',\r\n    Scale_DoubleOctave_CShape_2 = 'Scale_DoubleOctave_CShape_2',\r\n    Scale_DoubleOctave_AShape_1 = 'Scale_DoubleOctave_AShape_1',\r\n    Scale_DoubleOctave_GShape_1 = 'Scale_DoubleOctave_GShape_1',\r\n    Scale_DoubleOctave_EShape_1 = 'Scale_DoubleOctave_EShape_1',\r\n    Scale_DoubleOctave_EShape_2 = 'Scale_DoubleOctave_EShape_2',\r\n    Scale_DoubleOctave_DShape_1 = 'Scale_DoubleOctave_DShape_1',\r\n}\r\n\r\nexport interface IVoicing {\r\n    id: VoicingId;\r\n    name: string;\r\n    value: (number | number[])[]\r\n}\r\n\r\nconst formatPreset = (id: VoicingId, name: string, value: (number | number[])[]): IVoicing => ({\r\n    id,\r\n    name,\r\n    value\r\n});\r\n\r\nexport const VOICING_PRESET_MAP = new Map<VoicingId, IVoicing>([\r\n    // Triads\r\n    [VoicingId.Chord_Triad_CShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_CShape_1,\r\n        'C Shape Triad',\r\n        [3, 1, 5, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Triad_AShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_AShape_1,\r\n        'A Shape Triad',\r\n        [5, 3, 1, 5, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Triad_GShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_GShape_1,\r\n        'G Shape Triad',\r\n        [1, 5, 1, 5, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Triad_EShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_EShape_1,\r\n        'E Shape Triad',\r\n        [1, 5, 3, 1, 5, 1]\r\n    )],\r\n    [VoicingId.Chord_Triad_DShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_DShape_1,\r\n        'D Shape Triad',\r\n        [3, 1, 5, 1, null, null]\r\n    )],\r\n    // Sixths\r\n    [VoicingId.Chord_Sixth_CShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_CShape_1,\r\n        'C Shape 6th Chord',\r\n        [3, 6, 5, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Sixth_AShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_AShape_1,\r\n        'A Shape 6th Chord',\r\n        [5, 3, 6, 5, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Sixth_GShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_GShape_1,\r\n        'G Shape 6th Chord',\r\n        [6, 5, 1, 5, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Sixth_EShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_EShape_1,\r\n        'E Shape 6th Chord',\r\n        [1, 5, 3, 6, 5, 1]\r\n    )],\r\n    [VoicingId.Chord_Sixth_DShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_DShape_1,\r\n        'D Shape 6th Chord',\r\n        [3, 6, 5, 1, null, null]\r\n    )],\r\n    // Sevenths\r\n    [VoicingId.Chord_Seventh_CShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_CShape_1,\r\n        'C Shape 7th Chord',\r\n        [3, 7, 5, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Seventh_AShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_AShape_1,\r\n        'A Shape 7th Chord',\r\n        [5, 3, 7, 5, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Seventh_GShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_GShape_1,\r\n        'G Shape 7th Chord',\r\n        [7, 5, 1, 5, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Seventh_EShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_EShape_1,\r\n        'E Shape 7th Chord',\r\n        [1, 5, 3, 7, 5, 1]\r\n    )],\r\n    [VoicingId.Chord_Seventh_DShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_DShape_1,\r\n        'D Shape 7th Chord',\r\n        [3, 7, 5, 1, null, null]\r\n    )],\r\n    // Shells\r\n    [VoicingId.Chord_Shell_E_37, formatPreset(\r\n        VoicingId.Chord_Shell_E_37,\r\n        'Shell E 3-7',\r\n        [null, null, null, 7, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Shell_E_73, formatPreset(\r\n        VoicingId.Chord_Shell_E_73,\r\n        'Shell E 7-3',\r\n        [null, null, 3, 7, null, 1]\r\n    )],\r\n    [VoicingId.Chord_Shell_A_37, formatPreset(\r\n        VoicingId.Chord_Shell_A_37,\r\n        'Shell A 3-7',\r\n        [null, null, 7, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Shell_A_73, formatPreset(\r\n        VoicingId.Chord_Shell_A_73,\r\n        'Shell A 7-3',\r\n        [null, 3, 7, null, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Shell_D_37, formatPreset(\r\n        VoicingId.Chord_Shell_D_37,\r\n        'Shell D 3-7',\r\n        [null, 7, 3, 1, null, null]\r\n    )],\r\n    [VoicingId.Chord_Shell_D_73, formatPreset(\r\n        VoicingId.Chord_Shell_D_73,\r\n        'Shell D 7-3',\r\n        [3, 7, null, 1, null, null]\r\n    )],\r\n    // CAGED Scales\r\n    [VoicingId.Scale_DoubleOctave_EShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_EShape_1,\r\n        'E Shape Scale (Locrian)',\r\n        [[1, 2, 3], [6, 7], [3, 4, 5], [7, 1, 2], [4, 5, 6], [1, 2, 3]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_EShape_2, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_EShape_2,\r\n        'E Shape Scale (Ionian)',\r\n        [[7, 1, 2], [5, 6], [2, 3, 4], [6, 7, 1], [3, 4, 5], [1, 2]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_DShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_DShape_1,\r\n        'D Shape Scale (Dorian)',\r\n        [[1, 2, 3], [5, 6, 7], [2, 3, 4], [6, 7, 1], [4, 5], [1, 2, 3]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_CShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_CShape_1,\r\n        'C Shape Scale (Phrygian)',\r\n        [[1, 2, 3], [5, 6, 7], [3, 4], [7, 1, 2], [4, 5, 6], [1, 2, 3]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_CShape_2, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_CShape_2,\r\n        'C Shape Scale (Lydian)',\r\n        [[7, 1, 2], [4, 5, 6], [2, 3], [6, 7, 1], [3, 4, 5], [1, 2]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_AShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_AShape_1,\r\n        'A Shape Scale (Mixolydian)',\r\n        [[1, 2], [5, 6, 7], [2, 3, 4], [6, 7, 1], [3, 4, 5], [1, 2]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_GShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_GShape_1,\r\n        'G Shape Scale (Aeolian)',\r\n        [[1, 2, 3], [5, 6, 7], [2, 3, 4], [7, 1], [4, 5, 6], [1, 2, 3]]\r\n    )]\r\n])\r\n\r\nexport const VOICING_PRESETS = ArrayUtils.mapToArray(VOICING_PRESET_MAP);\r\n"],"names":["StyledColumnManager","styled","$tablet","join","$desktop","children","tablet","desktop","React","StyledDropdownInput","props","value","setValue","options","idProperty","displayProperty","className","onChange","e","target","selectedIndex","map","v","i","key","name","StyledCAGEDPage","PageLayout","withConfig","StyledCard","useState","NOTE_PRESET_MAP","NoteId","rootPreset","setRootPreset","root","Note","majorScale","Scale","ScaleId","minorScale","majorItems","model","Chord","modelId","ChordId","rootId","notes","voicingId","minorItems","getColor","fretProps","stringIndex","fretIndex","tuning","noteIndex","voicing","tryGetPodPairAtPitch","interval","pod","title","ColumnManager","InputRow","label","DropdownInput","NOTE_PRESETS","p","Card","item","instance","FretTable","VOICING_PRESET_MAP","undefined","colorMapFn","fretRange","ArrayUtils","theme","surface","card","CardHeader","level","action","AsTag","subtitle","rest","StyledInputRow","$y","dark3","y","StyledTable","getIsTypeOmit","data","Col","index","isHeader","content","colSpan","link","ColTag","WrapperTag","Link","Fragment","wrapperProps","to","Row","cols","headerColIndicies","col","isConfig","hasOwnProperty","getIsConfig","colConfig","includes","TableSection","Tag","rows","row","Table","thead","tfoot","tbody","styles","colGroups","caption","cg","StyledFretFlag","$color","$opacity","color","text","opacity","StyledFretTable","tableStyles","css","userProps","DEFAULT_FRETBOARD_PROPS","showFretDots","showFretNumbers","lo","hi","numFrets","numStrings","length","fretNums","push","fretDots","getDotsForFret","strings","s","frets","f","FretFlag","TuningId","formatPreset","id","getPitch","noteId","octave","TUNING_PRESET_MAP","Map","Standard","Flat","DoubleFlat","StandardSeven","StandardBass","DropD","DADGAD","Violin","OpenA","OpenB","OpenC","OpenD","OpenE","OpenF","OpenG","FRETBOARD_TUNING_VALUES","DOTTED_FRET_INDICES","isIntervalInVoicing","Math","pow","d","getDegree","Array","isArray","some","n","doesVoicingValueMatch","fretNumber","mod","VoicingId","Chord_Triad_CShape_1","Chord_Triad_AShape_1","Chord_Triad_GShape_1","Chord_Triad_EShape_1","Chord_Triad_DShape_1","Chord_Sixth_CShape_1","Chord_Sixth_AShape_1","Chord_Sixth_GShape_1","Chord_Sixth_EShape_1","Chord_Sixth_DShape_1","Chord_Seventh_CShape_1","Chord_Seventh_AShape_1","Chord_Seventh_GShape_1","Chord_Seventh_EShape_1","Chord_Seventh_DShape_1","Chord_Shell_E_37","Chord_Shell_E_73","Chord_Shell_A_37","Chord_Shell_A_73","Chord_Shell_D_37","Chord_Shell_D_73","Scale_DoubleOctave_EShape_1","Scale_DoubleOctave_EShape_2","Scale_DoubleOctave_DShape_1","Scale_DoubleOctave_CShape_1","Scale_DoubleOctave_CShape_2","Scale_DoubleOctave_AShape_1","Scale_DoubleOctave_GShape_1","VOICING_PRESETS"],"sourceRoot":""}