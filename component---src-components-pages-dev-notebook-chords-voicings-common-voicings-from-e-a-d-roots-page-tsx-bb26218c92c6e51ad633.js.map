{"version":3,"file":"component---src-components-pages-dev-notebook-chords-voicings-common-voicings-from-e-a-d-roots-page-tsx-bb26218c92c6e51ad633.js","mappings":"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yH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,MAG3B,CAACoH,EAASgB,MAAOf,EACbD,EAASgB,MACT,aACA,CACIX,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,MAG3B,CAACoH,EAASiB,OAAQhB,EACdD,EAASiB,OACT,SACA,CACIZ,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,MAgB3B,CAACoH,EAASkB,OAAQjB,EACdD,EAASkB,OACT,SACA,CACIb,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,MAG3B,CAACoH,EAASmB,MAAOlB,EACbD,EAASmB,MACT,SACA,CACId,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,GAAW,GACpByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,MAG3B,CAACoH,EAASoB,MAAOnB,EACbD,EAASoB,MACT,SACA,CACIf,EAASzH,EAAAA,GAAAA,GAAW,GACpByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,GAAW,GACpByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,GAAW,GACpByH,EAASzH,EAAAA,GAAAA,EAAU,MAG3B,CAACoH,EAASqB,MAAOpB,EACbD,EAASqB,MACT,SACA,CACIhB,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,MAG3B,CAACoH,EAASsB,MAAOrB,EACbD,EAASsB,MACT,SACA,CACIjB,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,GAAW,GACpByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,MAG3B,CAACoH,EAASuB,MAAOtB,EACbD,EAASuB,MACT,SACA,CACIlB,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,GAAW,GACpByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,MAG3B,CAACoH,EAASwB,MAAOvB,EACbD,EAASwB,MACT,SACA,CACInB,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,MAG3B,CAACoH,EAASyB,MAAOxB,EACbD,EAASyB,MACT,SACA,CACIpB,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,GACnByH,EAASzH,EAAAA,GAAAA,EAAU,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","sources":["webpack://play-what/./src/components/pages/dev/notebook/chords/voicings/common-voicings-from-e-a-d-roots.page.tsx","webpack://play-what/./src/components/ui/Card.tsx","webpack://play-what/./src/components/ui/FretboardCell.tsx","webpack://play-what/./src/components/ui/SmartCard.tsx","webpack://play-what/./src/components/ui/Table.tsx","webpack://play-what/./src/viewers/fret-table/FretFlag.tsx","webpack://play-what/./src/viewers/fret-table/FretTable.tsx","webpack://play-what/./src/viewers/fretboard/Fretboard.tuning.ts","webpack://play-what/./src/viewers/fretboard/Fretboard.utils.ts","webpack://play-what/./src/viewers/fretboard/Fretboard.voicing.ts"],"sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Chord from \"../../../../../../core/models/Chord\";\r\nimport { ChordId, NoteId } from \"../../../../../../core/models/Model.constants\";\r\nimport Note from \"../../../../../../core/models/Note\";\r\nimport {\r\n  VoicingId,\r\n  VOICING_PRESET_MAP,\r\n} from \"../../../../../../viewers/fretboard/Fretboard.voicing\";\r\nimport PageLayout from \"../../../../../layout/PageLayout\";\r\nimport FretboardCell from \"../../../../../ui/FretboardCell\";\r\nimport SmartCard, { ICardConfig } from \"../../../../../ui/SmartCard\";\r\n\r\nconst StyledVoicingsPage = styled(PageLayout)``;\r\n\r\nconst THEAD = [\"Model\", \"Triad\", \"Seventh\", \"Drop 3-7\", \"Drop 7-3\"];\r\n\r\nconst CHORD_IDS = [ChordId.Maj7, ChordId.Min7, ChordId.Dom7, ChordId.HalfDim7];\r\n\r\nconst CHORD_ROOT = Note.fromId(NoteId.C);\r\n\r\ninterface IRootCard {\r\n  stringRoot: string;\r\n  fretRange: [number, number];\r\n  voicingids: VoicingId[];\r\n}\r\n\r\nconst CARDS: IRootCard[] = [\r\n  {\r\n    stringRoot: \"E\",\r\n    fretRange: [6, 10],\r\n    voicingids: [\r\n      VoicingId.Chord_Triad_EShape_1,\r\n      VoicingId.Chord_Seventh_EShape_1,\r\n      VoicingId.Chord_Shell_E_37,\r\n      VoicingId.Chord_Shell_E_73,\r\n    ],\r\n  },\r\n  {\r\n    stringRoot: \"A\",\r\n    fretRange: [2, 6],\r\n    voicingids: [\r\n      VoicingId.Chord_Triad_AShape_1,\r\n      VoicingId.Chord_Seventh_AShape_1,\r\n      VoicingId.Chord_Shell_A_37,\r\n      VoicingId.Chord_Shell_A_73,\r\n    ],\r\n  },\r\n  {\r\n    stringRoot: \"D\",\r\n    fretRange: [8, 12],\r\n    voicingids: [\r\n      VoicingId.Chord_Triad_DShape_1,\r\n      VoicingId.Chord_Seventh_DShape_1,\r\n      VoicingId.Chord_Shell_D_37,\r\n      VoicingId.Chord_Shell_D_73,\r\n    ],\r\n  },\r\n];\r\n\r\nconst getVoicingCols = ({ voicingIds, modelId, root, fretRange }) =>\r\n  voicingIds.map((voicingId, i) => {\r\n    const instance = new Chord(modelId, { root });\r\n    const voicing = VOICING_PRESET_MAP.get(voicingId);\r\n    return {\r\n      content: (\r\n        <FretboardCell\r\n          fretboardConfig={{\r\n            model: instance,\r\n            voicing,\r\n            fretRange,\r\n            showFretNumbers: false,\r\n            showFretDots: false,\r\n          }}\r\n        />\r\n      ),\r\n    };\r\n  });\r\n\r\nconst getChordRows = (\r\n  chordIds: ChordId[],\r\n  voicingIds: VoicingId[],\r\n  root: Note,\r\n  fretRange: [number, number]\r\n) => {\r\n  return chordIds.map((modelId, i) => {\r\n    return {\r\n      cols: [\r\n        new Chord(modelId).getName(),\r\n        ...getVoicingCols({\r\n          voicingIds,\r\n          modelId,\r\n          root,\r\n          fretRange,\r\n        }),\r\n      ],\r\n    };\r\n  });\r\n};\r\n\r\nconst getRootCard = (\r\n  chordIds: ChordId[],\r\n  root: Note,\r\n  stringRoot: string,\r\n  voicingIds: VoicingId[],\r\n  fretRange: [number, number]\r\n) => {\r\n  return {\r\n    title: `${stringRoot} Root`,\r\n    table: {\r\n      thead: [{ cols: THEAD }],\r\n      tbody: getChordRows(chordIds, voicingIds, root, fretRange),\r\n      headerColIndicies: [0],\r\n    },\r\n  };\r\n};\r\n\r\nconst getCardConfigs = (\r\n  cards: IRootCard[],\r\n  chordIds: ChordId[],\r\n  root: Note\r\n): ICardConfig[] => {\r\n  return cards.map(({ stringRoot, voicingids, fretRange }) =>\r\n    getRootCard(chordIds, root, stringRoot, voicingids, fretRange)\r\n  );\r\n};\r\n\r\nconst Page: React.FC = () => {\r\n  return (\r\n    <StyledVoicingsPage title=\"Chord Voicings\">\r\n      <SmartCard cards={getCardConfigs(CARDS, CHORD_IDS, CHORD_ROOT)} />\r\n    </StyledVoicingsPage>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledCard = styled.div`\r\n    background: ${props => props.theme.surface.card};\r\n    width: 100%;\r\n    border-radius: 16px;\r\n    padding: 16px;\r\n\r\n    .header {\r\n        margin-bottom: 16px;\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 8px;\r\n        justify-content: space-between;\r\n    }\r\n`;\r\n\r\nexport const CardHeader: React.FC<any> = ({ title, level = 2, action = null }) => {\r\n    const AsTag: any = `h${level}`;\r\n    return (\r\n        <div className=\"header\">\r\n            <AsTag>{title}</AsTag>\r\n            {action}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Card: React.FC<any> = ({ title, subtitle, action, children, level, ...rest }) => {\r\n    return (\r\n        <StyledCard {...rest}>\r\n            {title &&\r\n                <CardHeader title={title} action={action} level={level} />\r\n            }\r\n            {subtitle &&\r\n                <CardHeader title={subtitle} level={level + 1} />\r\n            }\r\n            {children}\r\n        </StyledCard >\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport FretTable from \"../../viewers/fret-table/FretTable\";\r\nimport { IFretboardProps } from \"../../viewers/fretboard/Fretboard.utils\";\r\n\r\nexport const StyledFretboardCell = styled.div`\r\n  padding: 8px;\r\n  .caption {\r\n    font-weight: bold;\r\n    font-size: 90%;\r\n    text-align: center;\r\n    margin-top: 8px;\r\n  }\r\n`;\r\n\r\ninterface IFretboardCellProps {\r\n  fretboardConfig: IFretboardProps;\r\n  caption?: string;\r\n}\r\n\r\nconst FretboardCell: React.FC<IFretboardCellProps> = ({\r\n  fretboardConfig,\r\n  caption,\r\n}) => {\r\n  return (\r\n    <StyledFretboardCell>\r\n      <FretTable {...fretboardConfig} />\r\n      {caption && <div className=\"caption\">{caption}</div>}\r\n    </StyledFretboardCell>\r\n  );\r\n};\r\n\r\nexport default FretboardCell;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Card, { StyledCard } from \"./Card\";\r\nimport { ITableConfig, Table } from \"./Table\";\r\n\r\nexport const StyledSmartCard = styled.div`\r\n  overflow-x: scroll;\r\n  ${StyledCard} {\r\n    min-width: 1024px;\r\n    margin-top: 16px;\r\n    > table {\r\n      table-layout: fixed;\r\n      width: 100%;\r\n      > tbody > tr > td {\r\n        vertical-align: top;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport interface ICardConfig {\r\n  title: string;\r\n  table: ITableConfig;\r\n}\r\n\r\ninterface ISmartCardProps {\r\n  cards: ICardConfig[];\r\n}\r\n\r\nconst SmartCard: React.FC<ISmartCardProps> = ({ cards }) => {\r\n  return (\r\n    <StyledSmartCard>\r\n      {cards.map((card) => {\r\n        return (\r\n          <Card title={card.title}>\r\n            <Table {...card.table} />\r\n          </Card>\r\n        );\r\n      })}\r\n    </StyledSmartCard>\r\n  );\r\n};\r\n\r\nexport default SmartCard;\r\n","import { Link } from \"gatsby\";\r\nimport React, { Fragment, ReactNode } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledTable = styled.table``;\r\n\r\ntype TOmit = undefined | null | false;\r\n\r\nconst getIsTypeOmit = (data: any): data is TOmit =>\r\n  data === undefined || data === null || data === false;\r\n\r\n// Col\r\n\r\nexport interface IColConfig {\r\n  isHeader?: boolean;\r\n  content: any;\r\n  colSpan?: number;\r\n  className?: string;\r\n  link?: string;\r\n}\r\n\r\ninterface IColProps extends IColConfig {\r\n  index: number;\r\n}\r\n\r\ntype TCol = string | number | IColConfig | ReactNode;\r\n\r\nconst Col: React.FC<IColProps> = ({\r\n  index,\r\n  isHeader,\r\n  content,\r\n  colSpan,\r\n  className,\r\n  link,\r\n}) => {\r\n  const ColTag = isHeader ? \"th\" : \"td\";\r\n  const WrapperTag = link ? Link : Fragment;\r\n  const wrapperProps: any = link ? { to: link } : {};\r\n\r\n  return (\r\n    <ColTag colSpan={colSpan} className={className}>\r\n      <WrapperTag {...wrapperProps}>{content || \"\"}</WrapperTag>\r\n    </ColTag>\r\n  );\r\n};\r\n\r\n// Row\r\n\r\nexport interface IRowConfig {\r\n  cols: (TCol | TOmit)[];\r\n  className?: string;\r\n  isHeader?: boolean;\r\n  headerColIndicies?: number[];\r\n}\r\n\r\nconst getIsConfig = (col: TCol): col is IColConfig =>\r\n  typeof col === \"object\" && col !== null && col.hasOwnProperty(\"content\");\r\n\r\nconst Row: React.FC<IRowConfig> = ({\r\n  cols,\r\n  isHeader,\r\n  className,\r\n  headerColIndicies = [],\r\n}) => {\r\n  return (\r\n    <tr className={className}>\r\n      {cols.map((col: any, i) => {\r\n        if (getIsTypeOmit(col)) return null;\r\n        const isConfig = getIsConfig(col);\r\n        const colConfig = !isConfig ? { content: col } : col;\r\n        return (\r\n          <Col\r\n            key={i}\r\n            index={i}\r\n            isHeader={isHeader || headerColIndicies.includes(i)}\r\n            {...colConfig}\r\n          />\r\n        );\r\n      })}\r\n    </tr>\r\n  );\r\n};\r\n\r\n// Table Section\r\n\r\ninterface ITableSectionConfig {\r\n  Tag: \"thead\" | \"tfoot\" | \"tbody\";\r\n  rows: (IRowConfig | TOmit)[];\r\n  headerColIndicies?: number[];\r\n}\r\n\r\nconst TableSection: React.FC<ITableSectionConfig> = ({\r\n  Tag,\r\n  rows,\r\n  headerColIndicies,\r\n}) => (\r\n  <Tag>\r\n    {rows.map((row, i) => {\r\n      if (getIsTypeOmit(row)) return null;\r\n      return (\r\n        <Row\r\n          key={i}\r\n          isHeader={Tag !== \"tbody\"}\r\n          headerColIndicies={headerColIndicies}\r\n          {...row}\r\n        />\r\n      );\r\n    })}\r\n  </Tag>\r\n);\r\n\r\n// Table\r\n\r\ninterface IColGroup {\r\n  span?: number;\r\n  className?: string;\r\n}\r\n\r\nexport interface ITableConfig {\r\n  thead?: (IRowConfig | TOmit)[];\r\n  tfoot?: (IRowConfig | TOmit)[];\r\n  tbody: (IRowConfig | TOmit)[];\r\n  styles?: any;\r\n  caption?: string;\r\n  colGroups?: IColGroup[];\r\n  className?: string;\r\n  headerColIndicies?: number[];\r\n}\r\n\r\nexport const Table: React.FC<ITableConfig> = ({\r\n  thead,\r\n  tfoot,\r\n  tbody,\r\n  styles,\r\n  colGroups,\r\n  caption,\r\n  headerColIndicies,\r\n  className,\r\n}) => {\r\n  return (\r\n    <StyledTable css={styles} className={className}>\r\n      {colGroups && (\r\n        <colgroup>\r\n          {colGroups.map((cg, i) => (\r\n            <col key={i} {...cg} />\r\n          ))}\r\n        </colgroup>\r\n      )}\r\n      {caption && <caption>{caption}</caption>}\r\n      {thead && (\r\n        <TableSection\r\n          Tag=\"thead\"\r\n          rows={thead}\r\n          headerColIndicies={headerColIndicies}\r\n        />\r\n      )}\r\n      {tfoot && (\r\n        <TableSection\r\n          Tag=\"tfoot\"\r\n          rows={tfoot}\r\n          headerColIndicies={headerColIndicies}\r\n        />\r\n      )}\r\n      {tbody && (\r\n        <TableSection\r\n          Tag=\"tbody\"\r\n          rows={tbody}\r\n          headerColIndicies={headerColIndicies}\r\n        />\r\n      )}\r\n    </StyledTable>\r\n  );\r\n};\r\n","import * as React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface IFretFlagProps {\r\n  color?: string;\r\n  text?: string | number;\r\n  opacity?: number;\r\n}\r\n\r\nexport const StyledFretFlag = styled.div<{\r\n  $color?: string;\r\n  $opacity?: number;\r\n}>`\r\n  height: 16px;\r\n  width: 16px;\r\n  background: ${(props) => props.$color || \"\"};\r\n  opacity: ${(props) => props.$opacity || 1};\r\n  border-radius: 100%;\r\n  z-index: 1;\r\n`;\r\n\r\nconst FretFlag: React.FC<IFretFlagProps> = ({ color, text, opacity }) => {\r\n  return (\r\n    <StyledFretFlag $color={color} $opacity={opacity}>\r\n      {text}\r\n    </StyledFretFlag>\r\n  );\r\n};\r\n\r\nexport default FretFlag;\r\n","import * as React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { IColConfig, IRowConfig, Table } from \"../../components/ui/Table\";\r\nimport {\r\n  DEFAULT_FRETBOARD_PROPS,\r\n  getDotsForFret,\r\n  IFretboardProps,\r\n} from \"../fretboard/Fretboard.utils\";\r\nimport FretFlag from \"./FretFlag\";\r\n\r\nexport const StyledFretTable = styled.div``;\r\n\r\nconst tableStyles = css`\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  td,\r\n  th {\r\n    min-width: 18px;\r\n    text-align: center;\r\n  }\r\n  tbody td {\r\n    background-color: #e8dbb8;\r\n\r\n    border-right: 1px solid grey;\r\n    &:first-child {\r\n      border-left: 1px solid grey;\r\n    }\r\n    .fret-content {\r\n      min-height: 32px;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      position: relative;\r\n    }\r\n    .fret-string {\r\n      height: 1px;\r\n      background: #bbb;\r\n      width: 100%;\r\n      position: absolute;\r\n      margin: auto 0;\r\n    }\r\n  }\r\n  tbody tr {\r\n    &:first-child {\r\n      border-top: 1px solid grey;\r\n    }\r\n    &:last-child {\r\n      border-bottom: 1px solid grey;\r\n    }\r\n  }\r\n`;\r\n\r\nconst FretTable: React.FC<IFretboardProps> = (userProps) => {\r\n  const props = { ...DEFAULT_FRETBOARD_PROPS, ...userProps };\r\n\r\n  const { fretRange, showFretDots, showFretNumbers, tuning, colorMapFn } =\r\n    props;\r\n  const [lo, hi] = fretRange as [number, number];\r\n\r\n  const numFrets = hi - lo + 1;\r\n  const numStrings = (tuning as number[]).length;\r\n\r\n  const fretNums: number[] = [];\r\n  for (let i = 0; i < numFrets; i++) {\r\n    fretNums.push(lo + i);\r\n  }\r\n\r\n  const fretDots: string[] = [];\r\n  for (let i = 0; i < numFrets; i++) {\r\n    fretDots.push(getDotsForFret(lo + i));\r\n  }\r\n\r\n  const strings: IRowConfig[] = [];\r\n  for (let s = 0; s < numStrings; s++) {\r\n    const frets: IColConfig[] = [];\r\n    for (let f = lo; f <= hi; f++) {\r\n      frets.push({\r\n        content: (\r\n          <div className=\"fret-content\">\r\n            <div className=\"fret-string\" />\r\n            <FretFlag\r\n              color={(colorMapFn as any)({\r\n                stringIndex: s,\r\n                fretIndex: f,\r\n                ...props,\r\n              })}\r\n              text=\"\"\r\n              opacity={1}\r\n            />\r\n          </div>\r\n        ),\r\n      });\r\n    }\r\n    strings.push({\r\n      cols: frets,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <StyledFretTable>\r\n      <Table\r\n        thead={showFretNumbers ? [{ cols: fretNums }] : undefined}\r\n        tfoot={showFretDots ? [{ cols: fretDots }] : undefined}\r\n        tbody={strings}\r\n        styles={tableStyles}\r\n      />\r\n    </StyledFretTable>\r\n  );\r\n};\r\n\r\nexport default FretTable;\r\n","import ArrayUtils from \"../../core/general/Array.utils\";\r\nimport Note from '../../core/models/Note';\r\nimport { NoteId } from './../../core/models/Model.constants';\r\n\r\nexport enum TuningId {\r\n    Standard = 'standard',\r\n    StandardSeven = 'standard-seven',\r\n    StandardBass = 'standard-bass',\r\n    Flat = 'flat',\r\n    DoubleFlat = 'double-flat',\r\n    DropD = 'drop-d',\r\n    DADGAD = 'dadgad',\r\n    Banjo = 'banjo',\r\n    Violin = 'violin',\r\n    OpenA = 'open-a',\r\n    OpenB = 'open-b',\r\n    OpenC = 'open-c',\r\n    OpenD = 'open-d',\r\n    OpenE = 'open-e',\r\n    OpenF = 'open-f',\r\n    OpenG = 'open-g',\r\n}\r\n\r\nexport interface ITuning {\r\n    id: TuningId;\r\n    name: string;\r\n    value: number[]\r\n}\r\n\r\nconst formatPreset = (id: TuningId, name: string, value: number[]): ITuning => ({\r\n    id,\r\n    name,\r\n    value\r\n});\r\n\r\nconst getPitch = (noteId: NoteId, octave: number): number => Note.getNote(noteId, octave).pod[0];\r\n\r\nexport const TUNING_PRESET_MAP = new Map<TuningId, ITuning>([\r\n    [TuningId.Standard, formatPreset(\r\n        TuningId.Standard,\r\n        'Standard Guitar',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.Flat, formatPreset(\r\n        TuningId.Flat,\r\n        'Flat Gtr',\r\n        [\r\n            getPitch(NoteId.Eb, 5),\r\n            getPitch(NoteId.Bb, 4),\r\n            getPitch(NoteId.Gb, 4),\r\n            getPitch(NoteId.Db, 4),\r\n            getPitch(NoteId.Ab, 3),\r\n            getPitch(NoteId.Eb, 3)\r\n        ]\r\n    )],\r\n    [TuningId.DoubleFlat, formatPreset(\r\n        TuningId.DoubleFlat,\r\n        'Double Flat Gtr',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.F, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.StandardSeven, formatPreset(\r\n        TuningId.StandardSeven,\r\n        'Standard 7-String Gtr',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3),\r\n            getPitch(NoteId.B, 3)\r\n        ]\r\n    )],\r\n    [TuningId.StandardBass, formatPreset(\r\n        TuningId.StandardBass,\r\n        'Standard Bass',\r\n        [\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3),\r\n            getPitch(NoteId.A, 2),\r\n            getPitch(NoteId.E, 2)\r\n        ]\r\n    )],\r\n    [TuningId.DropD, formatPreset(\r\n        TuningId.DropD,\r\n        'Drop D Gtr',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.DADGAD, formatPreset(\r\n        TuningId.DADGAD,\r\n        'DADGAD',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    // Unconfirmed\r\n    /*[TuningId.Banjo, formatPreset(\r\n        TuningId.Banjo,\r\n        'Banjo',\r\n        [\r\n            getPitch(NoteId.G, 5),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],*/\r\n    // Unconfirmed\r\n    [TuningId.Violin, formatPreset(\r\n        TuningId.Violin,\r\n        'Violin',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 4)\r\n        ]\r\n    )],\r\n    [TuningId.OpenA, formatPreset(\r\n        TuningId.OpenA,\r\n        'Open A',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.E, 4),\r\n            getPitch(NoteId.Cs, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenB, formatPreset(\r\n        TuningId.OpenB,\r\n        'Open B',\r\n        [\r\n            getPitch(NoteId.Ds, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Fs, 4),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Fs, 3),\r\n            getPitch(NoteId.B, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenC, formatPreset(\r\n        TuningId.OpenC,\r\n        'Open C',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.C, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenD, formatPreset(\r\n        TuningId.OpenD,\r\n        'Open D',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.Fs, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenE, formatPreset(\r\n        TuningId.OpenE,\r\n        'Open E',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Gs, 4),\r\n            getPitch(NoteId.E, 4),\r\n            getPitch(NoteId.B, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenF, formatPreset(\r\n        TuningId.OpenF,\r\n        'Open F',\r\n        [\r\n            getPitch(NoteId.F, 5),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.F, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.F, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenG, formatPreset(\r\n        TuningId.OpenG,\r\n        'Open G',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )]\r\n]);\r\n\r\nexport const FRETBOARD_TUNING_VALUES = ArrayUtils.mapToArray(TUNING_PRESET_MAP);\r\n","import Chord from \"../../core/models/Chord\";\r\nimport IntervalSpan from \"../../core/models/Interval\";\r\nimport { IModelConfig } from \"../../core/models/Model.constants\";\r\nimport Note from \"../../core/models/Note\";\r\nimport Scale from \"../../core/models/Scale\";\r\nimport { ITuning, TuningId, TUNING_PRESET_MAP } from \"./Fretboard.tuning\";\r\nimport { IVoicing } from \"./Fretboard.voicing\";\r\n\r\nexport interface IFretLabelProps {\r\n  note?: Note;\r\n  color?: string;\r\n  freq?: number;\r\n}\r\n\r\nexport interface IFretboardProps {\r\n  fretRange?: [number, number];\r\n  showFretDots?: boolean;\r\n  showFretNumbers?: boolean;\r\n  colorMapFn?: (fretProps: IFretProps) => string | undefined;\r\n  voicing?: IVoicing;\r\n  tuning?: number[]; // ITuning,\r\n  model?: Chord | Scale;\r\n}\r\n\r\nexport interface IFretProps extends IFretboardProps {\r\n  stringIndex: number;\r\n  fretIndex: number;\r\n}\r\n\r\nexport const DOTTED_FRET_INDICES = [\r\n  true,\r\n  false,\r\n  false,\r\n  true,\r\n  false,\r\n  true,\r\n  false,\r\n  true,\r\n  false,\r\n  true,\r\n  false,\r\n  false,\r\n];\r\n\r\nexport const FRET_SIZE_RATIO = Math.pow(1 / 2, 1 / 12);\r\n\r\nexport const isIntervalInVoicing = (\r\n  interval: IntervalSpan,\r\n  voicing: IVoicing,\r\n  stringIndex: number\r\n) => {\r\n  if (!voicing || !voicing.value) return true;\r\n  const v = voicing.value[stringIndex];\r\n  const d = interval.getDegree();\r\n  if (Array.isArray(v)) {\r\n    return v.some((n) => doesVoicingValueMatch(d, n));\r\n  } else if (typeof v === \"number\") {\r\n    return doesVoicingValueMatch(d, v);\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const getFretColor = (props: IFretProps): string | undefined => {\r\n  const { stringIndex, fretIndex, tuning, model, voicing } = props;\r\n  const noteIndex = tuning[stringIndex] + fretIndex;\r\n  const [interval, note] = model.tryGetPodPairAtPitch(noteIndex);\r\n\r\n  if (!note) return;\r\n\r\n  if (voicing && !isIntervalInVoicing(interval, voicing, stringIndex)) {\r\n    return `#00000011`;\r\n  }\r\n\r\n  return interval.getColor();\r\n};\r\n\r\nexport const DEFAULT_FRETBOARD_PROPS: IFretboardProps = {\r\n  fretRange: [1, 12],\r\n  tuning: TUNING_PRESET_MAP.get(TuningId.Standard).value,\r\n  showFretDots: true,\r\n  showFretNumbers: true,\r\n  colorMapFn: getFretColor,\r\n};\r\n\r\nexport const getFretRatios = (numFrets: number): number[] => {\r\n  const ratios = [];\r\n  for (let i = 1; i <= numFrets; i++) {\r\n    ratios.push(i <= 1 ? 1 : ratios[i - 2] * FRET_SIZE_RATIO);\r\n  }\r\n  return ratios;\r\n};\r\n\r\nexport const getDotsForFret = (fretNumber: number): string => {\r\n  if (fretNumber === 0) return \"\";\r\n  const mod = fretNumber % 12;\r\n  if (mod === 0) return \"• •\";\r\n  else if (DOTTED_FRET_INDICES[mod]) return \"•\";\r\n  return \"\";\r\n};\r\n\r\nconst doesVoicingValueMatch = (d: number, v: number) => {\r\n  return d + 1 === v;\r\n};\r\n","import ArrayUtils from \"../../core/general/Array.utils\";\r\n\r\nexport enum VoicingId {\r\n    None = 'None',\r\n    Chord_Triad_CShape_1 = 'Chord_Triad_CShape_1',\r\n    Chord_Triad_AShape_1 = 'Chord_Triad_AShape_1',\r\n    Chord_Triad_GShape_1 = 'Chord_Triad_GShape_1',\r\n    Chord_Triad_EShape_1 = 'Chord_Triad_EShape_1',\r\n    Chord_Triad_DShape_1 = 'Chord_Triad_DShape_1',\r\n    Chord_Sixth_CShape_1 = 'Chord_Sixth_CShape_1',\r\n    Chord_Sixth_AShape_1 = 'Chord_Sixth_AShape_1',\r\n    Chord_Sixth_GShape_1 = 'Chord_Sixth_GShape_1',\r\n    Chord_Sixth_EShape_1 = 'Chord_Sixth_EShape_1',\r\n    Chord_Sixth_DShape_1 = 'Chord_Sixth_DShape_1',\r\n    Chord_Seventh_CShape_1 = 'Chord_Seventh_CShape_1',\r\n    Chord_Seventh_AShape_1 = 'Chord_Seventh_AShape_1',\r\n    Chord_Seventh_GShape_1 = 'Chord_Seventh_GShape_1',\r\n    Chord_Seventh_EShape_1 = 'Chord_Seventh_EShape_1',\r\n    Chord_Seventh_DShape_1 = 'Chord_Seventh_DShape_1',\r\n    Chord_Shell_E_37 = 'Chord_Shell_E_37',\r\n    Chord_Shell_E_73 = 'Chord_Shell_E_73',\r\n    Chord_Shell_A_37 = 'Chord_Shell_A_37',\r\n    Chord_Shell_A_73 = 'Chord_Shell_A_73',\r\n    Chord_Shell_D_37 = 'Chord_Shell_D_37',\r\n    Chord_Shell_D_73 = 'Chord_Shell_D_73',\r\n    Scale_DoubleOctave_CShape_1 = 'Scale_DoubleOctave_CShape_1',\r\n    Scale_DoubleOctave_CShape_2 = 'Scale_DoubleOctave_CShape_2',\r\n    Scale_DoubleOctave_AShape_1 = 'Scale_DoubleOctave_AShape_1',\r\n    Scale_DoubleOctave_GShape_1 = 'Scale_DoubleOctave_GShape_1',\r\n    Scale_DoubleOctave_EShape_1 = 'Scale_DoubleOctave_EShape_1',\r\n    Scale_DoubleOctave_EShape_2 = 'Scale_DoubleOctave_EShape_2',\r\n    Scale_DoubleOctave_DShape_1 = 'Scale_DoubleOctave_DShape_1',\r\n}\r\n\r\nexport interface IVoicing {\r\n    id: VoicingId;\r\n    name: string;\r\n    value: (number | number[])[]\r\n}\r\n\r\nconst formatPreset = (id: VoicingId, name: string, value: (number | number[])[]): IVoicing => ({\r\n    id,\r\n    name,\r\n    value\r\n});\r\n\r\nexport const VOICING_PRESET_MAP = new Map<VoicingId, IVoicing>([\r\n    // Triads\r\n    [VoicingId.Chord_Triad_CShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_CShape_1,\r\n        'C Shape Triad',\r\n        [3, 1, 5, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Triad_AShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_AShape_1,\r\n        'A Shape Triad',\r\n        [5, 3, 1, 5, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Triad_GShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_GShape_1,\r\n        'G Shape Triad',\r\n        [1, 5, 1, 5, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Triad_EShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_EShape_1,\r\n        'E Shape Triad',\r\n        [1, 5, 3, 1, 5, 1]\r\n    )],\r\n    [VoicingId.Chord_Triad_DShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_DShape_1,\r\n        'D Shape Triad',\r\n        [3, 1, 5, 1, null, null]\r\n    )],\r\n    // Sixths\r\n    [VoicingId.Chord_Sixth_CShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_CShape_1,\r\n        'C Shape 6th Chord',\r\n        [3, 6, 5, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Sixth_AShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_AShape_1,\r\n        'A Shape 6th Chord',\r\n        [5, 3, 6, 5, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Sixth_GShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_GShape_1,\r\n        'G Shape 6th Chord',\r\n        [6, 5, 1, 5, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Sixth_EShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_EShape_1,\r\n        'E Shape 6th Chord',\r\n        [1, 5, 3, 6, 5, 1]\r\n    )],\r\n    [VoicingId.Chord_Sixth_DShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_DShape_1,\r\n        'D Shape 6th Chord',\r\n        [3, 6, 5, 1, null, null]\r\n    )],\r\n    // Sevenths\r\n    [VoicingId.Chord_Seventh_CShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_CShape_1,\r\n        'C Shape 7th Chord',\r\n        [3, 7, 5, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Seventh_AShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_AShape_1,\r\n        'A Shape 7th Chord',\r\n        [5, 3, 7, 5, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Seventh_GShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_GShape_1,\r\n        'G Shape 7th Chord',\r\n        [7, 5, 1, 5, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Seventh_EShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_EShape_1,\r\n        'E Shape 7th Chord',\r\n        [1, 5, 3, 7, 5, 1]\r\n    )],\r\n    [VoicingId.Chord_Seventh_DShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_DShape_1,\r\n        'D Shape 7th Chord',\r\n        [3, 7, 5, 1, null, null]\r\n    )],\r\n    // Shells\r\n    [VoicingId.Chord_Shell_E_37, formatPreset(\r\n        VoicingId.Chord_Shell_E_37,\r\n        'Shell E 3-7',\r\n        [null, null, null, 7, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Shell_E_73, formatPreset(\r\n        VoicingId.Chord_Shell_E_73,\r\n        'Shell E 7-3',\r\n        [null, null, 3, 7, null, 1]\r\n    )],\r\n    [VoicingId.Chord_Shell_A_37, formatPreset(\r\n        VoicingId.Chord_Shell_A_37,\r\n        'Shell A 3-7',\r\n        [null, null, 7, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Shell_A_73, formatPreset(\r\n        VoicingId.Chord_Shell_A_73,\r\n        'Shell A 7-3',\r\n        [null, 3, 7, null, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Shell_D_37, formatPreset(\r\n        VoicingId.Chord_Shell_D_37,\r\n        'Shell D 3-7',\r\n        [null, 7, 3, 1, null, null]\r\n    )],\r\n    [VoicingId.Chord_Shell_D_73, formatPreset(\r\n        VoicingId.Chord_Shell_D_73,\r\n        'Shell D 7-3',\r\n        [3, 7, null, 1, null, null]\r\n    )],\r\n    // CAGED Scales\r\n    [VoicingId.Scale_DoubleOctave_EShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_EShape_1,\r\n        'E Shape Scale (Locrian)',\r\n        [[1, 2, 3], [6, 7], [3, 4, 5], [7, 1, 2], [4, 5, 6], [1, 2, 3]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_EShape_2, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_EShape_2,\r\n        'E Shape Scale (Ionian)',\r\n        [[7, 1, 2], [5, 6], [2, 3, 4], [6, 7, 1], [3, 4, 5], [1, 2]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_DShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_DShape_1,\r\n        'D Shape Scale (Dorian)',\r\n        [[1, 2, 3], [5, 6, 7], [2, 3, 4], [6, 7, 1], [4, 5], [1, 2, 3]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_CShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_CShape_1,\r\n        'C Shape Scale (Phrygian)',\r\n        [[1, 2, 3], [5, 6, 7], [3, 4], [7, 1, 2], [4, 5, 6], [1, 2, 3]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_CShape_2, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_CShape_2,\r\n        'C Shape Scale (Lydian)',\r\n        [[7, 1, 2], [4, 5, 6], [2, 3], [6, 7, 1], [3, 4, 5], [1, 2]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_AShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_AShape_1,\r\n        'A Shape Scale (Mixolydian)',\r\n        [[1, 2], [5, 6, 7], [2, 3, 4], [6, 7, 1], [3, 4, 5], [1, 2]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_GShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_GShape_1,\r\n        'G Shape Scale (Aeolian)',\r\n        [[1, 2, 3], [5, 6, 7], [2, 3, 4], [7, 1], [4, 5, 6], [1, 2, 3]]\r\n    )]\r\n])\r\n\r\nexport const VOICING_PRESETS = ArrayUtils.mapToArray(VOICING_PRESET_MAP);\r\n"],"names":["StyledVoicingsPage","styled","PageLayout","displayName","componentId","THEAD","CHORD_IDS","ChordId","CHORD_ROOT","Note","NoteId","CARDS","stringRoot","fretRange","voicingids","VoicingId","getVoicingCols","voicingIds","modelId","root","map","voicingId","i","instance","Chord","voicing","VOICING_PRESET_MAP","content","React","FretboardCell","fretboardConfig","model","showFretNumbers","showFretDots","getChordRows","chordIds","cols","getName","getCardConfigs","cards","title","table","thead","tbody","headerColIndicies","getRootCard","SmartCard","StyledCard","props","theme","surface","card","CardHeader","level","action","AsTag","className","subtitle","children","rest","StyledFretboardCell","caption","FretTable","StyledSmartCard","Card","Table","StyledTable","getIsTypeOmit","data","Col","index","isHeader","colSpan","link","ColTag","WrapperTag","Link","Fragment","wrapperProps","to","Row","col","isConfig","hasOwnProperty","getIsConfig","colConfig","key","includes","TableSection","Tag","rows","row","tfoot","styles","colGroups","cg","StyledFretFlag","$color","$opacity","color","text","opacity","StyledFretTable","tableStyles","css","userProps","DEFAULT_FRETBOARD_PROPS","tuning","colorMapFn","lo","hi","numFrets","numStrings","length","fretNums","push","fretDots","getDotsForFret","strings","s","frets","f","FretFlag","stringIndex","fretIndex","undefined","TuningId","formatPreset","id","name","value","getPitch","noteId","octave","pod","TUNING_PRESET_MAP","Map","Standard","Flat","DoubleFlat","StandardSeven","StandardBass","DropD","DADGAD","Violin","OpenA","OpenB","OpenC","OpenD","OpenE","OpenF","OpenG","FRETBOARD_TUNING_VALUES","ArrayUtils","DOTTED_FRET_INDICES","isIntervalInVoicing","Math","pow","interval","v","d","getDegree","Array","isArray","some","n","doesVoicingValueMatch","noteIndex","tryGetPodPairAtPitch","getColor","fretNumber","mod","Chord_Triad_CShape_1","Chord_Triad_AShape_1","Chord_Triad_GShape_1","Chord_Triad_EShape_1","Chord_Triad_DShape_1","Chord_Sixth_CShape_1","Chord_Sixth_AShape_1","Chord_Sixth_GShape_1","Chord_Sixth_EShape_1","Chord_Sixth_DShape_1","Chord_Seventh_CShape_1","Chord_Seventh_AShape_1","Chord_Seventh_GShape_1","Chord_Seventh_EShape_1","Chord_Seventh_DShape_1","Chord_Shell_E_37","Chord_Shell_E_73","Chord_Shell_A_37","Chord_Shell_A_73","Chord_Shell_D_37","Chord_Shell_D_73","Scale_DoubleOctave_EShape_1","Scale_DoubleOctave_EShape_2","Scale_DoubleOctave_DShape_1","Scale_DoubleOctave_CShape_1","Scale_DoubleOctave_CShape_2","Scale_DoubleOctave_AShape_1","Scale_DoubleOctave_GShape_1","VOICING_PRESETS"],"sourceRoot":""}