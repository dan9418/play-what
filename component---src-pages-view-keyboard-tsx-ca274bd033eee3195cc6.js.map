{"version":3,"file":"component---src-pages-view-keyboard-tsx-ca274bd033eee3195cc6.js","mappings":"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","sources":["webpack://play-what/./src/components/inputs/NumericInput.tsx","webpack://play-what/./src/core/routing/Routing.utils.ts","webpack://play-what/./src/components/pages/view/DetailsCol.tsx","webpack://play-what/./src/components/layout/Modal.tsx","webpack://play-what/./src/components/pages/view/MainCol.tsx","webpack://play-what/./src/components/pages/view/NotesCol.tsx","webpack://play-what/./src/components/pages/view/TabCard.tsx","webpack://play-what/./src/components/pages/view/useModelQueryParams.tsx","webpack://play-what/./src/components/pages/view/useModelState.tsx","webpack://play-what/./src/components/pages/view/KeyboardCol.tsx","webpack://play-what/./src/components/pages/view/KeyboardPage.tsx","webpack://play-what/./src/pages/view/keyboard.tsx"],"sourcesContent":["import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport Icon from \"../ui/Icon\";\r\nimport ButtonInput from \"./ButtonInput\";\r\n\r\nexport const StyledNumbericInput = styled.div`\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\r\n\tinput, button {\r\n\t\theight: 32px;\r\n\t\tpadding: 0;\r\n\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t}\r\n\r\n\tbutton {\r\n\t\twidth: 32px;\r\n\t\tborder: 1px solid ${({ theme }) => theme.utils.border};\r\n\t\tsvg, svg * {\r\n\t\t\tfill: white;\r\n\t\t}\r\n\r\n\t\tbackground-color: ${({ theme }) => theme.status.interactive};\r\n\t\tcolor: white;\r\n\t\t&:hover {\r\n\t\t\tbackground-color: ${({ theme }) => theme.status.active};\r\n\t\t}\r\n\r\n\t\t:first-child {\r\n\t\t\tborder-right: none;\r\n\t\t\tborder-radius: 8px 0 0 8px;\r\n\t\t}\r\n\t\t:last-child {\r\n\t\t\tborder-left: none;\r\n\t\t\tborder-radius: 0 8px 8px 0\r\n\t\t}\r\n\t}\r\n\r\n\tinput {\r\n\t\twidth: 48px;\r\n\t\tcursor: pointer;\r\n\t\tborder: none;\r\n\t\tfont-weight: bold;\r\n\t\ttext-align: center;\r\n\t\tbackground-color: white;\r\n\t\t&:hover {\r\n\t\t\tbackground-color: ${({ theme }) => theme.status.highlight};\r\n\t\t}\r\n\r\n\t\tborder: 1px solid ${({ theme }) => theme.utils.border};\r\n\t}\r\n    \r\n\tfont-size: 110%;\r\n\tcursor: pointer;\r\n`;\r\n\r\ninterface INumericInputProps {\r\n\tvalue: number;\r\n\tsetValue: (number) => void;\r\n\tmin?: number;\r\n\tmax?: number;\r\n}\r\n\r\nconst NumericInput: React.FC<INumericInputProps> = ({ value, setValue, ...rest }) => {\r\n\tconst onChange = e => setValue(parseInt(e.target.value));\r\n\r\n\tconst onDown = () => {\r\n\t\tlet newVal = value - 1;\r\n\t\tif (typeof rest.min !== 'undefined') {\r\n\t\t\tnewVal = Math.max(rest.min, newVal);\r\n\t\t}\r\n\t\tsetValue(newVal);\r\n\t};\r\n\r\n\tconst onUp = () => {\r\n\t\tlet newVal = value + 1;\r\n\t\tif (typeof rest.max !== 'undefined') {\r\n\t\t\tnewVal = Math.min(rest.max, newVal);\r\n\t\t}\r\n\t\tsetValue(newVal);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<StyledNumbericInput>\r\n\t\t\t<ButtonInput onClick={onDown}><Icon iconId=\"minus\" size={12} /></ButtonInput>\r\n\t\t\t<input type=\"number\" value={value} onChange={null} {...rest} />\r\n\t\t\t<ButtonInput onClick={onUp}><Icon iconId=\"plus\" size={12} /></ButtonInput>\r\n\t\t</StyledNumbericInput>\r\n\t);\r\n}\r\n\r\nexport default NumericInput;\r\n","import { ModelId, ModelType, NoteId } from \"../models/Model.constants\";\r\n\r\nexport const getModelRoute = (modelType: ModelType, modelId: ModelId, rootId?: NoteId) => {\r\n\r\n    const rootSuffix = rootId ? `/root/${rootId}` : '';\r\n\r\n    return `/browse/${modelType}/${modelId}${rootSuffix}`;\r\n}\r\n","import { Link } from \"gatsby\";\r\nimport React from \"react\";\r\nimport styled from 'styled-components';\r\nimport Chord from \"../../../core/models/Chord\";\r\nimport { IModelConfig } from \"../../../core/models/Model.constants\";\r\nimport Scale from \"../../../core/models/Scale\";\r\nimport { getModelRoute } from \"../../../core/routing/Routing.utils\";\r\nimport Card from \"../../ui/Card\";\r\nimport InputRow from \"../../ui/InputRow\";\r\nimport { MODEL_TYPE_OPTIONS } from \"./NotesCol\";\r\n\r\nconst StyledDetailsCol = styled.div`\r\n    \r\n`;\r\n\r\nexport interface IDetailsColProps {\r\n    modelType: typeof MODEL_TYPE_OPTIONS[0];\r\n    modelConfig;\r\n    root: IModelConfig | any;\r\n    model: Chord | Scale;\r\n    setModelType?;\r\n    setModelConfig?;\r\n    setRoot?;\r\n    setModel?;\r\n}\r\n\r\nconst DetailsCol: React.FC<IDetailsColProps> = props => {\r\n\r\n    const { modelType, modelConfig, root, setModelType: _setModelType, setModelConfig: _setModelConfig, setRoot: _setRoot, model, setModel } = props;\r\n\r\n    return (\r\n        <StyledDetailsCol>\r\n            <InputRow label=\"Name\">\r\n                <Link to={getModelRoute(modelType.id, modelConfig.modelId, root.modelId)}>{model.name}</Link>\r\n            </InputRow>\r\n            <InputRow label=\"Instrument\">\r\n                Guitar\r\n            </InputRow>\r\n        </StyledDetailsCol>\r\n    );\r\n};\r\n\r\nexport default DetailsCol;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport ButtonInput from '../inputs/ButtonInput';\r\nimport Card, { StyledCard } from '../ui/Card';\r\nimport Icon from '../ui/Icon';\r\n\r\nconst StyledOverlay = styled.div`\r\n    //width: 100vw;\r\n    //height: 100vw;\r\n    opacity: 0.8;\r\n    background-color: black;\r\n    position: fixed;\r\n    top: 48px;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 3000;\r\n`\r\n\r\nconst StyledContainer = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    position: fixed;\r\n    top: 48px;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 3001;\r\n\r\n    & > ${StyledCard} {\r\n        width: 80%;\r\n        height: 80%;\r\n        position: relative;\r\n        padding: 64px 16px;\r\n\r\n        overflow: auto;\r\n        resize: both;\r\n\r\n        .close {\r\n            position: absolute;\r\n            top: 16px;\r\n            right: 16px;\r\n            background-color: transparent !important;\r\n        }\r\n    }\r\n`\r\n\r\nconst Modal: React.FC<any> = ({ setIsOpen, children, ...rest }) => {\r\n    return (\r\n        <>\r\n            <StyledOverlay />\r\n            <StyledContainer >\r\n                <Card {...rest} draggable=\"true\">\r\n                    <ButtonInput onClick={() => setIsOpen(false)} className=\"close\">\r\n                        <Icon iconId='close' />\r\n                    </ButtonInput>\r\n                    {children}\r\n                </Card>\r\n            </StyledContainer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { useState } from \"react\";\r\nimport styled from 'styled-components';\r\nimport ButtonInput from \"../../inputs/ButtonInput\";\r\nimport Modal from \"../../layout/Modal\";\r\nimport Card from \"../../ui/Card\";\r\nimport Icon from \"../../ui/Icon\";\r\n\r\nconst StyledMainCol = styled.div`\r\n    .maximize {\r\n        background-color: transparent !important;\r\n    }\r\n`;\r\n\r\ninterface IMainColProps {\r\n    title: string;\r\n    viewer: any;\r\n}\r\n\r\nconst MainCol: React.FC<IMainColProps> = (props) => {\r\n    const [isFullScreen, setIsFullScreen] = useState(false);\r\n\r\n    const { title, viewer } = props;\r\n\r\n    return (\r\n        <>\r\n            {isFullScreen && (\r\n                <Modal setIsOpen={setIsFullScreen}>\r\n                    <div className=\"resize\">\r\n                        {viewer}\r\n                    </div>\r\n                </Modal>\r\n            )}\r\n            <StyledMainCol>\r\n                <Card title={title} className=\"view\"\r\n                    action={<ButtonInput className=\"maximize\" onClick={() => setIsFullScreen(true)}>\r\n                        <Icon iconId=\"maximize\" />\r\n                    </ButtonInput>}\r\n                >\r\n                    {viewer}\r\n                </Card>\r\n            </StyledMainCol>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainCol;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport Chord from \"../../../core/models/Chord\";\r\nimport { ChordId, IModelConfig, ModelId, ModelType, NoteId, ScaleId } from \"../../../core/models/Model.constants\";\r\nimport { CHORD_PRESETS, NOTE_PRESETS, SCALE_PRESETS } from \"../../../core/models/Model.presets\";\r\nimport Note from \"../../../core/models/Note\";\r\nimport Scale from \"../../../core/models/Scale\";\r\nimport DropdownInput from \"../../inputs/DropdownInput\";\r\nimport Card, { CardHeader } from \"../../ui/Card\";\r\nimport InputRow from \"../../ui/InputRow\";\r\n\r\nconst StyledNotesCol = styled.div`\r\n    .header:not(:first-child) {\r\n        margin-top: 16px;\r\n    }\r\n`;\r\n\r\nexport const MODEL_TYPE_OPTIONS = [\r\n    {\r\n        id: ModelType.Chord,\r\n        name: 'Chords',\r\n        value: ModelType.Chord,\r\n        data: CHORD_PRESETS\r\n    },\r\n    {\r\n        id: ModelType.Scale,\r\n        name: 'Scales',\r\n        value: ModelType.Scale,\r\n        data: SCALE_PRESETS\r\n    }\r\n]\r\n\r\nexport interface INotesColProps {\r\n    modelType: typeof MODEL_TYPE_OPTIONS[0];\r\n    modelConfig;\r\n    root: IModelConfig | any;\r\n    model: Chord | Scale;\r\n    setModelType?;\r\n    setModelConfig?;\r\n    setRoot?;\r\n    setModel?;\r\n}\r\n\r\nexport const DEFAULT_MODEL_TYPE = MODEL_TYPE_OPTIONS[0];\r\nexport const DEFAULT_MODEL_CONFIG = MODEL_TYPE_OPTIONS[0].data[0];\r\nexport const DEFAULT_ROOT = NOTE_PRESETS[0];\r\n//export const DEFAULT_MODEL = new Chord(DEFAULT_MODEL_CONFIG.modelId, { root: Note.fromId(DEFAULT_ROOT.modelId) })\r\n\r\nexport const getNewModel = (modelType: ModelType, modelId: ModelId, root: NoteId) => {\r\n    let newModel;\r\n    if (modelType === ModelType.Chord) {\r\n        newModel = new Chord(modelId as ChordId, { root: Note.fromId(root) })\r\n    }\r\n    else if (modelType === ModelType.Scale) {\r\n        newModel = new Scale(modelId as ScaleId, { root: Note.fromId(root) })\r\n    }\r\n    return newModel;\r\n}\r\n\r\nconst NotesCol: React.FC<INotesColProps> = props => {\r\n\r\n    const { modelType, modelConfig, root, setModelType: _setModelType, setModelConfig: _setModelConfig, setRoot: _setRoot, model, setModel } = props;\r\n    const modelOptions = modelType.data;\r\n\r\n    const setModelType = type => {\r\n        _setModelType(type);\r\n        _setModelConfig(type.data[0])\r\n    }\r\n    const setModelConfig = config => {\r\n        let newModel = getNewModel(config.modelType, config.modelId, root.modelId);\r\n        _setModelConfig(config);\r\n        setModel(newModel);\r\n    }\r\n    const setRoot = newRoot => {\r\n        let newModel = getNewModel(modelConfig.modelType, modelConfig.modelId, newRoot.modelId);\r\n        _setRoot(newRoot);\r\n        setModel(newModel);\r\n    }\r\n\r\n    //console.log('dpb', MODEL_TYPE_OPTIONS, modelType, modelOptions, modelConfig)\r\n\r\n    return (\r\n        <StyledNotesCol>\r\n            <CardHeader title=\"Root\" />\r\n            <ul>\r\n                <li>\r\n                    <InputRow label=\"Key Center\">\r\n                        <DropdownInput value={root} setValue={setRoot} options={NOTE_PRESETS} idProperty=\"modelId\" />\r\n                    </InputRow>\r\n                </li>\r\n            </ul>\r\n\r\n            <CardHeader title=\"Intervals\" />\r\n            <ul>\r\n                <li>\r\n                    <InputRow label=\"Model Type\">\r\n                        <DropdownInput value={modelType} setValue={setModelType} options={MODEL_TYPE_OPTIONS} idProperty=\"id\" />\r\n                    </InputRow>\r\n                </li>\r\n                <li>\r\n                    <InputRow label=\"Preset\">\r\n                        <DropdownInput value={modelConfig} setValue={setModelConfig} options={modelOptions} idProperty=\"modelId\" />\r\n                    </InputRow>\r\n                </li>\r\n            </ul>\r\n        </StyledNotesCol>\r\n    );\r\n};\r\n\r\nexport default NotesCol;\r\n","import React, { useState } from \"react\";\r\nimport styled from 'styled-components';\r\nimport { StyledCard } from \"../../ui/Card\";\r\n\r\nconst StyledTabCard = styled(StyledCard)`\r\n    > ul {\r\n        display: flex;\r\n        align-items: center;\r\n        //justify-content: space-between;\r\n        //border-bottom: 1px solid ${props => props.theme.utils.border};\r\n        margin-bottom: 16px;\r\n\r\n        button {\r\n            padding: 8px 16px;\r\n            appearance: none;\r\n            border: none;\r\n            cursor: pointer;\r\n            background-color: ${props => props.theme.surface.card};\r\n            border-bottom: 2px solid ${props => props.theme.utils.border};\r\n\r\n            font-size: 120%;\r\n\r\n            color: ${props => props.theme.text.secondary};\r\n\r\n            &:hover {\r\n                border-bottom: 2px solid  ${props => props.theme.action.interactive};\r\n                color: ${props => props.theme.text.primary};\r\n            }\r\n            \r\n            &.active {\r\n                border-color: ${props => props.theme.action.active};\r\n                font-weight: bold;\r\n                color: ${props => props.theme.text.primary};\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst TabCard: React.FC<any> = ({ tabs }) => {\r\n    const [index, setIndex] = useState(0);\r\n\r\n    return (\r\n        <StyledTabCard>\r\n            <ul>\r\n                {tabs.map((t, i) => (\r\n                    <li key={t.text}>\r\n                        <button\r\n                            type=\"button\"\r\n                            onClick={() => setIndex(i)}\r\n                            className={i === index ? 'active' : ''}\r\n                        >\r\n                            {t.text}\r\n                        </button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            <div>\r\n                {tabs[index].content}\r\n            </div>\r\n        </StyledTabCard>\r\n    );\r\n};\r\n\r\nexport default TabCard;\r\n","import { useQueryParam } from \"use-query-params\";\r\n\r\nconst useModelQueryParams = () => {\r\n    const [qpModelType] = useQueryParam('modelType');\r\n    const [qpModelId] = useQueryParam('modelId');\r\n    const [qpRootId] = useQueryParam('rootId');\r\n\r\n    return [qpModelType, qpModelId, qpRootId];\r\n}\r\n\r\nexport default useModelQueryParams;\r\n","import { useState } from \"react\";\r\nimport { NOTE_PRESETS } from \"../../../core/models/Model.presets\";\r\nimport { DEFAULT_MODEL_CONFIG, DEFAULT_MODEL_TYPE, DEFAULT_ROOT, getNewModel, MODEL_TYPE_OPTIONS } from \"./NotesCol\";\r\n\r\nconst getInitModelType = (qpModelType?: string) => {\r\n    const found = MODEL_TYPE_OPTIONS.find(type => type.id && type.id === qpModelType);\r\n    return found || DEFAULT_MODEL_TYPE;\r\n}\r\n\r\nconst getInitModelConfig = (modelType, qpModelId?: string) => {\r\n    const found = modelType.data.find(preset => preset.modelId === qpModelId);\r\n    return found || DEFAULT_MODEL_CONFIG;\r\n}\r\n\r\nconst getInitRoot = (qpRootId?: string) => {\r\n    const found = NOTE_PRESETS.find(note => note.modelId === qpRootId);\r\n    return found || DEFAULT_ROOT;\r\n}\r\n\r\nexport const useModelState = (initModelType, initModelId, initRootId) => {\r\n    const [modelType, setModelType] = useState(getInitModelType(initModelType));\r\n    const [modelConfig, setModelConfig] = useState(getInitModelConfig(modelType, initModelId));\r\n\r\n    const [root, setRoot] = useState(getInitRoot(initRootId));\r\n    const [model, setModel] = useState(getNewModel(modelType.id, modelConfig.modelId, root.modelId));\r\n\r\n    return {\r\n        modelType,\r\n        setModelType,\r\n        modelConfig,\r\n        setModelConfig,\r\n        root,\r\n        setRoot,\r\n        model,\r\n        setModel\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport DEFAULT_KEYBOARD_PROPS from \"../../../viewers/keyboard/Keyboard.defaults\";\r\nimport NumericInput from \"../../inputs/NumericInput\";\r\nimport Card from \"../../ui/Card\";\r\nimport InputRow from \"../../ui/InputRow\";\r\n\r\nconst StyledKeyboardCol = styled.div`\r\n\r\n`;\r\n\r\n\r\nexport interface IKeyboardColProps {\r\n    keyRange;\r\n    setKeyRange;\r\n    model;\r\n}\r\n\r\nexport const DEFAULT_KEY_RANGE = DEFAULT_KEYBOARD_PROPS.keyRange as [number, number];\r\n\r\nconst KeyboardCol: React.FC<IKeyboardColProps> = ({ keyRange, setKeyRange }) => {\r\n\r\n    const [keyLo, keyHi] = keyRange;\r\n\r\n    return (\r\n        <StyledKeyboardCol>\r\n            <Card title=\"Range\">\r\n                <ul>\r\n                    <li>\r\n                        <InputRow label=\"Low Key\">\r\n                            <NumericInput value={keyLo} min={-88} max={keyHi} setValue={v => setKeyRange([v, keyHi])} />\r\n                        </InputRow>\r\n                    </li>\r\n                    <li>\r\n                        <InputRow label=\"High Key\">\r\n                            <NumericInput value={keyHi} min={keyLo} max={88} setValue={v => setKeyRange([keyLo, v])} />\r\n                        </InputRow>\r\n                    </li>\r\n                </ul>\r\n            </Card >\r\n        </StyledKeyboardCol>\r\n    );\r\n};\r\n\r\nexport default KeyboardCol;\r\n","import React, { useState } from \"react\";\r\nimport styled from 'styled-components';\r\nimport Keyboard from \"../../../viewers/keyboard/Keyboard\";\r\nimport ColumnManager, { StyledColumnManager } from \"../../column-manager/ColumnManager\";\r\nimport PageTitle from \"../../layout/PageTitle\";\r\nimport { StyledCard } from \"../../ui/Card\";\r\nimport DetailsCol from \"./DetailsCol\";\r\nimport KeyboardCol, { DEFAULT_KEY_RANGE } from \"./KeyboardCol\";\r\nimport MainCol from \"./MainCol\";\r\nimport NotesCol from \"./NotesCol\";\r\nimport TabCard from \"./TabCard\";\r\nimport useModelQueryParams from \"./useModelQueryParams\";\r\nimport { useModelState } from \"./useModelState\";\r\n\r\nconst StyledKeyboardPage = styled.div`\r\n    min-height: 95vh;\r\n    padding: 16px;\r\n\r\n    ${StyledColumnManager} {\r\n        & > div > ${StyledCard}:not(:last-child) {\r\n            margin-bottom: 16px;\r\n        }\r\n    }\r\n\r\n    ${StyledColumnManager} {\r\n        margin-top: 16px;\r\n    }\r\n`;\r\n\r\n\r\n\r\nconst KeyboardPage: React.FC = () => {\r\n\r\n    const [qpModelType, qpModelId, qpRootId] = useModelQueryParams();\r\n    const modelState = useModelState(qpModelType, qpModelId, qpRootId);\r\n    const {\r\n        modelType,\r\n        setModelType,\r\n        modelConfig,\r\n        setModelConfig,\r\n        root,\r\n        setRoot,\r\n        model,\r\n        setModel\r\n    } = modelState;\r\n\r\n    const [keyRange, setKeyRange] = useState<[number, number]>(DEFAULT_KEY_RANGE);\r\n\r\n    const instrumentColProps = {\r\n        model,\r\n        keyRange,\r\n        setKeyRange\r\n    }\r\n\r\n    const notesColProps = {\r\n        modelType,\r\n        setModelType,\r\n        modelConfig,\r\n        setModelConfig,\r\n        root,\r\n        setRoot,\r\n        model,\r\n        setModel\r\n    }\r\n\r\n    const mainColProps = {\r\n        title: 'Keyboard',\r\n        viewer: <Keyboard\r\n            {...instrumentColProps}\r\n            {...notesColProps}\r\n        />\r\n    };\r\n\r\n    return (\r\n        <StyledKeyboardPage>\r\n            <PageTitle title=\"Keyboard\" />\r\n            <ColumnManager desktop={[\"1fr\", \"1fr\"]}>\r\n                <MainCol {...mainColProps} />\r\n                <TabCard\r\n                    tabs={[\r\n                        {\r\n                            text: 'Summary',\r\n                            content: <DetailsCol {...notesColProps} />\r\n                        },\r\n                        {\r\n                            text: 'Instrument',\r\n                            content: <KeyboardCol {...instrumentColProps} />\r\n                        },\r\n                        {\r\n                            text: 'Notes',\r\n                            content: <NotesCol {...notesColProps} />\r\n                        }\r\n                    ]}\r\n                />\r\n            </ColumnManager>\r\n        </StyledKeyboardPage>\r\n    );\r\n};\r\n\r\nexport default KeyboardPage;\r\n","import KeyboardPage from \"../../components/pages/view/KeyboardPage\";\r\n\r\nexport default KeyboardPage;\r\n"],"names":["StyledNumbericInput","styled","theme","utils","border","status","interactive","active","highlight","value","setValue","rest","React","ButtonInput","onClick","newVal","min","Math","max","Icon","iconId","size","type","onChange","getModelRoute","modelType","modelId","rootId","StyledDetailsCol","props","modelConfig","root","model","setModelType","setModelConfig","setRoot","setModel","InputRow","label","Link","to","id","name","StyledOverlay","StyledContainer","StyledCard","setIsOpen","children","Card","draggable","className","StyledMainCol","useState","isFullScreen","setIsFullScreen","title","viewer","Modal","action","StyledNotesCol","MODEL_TYPE_OPTIONS","ModelType","data","CHORD_PRESETS","SCALE_PRESETS","DEFAULT_MODEL_TYPE","DEFAULT_MODEL_CONFIG","DEFAULT_ROOT","NOTE_PRESETS","getNewModel","newModel","Chord","Note","Scale","_setModelType","_setModelConfig","_setRoot","modelOptions","CardHeader","DropdownInput","newRoot","options","idProperty","config","StyledTabCard","withConfig","surface","card","text","secondary","primary","tabs","index","setIndex","map","t","i","key","content","useQueryParam","useModelState","initModelType","initModelId","initRootId","qpModelType","qpRootId","qpModelId","find","preset","getInitModelConfig","note","StyledKeyboardCol","DEFAULT_KEY_RANGE","DEFAULT_KEYBOARD_PROPS","keyRange","setKeyRange","keyLo","keyHi","NumericInput","v","StyledKeyboardPage","StyledColumnManager","useModelQueryParams","modelState","instrumentColProps","notesColProps","mainColProps","Keyboard","PageTitle","ColumnManager","desktop","MainCol","TabCard","DetailsCol","KeyboardCol","NotesCol"],"sourceRoot":""}