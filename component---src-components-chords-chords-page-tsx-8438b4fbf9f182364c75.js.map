{"version":3,"file":"component---src-components-chords-chords-page-tsx-8438b4fbf9f182364c75.js","mappings":"wMAMMA,EAAuBC,EAAAA,QAAAA,GAAAA,WAAH,gFAAGA,CAAH,2OAmBT,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,KAAKC,aA2B3C,EAvBuB,WACnB,IACIC,GADaC,EAAAA,EAAAA,MAATC,KACUC,MAAM,KAClBC,EAAQ,GAiBd,OAhBAJ,EAAOK,QAAO,SAACC,EAAMC,EAAKC,EAAGC,GACzB,IAAMP,GAAUI,EAAH,IAAWC,GAAMG,QAAQ,KAAM,MAAQ,IAC9CC,GAAU,CAAC,QAAQC,SAASL,GAC5BT,EAAa,IAANU,EAAU,OAASD,EAAIM,WAAW,IAAK,KAAKH,QAAQ,SAAU,KAAKA,QAAQ,QAAS,KAE3FI,EAAMH,EAASI,EAAAA,GAAO,OACtBC,EAAKL,EAAST,OAAOe,EAQ3B,OANAb,EAAMc,KACF,sBAAIC,IAAKX,GACJA,EAAI,GAAK,gBAACY,EAAA,GAAD,CAAMC,OAAO,OAAOC,KAAM,GAAIC,MAAM,SAC9C,gBAACT,EAAD,CAAKE,GAAIA,GAAKlB,KAGfI,IACR,KACI,gBAACR,EAAD,KAAuBU,EAAMoB,MAAM,EAAGpB,EAAMqB,OAAS,K,UC5C1DC,EAAkB/B,EAAAA,QAAAA,IAAAA,WAAH,qEAAGA,CAAH,iWAIc,qBAAGE,MAAkB8B,MAAMC,UAezC,qBAAG/B,MAAkBC,KAAK+B,WAO1B,qBAAGhC,MAAkBC,KAAKC,aAyB/C,EAhBiC,SAAC,GAAmC,IAAjC+B,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SACjD,OACI,gCACI,gBAACC,EAAA,EAAD,CAAKH,MAAOA,IACZ,gBAAC,EAAD,MACA,gBAACJ,EAAD,KACI,uBAAKQ,UAAU,UACX,0BAAKJ,GACJC,GAAY,0BAAKA,IAErBC,M,uFChDJG,EAAmBxC,EAAAA,QAAAA,IAAAA,WAAH,iEAAGA,CAAH,6GAShByC,EAAazC,EAAAA,QAAAA,IAAAA,WAAH,2DAAGA,CAAH,iE,oHCRV0C,EAAa1C,EAAAA,QAAAA,IAAAA,WAAH,2DAAGA,CAAH,0JACL,SAAAC,GAAK,OAAIA,EAAMC,MAAMyC,QAAQC,QA2B/C,IAd4B,SAAC,GAA0C,IAAxCT,EAAuC,EAAvCA,MAAOU,EAAgC,EAAhCA,OAAQR,EAAwB,EAAxBA,SAAaS,GAAW,YAClE,OACI,gBAACJ,EAAeI,EACXX,GACG,uBAAKI,UAAU,UACX,0BAAKJ,GACJU,GAGRR,K,2ICdPU,GAAmB/C,EAAAA,EAAAA,SAAOgD,EAAAA,GAAV,kFAAGhD,CAAH,uIAahByC,EAAAA,GA+FN,UAvFkC,SAAAxC,GAC9B,IAAMgD,GAAaC,EAAAA,EAAAA,MAEnB,OACI,gBAACH,EAAD,KACI,gBAAC,IAAD,CAAWZ,MAAM,SAASC,SAAS,8BACnC,2BACI,qBAAGG,UAAU,SAAb,wHAEgD,kCAFhD,kDAE4G,uCAF5G,OAIC,GAcL,gBAAC,IAAD,KACI,gBAAC,IAAD,KACI,gBAAC,IAAD,CAAgBJ,MAAM,aAAagB,KAAMC,EAAAA,MAE7C,gBAAC,IAAD,KACI,gBAAC,IAAD,CAAMjB,MAAM,SAASkB,GAAG,SACpB,2LAE+D,qCAF/D,mBAIA,sCACA,0BACI,0BAAI,gBAAC,KAAD,CAAMhC,GAAE,kBAAoBiC,EAAAA,EAAAA,SAApB,IAAwCL,GAAhD,gBACJ,0BAAI,gBAAC,KAAD,CAAM5B,GAAE,kBAAoBiC,EAAAA,EAAAA,SAApB,IAAwCL,GAAhD,gBACJ,0BAAI,gBAAC,KAAD,CAAM5B,GAAE,kBAAoBiC,EAAAA,EAAAA,SAApB,IAAwCL,GAAhD,oBACJ,0BAAI,gBAAC,KAAD,CAAM5B,GAAE,kBAAoBiC,EAAAA,EAAAA,SAApB,IAAwCL,GAAhD,uBAGZ,gBAAC,IAAD,CAAMd,MAAM,iBAAiBkB,GAAG,WAC5B,2GAGA,sCACA,0BACI,0BAAI,gBAAC,KAAD,CAAMhC,GAAE,kBAAoBiC,EAAAA,EAAAA,KAApB,IAAoCL,GAA5C,cACJ,0BAAI,gBAAC,KAAD,CAAM5B,GAAE,kBAAoBiC,EAAAA,EAAAA,KAApB,IAAoCL,GAA5C,cACJ,0BAAI,gBAAC,KAAD,CAAM5B,GAAE,kBAAoBiC,EAAAA,EAAAA,KAApB,IAAoCL,GAA5C,iBACJ,0BAAI,gBAAC,KAAD,CAAM5B,GAAE,kBAAoBiC,EAAAA,EAAAA,QAApB,IAAuCL,GAA/C,oBACJ,0BAAI,gBAAC,KAAD,CAAM5B,GAAE,kBAAoBiC,EAAAA,EAAAA,KAApB,IAAoCL,GAA5C,mBACJ,0BAAI,gBAAC,KAAD,CAAM5B,GAAE,kBAAoBiC,EAAAA,EAAAA,SAApB,IAAwCL,GAAhD,wBACJ,0BAAI,gBAAC,KAAD,CAAM5B,GAAE,kBAAoBiC,EAAAA,EAAAA,KAApB,IAAoCL,GAA5C,kBACJ,0BAAI,gBAAC,KAAD,CAAM5B,GAAE,kBAAoBiC,EAAAA,EAAAA,QAApB,IAAuCL,GAA/C,0BAGZ,gBAAC,IAAD,CAAMd,MAAM,eAAekB,GAAG,SAC1B,uJAIA,sCACA,0BACI,0BAAI,gBAAC,KAAD,CAAMhC,GAAE,kBAAoBiC,EAAAA,EAAAA,KAApB,IAAoCL,GAA5C,cACJ,0BAAI,gBAAC,KAAD,CAAM5B,GAAE,kBAAoBiC,EAAAA,EAAAA,KAApB,IAAoCL,GAA5C,gBAGZ,gBAAC,IAAD,CAAMd,MAAM,mBAAmBkB,GAAG,aAC9B,yIAGA,sCACA,0BACI,0BAAI,gBAAC,KAAD,CAAMhC,GAAE,kBAAoBiC,EAAAA,EAAAA,KAApB,IAAoCL,GAA5C,kBACJ,0BAAI,gBAAC,KAAD,CAAM5B,GAAE,kBAAoBiC,EAAAA,EAAAA,KAApB,IAAoCL,GAA5C,yB,uDC7FhC,IARsC,SAAC,GAAqB,IAAnBd,EAAkB,EAAlBA,MAAOgB,EAAW,EAAXA,KAC5C,OACI,gBAAC,IAAD,CAAMhB,MAAOA,GACT,gBAAC,IAAD,CAAiBgB,KAAMA,O,4FCJ7BI,EAAwBvD,EAAAA,QAAAA,MAAAA,WAAH,kFAAGA,CAAH,keAgCK,SAAAC,GAAK,OAAIA,EAAMC,MAAMyC,QAAQa,MAM7B,SAAAvD,GAAK,OAAIA,EAAMC,MAAMyC,QAAQc,OACxC,qBAAGvD,MAAkBC,KAAKuD,YAaX,qBAAGxD,MAAkB8B,MAAM2B,aAezDC,EAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IA8ClD,IA5CyD,SAAC,GAA8B,IAA5BT,EAA2B,EAA3BA,KAA2B,IAArBU,UAAAA,OAAqB,MAAT,GAAS,EAC7EZ,GAAaC,EAAAA,EAAAA,MACbY,GAAOC,EAAAA,EAAAA,MACb,OACI,gBAACR,EAAD,KACI,6BACI,0BACI,kCACCK,EAAUI,KAAI,SAACC,EAAGpD,GAAJ,OAAU,sBAAIW,IAAKX,GAAIoD,QAG9C,6BAEQd,EAAKa,KAAI,SAAAE,GACL,IACMC,EAAQ,IADHD,EAAEE,UAAYC,EAAAA,GAAAA,MAAgBC,EAAAA,EAAQC,EAAAA,GAC5BL,EAAEb,GAAI,CAAES,KAAAA,IAE7B,OACI,0BACI,0BACI,gBAAC,KAAD,CAAMzC,GAAE,WAAa8C,EAAMC,QAAnB,IAA8BD,EAAMd,GAApC,IAA0CJ,GAC7CkB,EAAMK,iBAGdZ,EAAUI,KAAI,SAACC,EAAGpD,GACf,IAAM4D,EAAQN,EAAMO,UAAUC,WAAU,SAAAC,GAAG,OAAIA,EAAIC,IAAI,GAAK,IAAMZ,KAC5D1B,EAAYsB,EAAU5C,SAASgD,GAAK,SAAW,GACrD,GAAIQ,EAAQ,EAAG,OAAO,sBAAIjD,IAAKX,EAAG0B,UAAWA,IAC7C,IAAMuC,EAAMhB,EAAOK,EAAMY,MAAMN,GAASN,EAAMO,UAAUD,GACxD,OACI,sBAAIjD,IAAKX,EAAG0B,UAAWA,GAClBuC,EAAIE,sB,qHC6B5BV,EAAAA,SAAAA,GAIjB,WAAYjB,EAAa4B,GAAsB,IAAD,kBAArBA,IAAAA,OAAU3D,IAC/B,cAAM4D,EAAAA,GAAkB7B,EAAI4B,IAA5B,MAHJb,QAAUC,EAAAA,GAAAA,MAEoC,EAM7C,OAVgBC,EAAAA,EAAAA,GAAAA,EAAAA,GAMhB,YAEDa,WAAA,SAAWC,GACP,OA5IU,SAACC,EAAQC,GACvB,OAAQD,GACJ,KAAK,EACD,OAAQC,GACJ,KAAKhC,EAAAA,EAAAA,SACL,KAAKA,EAAAA,EAAAA,KACD,MAAO,IACX,KAAKA,EAAAA,EAAAA,SACL,KAAKA,EAAAA,EAAAA,KACD,MAAO,IACX,KAAKA,EAAAA,EAAAA,KACD,MAAO,KACX,KAAKA,EAAAA,EAAAA,SACD,MAAO,MACX,KAAKA,EAAAA,EAAAA,SACD,MAAO,KACX,KAAKA,EAAAA,EAAAA,SACD,MAAO,KAGnB,KAAK,EACD,OAAQgC,GACJ,KAAKhC,EAAAA,EAAAA,SACL,KAAKA,EAAAA,EAAAA,KACD,MAAO,KACX,KAAKA,EAAAA,EAAAA,SACL,KAAKA,EAAAA,EAAAA,KACD,MAAO,KACX,KAAKA,EAAAA,EAAAA,KACD,MAAO,MACX,KAAKA,EAAAA,EAAAA,SACD,MAAO,OACX,KAAKA,EAAAA,EAAAA,SACD,MAAO,MACX,KAAKA,EAAAA,EAAAA,SACD,MAAO,MAGnB,KAAK,EACD,OAAQgC,GACJ,KAAKhC,EAAAA,EAAAA,SACL,KAAKA,EAAAA,EAAAA,KACD,MAAO,MACX,KAAKA,EAAAA,EAAAA,SACL,KAAKA,EAAAA,EAAAA,KACD,MAAO,OACX,KAAKA,EAAAA,EAAAA,KACD,MAAO,OACX,KAAKA,EAAAA,EAAAA,SACD,MAAO,QACX,KAAKA,EAAAA,EAAAA,SACD,MAAO,OACX,KAAKA,EAAAA,EAAAA,SACD,MAAO,OAGnB,KAAK,EACD,OAAQgC,GACJ,KAAKhC,EAAAA,EAAAA,SACL,KAAKA,EAAAA,EAAAA,KACD,MAAO,KACX,KAAKA,EAAAA,EAAAA,SACL,KAAKA,EAAAA,EAAAA,KACD,MAAO,KACX,KAAKA,EAAAA,EAAAA,KACD,MAAO,MACX,KAAKA,EAAAA,EAAAA,SACD,MAAO,OACX,KAAKA,EAAAA,EAAAA,SACD,MAAO,MACX,KAAKA,EAAAA,EAAAA,SACD,MAAO,MAGnB,KAAK,EACD,OAAQgC,GACJ,KAAKhC,EAAAA,EAAAA,SACL,KAAKA,EAAAA,EAAAA,KACD,MAAO,IACX,KAAKA,EAAAA,EAAAA,SACL,KAAKA,EAAAA,EAAAA,KACD,MAAO,IACX,KAAKA,EAAAA,EAAAA,KACD,MAAO,KACX,KAAKA,EAAAA,EAAAA,SACD,MAAO,MACX,KAAKA,EAAAA,EAAAA,SACD,MAAO,KACX,KAAKA,EAAAA,EAAAA,SACD,MAAO,KAGnB,KAAK,EACD,OAAQgC,GACJ,KAAKhC,EAAAA,EAAAA,SACL,KAAKA,EAAAA,EAAAA,KACD,MAAO,KACX,KAAKA,EAAAA,EAAAA,SACL,KAAKA,EAAAA,EAAAA,KACD,MAAO,KACX,KAAKA,EAAAA,EAAAA,KACD,MAAO,MACX,KAAKA,EAAAA,EAAAA,SACD,MAAO,OACX,KAAKA,EAAAA,EAAAA,SACD,MAAO,MACX,KAAKA,EAAAA,EAAAA,SACD,MAAO,MAGnB,KAAK,EACD,OAAQgC,GACJ,KAAKhC,EAAAA,EAAAA,SACL,KAAKA,EAAAA,EAAAA,KACD,MAAO,MACX,KAAKA,EAAAA,EAAAA,SACL,KAAKA,EAAAA,EAAAA,KACD,MAAO,MACX,KAAKA,EAAAA,EAAAA,KACD,MAAO,OACX,KAAKA,EAAAA,EAAAA,SACD,MAAO,QACX,KAAKA,EAAAA,EAAAA,SACD,MAAO,OACX,KAAKA,EAAAA,EAAAA,SACD,MAAO,SAeZiC,CAAUH,EAAGI,KAAKnC,KAC5B,EAVgBiB,CAAcmB,EAAAA,GAAdnB,EAYVoB,UAAY,SAACC,GAAD,OAAmBC,EAAAA,EAAAA,UAAgBxC,EAAAA,GAAekB,EAAOqB,EAAOE,EAAAA,GAAkBC,EAAAA,M,yIC7IpFC,EAAAA,SAAAA,GAKjB,WAAY1C,GAAiB,OACzB,YAAM2C,EAAAA,GAAAA,IAAwB3C,KADN,MALX0C,EAAAA,EAAAA,GAAAA,EAAAA,GAOhB,kBA6GA,OA7GA,EAIDE,SAAA,WACI,OAAOT,KAAKU,OAAO,IAAIH,EAAaI,EAAAA,GAAAA,KAChC,MAAQ,QAGf,EAEDnB,QAAA,WACI,IAAMoB,GAAUC,EAAAA,EAAAA,IAAUb,KAAKX,KAExByB,EAAgBF,EAAvB,GAAkBlC,EAAKkC,EAAvB,GACMG,EAAkBC,EAAAA,GAAetC,GACvC,IAAKqC,EAAiB,MAAO,IAE7B,IAAME,EAAOF,EAAgB,GACvBG,EAAQD,EACRE,EAAQJ,EAAgBA,EAAgBzE,OAAS,GAGnD8C,EAAM,KACNU,EAAU,KACiB,IAA3BiB,EAAgBzE,QAChB8C,EAAM6B,EACNnB,EAAUsB,EAAAA,GAAAA,SAELN,GAAaI,EAAMf,MAAM,IAC9Bf,EAAM8B,EACNpB,EAAUsB,EAAAA,GAAAA,KAELN,GAAaK,EAAMhB,MAAM,KAC9Bf,EAAM+B,EACNrB,EAAUsB,EAAAA,GAAAA,KAGd,IAAMC,EAASjC,EAAIe,MAAM,GAAKS,EAAQ,GAItC,GAFAZ,KAAKqB,OAASA,EAEC,IAAXA,EAAc,MAAM,GAAIvB,EAAQwB,QAAS5C,EAAI,GACxC2C,EAAS,EAAGvB,EAAUsB,EAAAA,GAAAA,IACtBC,EAAS,IAAGvB,EAAUsB,EAAAA,GAAAA,KAE/B,IAAMG,EAAQC,KAAKC,IAAIJ,GAkBvB,MAfW,GAFQvB,EAAQwB,OAAOI,OAAOH,IAEX7C,EAAI,IAgBrC,EAEDiD,SAAA,WACI,IAAOC,EAAK5B,KAAKX,IAAjB,GAEMwC,EAAWC,EAAAA,EAAAA,aAAyB,GAK1C,MAAM,MAJYA,EAAAA,EAAAA,aAAyBF,GAEjBC,GAERE,QAAQ,IAC7B,EAEDC,aAAA,SAAaC,GACT,QAAIA,EAAS3F,QAAU,KAChB4F,EAAAA,EAAAA,IAAmBD,EAAU,CAACjC,KAAKX,OAC7C,EAED8C,aAAA,WAAgB,IAAD,OACLC,EAAS,GAETC,EAASzE,EAAAA,GAAAA,QAAqB,SAAA0E,GAAM,OACtC,EAAKN,aAAaM,EAAOnC,UAGzBkC,EAAO/F,QACP8F,EAAOrG,KAAK,CACRwG,UAAW,SACXC,OAAQH,IAIhB,IAAMI,EAASC,EAAAA,GAAAA,QAAqB,SAAAJ,GAAM,OACtC,EAAKN,aAAaM,EAAOnC,UAU7B,OAPIsC,EAAOnG,QACP8F,EAAOrG,KAAK,CACRwG,UAAW,SACXC,OAAQC,IAITL,GACV,EApHgB7B,CAAqBoC,EAAAA,GAArBpC,EASVL,UAAY,SAACC,GAAD,OAAiBC,EAAAA,EAAAA,UAAgBwC,EAAAA,GAAkBrC,EAAcJ,EAAO0C,EAAAA,GAAchC,EAAAA,M,qHCNxFZ,EAAAA,SAAAA,GAUjB,WAAY6C,EAAWC,EAA6BtD,GAA4B,IAAD,GAC3E,sBAsBJD,QAAU,WACN,OAAU,EAAKlB,KAAU,EAAKA,KAAK0E,KAAzB,IAAmC,IAAK,EAAKA,MAxBoB,EA2B/EhE,aAAe,WACX,OAAOA,EAAAA,EAAAA,IAAa,EAAKgE,OAzBzB,IAAMV,EAASQ,EAAUG,IAAIF,GAC7B,IAAKT,EAAQ,MAAM,IAAIY,MAAJ,qBAA+BH,GAJyB,OAM3E,EAAKnE,QAAU0D,EAAO1D,QACtB,EAAKf,GAAKyE,EAAOzE,GACjB,EAAKmF,KAAOV,EAAOU,KACnB,EAAKG,KAAOb,EAAOa,KACnB,EAAKC,QAAUd,EAAOc,QACtB,EAAKC,QAAUf,EAAOnC,MACtB,EAAKjB,UAAYoD,EAAOnC,MAAM3B,KAAI,SAAAa,GAAG,OAAIkB,EAAAA,EAAAA,UAAuBlB,MAE5DI,GAAWA,EAAQnB,MACnB,EAAKgF,UAAU7D,EAAQnB,MAfgD,GAV9D2B,EAAAA,EAAAA,GAAAA,EAAAA,GA2BhB,kBAoFA,OApFA,EAEDS,OAAA,SAAO6C,GACH,OAAOlD,EAAAA,EAAAA,IAAiBL,KAAKqD,QAASE,EAAEF,UAC3C,EAUDC,UAAA,SAAUhF,GACN,IAAIiB,EACAiE,EACJ,IAEIjE,GADAiE,EAAWxD,KAAKd,UAAUV,KAAI,SAAAY,GAAG,OAAIqE,EAAAA,EAAAA,IAAQrE,EAAIC,IAAKf,EAAKe,SAC1Cb,KAAI,SAAAa,GAAG,OAAI,IAAIqE,EAAAA,EAAKrE,MAEzC,MAAOsE,GAEH,MADAC,QAAQC,MAAMF,GACR,IAAIT,MAAM,wBAMpB,OAJAlD,KAAK1B,KAAOA,EACZ0B,KAAKT,MAAQA,EACbS,KAAKwD,SAAWA,EAChBxD,KAAKgD,KAAOhD,KAAKR,UACVQ,MACV,EAED8D,sBAAA,WAEI,OADgB9D,KAAKd,UAAUV,KAAI,SAAAY,GAAG,OAAIA,EAAII,aAC/BuE,KAAK,OACvB,EAED/B,aAAA,SAAaC,GACT,QAAIA,EAAS3F,QAAU0D,KAAKqD,QAAQ/G,UAC7B4F,EAAAA,EAAAA,IAAmBD,EAAUjC,KAAKqD,UAC5C,EAEDW,eAAA,SAAeC,GACX,QAAIA,EAAO3H,QAAU0D,KAAKqD,QAAQ/G,UAC3B4F,EAAAA,EAAAA,IAAmBlC,KAAKqD,QAASY,IAC3C,EAEDC,aAAA,WAAgB,IAAD,OACX,OAAOtG,EAAAA,GAAAA,QAAqB,SAAA0E,GAAM,OAC9B,EAAK0B,eAAe1B,EAAOnC,WAElC,EAEDgE,eAAA,WAAkB,IAAD,OACb,OAAOvG,EAAAA,GAAAA,QAAqB,SAAA0E,GAAM,OAC9B,EAAKN,aAAaM,EAAOnC,WAEhC,EAEDiE,aAAA,WAAgB,IAAD,OACX,OAAO1B,EAAAA,GAAAA,QAAqB,SAAAJ,GAAM,OAC9B,EAAK0B,eAAe1B,EAAOnC,WAElC,EAEDkE,eAAA,WAAkB,IAAD,OACb,OAAO3B,EAAAA,GAAAA,QAAqB,SAAAJ,GAAM,OAC9B,EAAKN,aAAaM,EAAOnC,WAEhC,EAEDmE,WAAA,WACI,OAAOtE,KAAK8D,yBACf,EAEDS,qBAAA,SAAqBzD,GACjB,IAAM7B,GAAQuF,EAAAA,EAAAA,IAAqBxE,KAAKwD,SAAU1C,GAAW,GAE7D,OAAa,MAAT7B,EAAsB,MAACnD,OAAWA,GAE/B,CACHkE,KAAKd,UAAUD,GACfe,KAAKT,MAAMN,KAElB,EA/GgBgB,CAAgBG,EAAAA,I,6JCDhBrB,EAAAA,SAAAA,GAIjB,WAAYlB,EAAa4B,GAAsB,IAAD,kBAArBA,IAAAA,OAAU3D,IAC/B,cAAM2I,EAAAA,GAAkB5G,EAAI4B,IAA5B,MAHJb,QAAUC,EAAAA,GAAAA,MAEoC,GAJ7BE,EAAAA,EAAAA,GAAAA,EAAAA,GAMhB,kBA2EA,OA3EA,EAID2F,QAAA,SAAQhG,GACJ,IAAIiG,GAAO,OAAO3E,KAAKqD,SACvBsB,EAAUC,EAAAA,EAAAA,OAAkBD,EAASjG,GACrC,IAAK,IAAIrD,EAAK2E,KAAKqD,QAAQ/G,OAASoC,EAAIrD,EAAIsJ,EAAQrI,OAAQjB,IAAK,CAC7D,IAAMwJ,EAASF,EAAQtJ,GACvBsJ,EAAQtJ,GAAK,CAACwJ,EAAO,GAAK,GAAIA,EAAO,GAAK,GAK9C,IAFA,IAAMC,EAAkB,CAAC,CAAC,EAAG,IACvBC,EAAe,CAAC,IAAIxE,EAAAA,EAAaI,EAAAA,GAAAA,KAC9BtF,EAAI,EAAGA,EAAIsJ,EAAQrI,OAAS,EAAGjB,IAAK,CACzC,IAAM2J,GAASC,EAAAA,EAAAA,IAAaN,EAAQtJ,EAAI,GAAIsJ,EAAQ,IACpDG,EAAQ/I,KAAKiJ,GACb,IAAME,EAAS3E,EAAAA,EAAAA,UAAuByE,GACtCD,EAAahJ,KAAKmJ,GAQtB,OANanG,EAAMmB,UAAU4E,IAOhC,EAEDK,YAAA,WACI,IAAMC,EAAQ,GACd,GAAIpF,KAAKmD,KAAK1H,SAASE,EAAAA,GAAAA,WACnBqE,KAAKmD,KAAK1H,SAASE,EAAAA,GAAAA,aACnBqE,KAAKmD,KAAK1H,SAASE,EAAAA,GAAAA,cACnBqE,KAAKmD,KAAK1H,SAASE,EAAAA,GAAAA,cAEnB,IAAK,IAAIN,EAAI,EAAGA,EAAI2E,KAAKqD,QAAQ/G,OAAQjB,IACrC+J,EAAMrJ,KAAKiE,KAAK0E,QAAQrJ,IAGhC,OAAO+J,GACV,EAEDzF,WAAA,SAAWjB,GAGP,IADA,IAAM2G,EAAe,GACZhK,EAAI,EAAGA,EAAI2E,KAAKqD,QAAQ/G,OAAQjB,GAAQ,EAAG,CAChD,IAAMiK,EAAOC,EAAAA,EAAAA,UAAsB7G,EAAGrD,EAAG2E,KAAKqD,QAAQ/G,QAChDkJ,EAASxF,KAAKd,UAAUoG,GAC9BD,EAAatJ,KAAKyJ,GAKtB,IAFA,IAAMV,EAAkB,CAAC,CAAC,EAAG,IAEpBzJ,EAAI,EAAGA,EAAIgK,EAAa/I,OAAS,EAAGjB,IAAK,CAC9C,IAAM2J,GAASC,EAAAA,EAAAA,IAAaI,EAAahK,EAAI,GAAGgE,IAAKgG,EAAa,GAAGhG,KACrEyF,EAAQ/I,KAAKiJ,GAIjB,IAAMS,EAAU3G,EAAAA,EAAAA,UAAgBgG,GAIhC,OAHI9E,KAAK1B,MACLmH,EAAQnC,UAAUtD,KAAKT,MAAMb,IAE1B+G,GACV,EAEDC,eAAA,WACI,IAAMC,EAAW,GACjB,GAAI3F,KAAKmD,KAAK1H,SAASE,EAAAA,GAAAA,UACnB,IAAK,IAAIN,EAAI,EAAGA,EAAI2E,KAAKqD,QAAQ/G,OAAQjB,IACrCsK,EAAS5J,KAAKiE,KAAKL,WAAWtE,IAGtC,OAAOsK,GACV,EAjFgB5G,C,QAAckB,GAAdlB,EAQVmB,UAAY,SAACC,GAAD,OAAmBC,EAAAA,EAAAA,UAAgBsC,EAAAA,GAAe3D,EAAOoB,EAAOE,EAAAA,GAAkBC,EAAAA","sources":["webpack://play-what/./src/components/_shared/breadcrumb-list/BreadcrumbList.tsx","webpack://play-what/./src/components/_shared/layout/PageTitle.tsx","webpack://play-what/./src/components/_shared/layout/Pane.tsx","webpack://play-what/./src/components/_shared/ui/Card.tsx","webpack://play-what/./src/components/chords/ChordsPage.tsx","webpack://play-what/./src/components/collection/CollectionCard.tsx","webpack://play-what/./src/components/collection/CollectionTable.tsx","webpack://play-what/./src/core/models/Chord.ts","webpack://play-what/./src/core/models/Interval.ts","webpack://play-what/./src/core/models/PodList.ts","webpack://play-what/./src/core/models/Scale.ts"],"sourcesContent":["import { Link } from \"gatsby\";\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { usePageProps } from \"../../../contexts/PagePropsContext\";\r\nimport Icon from \"../ui/Icon\";\r\n\r\nconst StyledBreadcrumbList = styled.ul`\r\n    font-size: 80%;\r\n    padding: 0 0 8px 0;\r\n    @media(min-width: 512px) {\r\n        font-size: 110%;\r\n        padding: 0 0 16px 0;\r\n    }\r\n\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    gap: 8px;\r\n    white-space: nowrap;\r\n    text-transform: capitalize;\r\n    svg {\r\n        margin-right: 8px;\r\n    }\r\n\r\n    span {\r\n        color: ${props => props.theme.text.secondary};\r\n    }\r\n`\r\n\r\nconst BreadcrumbList = () => {\r\n    const { path } = usePageProps();\r\n    let pieces = path.split('/');\r\n    const paths = [];\r\n    pieces.reduce((prev, cur, i, arr) => {\r\n        const path = `${prev}/${cur}`.replace('//', '/') || '/';\r\n        const isLink = !['root'].includes(cur);\r\n        const text = i === 0 ? 'Home' : cur.replaceAll('-', ' ').replace(' sharp', '#').replace(' flat', 'b');\r\n\r\n        const Tag = isLink ? Link : 'span';\r\n        const to = isLink ? path : undefined;\r\n\r\n        paths.push(\r\n            <li key={i}>\r\n                {i > 0 && <Icon iconId=\"next\" size={10} color=\"grey\" />}\r\n                <Tag to={to}>{text}</Tag>\r\n            </li>\r\n        );\r\n        return path;\r\n    }, '/');\r\n    return <StyledBreadcrumbList>{paths.slice(0, paths.length - 1)}</StyledBreadcrumbList>;\r\n}\r\n\r\nexport default BreadcrumbList;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport BreadcrumbList from '../breadcrumb-list/BreadcrumbList';\r\nimport SEO from \"../utils/SEO\";\r\n\r\nconst StyledPageTitle = styled.div`\r\n    width: 100%;\r\n\r\n    .header {\r\n        border-bottom: 1px solid ${({ theme }) => theme.utils.border};    \r\n        width: 100%;\r\n        margin: auto;\r\n        padding-bottom: 8px;\r\n        @media(min-width: 512px) {\r\n            padding-bottom: 16px;\r\n        }\r\n\r\n        > h1 {\r\n            width: 100%;\r\n            font-size: 150%;\r\n            @media(min-width: 512px) {\r\n                font-size: 300%;\r\n            }\r\n            text-align: left;\r\n            color: ${({ theme }) => theme.text.primary};;\r\n        }\r\n\r\n        > h2 {\r\n            margin-top: 4px;\r\n            width: 100%;\r\n            text-align: left;\r\n            color: ${({ theme }) => theme.text.secondary};;\r\n            font-size: 80%;\r\n            @media(min-width: 512px) {\r\n                font-size: 100%;\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst PageTitle: React.FC<any> = ({ title, subtitle, children }) => {\r\n    return (\r\n        <>\r\n            <SEO title={title} />\r\n            <BreadcrumbList />\r\n            <StyledPageTitle>\r\n                <div className=\"header\">\r\n                    <h1>{title}</h1>\r\n                    {subtitle && <h2>{subtitle}</h2>}\r\n                </div>\r\n                {children}\r\n            </StyledPageTitle>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PageTitle;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledDoublePane = styled.div`\r\n\tdisplay: grid;\r\n\tgap: 16px;\r\n\tgrid-template-columns: 1fr;\r\n\t@media(min-width: 512px) {\r\n\t\tgrid-template-columns: 3fr 2fr;\r\n\t}\r\n`\r\n\r\nexport const StyledPane = styled.div`\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tgap: 16px;\r\n\tmargin: 16px 0;\r\n`\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledCard = styled.div`\r\n    background: ${props => props.theme.surface.card};\r\n    width: 100%;\r\n    border-radius: 16px;\r\n    padding: 16px;\r\n\r\n    .header {\r\n        margin-bottom: 16px;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n    }\r\n`;\r\n\r\nconst Card: React.FC<any> = ({ title, action, children, ...rest }) => {\r\n    return (\r\n        <StyledCard {...rest}>\r\n            {title &&\r\n                <div className=\"header\">\r\n                    <h2>{title}</h2>\r\n                    {action}\r\n                </div>\r\n            }\r\n            {children}\r\n        </StyledCard >\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import { Link } from \"gatsby\";\r\nimport React from \"react\";\r\nimport styled from 'styled-components';\r\nimport { useRootSuffix } from \"../../contexts/PagePropsContext\";\r\nimport { ChordId } from \"../../core/models/Model.constants\";\r\nimport { CHORD_PRESETS } from \"../../core/models/Model.presets\";\r\nimport CollectionCard from \"../collection/CollectionCard\";\r\nimport { StyledPageBody } from \"../_shared/layout/PageBody\";\r\nimport PageTitle from \"../_shared/layout/PageTitle\";\r\nimport { StyledDoublePane, StyledPane } from \"../_shared/layout/Pane\";\r\nimport Card from \"../_shared/ui/Card\";\r\n\r\nconst StyledChordsPage = styled(StyledPageBody)`\r\n    width: 100%;\r\n    max-width: 1024px;\r\n    margin: auto;\r\n    \r\n    .intro {\r\n        padding: 0 16px;\r\n    }\r\n\r\n    h3, p {\r\n        margin: 16px 0;\r\n    }\r\n\r\n    ${StyledPane} {\r\n        li {\r\n            list-style-type: disc;\r\n            margin-left: 16px;\r\n        }\r\n    }\r\n`;\r\n\r\nconst ChordsPage: React.FC<any> = props => {\r\n    const rootSuffix = useRootSuffix();\r\n\r\n    return (\r\n        <StyledChordsPage>\r\n            <PageTitle title=\"Chords\" subtitle=\"The foundation of harmony\" />\r\n            <div>\r\n                <p className=\"intro\">\r\n                    A chord is a collection of musical notes, usually played simultaneously.\r\n                    Chords are defined by their first note (the <em>root</em>) and its relationship to the following notes (<em>intervals</em>).\r\n                </p>\r\n                {false && <p className=\"intro\">\r\n                    Most chords contain a root, a third, and a fifth. Advanced chords may include additional intervals, substitutions, and/or omissions.\r\n                    In their most common form, chords contain at least three notes spanning a single octave.\r\n                    Chords spanning more than one octave are called <em>extended chords</em> and are not yet covered here.\r\n                </p>}\r\n                {/*\r\n                    <h3>Types of Chords</h3>\r\n                    <ul>\r\n                        <li><a href=\"#triad\">Triads</a></li>\r\n                        <li><a href=\"#seventh\">Seventh Chords</a></li>\r\n                        <li><a href=\"#sixth\">Sixth Chords</a></li>\r\n                        <li><a href=\"#suspended\">Suspended Chords</a></li>\r\n                    </ul>*/}\r\n            </div>\r\n            <StyledDoublePane>\r\n                <StyledPane>\r\n                    <CollectionCard title=\"All Chords\" data={CHORD_PRESETS} />\r\n                </StyledPane>\r\n                <StyledPane>\r\n                    <Card title=\"Triads\" id=\"triad\">\r\n                        <p>\r\n                            A triad is the most basic type of chord. It consists of 3 intervals (a root, a third, and a fifth).\r\n                            The specific thirds and fifths used determine the type (or <em>quality</em>) of the triad.\r\n                        </p>\r\n                        <h3>Examples</h3>\r\n                        <ul>\r\n                            <li><Link to={`/browse/chords/${ChordId.MajTriad}/${rootSuffix}`}>Major Triad</Link></li>\r\n                            <li><Link to={`/browse/chords/${ChordId.MinTriad}/${rootSuffix}`}>Minor Triad</Link></li>\r\n                            <li><Link to={`/browse/chords/${ChordId.AugTriad}/${rootSuffix}`}>Augmented Triad</Link></li>\r\n                            <li><Link to={`/browse/chords/${ChordId.DimTriad}/${rootSuffix}`}>Diminished Triad</Link></li>\r\n                        </ul>\r\n                    </Card>\r\n                    <Card title=\"Seventh Chords\" id=\"seventh\">\r\n                        <p>\r\n                            A seventh chord is a triad with an additional seventh interval stacked on top.\r\n                        </p>\r\n                        <h3>Examples</h3>\r\n                        <ul>\r\n                            <li><Link to={`/browse/chords/${ChordId.Maj7}/${rootSuffix}`}>Major 7th</Link></li>\r\n                            <li><Link to={`/browse/chords/${ChordId.Min7}/${rootSuffix}`}>Minor 7th</Link></li>\r\n                            <li><Link to={`/browse/chords/${ChordId.Dom7}/${rootSuffix}`}>Dominant 7th</Link></li>\r\n                            <li><Link to={`/browse/chords/${ChordId.MinMaj7}/${rootSuffix}`}>Minor-Major 7th</Link></li>\r\n                            <li><Link to={`/browse/chords/${ChordId.Dim7}/${rootSuffix}`}>Diminished 7th</Link></li>\r\n                            <li><Link to={`/browse/chords/${ChordId.HalfDim7}/${rootSuffix}`}>Half-Diminished 7th</Link></li>\r\n                            <li><Link to={`/browse/chords/${ChordId.Aug7}/${rootSuffix}`}>Augmented 7th</Link></li>\r\n                            <li><Link to={`/browse/chords/${ChordId.AugMaj7}/${rootSuffix}`}>Augmented Major 7th</Link></li>\r\n                        </ul>\r\n                    </Card>\r\n                    <Card title=\"Sixth Chords\" id=\"sixth\">\r\n                        <p>\r\n                            A sixth chord is a triad with an additional sixth interval stacked on top.\r\n                            They are similar in function to seventh chords.\r\n                        </p>\r\n                        <h3>Examples</h3>\r\n                        <ul>\r\n                            <li><Link to={`/browse/chords/${ChordId.Maj6}/${rootSuffix}`}>Major 6th</Link></li>\r\n                            <li><Link to={`/browse/chords/${ChordId.Min6}/${rootSuffix}`}>Minor 6th</Link></li>\r\n                        </ul>\r\n                    </Card>\r\n                    <Card title=\"Suspended Chords\" id=\"suspended\">\r\n                        <p>\r\n                            A suspended chord is a like a triad, except it sustitutes a second or fourth interval in place of the third.\r\n                        </p>\r\n                        <h3>Examples</h3>\r\n                        <ul>\r\n                            <li><Link to={`/browse/chords/${ChordId.Sus2}/${rootSuffix}`}>Suspended 2nd</Link></li>\r\n                            <li><Link to={`/browse/chords/${ChordId.Sus4}/${rootSuffix}`}>Suspended 4th</Link></li>\r\n                        </ul>\r\n                    </Card>\r\n                </StyledPane>\r\n\r\n            </StyledDoublePane>\r\n        </StyledChordsPage>\r\n    );\r\n};\r\n\r\nexport default ChordsPage;\r\n","import { Link } from \"gatsby\";\r\nimport React from \"react\";\r\nimport { useRootSuffix } from \"../../contexts/PagePropsContext\";\r\nimport Chord from \"../../core/models/Chord\";\r\nimport { CHORD_PRESETS, SCALE_PRESETS } from \"../../core/models/Model.presets\";\r\nimport Scale from \"../../core/models/Scale\";\r\nimport Card from \"../_shared/ui/Card\";\r\nimport CollectionTable, { ICollectionTableProps } from \"./CollectionTable\";\r\n\r\nconst CollectionCard: React.FC<any> = ({ title, data }) => {\r\n    return (\r\n        <Card title={title} >\r\n            <CollectionTable data={data} />\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default CollectionCard;\r\n","import { Link } from \"gatsby\";\r\nimport React from \"react\";\r\nimport styled from 'styled-components';\r\nimport { useRoot, useRootSuffix } from \"../../contexts/PagePropsContext\";\r\nimport Chord from \"../../core/models/Chord\";\r\nimport { IModelConfig, ModelId } from \"../../core/models/Model.constants\";\r\nimport Scale from \"../../core/models/Scale\";\r\n\r\nconst StyledCollectionTable = styled.table`\r\n    width: 100%;\r\n    margin: auto;\r\n    border-collapse: collapse;\r\n    white-space: nowrap;\r\n\r\n    td, th {\r\n        line-height: 32px;\r\n        \r\n        &:not(:first-child) {\r\n            text-align: center;\r\n            width: 32px;\r\n            height: 32px;\r\n\r\n            display: none;\r\n            @media(min-width: 512px) {\r\n                display: table-cell;\r\n            }\r\n        }\r\n\r\n        &:first-child {\r\n            text-align: left;\r\n            padding: 0 8px;\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    td {\r\n        //border-right: 1px solid ${props => props.theme.utils.border};\r\n        //border-bottom: 1px solid ${props => props.theme.utils.border};\r\n        &.active {\r\n            background-color: ${props => props.theme.surface.bg};\r\n        }\r\n    }\r\n\r\n    thead {\r\n        tr th {\r\n            background-color: ${props => props.theme.surface.nav};\r\n            color: ${({ theme }) => theme.text.inverted};\r\n        }\r\n        th:first-child {\r\n            border-radius: 8px 0 0 8px;\r\n        }\r\n        th:last-child {\r\n            border-radius: 0 8px 8px 0;\r\n        }\r\n    }\r\n\r\n    tbody {\r\n        tr {\r\n            &:hover {\r\n                background-color: ${({ theme }) => theme.utils.hoverDark};\r\n            }\r\n        }\r\n    }\r\n\r\n    a {\r\n        display: block;\r\n    }\r\n`;\r\n\r\nexport interface ICollectionTableProps {\r\n    data: IModelConfig[];\r\n    semitones?: number[];\r\n}\r\n\r\nconst SEMITONES = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\r\n\r\nconst CollectionTable: React.FC<ICollectionTableProps> = ({ data, semitones = [] }) => {\r\n    const rootSuffix = useRootSuffix();\r\n    const root = useRoot();\r\n    return (\r\n        <StyledCollectionTable>\r\n            <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    {SEMITONES.map((h, i) => <th key={i}>{h}</th>)}\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                    data.map(d => {\r\n                        const cl = d.modelId === ModelId.Chord ? Chord : Scale;\r\n                        const model = new cl(d.id, { root });\r\n\r\n                        return (\r\n                            <tr>\r\n                                <td>\r\n                                    <Link to={`/browse/${model.modelId}/${model.id}/${rootSuffix}`}>\r\n                                        {model.getShortName()}\r\n                                    </Link>\r\n                                </td>\r\n                                {SEMITONES.map((h, i) => {\r\n                                    const index = model.intervals.findIndex(ivl => ivl.pod[0] + 1 === h);\r\n                                    const className = semitones.includes(h) ? 'active' : '';\r\n                                    if (index < 0) return <td key={i} className={className} />;\r\n                                    const mod = root ? model.notes[index] : model.intervals[index];\r\n                                    return (\r\n                                        <td key={i} className={className}>\r\n                                            {mod.getName()}\r\n                                        </td>\r\n                                    );\r\n                                })}\r\n                            </tr>\r\n                        );\r\n                    })\r\n                }\r\n            </tbody>\r\n        </StyledCollectionTable>\r\n    );\r\n};\r\n\r\nexport default CollectionTable;\r\n","import Model from './Model';\r\nimport { ChordId, IPod, ModelId } from './Model.constants';\r\nimport { CHORD_PRESETS, CHORD_PRESET_MAP } from './Model.presets';\r\nimport { arePodListsEqual, reducePodList } from './Pod.static';\r\nimport PodList from './PodList';\r\n\r\nconst getSymbol = (degree, quality) => {\r\n    switch (degree) {\r\n        case 1: {\r\n            switch (quality) {\r\n                case ChordId.MajTriad:\r\n                case ChordId.Maj7:\r\n                    return 'I';\r\n                case ChordId.MinTriad:\r\n                case ChordId.Min7:\r\n                    return 'i';\r\n                case ChordId.Dom7:\r\n                    return 'I⁷';\r\n                case ChordId.HalfDim7:\r\n                    return 'i ̽';\r\n                case ChordId.AugTriad:\r\n                    return 'I+';\r\n                case ChordId.DimTriad:\r\n                    return 'i°';\r\n            }\r\n        }\r\n        case 2: {\r\n            switch (quality) {\r\n                case ChordId.MajTriad:\r\n                case ChordId.Maj7:\r\n                    return 'II';\r\n                case ChordId.MinTriad:\r\n                case ChordId.Min7:\r\n                    return 'ii';\r\n                case ChordId.Dom7:\r\n                    return 'II⁷';\r\n                case ChordId.HalfDim7:\r\n                    return 'ii ̽';\r\n                case ChordId.AugTriad:\r\n                    return 'II+';\r\n                case ChordId.DimTriad:\r\n                    return 'ii°';\r\n            }\r\n        }\r\n        case 3: {\r\n            switch (quality) {\r\n                case ChordId.MajTriad:\r\n                case ChordId.Maj7:\r\n                    return 'III';\r\n                case ChordId.MinTriad:\r\n                case ChordId.Min7:\r\n                    return 'iiii';\r\n                case ChordId.Dom7:\r\n                    return 'III⁷';\r\n                case ChordId.HalfDim7:\r\n                    return 'iii ̽';\r\n                case ChordId.AugTriad:\r\n                    return 'III+';\r\n                case ChordId.DimTriad:\r\n                    return 'iii°';\r\n            }\r\n        }\r\n        case 4: {\r\n            switch (quality) {\r\n                case ChordId.MajTriad:\r\n                case ChordId.Maj7:\r\n                    return 'IV';\r\n                case ChordId.MinTriad:\r\n                case ChordId.Min7:\r\n                    return 'iv';\r\n                case ChordId.Dom7:\r\n                    return 'IV⁷';\r\n                case ChordId.HalfDim7:\r\n                    return 'iv ̽';\r\n                case ChordId.AugTriad:\r\n                    return 'IV+';\r\n                case ChordId.DimTriad:\r\n                    return 'iv°';\r\n            }\r\n        }\r\n        case 5: {\r\n            switch (quality) {\r\n                case ChordId.MajTriad:\r\n                case ChordId.Maj7:\r\n                    return 'V';\r\n                case ChordId.MinTriad:\r\n                case ChordId.Min7:\r\n                    return 'v';\r\n                case ChordId.Dom7:\r\n                    return 'V⁷';\r\n                case ChordId.HalfDim7:\r\n                    return 'v ̽';\r\n                case ChordId.AugTriad:\r\n                    return 'V+';\r\n                case ChordId.DimTriad:\r\n                    return 'v°';\r\n            }\r\n        }\r\n        case 6: {\r\n            switch (quality) {\r\n                case ChordId.MajTriad:\r\n                case ChordId.Maj7:\r\n                    return 'VI';\r\n                case ChordId.MinTriad:\r\n                case ChordId.Min7:\r\n                    return 'vi';\r\n                case ChordId.Dom7:\r\n                    return 'VI⁷';\r\n                case ChordId.HalfDim7:\r\n                    return 'vi ̽';\r\n                case ChordId.AugTriad:\r\n                    return 'VI+';\r\n                case ChordId.DimTriad:\r\n                    return 'vi°';\r\n            }\r\n        }\r\n        case 7: {\r\n            switch (quality) {\r\n                case ChordId.MajTriad:\r\n                case ChordId.Maj7:\r\n                    return 'VII';\r\n                case ChordId.MinTriad:\r\n                case ChordId.Min7:\r\n                    return 'vii';\r\n                case ChordId.Dom7:\r\n                    return 'VII⁷';\r\n                case ChordId.HalfDim7:\r\n                    return 'vii ̽';\r\n                case ChordId.AugTriad:\r\n                    return 'VII+';\r\n                case ChordId.DimTriad:\r\n                    return 'vii°';\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default class Chord extends PodList {\r\n\r\n    modelId = ModelId.Chord;\r\n\r\n    constructor(id: ChordId, options = undefined) {\r\n        super(CHORD_PRESET_MAP, id, options);\r\n    }\r\n\r\n    getNumeral(n) {\r\n        return getSymbol(n, this.id);\r\n    }\r\n\r\n    static fromValue = (value: IPod[]) => Model.fromValue(CHORD_PRESETS, Chord, value, arePodListsEqual, reducePodList);\r\n}\r\n","import { DEFAULT_DEGREE_COLOR_SCHEME } from \"../theory/Degree.constants\";\r\nimport TuningUtils from \"../tuning/Tuning.utils\";\r\nimport Model from \"./Model\";\r\nimport { IntervalId, INTERVAL_QUALITY, IPod } from './Model.constants';\r\nimport { CHORD_PRESETS, CORE_INTERVALS, INTERVAL_PRESETS, INTERVAL_PRESET_MAP, SCALE_PRESETS } from './Model.presets';\r\nimport Pod from \"./Pod\";\r\nimport { arePodsEqual, listContainsSubset, reducePod } from \"./Pod.static\";\r\n\r\nexport default class IntervalSpan extends Pod {\r\n\r\n    id: IntervalId;\r\n    offset: number;\r\n\r\n    constructor(id: IntervalId) {\r\n        super(INTERVAL_PRESET_MAP.get(id));\r\n    }\r\n\r\n    static fromValue = (value: IPod) => Model.fromValue(INTERVAL_PRESETS, IntervalSpan, value, arePodsEqual, reducePod);\r\n\r\n    getColor(): string | undefined {\r\n        return this.equals(new IntervalSpan(IntervalId.P1)) ?\r\n            'red' : '#333';\r\n\r\n        return DEFAULT_DEGREE_COLOR_SCHEME[this.pod[1]];\r\n    }\r\n\r\n    getName() {\r\n        const reduced = reducePod(this.pod);\r\n\r\n        const [noteIndex, d] = reduced;\r\n        const degreeIntervals = CORE_INTERVALS[d];\r\n        if (!degreeIntervals) return '?';\r\n\r\n        const pIvl = degreeIntervals[0];\r\n        const loIvl = pIvl;\r\n        const hiIvl = degreeIntervals[degreeIntervals.length - 1];\r\n\r\n        // determine core interval and quality\r\n        let ivl = null;\r\n        let quality = null;\r\n        if (degreeIntervals.length === 1) {\r\n            ivl = pIvl; // perfect\r\n            quality = INTERVAL_QUALITY.perfect;\r\n        }\r\n        else if (noteIndex <= loIvl.value[0]) {\r\n            ivl = loIvl; // minor\r\n            quality = INTERVAL_QUALITY.min;\r\n        }\r\n        else if (noteIndex >= hiIvl.value[0]) {\r\n            ivl = hiIvl; // major\r\n            quality = INTERVAL_QUALITY.maj;\r\n        }\r\n\r\n        const offset = ivl.value[0] - reduced[0];\r\n\r\n        this.offset = offset;\r\n\r\n        if (offset === 0) return `${quality.symbol}${d + 1}`;\r\n        else if (offset > 0) quality = INTERVAL_QUALITY.dim; // dim\r\n        else if (offset < 0) quality = INTERVAL_QUALITY.aug; // aug\r\n\r\n        const count = Math.abs(offset);\r\n        const qualityStr = quality.symbol.repeat(count);\r\n\r\n        const value = `${qualityStr}${d + 1}`;\r\n\r\n        /*if (isExtended) {\r\n            console.log('x', value);\r\n            if (value === 'm2') value = 'b9'\r\n            else if (value === 'M2') value = '9'\r\n            else if (value === 'm3') value = '#9'\r\n            else if (value === 'M3') value = 'b11'\r\n            else if (value === 'P4') value = '11'\r\n            else if (value === 'A4' || value === 'd5') value = '#11'\r\n            else if (value === 'm6') value = 'b13'\r\n            else if (value === 'M6') value = '13'\r\n            else if (value === 'm7') value = '#13'\r\n        }*/\r\n\r\n        return value;\r\n    }\r\n\r\n    getRatio() {\r\n        const [p] = this.pod;\r\n\r\n        const baseline = TuningUtils.getFrequency(0);\r\n        const compareTo = TuningUtils.getFrequency(p);\r\n\r\n        const ratio = compareTo / baseline;\r\n\r\n        return `1:${ratio.toFixed(2)}`;\r\n    }\r\n\r\n    isInSuperset(superset: IPod[]) {\r\n        if (superset.length <= 1) return false;\r\n        return listContainsSubset(superset, [this.pod]);\r\n    }\r\n\r\n    getSupersets() {\r\n        const result = [];\r\n\r\n        const chords = CHORD_PRESETS.filter(preset =>\r\n            this.isInSuperset(preset.value)\r\n        );\r\n\r\n        if (chords.length) {\r\n            result.push({\r\n                modelName: 'Chords',\r\n                values: chords\r\n            });\r\n        }\r\n\r\n        const scales = SCALE_PRESETS.filter(preset =>\r\n            this.isInSuperset(preset.value)\r\n        );\r\n\r\n        if (scales.length) {\r\n            result.push({\r\n                modelName: 'Scales',\r\n                values: scales\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n}\r\n","import IntervalSpan from './Interval';\r\nimport Model from './Model';\r\nimport { ChordId, IPod, ModelId, ScaleId } from './Model.constants';\r\nimport { CHORD_PRESETS, SCALE_PRESETS } from './Model.presets';\r\nimport Note from './Note';\r\nimport { addPods, arePodListsEqual, getIndexOfPodAtPitch, getShortName, listContainsSubset } from './Pod.static';\r\n\r\nexport interface IPodListOptions {\r\n    root?: Note;\r\n}\r\n\r\nexport default class PodList extends Model {\r\n\r\n    modelId: ModelId | undefined;\r\n    id: ChordId | ScaleId;\r\n    root: Note;\r\n    podList: IPod[];\r\n    intervals: IntervalSpan[];\r\n    notePods?: IPod[];\r\n    notes?: Note;\r\n\r\n    constructor(presetMap, presetId: ChordId | ScaleId, options?: IPodListOptions) {\r\n        super();\r\n\r\n        const preset = presetMap.get(presetId);\r\n        if (!preset) throw new Error(`Unknown presetId: ${presetId}`);\r\n\r\n        this.modelId = preset.modelId;\r\n        this.id = preset.id;\r\n        this.name = preset.name;\r\n        this.tags = preset.tags;\r\n        this.aliases = preset.aliases;\r\n        this.podList = preset.value;\r\n        this.intervals = preset.value.map(pod => IntervalSpan.fromValue(pod));\r\n\r\n        if (options && options.root) {\r\n            this.applyRoot(options.root);\r\n        }\r\n    }\r\n\r\n    equals(B: PodList) {\r\n        return arePodListsEqual(this.podList, B.podList);\r\n    }\r\n\r\n    getName = () => {\r\n        return `${this.root ? `${this.root.name} ` : ''}${this.name}`;\r\n    }\r\n\r\n    getShortName = () => {\r\n        return getShortName(this.name)\r\n    }\r\n\r\n    applyRoot(root: Note) {\r\n        let notes;\r\n        let notePods;\r\n        try {\r\n            notePods = this.intervals.map(ivl => addPods(ivl.pod, root.pod));\r\n            notes = notePods.map(pod => new Note(pod));\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n            throw new Error('Unable to apply root');\r\n        }\r\n        this.root = root;\r\n        this.notes = notes;\r\n        this.notePods = notePods;\r\n        this.name = this.getName();\r\n        return this;\r\n    }\r\n\r\n    getIntervalListString(): string {\r\n        const nameArr = this.intervals.map(ivl => ivl.getName());\r\n        return nameArr.join(', ');\r\n    }\r\n\r\n    isInSuperset(superset: IPod[]) {\r\n        if (superset.length <= this.podList.length) return false;\r\n        return listContainsSubset(superset, this.podList);\r\n    }\r\n\r\n    containsSubset(subset: IPod[]) {\r\n        if (subset.length >= this.podList.length) return false;\r\n        return listContainsSubset(this.podList, subset);\r\n    }\r\n\r\n    getSubchords() {\r\n        return CHORD_PRESETS.filter(preset =>\r\n            this.containsSubset(preset.value)\r\n        );\r\n    }\r\n\r\n    getSuperchords() {\r\n        return CHORD_PRESETS.filter(preset =>\r\n            this.isInSuperset(preset.value)\r\n        );\r\n    }\r\n\r\n    getSubscales() {\r\n        return SCALE_PRESETS.filter(preset =>\r\n            this.containsSubset(preset.value)\r\n        );\r\n    }\r\n\r\n    getSuperscales() {\r\n        return SCALE_PRESETS.filter(preset =>\r\n            this.isInSuperset(preset.value)\r\n        );\r\n    }\r\n\r\n    getPreview() {\r\n        return this.getIntervalListString();\r\n    }\r\n\r\n    tryGetPodPairAtPitch(noteIndex: number): [IntervalSpan, Note] {\r\n        const index = getIndexOfPodAtPitch(this.notePods, noteIndex, false);\r\n\r\n        if (index == null) return [undefined, undefined];\r\n\r\n        return [\r\n            this.intervals[index],\r\n            this.notes[index]\r\n        ];\r\n    }\r\n}\r\n","import IntervalSpan from '@pw-core/models/Interval';\r\nimport ArrayUtils from '../general/Array.utils';\r\nimport NumberUtils from '../general/Number.utils';\r\nimport Chord from './Chord';\r\nimport Model from './Model';\r\nimport { IntervalId, IPod, ModelId, ScaleId, Tag } from './Model.constants';\r\nimport { SCALE_PRESETS, SCALE_PRESET_MAP } from './Model.presets';\r\nimport { arePodListsEqual, reducePodList, subtractPods } from './Pod.static';\r\nimport PodList from './PodList';\r\n\r\nexport default class Scale extends PodList {\r\n\r\n    modelId = ModelId.Scale;\r\n\r\n    constructor(id: ScaleId, options = undefined) {\r\n        super(SCALE_PRESET_MAP, id, options);\r\n    }\r\n\r\n    static fromValue = (value: IPod[]) => Model.fromValue(SCALE_PRESETS, Scale, value, arePodListsEqual, reducePodList);\r\n\r\n    getMode(d) {\r\n        let rotated = [...this.podList];\r\n        rotated = ArrayUtils.rotate(rotated, d);\r\n        for (let i = (this.podList.length - d); i < rotated.length; i++) {\r\n            const curPod = rotated[i];\r\n            rotated[i] = [curPod[0] + 12, curPod[1] + 7];\r\n        }\r\n        // Get difference between each interval\r\n        const newPods: IPod[] = [[0, 0]];\r\n        const newIntervals = [new IntervalSpan(IntervalId.P1)];\r\n        for (let i = 0; i < rotated.length - 1; i++) {\r\n            const newPod = subtractPods(rotated[i + 1], rotated[0])\r\n            newPods.push(newPod);\r\n            const newIvl = IntervalSpan.fromValue(newPod);\r\n            newIntervals.push(newIvl);\r\n        }\r\n        const mode = Scale.fromValue(newPods);\r\n\r\n        /*if (this.root) {\r\n            numeral.applyRoot(this.notes[d]);\r\n            console.log('dpb num root', numeral);\r\n        }*/\r\n        return mode;\r\n    };\r\n\r\n    getAllModes() {\r\n        const modes = [];\r\n        if (this.tags.includes(Tag.Diatonic) ||\r\n            this.tags.includes(Tag.Pentatonic) ||\r\n            this.tags.includes(Tag.MelodicMode) ||\r\n            this.tags.includes(Tag.HarmonicMode)\r\n        ) {\r\n            for (let i = 0; i < this.podList.length; i++) {\r\n                modes.push(this.getMode(i));\r\n            }\r\n        }\r\n        return modes;\r\n    };\r\n\r\n    getNumeral(d) {\r\n        // Get every other interval\r\n        const curIntervals = [];\r\n        for (let i = 0; i < this.podList.length; i = i + 2) {\r\n            const curD = NumberUtils.moduloSum(d, i, this.podList.length);\r\n            const curIvl = this.intervals[curD];\r\n            curIntervals.push(curIvl);\r\n        }\r\n        // Get difference between each interval\r\n        const newPods: IPod[] = [[0, 0]];\r\n        //const newIntervals = [new IntervalSpan(IntervalId.P1)];\r\n        for (let i = 0; i < curIntervals.length - 1; i++) {\r\n            const newPod = subtractPods(curIntervals[i + 1].pod, curIntervals[0].pod)\r\n            newPods.push(newPod);\r\n            //const newIvl = IntervalSpan.fromValue(newPod);\r\n            //newIntervals.push(newIvl);\r\n        }\r\n        const numeral = Chord.fromValue(newPods);\r\n        if (this.root) {\r\n            numeral.applyRoot(this.notes[d]);\r\n        }\r\n        return numeral;\r\n    };\r\n\r\n    getAllNumerals() {\r\n        const numerals = [];\r\n        if (this.tags.includes(Tag.Diatonic)) {\r\n            for (let i = 0; i < this.podList.length; i++) {\r\n                numerals.push(this.getNumeral(i));\r\n            }\r\n        }\r\n        return numerals;\r\n    };\r\n}\r\n"],"names":["StyledBreadcrumbList","styled","props","theme","text","secondary","pieces","usePageProps","path","split","paths","reduce","prev","cur","i","arr","replace","isLink","includes","replaceAll","Tag","Link","to","undefined","push","key","Icon","iconId","size","color","slice","length","StyledPageTitle","utils","border","primary","title","subtitle","children","SEO","className","StyledDoublePane","StyledPane","StyledCard","surface","card","action","rest","StyledChordsPage","StyledPageBody","rootSuffix","useRootSuffix","data","CHORD_PRESETS","id","ChordId","StyledCollectionTable","bg","nav","inverted","hoverDark","SEMITONES","semitones","root","useRoot","map","h","d","model","modelId","ModelId","Chord","Scale","getShortName","index","intervals","findIndex","ivl","pod","mod","notes","getName","options","CHORD_PRESET_MAP","getNumeral","n","degree","quality","getSymbol","this","PodList","fromValue","value","Model","arePodListsEqual","reducePodList","IntervalSpan","INTERVAL_PRESET_MAP","getColor","equals","IntervalId","reduced","reducePod","noteIndex","degreeIntervals","CORE_INTERVALS","pIvl","loIvl","hiIvl","INTERVAL_QUALITY","offset","symbol","count","Math","abs","repeat","getRatio","p","baseline","TuningUtils","toFixed","isInSuperset","superset","listContainsSubset","getSupersets","result","chords","preset","modelName","values","scales","SCALE_PRESETS","Pod","INTERVAL_PRESETS","arePodsEqual","presetMap","presetId","name","get","Error","tags","aliases","podList","applyRoot","B","notePods","addPods","Note","e","console","error","getIntervalListString","join","containsSubset","subset","getSubchords","getSuperchords","getSubscales","getSuperscales","getPreview","tryGetPodPairAtPitch","getIndexOfPodAtPitch","SCALE_PRESET_MAP","getMode","rotated","ArrayUtils","curPod","newPods","newIntervals","newPod","subtractPods","newIvl","getAllModes","modes","curIntervals","curD","NumberUtils","curIvl","numeral","getAllNumerals","numerals"],"sourceRoot":""}