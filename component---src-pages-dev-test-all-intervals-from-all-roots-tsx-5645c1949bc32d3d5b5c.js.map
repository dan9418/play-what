{"version":3,"file":"component---src-pages-dev-test-all-intervals-from-all-roots-tsx-5645c1949bc32d3d5b5c.js","mappings":"6PAUMA,EAAyBC,EAAAA,GAAAA,QAAwB,SAAAC,GAAG,OAAIA,EAAIC,MAAM,GAAK,MACvEC,EAAcC,EAAAA,GAAAA,QAAyB,SAAAC,GAAC,OAAIC,KAAKC,IAAIF,EAAEH,OAAS,KAChEM,GAAY,EAEZC,EAAaC,EAAAA,QAAAA,IAAAA,WAAH,+EAAGA,CAAH,2WAUgB,qBAAGC,MAAkBC,MAAMC,UAc3B,qBAAGF,MAAkBC,MAAME,aAOtC,SAAAC,GAAK,OAAIA,EAAMJ,MAAMK,KAAKC,aAK1B,qBAAGN,MAAkBO,OAAOC,YAiGjD,EA7CgD,WAC5C,IAAMC,EA9CO,WACb,IAAMA,EAAQ,GAyCd,OAxCAC,EAAAA,GAAAA,SAAuB,SAACC,GACpB,IAAMC,EAAWD,EAAOE,GAClBC,EAAIH,EAAOpB,MAEXwB,EAAgBC,EAAAA,EAAgBF,GAAGvB,MAAM,GAC/CC,EAAYyB,SAAQ,SAACC,GACjB,IAAMxB,EAAIwB,EAAWC,OACfC,EAASF,EAAW3B,MAEpB8B,EAAQ,GAAMT,EAAWlB,EACzB4B,EAAgB,CAACP,EAAgBK,EAAQN,GAEzCS,EAAYnC,EAAuBoC,KAAI,SAAAlC,GACzC,IACImC,EADEC,GAASC,EAAAA,EAAAA,IAAQL,EAAShC,EAAIC,OAEhCqC,GAAY,EAEhB,IACIH,EAAO,IAAII,EAAAA,EAAKH,GAEpB,MAAOI,GACHF,GAAY,EAKhB,MAAO,CACHG,KAAMN,EAAOA,EAAKM,KAAO,IACzBC,IAAKN,EACLE,UAAAA,MAIRnB,EAAMwB,KAAK,CACPF,KAAMV,EACNW,IAAKV,EACLC,UAAAA,UAILd,EAIOyB,GACd,OACIC,EAAAA,cAACrC,EAAD,KACIqC,EAAAA,cAAAA,QAAAA,KACIA,EAAAA,cAAAA,QAAAA,KACIA,EAAAA,cAAAA,KAAAA,KACIA,EAAAA,cAAAA,KAAAA,KAAAA,QAEI/C,EAAuBoC,KAAI,SAAAlC,GACvB,OAAO6C,EAAAA,cAAAA,KAAAA,CAAIC,QAAyB,EAAGC,IAAK/C,EAAIgD,SAAUC,EAAAA,EAAAA,UAAuBjD,EAAIC,OAAOiD,gBAK5GL,EAAAA,cAAAA,QAAAA,KAEQ1B,EAAMe,KAAI,SAAAiB,GACN,OACIN,EAAAA,cAAAA,KAAAA,CAAIE,IAAKI,EAAEV,MACPI,EAAAA,cAAAA,KAAAA,KAAKM,EAAEV,MACNlC,EAEG4C,EAAElB,UAAUC,KAAI,SAAAlC,GACZ,OAAO6C,EAAAA,cAAAA,EAAAA,SAAAA,KACHA,EAAAA,cAAAA,KAAAA,CAAIE,IAAK/C,EAAIgD,QAAU,IAAKI,UAAWpD,EAAIsC,UAAY,UAAY,IAC9DtC,EAAIyC,MAERlC,cC7H3C8C,GAAiB5C,EAAAA,EAAAA,SAAO6C,EAAAA,GAAVC,WAAA,2FAAG9C,CAAH,MCHpB,EDOmC,WAC/B,OACIoC,EAAAA,cAACQ,EAAD,CAAgBG,MAAM,+BAA+BC,SAAS,QAC1DZ,EAAAA,cAACa,EAAD","sources":["webpack://play-what/./src/components/tests/AllIntervalsFromAllRoots.tsx","webpack://play-what/./src/components/pages/dev/test/all-intervals-from-all-roots.page.tsx","webpack://play-what/./src/pages/dev/test/all-intervals-from-all-roots.tsx"],"sourcesContent":["import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport IntervalSpan from \"../../core/models/Interval\";\r\nimport { ACCIDENTAL_VALUES, IPod } from \"../../core/models/Model.constants\";\r\nimport { INTERVAL_PRESETS } from \"../../core/models/Model.presets\";\r\nimport Note from \"../../core/models/Note\";\r\nimport { addPods } from \"../../core/models/Pod.static\";\r\nimport { DEGREE_PRESETS } from \"../../core/theory/Degree.constants\";\r\nimport { DIATONIC_VALUES } from \"../../core/theory/Diatonic.constants\";\r\n\r\nconst FIRST_OCTAVE_INTERVALS = INTERVAL_PRESETS.filter(ivl => ivl.value[0] < 12);\r\nconst ACCIDENTALS = ACCIDENTAL_VALUES.filter(a => Math.abs(a.value) < 2);\r\nconst SHOW_PODS = false;\r\n\r\nconst StyledTest = styled.div`\r\n    height: 100%;\r\n    width: 100%;\r\n    overflow: auto; \r\n        \r\n    table {\r\n        border-collapse: collapse;\r\n        margin: 16px auto;\r\n\r\n        td, th {\r\n            border: 1px solid ${({ theme }) => theme.utils.border};\r\n\r\n            height: 40px;\r\n            width: 44px;\r\n            display: inline-flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n        }\r\n        th {\r\n            text-align: left;\r\n            white-space: nowrap;\r\n        }\r\n\r\n        th {\r\n            background-color: ${({ theme }) => theme.utils.hoverDark};\r\n        }\r\n        td {\r\n            background-color: white;\r\n        }\r\n\r\n        .pod {\r\n            color: ${props => props.theme.text.secondary};\r\n            font-size: 80%;\r\n        }\r\n\r\n        .invalid {\r\n            color: ${({ theme }) => theme.status.negative};\r\n            font-weight: bold;\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nconst getRoots = () => {\r\n    const roots = [];\r\n    DEGREE_PRESETS.forEach((degree) => {\r\n        const spelling = degree.id;\r\n        const d = degree.value;\r\n\r\n        const diatonicPitch = DIATONIC_VALUES[d].value[0];\r\n        ACCIDENTALS.forEach((accidental) => {\r\n            const a = accidental.symbol;\r\n            const offset = accidental.value;\r\n\r\n            const rootName = `${spelling}${a}`;\r\n            const rootPod: IPod = [diatonicPitch + offset, d];\r\n\r\n            const intervals = FIRST_OCTAVE_INTERVALS.map(ivl => {\r\n                const ivlPod = addPods(rootPod, ivl.value);\r\n                let note;\r\n                let isInvalid = false;\r\n\r\n                try {\r\n                    note = new Note(ivlPod);\r\n                }\r\n                catch (e) {\r\n                    isInvalid = true;\r\n                }\r\n\r\n                //const isInvalid = ivlName.length > 5;\r\n\r\n                return {\r\n                    name: note ? note.name : '?',\r\n                    pod: ivlPod,\r\n                    isInvalid\r\n                }\r\n            })\r\n\r\n            roots.push({\r\n                name: rootName,\r\n                pod: rootPod,\r\n                intervals\r\n            });\r\n        });\r\n    });\r\n    return roots;\r\n}\r\n\r\nconst AllIntervalsFromAllRoots: React.FC<any> = () => {\r\n    const roots = getRoots();\r\n    return (\r\n        <StyledTest>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Root</th>\r\n                        {\r\n                            FIRST_OCTAVE_INTERVALS.map(ivl => {\r\n                                return <th colSpan={SHOW_PODS ? 2 : 1} key={ivl.modelId}>{IntervalSpan.fromValue(ivl.value).getName()}</th>\r\n                            })\r\n                        }\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        roots.map(r => {\r\n                            return (\r\n                                <tr key={r.name}>\r\n                                    <th>{r.name}</th>\r\n                                    {SHOW_PODS && <th>{JSON.stringify(r.pod)}</th>}\r\n                                    {\r\n                                        r.intervals.map(ivl => {\r\n                                            return <>\r\n                                                <td key={ivl.modelId + 'n'} className={ivl.isInvalid ? 'invalid' : ''}>\r\n                                                    {ivl.name}\r\n                                                </td>\r\n                                                {SHOW_PODS &&\r\n                                                    <td key={ivl.modelId + 'p'} className=\"pod\">\r\n                                                        {JSON.stringify(ivl.pod)}\r\n                                                    </td>}\r\n                                            </>\r\n                                        })\r\n                                    }\r\n                                </tr>\r\n                            );\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </StyledTest>\r\n    );\r\n};\r\n\r\nexport default AllIntervalsFromAllRoots;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport PageLayout from \"../../../layout/PageLayout\";\r\nimport AllIntervalsFromAllRoots from \"../../../tests/AllIntervalsFromAllRoots\";\r\n\r\nconst StyledTestPage = styled(PageLayout)`\r\n\r\n`;\r\n\r\nexport const Page: React.FC<any> = () => {\r\n    return (\r\n        <StyledTestPage title=\"All Intervals From All Roots\" subtitle=\"Test\" >\r\n            <AllIntervalsFromAllRoots />\r\n        </StyledTestPage>\r\n    );\r\n};\r\n","import { Page } from \"../../../components/pages/dev/test/all-intervals-from-all-roots.page\";\r\n\r\nexport default Page;\r\n"],"names":["FIRST_OCTAVE_INTERVALS","INTERVAL_PRESETS","ivl","value","ACCIDENTALS","ACCIDENTAL_VALUES","a","Math","abs","SHOW_PODS","StyledTest","styled","theme","utils","border","hoverDark","props","text","secondary","status","negative","roots","DEGREE_PRESETS","degree","spelling","id","d","diatonicPitch","DIATONIC_VALUES","forEach","accidental","symbol","offset","rootName","rootPod","intervals","map","note","ivlPod","addPods","isInvalid","Note","e","name","pod","push","getRoots","React","colSpan","key","modelId","IntervalSpan","getName","r","className","StyledTestPage","PageLayout","withConfig","title","subtitle","AllIntervalsFromAllRoots"],"sourceRoot":""}