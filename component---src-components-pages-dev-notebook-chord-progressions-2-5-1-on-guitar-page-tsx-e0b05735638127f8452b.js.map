{"version":3,"file":"component---src-components-pages-dev-notebook-chord-progressions-2-5-1-on-guitar-page-tsx-e0b05735638127f8452b.js","mappings":"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","sources":["webpack://play-what/./src/components/column-manager/ColumnManager.tsx","webpack://play-what/./src/components/inputs/DropdownInput.tsx","webpack://play-what/./src/components/pages/dev/notebook/chord-progressions/2-5-1-on-guitar.page.tsx","webpack://play-what/./src/components/ui/Card.tsx","webpack://play-what/./src/components/ui/InputRow.tsx","webpack://play-what/./src/viewers/fretboard/Fretboard.styles.tsx","webpack://play-what/./src/viewers/fretboard/FretLabel.tsx","webpack://play-what/./src/viewers/fretboard/Fretboard.tsx","webpack://play-what/./src/viewers/fretboard/Fretboard.tuning.ts","webpack://play-what/./src/viewers/fretboard/Fretboard.utils.ts","webpack://play-what/./src/viewers/fretboard/Fretboard.voicing.ts"],"sourcesContent":["import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledColumnManager = styled.div`\r\n    display: grid;\r\n    gap: 16px;\r\n    grid-template-columns: 1fr;\r\n\r\n    ${({ $tablet }) => $tablet ? `\r\n        @media(min-width: 512px) {\r\n            grid-template-columns: ${$tablet.join(' ')}\r\n        }\r\n    ` : ''}\r\n\r\n    ${({ $desktop }) => $desktop ? `\r\n        @media(min-width: 1024px) {\r\n            grid-template-columns: ${$desktop.join(' ')}\r\n        }\r\n    ` : ``}\r\n   \r\n`;\r\n\r\nexport interface IColumnManagerProps {\r\n    tablet?: string[];\r\n    desktop?: string[];\r\n}\r\n\r\nconst ColumnManager: React.FC<any> = ({ children, tablet, desktop }) => {\r\n    return (\r\n        <StyledColumnManager $tablet={tablet} $desktop={desktop}>\r\n            {children}\r\n        </StyledColumnManager >\r\n    );\r\n};\r\n\r\nexport default ColumnManager;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nconst StyledDropdownInput = styled.select`\r\n\tfont-size: 110%;\r\n    min-width: 128px;\r\n\r\n\tpadding: 4px 8px;\r\n\r\n    cursor: pointer;\r\n    border-radius: 4px;\r\n\r\n\toption {\r\n\t\tcursor: pointer;\r\n\t}\r\n`;\r\n\r\ninterface IDropdownInputProps {\r\n\tvalue: any;\r\n\tsetValue: Function;\r\n\toptions: any[];\r\n\tidProperty?: string;\r\n\tdisplayProperty?: string;\r\n}\r\n\r\nconst DropdownInput: React.FC<IDropdownInputProps> = props => {\r\n\tconst { value, setValue, options, idProperty, displayProperty } = props;\r\n\r\n\treturn (\r\n\t\t<StyledDropdownInput\r\n\t\t\tclassName='dropdown-input'\r\n\t\t\tonChange={e => setValue(options[e.target.selectedIndex], e.target.selectedIndex)}\r\n\t\t\tvalue={value ? value[idProperty || 'id'] : ''}\r\n\t\t>\r\n\t\t\t{(options || []).map((v, i) => (\r\n\t\t\t\t<option key={i} value={v[idProperty || 'id']}>{displayProperty ? v[displayProperty] : v.name}</option>\r\n\t\t\t))}\r\n\t\t</StyledDropdownInput>\r\n\t);\r\n}\r\n\r\nexport default DropdownInput;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport ArrayUtils from \"../../../../../core/general/Array.utils\";\r\nimport Chord from \"../../../../../core/models/Chord\";\r\nimport {\r\n  ChordId,\r\n  NoteId,\r\n  ScaleId,\r\n} from \"../../../../../core/models/Model.constants\";\r\nimport {\r\n  NOTE_PRESETS,\r\n  NOTE_PRESET_MAP,\r\n} from \"../../../../../core/models/Model.presets\";\r\nimport Note from \"../../../../../core/models/Note\";\r\nimport Scale from \"../../../../../core/models/Scale\";\r\nimport Fretboard from \"../../../../../viewers/fretboard/Fretboard\";\r\nimport { IFretProps } from \"../../../../../viewers/fretboard/Fretboard.utils\";\r\nimport { VOICING_PRESET_MAP } from \"../../../../../viewers/fretboard/Fretboard.voicing\";\r\nimport ColumnManager from \"../../../../column-manager/ColumnManager\";\r\nimport DropdownInput from \"../../../../inputs/DropdownInput\";\r\nimport PageLayout from \"../../../../layout/PageLayout\";\r\nimport Card from \"../../../../ui/Card\";\r\nimport InputRow, { StyledInputRow } from \"../../../../ui/InputRow\";\r\n\r\nconst StyledCAGEDPage = styled(PageLayout)`\r\n  table {\r\n    width: 100%;\r\n\r\n    td {\r\n      width: 33%;\r\n      padding: 24px 2px 16px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Page: React.FC<any> = () => {\r\n  const [rootPreset, setRootPreset] = useState(NOTE_PRESET_MAP.get(NoteId.C));\r\n\r\n  const root = new Note(rootPreset.value);\r\n  const majorScale = new Scale(ScaleId.Ionian, { root });\r\n  const minorScale = new Scale(ScaleId.Ionian, { root });\r\n\r\n  const majorItems = [\r\n    {\r\n      model: Chord,\r\n      modelId: ChordId.Min7,\r\n      rootId: majorScale.notes[1].modelId,\r\n      voicingId: null,\r\n    },\r\n    {\r\n      model: Chord,\r\n      modelId: ChordId.Dom7,\r\n      rootId: majorScale.notes[4].modelId,\r\n      voicingId: null,\r\n    },\r\n    {\r\n      model: Chord,\r\n      modelId: ChordId.Maj7,\r\n      rootId: majorScale.notes[0].modelId,\r\n      voicingId: null,\r\n    },\r\n  ];\r\n\r\n  const minorItems = [\r\n    {\r\n      model: Chord,\r\n      modelId: ChordId.HalfDim7,\r\n      rootId: minorScale.notes[2].modelId,\r\n      voicingId: null,\r\n    },\r\n    {\r\n      model: Chord,\r\n      modelId: ChordId.Min7,\r\n      rootId: minorScale.notes[4].modelId,\r\n      voicingId: null,\r\n    },\r\n    {\r\n      model: Chord,\r\n      modelId: ChordId.Min7,\r\n      rootId: minorScale.notes[0].modelId,\r\n      voicingId: null,\r\n    },\r\n  ];\r\n\r\n  const getColor = (fretProps: IFretProps) => {\r\n    const { stringIndex, fretIndex, tuning, model, voicing } = fretProps;\r\n    const noteIndex = tuning[stringIndex] + fretIndex;\r\n    const [interval, note] = model.tryGetPodPairAtPitch(noteIndex);\r\n\r\n    if (!note) return;\r\n\r\n    if (interval.pod[1] === 0) return \"red\";\r\n    if (interval.pod[1] === 2) return \"blue\";\r\n    if (interval.pod[1] === 4) return \"black\";\r\n    if (interval.pod[1] === 6) return \"black\";\r\n    return \"black\";\r\n  };\r\n\r\n  return (\r\n    <StyledCAGEDPage title=\"Chord Progressions\">\r\n      <ColumnManager>\r\n        <InputRow label=\"Root\">\r\n          <DropdownInput\r\n            options={NOTE_PRESETS}\r\n            value={rootPreset}\r\n            setValue={(p) => {\r\n              setRootPreset(p);\r\n            }}\r\n          />\r\n        </InputRow>\r\n        <Card title=\"Major II-V-I\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>II</th>\r\n                <th>V</th>\r\n                <th>I</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                {majorItems.map((item) => {\r\n                  const { model, modelId, rootId, voicingId } = item as any;\r\n                  const instance = new model(modelId, {\r\n                    root: Note.fromId(rootId),\r\n                  });\r\n\r\n                  return (\r\n                    <td key={modelId}>\r\n                      <h3>{modelId}</h3>\r\n                      <Fretboard\r\n                        model={instance}\r\n                        voicing={\r\n                          voicingId\r\n                            ? VOICING_PRESET_MAP.get(voicingId)\r\n                            : undefined\r\n                        }\r\n                        colorMapFn={getColor}\r\n                        fretRange={[1, 14]}\r\n                      />\r\n                    </td>\r\n                  );\r\n                })}\r\n              </tr>\r\n              <tr>\r\n                {ArrayUtils.rotate([...majorItems], 1).map((item) => {\r\n                  const { model, modelId, rootId, voicingId } = item as any;\r\n                  const instance = new model(modelId, {\r\n                    root: Note.fromId(rootId),\r\n                  });\r\n\r\n                  return (\r\n                    <td key={modelId}>\r\n                      <h3>{modelId}</h3>\r\n                      <Fretboard\r\n                        model={instance}\r\n                        voicing={\r\n                          voicingId\r\n                            ? VOICING_PRESET_MAP.get(voicingId)\r\n                            : undefined\r\n                        }\r\n                        colorMapFn={getColor}\r\n                        fretRange={[1, 14]}\r\n                      />\r\n                    </td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </Card>\r\n        <Card title=\"Minor ii-v-i\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>ii</th>\r\n                <th>v</th>\r\n                <th>i</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                {minorItems.map((item) => {\r\n                  const { model, modelId, rootId, voicingId } = item as any;\r\n                  const instance = new model(modelId, {\r\n                    root: Note.fromId(rootId),\r\n                  });\r\n\r\n                  return (\r\n                    <td key={modelId}>\r\n                      <h3>{modelId}</h3>\r\n                      <Fretboard\r\n                        model={instance}\r\n                        voicing={\r\n                          voicingId\r\n                            ? VOICING_PRESET_MAP.get(voicingId)\r\n                            : undefined\r\n                        }\r\n                        colorMapFn={getColor}\r\n                        fretRange={[1, 14]}\r\n                      />\r\n                    </td>\r\n                  );\r\n                })}\r\n              </tr>\r\n              <tr>\r\n                {ArrayUtils.rotate([...minorItems], 1).map((item) => {\r\n                  const { model, modelId, rootId, voicingId } = item as any;\r\n                  const instance = new model(modelId, {\r\n                    root: Note.fromId(rootId),\r\n                  });\r\n\r\n                  return (\r\n                    <td key={modelId}>\r\n                      <h3>{modelId}</h3>\r\n                      <Fretboard\r\n                        model={instance}\r\n                        voicing={\r\n                          voicingId\r\n                            ? VOICING_PRESET_MAP.get(voicingId)\r\n                            : undefined\r\n                        }\r\n                        colorMapFn={getColor}\r\n                        fretRange={[1, 14]}\r\n                      />\r\n                    </td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </Card>\r\n      </ColumnManager>\r\n    </StyledCAGEDPage>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledCard = styled.div`\r\n    background: ${props => props.theme.surface.card};\r\n    width: 100%;\r\n    border-radius: 16px;\r\n    padding: 16px;\r\n\r\n    .header {\r\n        margin-bottom: 16px;\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 8px;\r\n        justify-content: space-between;\r\n    }\r\n`;\r\n\r\nexport const CardHeader: React.FC<any> = ({ title, level = 2, action = null }) => {\r\n    const AsTag: any = `h${level}`;\r\n    return (\r\n        <div className=\"header\">\r\n            <AsTag>{title}</AsTag>\r\n            {action}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Card: React.FC<any> = ({ title, subtitle, action, children, level, ...rest }) => {\r\n    return (\r\n        <StyledCard {...rest}>\r\n            {title &&\r\n                <CardHeader title={title} action={action} level={level} />\r\n            }\r\n            {subtitle &&\r\n                <CardHeader title={subtitle} level={level + 1} />\r\n            }\r\n            {children}\r\n        </StyledCard >\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledInputRow = styled.div`\r\n    display: flex;\r\n    align-items: flex-start;\r\n    flex-direction: column;\r\n    width: 100%;\r\n\r\n    ${props => props.$y ? '' : `\r\n        @media(min-width: 512px) {\r\n            align-items: center;\r\n            flex-direction: row;\r\n            justify-content: space-between;\r\n            //margin-bottom: 8px;\r\n        }\r\n    `}\r\n\r\n    > label {\r\n        color: ${({ theme }) => theme.dark3};\r\n        font-weight: bold;\r\n        margin: 8px;\r\n        white-space: nowrap;\r\n    }\r\n`;\r\n\r\nconst InputRow = ({ label, children, y = false, ...rest }) => {\r\n    return (\r\n        <StyledInputRow $y={y} {...rest}>\r\n            <label>{label}</label>\r\n            <div>\r\n                {children}\r\n            </div>\r\n        </StyledInputRow>\r\n    );\r\n}\r\n\r\nexport default InputRow;\r\n","import styled from 'styled-components';\r\n\r\nconst StyledFretboard = styled.div`\r\n    display: inline-grid;\r\n\twidth: 100%;\r\n\tbackground-image: radial-gradient(ellipse, #E8DBB8 0%, #D0B27C 100%);\r\n\tfont-size: 90%;\r\n\tmargin: 16px 0;\r\n\r\n    .fret {\r\n        display: inline-flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        position: relative;\r\n        border-right: 2px solid darkgrey;\r\n    }\r\n\r\n    .fret.open {\r\n        border-right: 3px solid grey;\r\n        background-color: #D0B27C;;\r\n    }\r\n\r\n    /* Used to maintain aspect ratio */\r\n\r\n    .fret::before {\r\n        content: \"\";\r\n        display: block;\r\n        height: 0;\r\n        width: 0;\r\n        margin-top: calc(1/2 * 100%);\r\n    }\r\n\r\n    /* Fret String */\r\n\r\n    .fret-string {\r\n        border-top: 1px solid grey;\r\n        width: 100%;\r\n    }\r\n\r\n    /* Fret Numbers */\r\n\r\n    .fret-number {\r\n        position: absolute;\r\n        bottom: 100%;\r\n    }\r\n\r\n    /* Fret Dots */\r\n\r\n    .fret-dots {\r\n        position: absolute;\r\n        top: 95%;\r\n        font-size: 16px;\r\n        white-space: nowrap;\r\n    }\r\n\r\n    .fret-number, .fret-dots {\r\n        color: #888;\r\n    }\r\n`;\r\n\r\nexport default StyledFretboard;\r\n","\r\nimport * as React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { IFretProps } from \"./Fretboard.utils\";\r\n\r\nconst StyledFretLabel = styled.div`\r\n\tposition: absolute;\r\n\theight: 60%;\r\n\taspect-ratio: 1;\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\tborder-radius: 100%;\r\n\tbackground-color: ${({ $bgColor }) => $bgColor ? $bgColor : 'transparent'};\r\n\tcolor: ${({ $fgColor }) => $fgColor ? $fgColor : ''};\r\n\r\n\t/*cursor: pointer;\r\n\t&:hover {\r\n\t\theight: 80%;\r\n\t}*/\r\n`;\r\n\r\n\r\nconst FretLabel: React.FC<IFretProps> = props => {\r\n\r\n\tconst bgColor = props.colorMapFn(props);\r\n\r\n\tlet fgColor = 'white';\r\n\r\n\treturn (\r\n\t\t<StyledFretLabel $bgColor={bgColor} $fgColor={fgColor} onClick={null} className=\"fret-label\">\r\n\t\t\t{null}\r\n\t\t</StyledFretLabel>\r\n\t);\r\n};\r\n\r\nexport default FretLabel;\r\n","import * as React from \"react\";\r\nimport StyledFretboard from \"./Fretboard.styles\";\r\nimport { DEFAULT_FRETBOARD_PROPS, getDotsForFret, getFretRatios, IFretboardProps, IFretProps } from \"./Fretboard.utils\";\r\nimport FretLabel from \"./FretLabel\";\r\n\r\nexport const Fret: React.FC<IFretProps> = props => {\r\n\r\n\tconst { tuning, stringIndex, fretIndex, showFretNumbers, showFretDots } = props;\r\n\r\n\tconst classes = ['fret'];\r\n\tif (fretIndex === 0)\r\n\t\tclasses.push('open');\r\n\r\n\tconst isLowString = stringIndex === tuning.length - 1;\r\n\tconst isHighString = stringIndex === 0;\r\n\r\n\treturn (\r\n\t\t<div className={classes.join(' ')}>\r\n\t\t\t<div className=\"fret-number\">\r\n\t\t\t\t{showFretNumbers && isHighString && fretIndex > 0 && fretIndex}\r\n\t\t\t</div>\r\n\t\t\t<div className='fret-string' />\r\n\t\t\t<FretLabel {...props} />\r\n\t\t\t<div className=\"fret-dots\">\r\n\t\t\t\t{showFretDots && isLowString && fretIndex > 0 && getDotsForFret(fretIndex)}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst getFrets = (props: IFretboardProps) => {\r\n\tconst { fretRange, tuning } = props;\r\n\tconst [lo, hi] = fretRange;\r\n\r\n\tconst allFrets = [];\r\n\tfor (let s = 0; s < tuning.length; s++) {\r\n\t\tfor (let f = lo; f <= hi; f++) {\r\n\t\t\tallFrets.push(\r\n\t\t\t\t<Fret\r\n\t\t\t\t\tkey={`s${s}-f${f}`}\r\n\t\t\t\t\tstringIndex={s}\r\n\t\t\t\t\tfretIndex={f}\r\n\t\t\t\t\ttuning={tuning}\r\n\t\t\t\t\t{...props}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\treturn allFrets;\r\n};\r\n\r\nconst Fretboard: React.FC<IFretboardProps> = (userProps) => {\r\n\tconst props = { ...DEFAULT_FRETBOARD_PROPS, ...userProps };\r\n\r\n\tconst [lo, hi] = props.fretRange;\r\n\tconst numFrets = hi - lo + 1;\r\n\tconst numStrings = props.tuning.length;\r\n\tconst gridTemplateColumns = getFretRatios(numFrets).map(n => n + 'fr').join(' ');\r\n\tconst gridTemplateRows = `repeat(${numStrings}, 1fr)`;\r\n\tconst fretboardStyles = {\r\n\t\tgridTemplateColumns,\r\n\t\tgridTemplateRows\r\n\t};\r\n\r\n\treturn (\r\n\t\t<StyledFretboard className='fretboard' style={fretboardStyles}>\r\n\t\t\t{getFrets(props)}\r\n\t\t</StyledFretboard>\r\n\t);\r\n};\r\n\r\nexport default Fretboard;\r\n","import ArrayUtils from \"../../core/general/Array.utils\";\r\nimport Note from '../../core/models/Note';\r\nimport { NoteId } from './../../core/models/Model.constants';\r\n\r\nexport enum TuningId {\r\n    Standard = 'standard',\r\n    StandardSeven = 'standard-seven',\r\n    StandardBass = 'standard-bass',\r\n    Flat = 'flat',\r\n    DoubleFlat = 'double-flat',\r\n    DropD = 'drop-d',\r\n    DADGAD = 'dadgad',\r\n    Banjo = 'banjo',\r\n    Violin = 'violin',\r\n    OpenA = 'open-a',\r\n    OpenB = 'open-b',\r\n    OpenC = 'open-c',\r\n    OpenD = 'open-d',\r\n    OpenE = 'open-e',\r\n    OpenF = 'open-f',\r\n    OpenG = 'open-g',\r\n}\r\n\r\nexport interface ITuning {\r\n    id: TuningId;\r\n    name: string;\r\n    value: number[]\r\n}\r\n\r\nconst formatPreset = (id: TuningId, name: string, value: number[]): ITuning => ({\r\n    id,\r\n    name,\r\n    value\r\n});\r\n\r\nconst getPitch = (noteId: NoteId, octave: number): number => Note.getNote(noteId, octave).pod[0];\r\n\r\nexport const TUNING_PRESET_MAP = new Map<TuningId, ITuning>([\r\n    [TuningId.Standard, formatPreset(\r\n        TuningId.Standard,\r\n        'Standard Guitar',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.Flat, formatPreset(\r\n        TuningId.Flat,\r\n        'Flat Gtr',\r\n        [\r\n            getPitch(NoteId.Eb, 5),\r\n            getPitch(NoteId.Bb, 4),\r\n            getPitch(NoteId.Gb, 4),\r\n            getPitch(NoteId.Db, 4),\r\n            getPitch(NoteId.Ab, 3),\r\n            getPitch(NoteId.Eb, 3)\r\n        ]\r\n    )],\r\n    [TuningId.DoubleFlat, formatPreset(\r\n        TuningId.DoubleFlat,\r\n        'Double Flat Gtr',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.F, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.StandardSeven, formatPreset(\r\n        TuningId.StandardSeven,\r\n        'Standard 7-String Gtr',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3),\r\n            getPitch(NoteId.B, 3)\r\n        ]\r\n    )],\r\n    [TuningId.StandardBass, formatPreset(\r\n        TuningId.StandardBass,\r\n        'Standard Bass',\r\n        [\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3),\r\n            getPitch(NoteId.A, 2),\r\n            getPitch(NoteId.E, 2)\r\n        ]\r\n    )],\r\n    [TuningId.DropD, formatPreset(\r\n        TuningId.DropD,\r\n        'Drop D Gtr',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.DADGAD, formatPreset(\r\n        TuningId.DADGAD,\r\n        'DADGAD',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    // Unconfirmed\r\n    /*[TuningId.Banjo, formatPreset(\r\n        TuningId.Banjo,\r\n        'Banjo',\r\n        [\r\n            getPitch(NoteId.G, 5),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],*/\r\n    // Unconfirmed\r\n    [TuningId.Violin, formatPreset(\r\n        TuningId.Violin,\r\n        'Violin',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 4)\r\n        ]\r\n    )],\r\n    [TuningId.OpenA, formatPreset(\r\n        TuningId.OpenA,\r\n        'Open A',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.E, 4),\r\n            getPitch(NoteId.Cs, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenB, formatPreset(\r\n        TuningId.OpenB,\r\n        'Open B',\r\n        [\r\n            getPitch(NoteId.Ds, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Fs, 4),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Fs, 3),\r\n            getPitch(NoteId.B, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenC, formatPreset(\r\n        TuningId.OpenC,\r\n        'Open C',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.C, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenD, formatPreset(\r\n        TuningId.OpenD,\r\n        'Open D',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.Fs, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenE, formatPreset(\r\n        TuningId.OpenE,\r\n        'Open E',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Gs, 4),\r\n            getPitch(NoteId.E, 4),\r\n            getPitch(NoteId.B, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenF, formatPreset(\r\n        TuningId.OpenF,\r\n        'Open F',\r\n        [\r\n            getPitch(NoteId.F, 5),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.F, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.F, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenG, formatPreset(\r\n        TuningId.OpenG,\r\n        'Open G',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )]\r\n]);\r\n\r\nexport const FRETBOARD_TUNING_VALUES = ArrayUtils.mapToArray(TUNING_PRESET_MAP);\r\n","import Chord from '../../core/models/Chord';\r\nimport IntervalSpan from '../../core/models/Interval';\r\nimport { IModelConfig } from '../../core/models/Model.constants';\r\nimport Note from '../../core/models/Note';\r\nimport Scale from '../../core/models/Scale';\r\nimport { ITuning, TuningId, TUNING_PRESET_MAP } from './Fretboard.tuning';\r\nimport { IVoicing } from './Fretboard.voicing';\r\n\r\nexport interface IFretLabelProps {\r\n\tnote?: Note;\r\n\tcolor?: string;\r\n\tfreq?: number;\r\n}\r\n\r\nexport interface IFretboardProps {\r\n\tfretRange?: [number, number];\r\n\tshowFretDots?: boolean;\r\n\tshowFretNumbers?: boolean;\r\n\tcolorMapFn?: (fretProps: IFretProps) => string | undefined;\r\n\tvoicing?: IVoicing,\r\n\ttuning?: number[]; // ITuning,\r\n\tmodel?: Chord | Scale;\r\n}\r\n\r\nexport interface IFretProps extends IFretboardProps {\r\n\tstringIndex: number;\r\n\tfretIndex: number;\r\n}\r\n\r\nexport const DOTTED_FRET_INDICES = [true, false, false, true, false, true, false, true, false, true, false, false];\r\n\r\nexport const FRET_SIZE_RATIO = Math.pow((1 / 2), (1 / 12));\r\n\r\nexport const isIntervalInVoicing = (interval: IntervalSpan, voicing: IVoicing, stringIndex: number) => {\r\n\tif (!voicing || !voicing.value) return true;\r\n\tconst v = voicing.value[stringIndex];\r\n\tconst d = interval.getDegree();\r\n\tif (Array.isArray(v)) {\r\n\t\treturn v.some(n => doesVoicingValueMatch(d, n));\r\n\t}\r\n\telse if (typeof v === 'number') {\r\n\t\treturn doesVoicingValueMatch(d, v);\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nexport const getFretColor = (props: IFretProps): string | undefined => {\r\n\tconst { stringIndex, fretIndex, tuning, model, voicing } = props;\r\n\tconst noteIndex = tuning[stringIndex] + fretIndex;\r\n\tconst [interval, note] = model.tryGetPodPairAtPitch(noteIndex);\r\n\r\n\tif (!note) return;\r\n\r\n\tif (voicing && !isIntervalInVoicing(interval, voicing, stringIndex)) {\r\n\t\treturn `#00000033`\r\n\t}\r\n\r\n\treturn interval.getColor();\r\n}\r\n\r\nexport const DEFAULT_FRETBOARD_PROPS: IFretboardProps = {\r\n\tfretRange: [1, 12],\r\n\ttuning: TUNING_PRESET_MAP.get(TuningId.Standard).value,\r\n\tshowFretDots: true,\r\n\tshowFretNumbers: true,\r\n\tcolorMapFn: getFretColor\r\n};\r\n\r\nexport const getFretRatios = (numFrets: number): number[] => {\r\n\tconst ratios = [];\r\n\tfor (let i = 1; i <= numFrets; i++) {\r\n\t\tratios.push((i <= 1) ? 1 : ratios[i - 2] * FRET_SIZE_RATIO);\r\n\t}\r\n\treturn ratios;\r\n};\r\n\r\nexport const getDotsForFret = (fretNumber: number): string => {\r\n\tconst mod = fretNumber % 12;\r\n\tif (mod === 0)\r\n\t\treturn '• •';\r\n\telse if (DOTTED_FRET_INDICES[mod])\r\n\t\treturn '•';\r\n\treturn '';\r\n};\r\n\r\nconst doesVoicingValueMatch = (d: number, v: number) => {\r\n\treturn d + 1 === v;\r\n}\r\n","import ArrayUtils from \"../../core/general/Array.utils\";\r\n\r\nexport enum VoicingId {\r\n    None = 'None',\r\n    Chord_Triad_CShape_1 = 'Chord_Triad_CShape_1',\r\n    Chord_Triad_AShape_1 = 'Chord_Triad_AShape_1',\r\n    Chord_Triad_GShape_1 = 'Chord_Triad_GShape_1',\r\n    Chord_Triad_EShape_1 = 'Chord_Triad_EShape_1',\r\n    Chord_Triad_DShape_1 = 'Chord_Triad_DShape_1',\r\n    Chord_Sixth_CShape_1 = 'Chord_Sixth_CShape_1',\r\n    Chord_Sixth_AShape_1 = 'Chord_Sixth_AShape_1',\r\n    Chord_Sixth_GShape_1 = 'Chord_Sixth_GShape_1',\r\n    Chord_Sixth_EShape_1 = 'Chord_Sixth_EShape_1',\r\n    Chord_Sixth_DShape_1 = 'Chord_Sixth_DShape_1',\r\n    Chord_Seventh_CShape_1 = 'Chord_Seventh_CShape_1',\r\n    Chord_Seventh_AShape_1 = 'Chord_Seventh_AShape_1',\r\n    Chord_Seventh_GShape_1 = 'Chord_Seventh_GShape_1',\r\n    Chord_Seventh_EShape_1 = 'Chord_Seventh_EShape_1',\r\n    Chord_Seventh_DShape_1 = 'Chord_Seventh_DShape_1',\r\n    Chord_Shell_E_37 = 'Chord_Shell_E_37',\r\n    Chord_Shell_E_73 = 'Chord_Shell_E_73',\r\n    Chord_Shell_A_37 = 'Chord_Shell_A_37',\r\n    Chord_Shell_A_73 = 'Chord_Shell_A_73',\r\n    Chord_Shell_D_37 = 'Chord_Shell_D_37',\r\n    Chord_Shell_D_73 = 'Chord_Shell_D_73',\r\n    Scale_DoubleOctave_CShape_1 = 'Scale_DoubleOctave_CShape_1',\r\n    Scale_DoubleOctave_CShape_2 = 'Scale_DoubleOctave_CShape_2',\r\n    Scale_DoubleOctave_AShape_1 = 'Scale_DoubleOctave_AShape_1',\r\n    Scale_DoubleOctave_GShape_1 = 'Scale_DoubleOctave_GShape_1',\r\n    Scale_DoubleOctave_EShape_1 = 'Scale_DoubleOctave_EShape_1',\r\n    Scale_DoubleOctave_EShape_2 = 'Scale_DoubleOctave_EShape_2',\r\n    Scale_DoubleOctave_DShape_1 = 'Scale_DoubleOctave_DShape_1',\r\n}\r\n\r\nexport interface IVoicing {\r\n    id: VoicingId;\r\n    name: string;\r\n    value: (number | number[])[]\r\n}\r\n\r\nconst formatPreset = (id: VoicingId, name: string, value: (number | number[])[]): IVoicing => ({\r\n    id,\r\n    name,\r\n    value\r\n});\r\n\r\nexport const VOICING_PRESET_MAP = new Map<VoicingId, IVoicing>([\r\n    // Triads\r\n    [VoicingId.Chord_Triad_CShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_CShape_1,\r\n        'C Shape Triad',\r\n        [3, 1, 5, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Triad_AShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_AShape_1,\r\n        'A Shape Triad',\r\n        [5, 3, 1, 5, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Triad_GShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_GShape_1,\r\n        'G Shape Triad',\r\n        [1, 5, 1, 5, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Triad_EShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_EShape_1,\r\n        'E Shape Triad',\r\n        [1, 5, 3, 1, 5, 1]\r\n    )],\r\n    [VoicingId.Chord_Triad_DShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_DShape_1,\r\n        'D Shape Triad',\r\n        [3, 1, 5, 1, null, null]\r\n    )],\r\n    // Sixths\r\n    [VoicingId.Chord_Sixth_CShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_CShape_1,\r\n        'C Shape 6th Chord',\r\n        [3, 6, 5, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Sixth_AShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_AShape_1,\r\n        'A Shape 6th Chord',\r\n        [5, 3, 6, 5, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Sixth_GShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_GShape_1,\r\n        'G Shape 6th Chord',\r\n        [6, 5, 1, 5, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Sixth_EShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_EShape_1,\r\n        'E Shape 6th Chord',\r\n        [1, 5, 3, 6, 5, 1]\r\n    )],\r\n    [VoicingId.Chord_Sixth_DShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_DShape_1,\r\n        'D Shape 6th Chord',\r\n        [3, 6, 5, 1, null, null]\r\n    )],\r\n    // Sevenths\r\n    [VoicingId.Chord_Seventh_CShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_CShape_1,\r\n        'C Shape 7th Chord',\r\n        [3, 7, 5, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Seventh_AShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_AShape_1,\r\n        'A Shape 7th Chord',\r\n        [5, 3, 7, 5, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Seventh_GShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_GShape_1,\r\n        'G Shape 7th Chord',\r\n        [7, 5, 1, 5, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Seventh_EShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_EShape_1,\r\n        'E Shape 7th Chord',\r\n        [1, 5, 3, 7, 5, 1]\r\n    )],\r\n    [VoicingId.Chord_Seventh_DShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_DShape_1,\r\n        'D Shape 7th Chord',\r\n        [3, 7, 5, 1, null, null]\r\n    )],\r\n    // Shells\r\n    [VoicingId.Chord_Shell_E_37, formatPreset(\r\n        VoicingId.Chord_Shell_E_37,\r\n        'Shell E 3-7',\r\n        [null, null, null, 7, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Shell_E_73, formatPreset(\r\n        VoicingId.Chord_Shell_E_73,\r\n        'Shell E 7-3',\r\n        [null, null, 3, 7, null, 1]\r\n    )],\r\n    [VoicingId.Chord_Shell_A_37, formatPreset(\r\n        VoicingId.Chord_Shell_A_37,\r\n        'Shell A 3-7',\r\n        [null, null, 7, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Shell_A_73, formatPreset(\r\n        VoicingId.Chord_Shell_A_73,\r\n        'Shell A 7-3',\r\n        [null, 3, 7, null, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Shell_D_37, formatPreset(\r\n        VoicingId.Chord_Shell_D_37,\r\n        'Shell D 3-7',\r\n        [null, 7, 3, 1, null, null]\r\n    )],\r\n    [VoicingId.Chord_Shell_D_73, formatPreset(\r\n        VoicingId.Chord_Shell_D_73,\r\n        'Shell D 7-3',\r\n        [3, 7, null, 1, null, null]\r\n    )],\r\n    // CAGED Scales\r\n    [VoicingId.Scale_DoubleOctave_EShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_EShape_1,\r\n        'E Shape Scale (Locrian)',\r\n        [[1, 2, 3], [6, 7], [3, 4, 5], [7, 1, 2], [4, 5, 6], [1, 2, 3]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_EShape_2, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_EShape_2,\r\n        'E Shape Scale (Ionian)',\r\n        [[7, 1, 2], [5, 6], [2, 3, 4], [6, 7, 1], [3, 4, 5], [1, 2]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_DShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_DShape_1,\r\n        'D Shape Scale (Dorian)',\r\n        [[1, 2, 3], [5, 6, 7], [2, 3, 4], [6, 7, 1], [4, 5], [1, 2, 3]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_CShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_CShape_1,\r\n        'C Shape Scale (Phrygian)',\r\n        [[1, 2, 3], [5, 6, 7], [3, 4], [7, 1, 2], [4, 5, 6], [1, 2, 3]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_CShape_2, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_CShape_2,\r\n        'C Shape Scale (Lydian)',\r\n        [[7, 1, 2], [4, 5, 6], [2, 3], [6, 7, 1], [3, 4, 5], [1, 2]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_AShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_AShape_1,\r\n        'A Shape Scale (Mixolydian)',\r\n        [[1, 2], [5, 6, 7], [2, 3, 4], [6, 7, 1], [3, 4, 5], [1, 2]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_GShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_GShape_1,\r\n        'G Shape Scale (Aeolian)',\r\n        [[1, 2, 3], [5, 6, 7], [2, 3, 4], [7, 1], [4, 5, 6], [1, 2, 3]]\r\n    )]\r\n])\r\n\r\nexport const VOICING_PRESETS = ArrayUtils.mapToArray(VOICING_PRESET_MAP);\r\n"],"names":["StyledColumnManager","styled","$tablet","join","$desktop","children","tablet","desktop","React","StyledDropdownInput","props","value","setValue","options","idProperty","displayProperty","className","onChange","e","target","selectedIndex","map","v","i","key","name","StyledCAGEDPage","PageLayout","withConfig","useState","NOTE_PRESET_MAP","NoteId","rootPreset","setRootPreset","root","Note","majorScale","Scale","ScaleId","minorScale","majorItems","model","Chord","modelId","ChordId","rootId","notes","voicingId","minorItems","getColor","fretProps","stringIndex","fretIndex","tuning","noteIndex","voicing","tryGetPodPairAtPitch","interval","pod","title","ColumnManager","InputRow","label","DropdownInput","NOTE_PRESETS","p","Card","item","instance","Fretboard","VOICING_PRESET_MAP","undefined","colorMapFn","fretRange","ArrayUtils","StyledCard","theme","surface","card","CardHeader","level","action","AsTag","subtitle","rest","StyledInputRow","$y","dark3","y","StyledFretLabel","$bgColor","$fgColor","bgColor","onClick","Fret","showFretNumbers","showFretDots","classes","push","isLowString","length","isHighString","FretLabel","getDotsForFret","userProps","DEFAULT_FRETBOARD_PROPS","lo","numFrets","numStrings","fretboardStyles","gridTemplateColumns","getFretRatios","n","gridTemplateRows","StyledFretboard","style","hi","allFrets","s","f","getFrets","TuningId","formatPreset","id","getPitch","noteId","octave","TUNING_PRESET_MAP","Map","Standard","Flat","DoubleFlat","StandardSeven","StandardBass","DropD","DADGAD","Violin","OpenA","OpenB","OpenC","OpenD","OpenE","OpenF","OpenG","FRETBOARD_TUNING_VALUES","DOTTED_FRET_INDICES","FRET_SIZE_RATIO","Math","pow","isIntervalInVoicing","d","getDegree","Array","isArray","some","doesVoicingValueMatch","ratios","fretNumber","mod","VoicingId","Chord_Triad_CShape_1","Chord_Triad_AShape_1","Chord_Triad_GShape_1","Chord_Triad_EShape_1","Chord_Triad_DShape_1","Chord_Sixth_CShape_1","Chord_Sixth_AShape_1","Chord_Sixth_GShape_1","Chord_Sixth_EShape_1","Chord_Sixth_DShape_1","Chord_Seventh_CShape_1","Chord_Seventh_AShape_1","Chord_Seventh_GShape_1","Chord_Seventh_EShape_1","Chord_Seventh_DShape_1","Chord_Shell_E_37","Chord_Shell_E_73","Chord_Shell_A_37","Chord_Shell_A_73","Chord_Shell_D_37","Chord_Shell_D_73","Scale_DoubleOctave_EShape_1","Scale_DoubleOctave_EShape_2","Scale_DoubleOctave_DShape_1","Scale_DoubleOctave_CShape_1","Scale_DoubleOctave_CShape_2","Scale_DoubleOctave_AShape_1","Scale_DoubleOctave_GShape_1","VOICING_PRESETS"],"sourceRoot":""}