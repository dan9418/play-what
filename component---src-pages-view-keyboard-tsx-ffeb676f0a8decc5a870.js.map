{"version":3,"file":"component---src-pages-view-keyboard-tsx-ffeb676f0a8decc5a870.js","mappings":"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","sources":["webpack://play-what/./src/components/inputs/NumericInput.tsx","webpack://play-what/./src/components/pages/view/CardSection.tsx","webpack://play-what/./src/core/routing/Routing.utils.ts","webpack://play-what/./src/components/pages/view/DetailsCol.tsx","webpack://play-what/./src/components/layout/Modal.tsx","webpack://play-what/./src/components/pages/view/MainCol.tsx","webpack://play-what/./src/components/inputs/ColorSchemeInput.tsx","webpack://play-what/./src/components/pages/view/NotesCol.tsx","webpack://play-what/./src/components/pages/view/TabCard.tsx","webpack://play-what/./src/components/pages/view/useModelQueryParams.tsx","webpack://play-what/./src/components/pages/view/useModelState.tsx","webpack://play-what/./src/components/pages/view/KeyboardCol.tsx","webpack://play-what/./src/components/pages/view/KeyboardPage.tsx","webpack://play-what/./src/pages/view/keyboard.tsx","webpack://play-what/./src/viewers/keyboard/Keyboard.defaults.ts","webpack://play-what/./src/viewers/keyboard/Keyboard.styles.tsx","webpack://play-what/./src/viewers/keyboard/KeyboardKey.tsx","webpack://play-what/./src/viewers/keyboard/Keyboard.tsx"],"sourcesContent":["import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport Icon from \"../ui/Icon\";\r\nimport ButtonInput from \"./ButtonInput\";\r\n\r\nexport const StyledNumbericInput = styled.div`\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\r\n\tinput, button {\r\n\t\theight: 32px;\r\n\t\tpadding: 0;\r\n\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t}\r\n\r\n\tbutton {\r\n\t\twidth: 32px;\r\n\t\tborder: 1px solid ${({ theme }) => theme.utils.border};\r\n\t\tsvg, svg * {\r\n\t\t\tfill: white;\r\n\t\t}\r\n\r\n\t\tbackground-color: ${({ theme }) => theme.status.interactive};\r\n\t\tcolor: white;\r\n\t\t&:hover {\r\n\t\t\tbackground-color: ${({ theme }) => theme.status.active};\r\n\t\t}\r\n\r\n\t\t:first-child {\r\n\t\t\tborder-right: none;\r\n\t\t\tborder-radius: 8px 0 0 8px;\r\n\t\t}\r\n\t\t:last-child {\r\n\t\t\tborder-left: none;\r\n\t\t\tborder-radius: 0 8px 8px 0\r\n\t\t}\r\n\t}\r\n\r\n\tinput {\r\n\t\twidth: 48px;\r\n\t\tcursor: pointer;\r\n\t\tborder: none;\r\n\t\tfont-weight: bold;\r\n\t\ttext-align: center;\r\n\t\tbackground-color: white;\r\n\t\t&:hover {\r\n\t\t\tbackground-color: ${({ theme }) => theme.status.highlight};\r\n\t\t}\r\n\r\n\t\tborder: 1px solid ${({ theme }) => theme.utils.border};\r\n\t}\r\n    \r\n\tfont-size: 110%;\r\n\tcursor: pointer;\r\n`;\r\n\r\ninterface INumericInputProps {\r\n\tvalue: number;\r\n\tsetValue: (number) => void;\r\n\tmin?: number;\r\n\tmax?: number;\r\n}\r\n\r\nconst NumericInput: React.FC<INumericInputProps> = ({ value, setValue, ...rest }) => {\r\n\tconst onChange = e => setValue(parseInt(e.target.value));\r\n\r\n\tconst onDown = () => {\r\n\t\tlet newVal = value - 1;\r\n\t\tif (typeof rest.min !== 'undefined') {\r\n\t\t\tnewVal = Math.max(rest.min, newVal);\r\n\t\t}\r\n\t\tsetValue(newVal);\r\n\t};\r\n\r\n\tconst onUp = () => {\r\n\t\tlet newVal = value + 1;\r\n\t\tif (typeof rest.max !== 'undefined') {\r\n\t\t\tnewVal = Math.min(rest.max, newVal);\r\n\t\t}\r\n\t\tsetValue(newVal);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<StyledNumbericInput>\r\n\t\t\t<ButtonInput onClick={onDown}><Icon iconId=\"minus\" size={12} /></ButtonInput>\r\n\t\t\t<input type=\"number\" value={value} onChange={null} {...rest} />\r\n\t\t\t<ButtonInput onClick={onUp}><Icon iconId=\"plus\" size={12} /></ButtonInput>\r\n\t\t</StyledNumbericInput>\r\n\t);\r\n}\r\n\r\nexport default NumericInput;\r\n","import styled from 'styled-components';\r\nimport React from \"react\";\r\n\r\nconst StyledCardSection = styled.div`\r\n    h3 {\r\n        text-transform: uppercase;\r\n        font-size: 80%;\r\n        margin-bottom: 8px;\r\n        color: ${props => props.theme.text.secondary};\r\n    }\r\n    & > .content {\r\n        background: ${props => props.theme.surface.bg};\r\n        border-radius: 8px;\r\n        padding: 8px;\r\n    }\r\n`;\r\n\r\nconst CardSection = ({ title, children }) => {\r\n    return (\r\n        <StyledCardSection>\r\n            <h3>{title}</h3>\r\n            <div className=\"content\">\r\n                {children}\r\n            </div>\r\n        </StyledCardSection>\r\n    );\r\n}\r\n\r\nexport default CardSection;\r\n","import { ModelId, ModelType, NoteId } from \"../models/Model.constants\";\r\n\r\nexport const getModelRoute = (modelType: ModelType, modelId: ModelId, rootId?: NoteId) => {\r\n\r\n    const rootSuffix = rootId ? `/root/${rootId}` : '';\r\n\r\n    return `/browse/${modelType}/${modelId}${rootSuffix}`;\r\n}\r\n","import { Link } from \"gatsby\";\r\nimport React from \"react\";\r\nimport styled from 'styled-components';\r\nimport Chord from \"../../../core/models/Chord\";\r\nimport { IModelConfig } from \"../../../core/models/Model.constants\";\r\nimport Scale from \"../../../core/models/Scale\";\r\nimport { getModelRoute } from \"../../../core/routing/Routing.utils\";\r\nimport CardSection from \"./CardSection\";\r\nimport { MODEL_TYPE_OPTIONS } from \"./NotesCol\";\r\n\r\nconst StyledDetailsCol = styled.div`\r\n    display: grid;\r\n    gap: 16px;\r\n    grid-template-columns: 1fr;\r\n    @media(min-width: 512px) {\r\n        grid-template-columns: 1fr 1fr;\r\n    }\r\n    \r\n    .name {\r\n        font-size: 140%;\r\n        display: block;\r\n        padding: 8px;\r\n        \r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        flex-direction: column;\r\n    }\r\n    .info {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        \r\n        .item {\r\n            margin: 8px;\r\n            text-align: center;\r\n            .note {\r\n                font-weight: bold;\r\n                font-size: 120%;\r\n            }\r\n            .interval {\r\n                color: ${props => props.theme.text.secondary};\r\n            }\r\n        }\r\n    }\r\n    .notes, .instrument {\r\n        \r\n        min-height: 128px;\r\n\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        flex-direction: column;\r\n    }\r\n    .inst-name {\r\n        font-weight: bold;\r\n        font-size: 140%;\r\n        text-align: center;\r\n        padding: 8px;\r\n    }\r\n    .tuning {\r\n        font-size: 120%;\r\n        text-align: center;\r\n        color: ${props => props.theme.text.secondary};\r\n    }\r\n`;\r\n\r\nexport interface IDetailsColProps {\r\n    modelType: typeof MODEL_TYPE_OPTIONS[0];\r\n    modelConfig;\r\n    root: IModelConfig | any;\r\n    model: Chord | Scale;\r\n    setModelType?;\r\n    setModelConfig?;\r\n    setRoot?;\r\n    setModel?;\r\n    instrumentName: string;\r\n    instrumentTuning: string;\r\n}\r\n\r\nconst DetailsCol: React.FC<IDetailsColProps> = props => {\r\n\r\n    const { modelType, modelConfig, root, setModelType: _setModelType, setModelConfig: _setModelConfig, setRoot: _setRoot, model, setModel, instrumentName, instrumentTuning } = props;\r\n\r\n    return (\r\n        <StyledDetailsCol>\r\n            <CardSection title=\"Notes\">\r\n                <div className=\"notes\">\r\n                    <Link to={getModelRoute(modelType.id, modelConfig.modelId, root.modelId)}\r\n                        className=\"name\"\r\n                    >{model.name}</Link>\r\n                    <div className=\"info\">\r\n                        {model.notes && model.notes.map((note, i) => (\r\n                            <div key={i} className=\"item\">\r\n                                <div className=\"note\">{note.name}</div>\r\n                                <div className=\"interval\">{model.intervals[i].getName()}</div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </CardSection>\r\n            <CardSection title=\"Instrument\">\r\n                <div className=\"instrument\">\r\n                    <div className=\"inst-name\">{instrumentName}</div>\r\n                    <div className=\"tuning\">{instrumentTuning}</div>\r\n                </div>\r\n            </CardSection>\r\n        </StyledDetailsCol>\r\n    );\r\n};\r\n\r\nexport default DetailsCol;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport ButtonInput from '../inputs/ButtonInput';\r\nimport Card, { StyledCard } from '../ui/Card';\r\nimport Icon from '../ui/Icon';\r\n\r\nconst StyledOverlay = styled.div`\r\n    //width: 100vw;\r\n    //height: 100vw;\r\n    opacity: 0.8;\r\n    background-color: black;\r\n    position: fixed;\r\n    top: 48px;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 3000;\r\n`\r\n\r\nconst StyledContainer = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    position: fixed;\r\n    top: 48px;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 3001;\r\n\r\n    & > ${StyledCard} {\r\n        width: 80%;\r\n        height: 80%;\r\n        position: relative;\r\n        padding: 64px 16px;\r\n\r\n        overflow: auto;\r\n        resize: both;\r\n\r\n        .close {\r\n            position: absolute;\r\n            top: 16px;\r\n            right: 16px;\r\n            background-color: transparent !important;\r\n        }\r\n    }\r\n`\r\n\r\nconst Modal: React.FC<any> = ({ setIsOpen, children, ...rest }) => {\r\n    return (\r\n        <>\r\n            <StyledOverlay />\r\n            <StyledContainer >\r\n                <Card {...rest} draggable=\"true\">\r\n                    <ButtonInput onClick={() => setIsOpen(false)} className=\"close\">\r\n                        <Icon iconId='close' />\r\n                    </ButtonInput>\r\n                    {children}\r\n                </Card>\r\n            </StyledContainer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Modal;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport Modal from \"../../layout/Modal\";\r\n\r\nconst StyledMainCol = styled.div`\r\n    padding: 16px;\r\n    .maximize {\r\n        background-color: transparent !important;\r\n    }\r\n`;\r\n\r\ninterface IMainColProps {\r\n    viewer: any;\r\n    isFullScreen: boolean;\r\n    setIsFullScreen: Function;\r\n}\r\n\r\nconst MainCol: React.FC<IMainColProps> = (props) => {\r\n\r\n    const { viewer, isFullScreen, setIsFullScreen } = props;\r\n\r\n    return (\r\n        <>\r\n            {isFullScreen && (\r\n                <Modal setIsOpen={setIsFullScreen}>\r\n                    <div className=\"resize\">\r\n                        {viewer}\r\n                    </div>\r\n                </Modal>\r\n            )}\r\n            <StyledMainCol>\r\n                {viewer}\r\n            </StyledMainCol>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainCol;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nconst StyledColorSchemeInput = styled.div`\r\n\tpadding: 4px 8px;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-end;\r\n    gap: 4px;\r\n\r\n    & > div {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        gap: 4px;\r\n        font-size: 80%;\r\n        color: ${props => props.theme.text.secondary};\r\n    }\r\n\r\n    input {\r\n        height: 32px;\r\n        width: 32px;\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\ninterface IColorSchemeInputProps {\r\n    value: string[];\r\n    setValue: Function;\r\n    labelFn: Function;\r\n}\r\n\r\nconst ColorSchemeInput: React.FC<IColorSchemeInputProps> = props => {\r\n    const { value, setValue, labelFn } = props;\r\n\r\n    return (\r\n        <StyledColorSchemeInput>\r\n            {value.map((v, i) => (\r\n                <div>\r\n                    <input type=\"color\"\r\n                        value={v}\r\n                        onChange={e => setValue([...value.slice(0, i), e.target.value, ...value.slice(i + 1)])}\r\n                    />\r\n                    <label>\r\n                        {labelFn(i)}\r\n                    </label>\r\n                </div>\r\n            ))}\r\n        </StyledColorSchemeInput>\r\n    );\r\n}\r\n\r\nexport default ColorSchemeInput;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport { ColorScheme, COLOR_SCHEMES, IColorScheme } from \"../../../core/color/Color.utils\";\r\nimport Chord from \"../../../core/models/Chord\";\r\nimport { ChordId, IModelConfig, ModelId, ModelType, NoteId, ScaleId } from \"../../../core/models/Model.constants\";\r\nimport { CHORD_PRESETS, NOTE_PRESETS, SCALE_PRESETS } from \"../../../core/models/Model.presets\";\r\nimport Note from \"../../../core/models/Note\";\r\nimport Scale from \"../../../core/models/Scale\";\r\nimport ColorSchemeInput from \"../../inputs/ColorSchemeInput\";\r\nimport DropdownInput from \"../../inputs/DropdownInput\";\r\nimport InputRow from \"../../ui/InputRow\";\r\nimport CardSection from \"./CardSection\";\r\n\r\nconst StyledNotesCol = styled.div`\r\n    display: grid;\r\n    gap: 16px;\r\n    grid-template-columns: 1fr;\r\n`;\r\n\r\nexport const MODEL_TYPE_OPTIONS = [\r\n    {\r\n        id: ModelType.Chord,\r\n        name: 'Chords',\r\n        value: ModelType.Chord,\r\n        data: CHORD_PRESETS\r\n    },\r\n    {\r\n        id: ModelType.Scale,\r\n        name: 'Scales',\r\n        value: ModelType.Scale,\r\n        data: SCALE_PRESETS\r\n    }\r\n]\r\n\r\nexport interface INotesColProps {\r\n    modelType: typeof MODEL_TYPE_OPTIONS[0];\r\n    modelConfig;\r\n    root: IModelConfig | any;\r\n    model: Chord | Scale;\r\n    setModelType?;\r\n    setModelConfig?;\r\n    setRoot?;\r\n    setModel?;\r\n    colorScheme: IColorScheme;\r\n    setColorScheme;\r\n    colorConfig: string[];\r\n    setColorConfig;\r\n}\r\n\r\nexport const DEFAULT_MODEL_TYPE = MODEL_TYPE_OPTIONS[0];\r\nexport const DEFAULT_MODEL_CONFIG = MODEL_TYPE_OPTIONS[0].data[0];\r\nexport const DEFAULT_ROOT = NOTE_PRESETS[0];\r\n//export const DEFAULT_MODEL = new Chord(DEFAULT_MODEL_CONFIG.modelId, { root: Note.fromId(DEFAULT_ROOT.modelId) })\r\n\r\nexport const getNewModel = (modelType: ModelType, modelId: ModelId, root: NoteId) => {\r\n    let newModel;\r\n    if (modelType === ModelType.Chord) {\r\n        newModel = new Chord(modelId as ChordId, { root: Note.fromId(root) })\r\n    }\r\n    else if (modelType === ModelType.Scale) {\r\n        newModel = new Scale(modelId as ScaleId, { root: Note.fromId(root) })\r\n    }\r\n    return newModel;\r\n}\r\n\r\nconst NotesCol: React.FC<INotesColProps> = props => {\r\n\r\n    const { modelType, modelConfig, root, setModelType: _setModelType, setModelConfig: _setModelConfig, setRoot: _setRoot, model, setModel, colorScheme, setColorScheme, colorConfig, setColorConfig } = props;\r\n    const modelOptions = modelType.data;\r\n\r\n    const setModelType = type => {\r\n        _setModelType(type);\r\n        _setModelConfig(type.data[0])\r\n    }\r\n    const setModelConfig = config => {\r\n        let newModel = getNewModel(config.modelType, config.modelId, root.modelId);\r\n        _setModelConfig(config);\r\n        setModel(newModel);\r\n    }\r\n    const setRoot = newRoot => {\r\n        let newModel = getNewModel(modelConfig.modelType, modelConfig.modelId, newRoot.modelId);\r\n        _setRoot(newRoot);\r\n        setModel(newModel);\r\n    }\r\n\r\n    //console.log('dpb', MODEL_TYPE_OPTIONS, modelType, modelOptions, modelConfig)\r\n\r\n    return (\r\n        <StyledNotesCol>\r\n            <CardSection title=\"Root\" >\r\n                <ul>\r\n                    <li>\r\n                        <InputRow label=\"Key Center\">\r\n                            <DropdownInput value={root} setValue={setRoot} options={NOTE_PRESETS} idProperty=\"modelId\" />\r\n                        </InputRow>\r\n                    </li>\r\n                </ul>\r\n            </CardSection>\r\n            <CardSection title=\"Intervals\" >\r\n                <ul>\r\n                    <li>\r\n                        <InputRow label=\"Model Type\">\r\n                            <DropdownInput value={modelType} setValue={setModelType} options={MODEL_TYPE_OPTIONS} idProperty=\"id\" />\r\n                        </InputRow>\r\n                    </li>\r\n                    <li>\r\n                        <InputRow label=\"Preset\">\r\n                            <DropdownInput value={modelConfig} setValue={setModelConfig} options={modelOptions} idProperty=\"modelId\" />\r\n                        </InputRow>\r\n                    </li>\r\n                </ul>\r\n            </CardSection>\r\n            <CardSection title=\"Colors\" >\r\n                <ul>\r\n                    <li>\r\n                        <InputRow label=\"Color By\">\r\n                            <DropdownInput value={colorScheme} setValue={setColorScheme} options={COLOR_SCHEMES} idProperty=\"id\" />\r\n                        </InputRow>\r\n                    </li>\r\n                    <li>\r\n                        <InputRow label=\"Color Scheme\">\r\n                            <ColorSchemeInput value={colorConfig} setValue={setColorConfig} labelFn={colorScheme.labelFn} />\r\n                        </InputRow>\r\n                    </li>\r\n                </ul>\r\n            </CardSection>\r\n        </StyledNotesCol>\r\n    );\r\n};\r\n\r\nexport default NotesCol;\r\n","import React, { useState } from \"react\";\r\nimport styled from 'styled-components';\r\nimport { StyledCard } from \"../../ui/Card\";\r\n\r\nconst StyledTabCard = styled(StyledCard)`\r\n    padding: 0;\r\n    \r\n    .content {\r\n        padding: 16px;\r\n    }\r\n    .fake-border {\r\n        position: relative;\r\n        width: 100%;\r\n        bottom: 2px;\r\n        border-bottom: 2px solid ${props => props.theme.surface.bg};\r\n    }\r\n    > ul {\r\n        display: flex;\r\n        align-items: center;\r\n        overflow: auto;\r\n        \r\n        button {\r\n            position: relative;\r\n            z-index: 1000;\r\n            padding: 16px 16px 12px;\r\n            appearance: none;\r\n            border: none;\r\n            cursor: pointer;\r\n            background-color: ${props => props.theme.surface.card};\r\n            border-bottom: 2px solid transparent;\r\n            border-radius: 8px 8px 0 0;\r\n            border-bottom: 2px solid ${props => props.theme.surface.bg};\r\n\r\n            @media(min-width: 512px) {\r\n                font-size: 120%;\r\n            }\r\n\r\n            color: ${props => props.theme.text.secondary};\r\n\r\n            &:hover {\r\n                border-bottom: 2px solid  ${props => props.theme.action.interactive};\r\n                color: ${props => props.theme.text.primary};\r\n            }\r\n            \r\n            &.active {\r\n                border-color: ${props => props.theme.action.active};\r\n                font-weight: bold;\r\n                color: ${props => props.theme.text.primary};\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst TabCard: React.FC<any> = ({ tabs }) => {\r\n    const [index, setIndex] = useState(0);\r\n\r\n    return (\r\n        <StyledTabCard>\r\n            <ul>\r\n                {tabs.map((t, i) => (\r\n                    <li key={t.text}>\r\n                        <button\r\n                            type=\"button\"\r\n                            onClick={() => setIndex(i)}\r\n                            className={i === index ? 'active' : ''}\r\n                        >\r\n                            {t.text}\r\n                        </button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            <div className=\"fake-border\" />\r\n            <div className=\"content\">\r\n                {tabs[index].content}\r\n            </div>\r\n        </StyledTabCard>\r\n    );\r\n};\r\n\r\nexport default TabCard;\r\n","import { useQueryParam } from \"use-query-params\";\r\n\r\nconst useModelQueryParams = () => {\r\n    const [qpModelType] = useQueryParam('modelType');\r\n    const [qpModelId] = useQueryParam('modelId');\r\n    const [qpRootId] = useQueryParam('rootId');\r\n\r\n    return [qpModelType, qpModelId, qpRootId];\r\n}\r\n\r\nexport default useModelQueryParams;\r\n","import { useState } from \"react\";\r\nimport { NOTE_PRESETS } from \"../../../core/models/Model.presets\";\r\nimport { DEFAULT_MODEL_CONFIG, DEFAULT_MODEL_TYPE, DEFAULT_ROOT, getNewModel, MODEL_TYPE_OPTIONS } from \"./NotesCol\";\r\n\r\nconst getInitModelType = (qpModelType?: string) => {\r\n    const found = MODEL_TYPE_OPTIONS.find(type => type.id && type.id === qpModelType);\r\n    return found || DEFAULT_MODEL_TYPE;\r\n}\r\n\r\nconst getInitModelConfig = (modelType, qpModelId?: string) => {\r\n    const found = modelType.data.find(preset => preset.modelId === qpModelId);\r\n    return found || DEFAULT_MODEL_CONFIG;\r\n}\r\n\r\nconst getInitRoot = (qpRootId?: string) => {\r\n    const found = NOTE_PRESETS.find(note => note.modelId === qpRootId);\r\n    return found || DEFAULT_ROOT;\r\n}\r\n\r\nexport const useModelState = (initModelType, initModelId, initRootId) => {\r\n    const [modelType, setModelType] = useState(getInitModelType(initModelType));\r\n    const [modelConfig, setModelConfig] = useState(getInitModelConfig(modelType, initModelId));\r\n\r\n    const [root, setRoot] = useState(getInitRoot(initRootId));\r\n    const [model, setModel] = useState(getNewModel(modelType.id, modelConfig.modelId, root.modelId));\r\n\r\n    return {\r\n        modelType,\r\n        setModelType,\r\n        modelConfig,\r\n        setModelConfig,\r\n        root,\r\n        setRoot,\r\n        model,\r\n        setModel\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport DEFAULT_KEYBOARD_PROPS from \"../../../viewers/keyboard/Keyboard.defaults\";\r\nimport NumericInput from \"../../inputs/NumericInput\";\r\nimport Card from \"../../ui/Card\";\r\nimport InputRow from \"../../ui/InputRow\";\r\n\r\nconst StyledKeyboardCol = styled.div`\r\n\r\n`;\r\n\r\n\r\nexport interface IKeyboardColProps {\r\n    keyRange;\r\n    setKeyRange;\r\n    model;\r\n}\r\n\r\nexport const DEFAULT_KEY_RANGE = DEFAULT_KEYBOARD_PROPS.keyRange as [number, number];\r\n\r\nconst KeyboardCol: React.FC<IKeyboardColProps> = ({ keyRange, setKeyRange }) => {\r\n\r\n    const [keyLo, keyHi] = keyRange;\r\n\r\n    return (\r\n        <StyledKeyboardCol>\r\n            <Card title=\"Range\">\r\n                <ul>\r\n                    <li>\r\n                        <InputRow label=\"Low Key\">\r\n                            <NumericInput value={keyLo} min={-88} max={keyHi} setValue={v => setKeyRange([v, keyHi])} />\r\n                        </InputRow>\r\n                    </li>\r\n                    <li>\r\n                        <InputRow label=\"High Key\">\r\n                            <NumericInput value={keyHi} min={keyLo} max={88} setValue={v => setKeyRange([keyLo, v])} />\r\n                        </InputRow>\r\n                    </li>\r\n                </ul>\r\n            </Card >\r\n        </StyledKeyboardCol>\r\n    );\r\n};\r\n\r\nexport default KeyboardCol;\r\n","import React, { useState } from \"react\";\r\nimport styled from 'styled-components';\r\nimport Keyboard from \"../../../viewers/keyboard/Keyboard\";\r\nimport ColumnManager, { StyledColumnManager } from \"../../column-manager/ColumnManager\";\r\nimport PageTitle from \"../../layout/PageTitle\";\r\nimport { StyledCard } from \"../../ui/Card\";\r\nimport DetailsCol from \"./DetailsCol\";\r\nimport KeyboardCol, { DEFAULT_KEY_RANGE } from \"./KeyboardCol\";\r\nimport MainCol from \"./MainCol\";\r\nimport NotesCol from \"./NotesCol\";\r\nimport TabCard from \"./TabCard\";\r\nimport useModelQueryParams from \"./useModelQueryParams\";\r\nimport { useModelState } from \"./useModelState\";\r\n\r\nconst StyledKeyboardPage = styled.div`\r\n    min-height: 95vh;\r\n    padding: 16px;\r\n\r\n    ${StyledColumnManager} {\r\n        & > div > ${StyledCard}:not(:last-child) {\r\n            margin-bottom: 16px;\r\n        }\r\n    }\r\n\r\n    ${StyledColumnManager} {\r\n        margin-top: 16px;\r\n    }\r\n`;\r\n\r\n\r\n\r\nconst KeyboardPage: React.FC = () => {\r\n\r\n    const [qpModelType, qpModelId, qpRootId] = useModelQueryParams();\r\n    const modelState = useModelState(qpModelType, qpModelId, qpRootId);\r\n    const {\r\n        modelType,\r\n        setModelType,\r\n        modelConfig,\r\n        setModelConfig,\r\n        root,\r\n        setRoot,\r\n        model,\r\n        setModel\r\n    } = modelState;\r\n\r\n    const [keyRange, setKeyRange] = useState<[number, number]>(DEFAULT_KEY_RANGE);\r\n\r\n    const instrumentColProps = {\r\n        model,\r\n        keyRange,\r\n        setKeyRange\r\n    }\r\n\r\n    const notesColProps = {\r\n        modelType,\r\n        setModelType,\r\n        modelConfig,\r\n        setModelConfig,\r\n        root,\r\n        setRoot,\r\n        model,\r\n        setModel\r\n    }\r\n\r\n    const mainColProps = {\r\n        title: 'Keyboard',\r\n        viewer: <Keyboard\r\n            {...instrumentColProps}\r\n            {...notesColProps}\r\n        />\r\n    };\r\n\r\n    return (\r\n        <StyledKeyboardPage>\r\n            <PageTitle title=\"Keyboard\" />\r\n            <ColumnManager desktop={[\"1fr\", \"1fr\"]}>\r\n                <MainCol {...mainColProps} />\r\n                <TabCard\r\n                    tabs={[\r\n                        {\r\n                            text: 'Summary',\r\n                            content: <DetailsCol {...notesColProps} />\r\n                        },\r\n                        {\r\n                            text: 'Instrument',\r\n                            content: <KeyboardCol {...instrumentColProps} />\r\n                        },\r\n                        {\r\n                            text: 'Notes',\r\n                            content: <NotesCol {...notesColProps} />\r\n                        }\r\n                    ]}\r\n                />\r\n            </ColumnManager>\r\n        </StyledKeyboardPage>\r\n    );\r\n};\r\n\r\nexport default KeyboardPage;\r\n","import KeyboardPage from \"../../components/pages/view/KeyboardPage\";\r\n\r\nexport default KeyboardPage;\r\n","import Chord from \"../../core/models/Chord\";\r\nimport Scale from \"../../core/models/Scale\";\r\n\r\nexport enum KeyType {\r\n\tBlack = 'black',\r\n\tWhite = 'white'\r\n}\r\n\r\nexport interface IKeyboardProps {\r\n\tkeyRange: [number, number];\r\n\thideLabel?: boolean;\r\n\tmodel?: Chord | Scale;\r\n\tcolorMapFn?: (fretProps: IKeyboardKeyProps) => string | undefined;\r\n}\r\n\r\nexport interface IKeyboardKeyProps extends IKeyboardProps {\r\n\tnoteIndex: number;\r\n\tscale: number;\r\n\tkeyType: KeyType;\r\n}\r\n\r\nexport const BLACK_KEY_INDICES = [0, 2, 4, 5, 7, 9, 11];\r\n\r\nexport const getKeyColor = (props: IKeyboardKeyProps): string | undefined => {\r\n\tconst { noteIndex, model } = props;\r\n\r\n\tconst [interval, note] = model.tryGetPodPairAtPitch(noteIndex);\r\n\r\n\tif (!note) return;\r\n\r\n\treturn interval.getColor();\r\n}\r\n\r\nconst DEFAULT_KEYBOARD_PROPS = {\r\n\tkeyRange: [-12, 12],\r\n\tcolorMapFn: getKeyColor\r\n};\r\n\r\nexport default DEFAULT_KEYBOARD_PROPS;\r\n","import styled from 'styled-components';\r\n\r\nconst StyledKeyboard = styled.div`\r\n    display: inline-flex;\r\n\twidth: 100%;\r\n\t//min-width: 100px;\r\n    font-size: 12px;\r\n\ttext-align: center;\r\n\tfont-family: sans-serif;\r\n\tmargin: 16px 0;\r\n\r\n    .center {\r\n        text-align: center;\r\n    }\r\n\r\n    /* Key Container */\r\n\r\n    .white-key-container {\r\n        display: inline-block;\r\n    }\r\n\r\n    .black-key-container {\r\n        display: inline-block;\r\n        width: 0px;\r\n    }\r\n\r\n    /* Key */\r\n\r\n    .keyboard-key {\r\n        vertical-align: top;\r\n        position: relative;\r\n        display: inline-flex;\r\n        justify-content: center;\r\n        cursor: pointer;\r\n    }\r\n\r\n    .white-key {\r\n        box-shadow: 0 0 1px 1px black inset;\r\n        border-radius: 0 0 5% 5%;\r\n    }\r\n\r\n    /*.white-key:hover {\r\n        box-shadow: 0 0 1px 2px black inset;\r\n    }*/\r\n\r\n    .black-key {\r\n        box-shadow: 0 0 1px 2px #555 inset;\r\n        z-index: 10;\r\n        border-radius: 0 0 10% 10%;\r\n    }\r\n\r\n    /*.black-key:hover {\r\n        background-color: #333;\r\n        box-shadow: 0 0 1px 2px black inset;\r\n    }*/\r\n\r\n    /* Colors (applied only in absence of degree class) */\r\n\r\n    .white {\r\n        background-color: white;\r\n        color: black;\r\n    }\r\n\r\n    .black {\r\n        background-color: black;\r\n        color: white;\r\n    }\r\n\r\n\r\n    /* Label */\r\n\r\n    .white-key .keyboard-key-label {\r\n        position: absolute;\r\n        height: 100%;\r\n        width: 100%;\r\n        border-radius: 0 0 5% 5%;\r\n        box-shadow: 0 0 1px 1px black inset;\r\n\r\n        padding-bottom: 4px;\r\n        display: flex;\r\n        align-items: flex-end;\r\n        justify-content: center;\r\n    }\r\n\r\n    /*.white-key .keyboard-key-label:hover {\r\n        box-shadow: 0 0 1px 2px black inset;\r\n    }*/\r\n\r\n    .black-key .keyboard-key-label {\r\n        bottom: 105%;\r\n        position: absolute;\r\n        color: black;\r\n    }\r\n`;\r\n\r\nexport default StyledKeyboard;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport ColorUtils from \"../../core/color/Color.utils\";\r\nimport { IKeyboardKeyProps, KeyType } from './Keyboard.defaults';\r\n\r\n// Key dimensions relative to white key width\r\nconst KEY__DIMS = {\r\n\tWhW_WhH: 4.6875, // White key width to white key height\r\n\tWhW_BlW: 0.6250, // White key width to black key width\r\n\tWhW_BlH: 2.9688 // White key width to black hey height\r\n}\r\n\r\nconst getScaleStyles = (keyType, scale) => {\r\n\tswitch (keyType) {\r\n\t\tcase KeyType.White:\r\n\t\t\treturn {\r\n\t\t\t\twidth: scale + 'px',\r\n\t\t\t\theight: KEY__DIMS.WhW_WhH * scale + 'px'\r\n\t\t\t};\r\n\t\tcase KeyType.Black:\r\n\t\t\treturn {\r\n\t\t\t\twidth: KEY__DIMS.WhW_BlW * scale + 'px',\r\n\t\t\t\theight: KEY__DIMS.WhW_BlH * scale + 'px',\r\n\t\t\t\tright: .5 * KEY__DIMS.WhW_BlW * scale + 'px'\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn {\r\n\t\t\t\twidth: '0px',\r\n\t\t\t\theight: '0px'\r\n\t\t\t};\r\n\t}\r\n}\r\n\r\nconst StyledKey = styled.div`\r\n\tbackground-color: ${({ $color }) => $color ? $color : 'transparent'};\r\n\tcolor: ${({ $color }) => ColorUtils.getFgColor($color)};\r\n`;\r\n\r\nconst StyledKeyLabel = styled.div`\r\n\tcolor: ${({ $color }) => ColorUtils.getFgColor($color)};\r\n`;\r\n\r\nconst KeyboardKey: React.FC<IKeyboardKeyProps> = props => {\r\n\r\n\tconst { keyType, noteIndex, scale, hideLabel, model, colorMapFn } = props;\r\n\r\n\tconst bgColor = colorMapFn(props);\r\n\r\n\tconst scaleStyles = getScaleStyles(keyType, scale);\r\n\tconst classes = ['keyboard-key', `${keyType}-key`, keyType];\r\n\r\n\tconst colorStyles = {\r\n\t\tbackgroundColor: bgColor ? bgColor : ''\r\n\t}\r\n\r\n\tconst keyStyles = keyType === KeyType.White ? scaleStyles : { ...scaleStyles, ...colorStyles };\r\n\tconst labelStyles = keyType === KeyType.White ? colorStyles : {};\r\n\r\n\treturn (\r\n\t\t<StyledKey className={`${keyType}-key-container`}>\r\n\t\t\t<div className={classes.join(' ')} style={keyStyles} >\r\n\t\t\t\t<StyledKeyLabel className='keyboard-key-label' style={labelStyles} $color={bgColor}>\r\n\t\t\t\t\t{null}\r\n\t\t\t\t</StyledKeyLabel>\r\n\t\t\t</div>\r\n\t\t</StyledKey>\r\n\t);\r\n}\r\n\r\nexport default KeyboardKey;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport NumberUtils from \"../../core/general/Number.utils\";\r\nimport DEFAULT_PROPS, { BLACK_KEY_INDICES, IKeyboardProps, KeyType } from \"./Keyboard.defaults\";\r\nimport StyledKeyboard from \"./Keyboard.styles\";\r\nimport KeyboardKey from \"./KeyboardKey\";\r\n\r\nconst getKeyboardKeys = (props: IKeyboardProps, viewerWidth: number) => {\r\n\tconst { keyRange } = props;\r\n\tconst [lo, hi] = keyRange;\r\n\tconst keys = [];\r\n\r\n\tlet numBlackKeys = 0;\r\n\tlet numWhiteKeys = 0;\r\n\tfor (let i = lo; i <= hi; i++) {\r\n\t\tconst keyType = BLACK_KEY_INDICES.includes(NumberUtils.modulo(i, 12)) ? KeyType.White : KeyType.Black;\r\n\t\tif (keyType === KeyType.Black) { numBlackKeys++ } else { numWhiteKeys++; }\r\n\t}\r\n\r\n\tfor (let i = lo; i <= hi; i++) {\r\n\t\tconst keyType = BLACK_KEY_INDICES.includes(NumberUtils.modulo(i, 12)) ? KeyType.White : KeyType.Black;\r\n\r\n\t\tkeys.push(\r\n\t\t\t<KeyboardKey\r\n\t\t\t\tkeyType={keyType}\r\n\t\t\t\tkey={i}\r\n\t\t\t\tnoteIndex={i}\r\n\t\t\t\tscale={viewerWidth / numWhiteKeys}\r\n\t\t\t\t{...props}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n\treturn keys;\r\n}\r\n\r\nconst Keyboard: React.FC<IKeyboardProps> = (userProps) => {\r\n\r\n\tconst props = { ...DEFAULT_PROPS, ...userProps };\r\n\r\n\tconst [dims, setDims] = useState([128, 128]);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst resetDimensions = (e) => {\r\n\t\t\tconst el = document.getElementById('keyboard');\r\n\t\t\tsetDims([el.clientWidth, el.clientHeight])\r\n\t\t}\r\n\t\tresetDimensions(null);\r\n\t\twindow.addEventListener('resize', resetDimensions);\r\n\t\treturn () => window.removeEventListener('resize', resetDimensions);\r\n\t}, [])\r\n\r\n\treturn (\r\n\t\t<StyledKeyboard className='keyboard' id='keyboard'>\r\n\t\t\t{getKeyboardKeys(props, dims[0])}\r\n\t\t</StyledKeyboard>\r\n\t);\r\n}\r\n\r\nexport default Keyboard;\r\n"],"names":["StyledNumbericInput","styled","theme","utils","border","status","interactive","active","highlight","value","setValue","rest","React","ButtonInput","onClick","newVal","min","Math","max","Icon","iconId","size","type","onChange","StyledCardSection","props","text","secondary","surface","bg","title","children","className","getModelRoute","modelType","modelId","rootId","StyledDetailsCol","modelConfig","root","model","setModelType","setModelConfig","setRoot","instrumentName","setModel","instrumentTuning","CardSection","Link","to","id","name","notes","map","note","i","key","intervals","getName","StyledOverlay","StyledContainer","StyledCard","setIsOpen","Card","draggable","StyledMainCol","viewer","isFullScreen","setIsFullScreen","Modal","StyledColorSchemeInput","labelFn","v","e","slice","target","StyledNotesCol","MODEL_TYPE_OPTIONS","ModelType","data","CHORD_PRESETS","SCALE_PRESETS","DEFAULT_MODEL_TYPE","DEFAULT_MODEL_CONFIG","DEFAULT_ROOT","NOTE_PRESETS","getNewModel","newModel","Chord","Note","Scale","_setModelType","_setModelConfig","_setRoot","colorScheme","setColorScheme","colorConfig","setColorConfig","modelOptions","InputRow","label","DropdownInput","newRoot","options","idProperty","config","COLOR_SCHEMES","ColorSchemeInput","StyledTabCard","withConfig","card","action","primary","tabs","useState","index","setIndex","t","content","useQueryParam","useModelState","initModelType","initModelId","initRootId","qpModelType","qpRootId","qpModelId","find","preset","getInitModelConfig","StyledKeyboardCol","DEFAULT_KEY_RANGE","DEFAULT_KEYBOARD_PROPS","keyRange","setKeyRange","keyLo","keyHi","NumericInput","StyledKeyboardPage","StyledColumnManager","useModelQueryParams","modelState","instrumentColProps","notesColProps","mainColProps","Keyboard","PageTitle","ColumnManager","desktop","MainCol","TabCard","DetailsCol","KeyboardCol","NotesCol","KeyType","BLACK_KEY_INDICES","colorMapFn","noteIndex","tryGetPodPairAtPitch","interval","getColor","KEY__DIMS","StyledKey","$color","ColorUtils","StyledKeyLabel","keyType","scale","bgColor","hideLabel","scaleStyles","width","height","right","getScaleStyles","classes","colorStyles","backgroundColor","keyStyles","labelStyles","join","style","userProps","DEFAULT_PROPS","dims","setDims","useEffect","resetDimensions","el","document","getElementById","clientWidth","clientHeight","window","addEventListener","removeEventListener","StyledKeyboard","viewerWidth","lo","hi","keys","numWhiteKeys","NumberUtils","push","KeyboardKey","getKeyboardKeys"],"sourceRoot":""}