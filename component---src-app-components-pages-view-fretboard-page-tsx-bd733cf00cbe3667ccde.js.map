{"version":3,"file":"component---src-app-components-pages-view-fretboard-page-tsx-bd733cf00cbe3667ccde.js","mappings":"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","sources":["webpack://play-what/./src/app/components/pages/view/CardSection.tsx","webpack://play-what/./src/app/components/shared/inputs/DropdownInput.tsx","webpack://play-what/./src/app/components/shared/inputs/NumericInput.tsx","webpack://play-what/./src/app/components/shared/inputs/SwitchInput.tsx","webpack://play-what/./src/app/components/shared/layout/Modal.tsx","webpack://play-what/./src/app/components/shared/ui/CardFooterButton.tsx","webpack://play-what/./src/app/components/shared/ui/InputRow.tsx","webpack://play-what/./src/app/components/pages/view/MaximizeButton.tsx","webpack://play-what/./src/app/components/pages/view/FretboardCol.tsx","webpack://play-what/./src/app/components/pages/view/NotesCol.tsx","webpack://play-what/./src/app/components/pages/view/useFretboardState.ts","webpack://play-what/./src/app/components/pages/view/useModelQueryParams.tsx","webpack://play-what/./src/app/components/pages/view/useModelState.tsx","webpack://play-what/./src/app/components/pages/view/fretboard.page.tsx","webpack://play-what/./src/app/components/shared/layout/ColumnManager.tsx","webpack://play-what/./src/app/components/shared/ui/Card.tsx","webpack://play-what/./src/app/components/shared/ui/Table.tsx","webpack://play-what/./src/core/Frequency.utils.ts","webpack://play-what/./src/core/IntervalQuality.constants.ts","webpack://play-what/./src/core/Interval.utils.ts","webpack://play-what/./src/core/Accidental.constants.ts","webpack://play-what/./src/core/Diatonic.constants.ts","webpack://play-what/./src/core/Note.utils.ts","webpack://play-what/./src/core/Pod.utils.ts","webpack://play-what/./src/core/primitives/Number.utils.ts"],"sourcesContent":["import styled from \"styled-components\";\r\nimport React from \"react\";\r\n\r\nexport const StyledCardSection = styled.div`\r\n  h3 {\r\n    text-transform: uppercase;\r\n    font-size: 80%;\r\n    margin-bottom: 8px;\r\n    color: ${(props) => props.theme?.text?.secondary};\r\n  }\r\n  & > .content {\r\n    background: ${(props) => props.theme?.surface?.bg};\r\n    border-radius: 8px;\r\n    padding: 8px;\r\n  }\r\n`;\r\n\r\nconst CardSection: React.FC<any> = ({ title, children }) => {\r\n  return (\r\n    <StyledCardSection>\r\n      {title && <h3>{title}</h3>}\r\n      <div className=\"content\">{children}</div>\r\n    </StyledCardSection>\r\n  );\r\n};\r\n\r\nexport default CardSection;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nconst StyledDropdownInput = styled.select`\r\n\tfont-size: 110%;\r\n    min-width: 128px;\r\n\r\n\tpadding: 4px 8px;\r\n\r\n    cursor: pointer;\r\n    border-radius: 4px;\r\n\r\n\toption {\r\n\t\tcursor: pointer;\r\n\t}\r\n`;\r\n\r\ninterface IDropdownInputProps {\r\n\tvalue: any;\r\n\tsetValue: Function;\r\n\toptions: any[];\r\n\tidProperty?: string;\r\n\tdisplayProperty?: string;\r\n}\r\n\r\nconst DropdownInput: React.FC<IDropdownInputProps> = props => {\r\n\tconst { value, setValue, options, idProperty, displayProperty } = props;\r\n\r\n\treturn (\r\n\t\t<StyledDropdownInput\r\n\t\t\tclassName='dropdown-input'\r\n\t\t\tonChange={e => setValue(options[e.target.selectedIndex], e.target.selectedIndex)}\r\n\t\t\tvalue={value ? value[idProperty || 'id'] : ''}\r\n\t\t>\r\n\t\t\t{(options || []).map((v, i) => (\r\n\t\t\t\t<option key={i} value={v[idProperty || 'id']}>{v[displayProperty || 'name']}</option>\r\n\t\t\t))}\r\n\t\t</StyledDropdownInput>\r\n\t);\r\n}\r\n\r\nexport default DropdownInput;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Icon from \"../ui/Icon\";\r\nimport ButtonInput from \"./ButtonInput\";\r\n\r\nexport const StyledNumbericInput = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  input,\r\n  button {\r\n    height: 32px;\r\n    padding: 0;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n\r\n  button {\r\n    width: 32px;\r\n    border: 1px solid ${({ theme }) => theme?.utils?.border};\r\n    svg,\r\n    svg * {\r\n      fill: white;\r\n    }\r\n\r\n    background-color: ${({ theme }) => theme?.status?.interactive};\r\n    color: white;\r\n    &:hover {\r\n      background-color: ${({ theme }) => theme?.status?.active};\r\n    }\r\n\r\n    :first-child {\r\n      border-right: none;\r\n      border-radius: 8px 0 0 8px;\r\n    }\r\n    :last-child {\r\n      border-left: none;\r\n      border-radius: 0 8px 8px 0;\r\n    }\r\n  }\r\n\r\n  input {\r\n    width: 48px;\r\n    cursor: pointer;\r\n    border: none;\r\n    font-weight: bold;\r\n    text-align: center;\r\n    background-color: white;\r\n    &:hover {\r\n      background-color: ${({ theme }) => theme?.status?.highlight};\r\n    }\r\n\r\n    border: 1px solid ${({ theme }) => theme?.utils?.border};\r\n  }\r\n\r\n  font-size: 110%;\r\n  cursor: pointer;\r\n`;\r\n\r\ninterface INumericInputProps {\r\n  value: number;\r\n  setValue: (number) => void;\r\n  min?: number;\r\n  max?: number;\r\n}\r\n\r\nconst NumericInput: React.FC<INumericInputProps> = ({\r\n  value,\r\n  setValue,\r\n  ...rest\r\n}) => {\r\n  const onChange = (e) => setValue(parseInt(e.target.value));\r\n\r\n  const onDown = () => {\r\n    let newVal = value - 1;\r\n    if (typeof rest.min !== \"undefined\") {\r\n      newVal = Math.max(rest.min, newVal);\r\n    }\r\n    setValue(newVal);\r\n  };\r\n\r\n  const onUp = () => {\r\n    let newVal = value + 1;\r\n    if (typeof rest.max !== \"undefined\") {\r\n      newVal = Math.min(rest.max, newVal);\r\n    }\r\n    setValue(newVal);\r\n  };\r\n\r\n  return (\r\n    <StyledNumbericInput>\r\n      <ButtonInput onClick={onDown}>\r\n        <Icon iconId=\"minus\" size={12} />\r\n      </ButtonInput>\r\n      <input type=\"number\" value={value} onChange={null} {...rest} />\r\n      <ButtonInput onClick={onUp}>\r\n        <Icon iconId=\"plus\" size={12} />\r\n      </ButtonInput>\r\n    </StyledNumbericInput>\r\n  );\r\n};\r\n\r\nexport default NumericInput;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledSwitch = styled.button`\r\n  border: none;\r\n  -ms-user-select: none;\r\n  user-select: none;\r\n  height: 22px;\r\n  width: 64px;\r\n  border-radius: 24px;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  overflow: hidden;\r\n  ${({ $active }) => `justify-content: flex-${$active ? 'end' : 'start'}`};\r\n\r\n\r\n  background-color: white;\r\n  :hover {\r\n    background-color: ${({ theme }) => theme?.action?.interactive};\r\n  }\r\n\r\n  & .ball {\r\n    height: 18px;\r\n    width: 18px;\r\n    border-radius: 100%;\r\n    margin: 0 4px;\r\n    background-color: ${({ theme, $active }) => $active ? theme?.action?.active : theme?.surface?.bg};\r\n\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\ninterface ISwitchInputProps {\r\n  value: boolean;\r\n  setValue: (boolean) => void;\r\n}\r\n\r\nconst SwitchInput: React.FC<ISwitchInputProps> = ({ value, setValue }) => {\r\n  return (\r\n    <StyledSwitch $active={value} onClick={() => setValue(!value)}>\r\n      <div className=\"ball\" />\r\n    </StyledSwitch>\r\n  );\r\n};\r\n\r\nexport default SwitchInput;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport ButtonInput from '../inputs/ButtonInput';\r\nimport Card, { StyledCard } from '../ui/Card';\r\nimport Icon from '../ui/Icon';\r\n\r\nconst StyledOverlay = styled.div`\r\n    //width: 100vw;\r\n    //height: 100vw;\r\n    opacity: 0.8;\r\n    background-color: black;\r\n    position: fixed;\r\n    top: 48px;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 3000;\r\n`\r\n\r\nconst StyledContainer = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    position: fixed;\r\n    top: 48px;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 3001;\r\n\r\n    & > ${StyledCard} {\r\n        width: 80%;\r\n        height: 80%;\r\n        position: relative;\r\n        padding: 64px 16px;\r\n\r\n        overflow: auto;\r\n        resize: both;\r\n\r\n        .close {\r\n            position: absolute;\r\n            top: 16px;\r\n            right: 16px;\r\n            background-color: transparent !important;\r\n        }\r\n    }\r\n`\r\n\r\nconst Modal: React.FC<any> = ({ setIsOpen, children, ...rest }) => {\r\n    return (\r\n        <>\r\n            <StyledOverlay />\r\n            <StyledContainer >\r\n                <Card {...rest} draggable=\"true\">\r\n                    <ButtonInput onClick={() => setIsOpen(false)} className=\"close\">\r\n                        <Icon iconId='close' />\r\n                    </ButtonInput>\r\n                    {children}\r\n                </Card>\r\n            </StyledContainer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { HTMLProps, PropsWithChildren } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Icon from \"./Icon\";\r\n\r\n\r\nexport interface ICardFooterButtonProps extends PropsWithChildren, HTMLProps<HTMLButtonElement> {\r\n    isActive?: boolean;\r\n}\r\n\r\nexport const StyledCardFooterButton = styled.div`\r\n    background: ${(props) => props.theme?.surface?.card};\r\n    border-radius: 0 0 12px 12px;\r\n    appearance: none;\r\n    background: transparent;\r\n    cursor: pointer;\r\n    width: 100%;\r\n    border: none;\r\n    margin-top: 16px;\r\n    padding: 8px 0;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-weight: bold;\r\n    color: ${(props) => props.theme?.action?.interactive};\r\n\r\n    svg {\r\n        margin-left: 8px;\r\n        margin-bottom: 2px;\r\n        * {\r\n            fill: ${(props) => props.theme?.action?.interactive};\r\n        }\r\n    }\r\n\r\n    &:hover {\r\n        svg,\r\n        svg * {\r\n          fill: ${({ theme }) => theme?.action?.active};\r\n        }\r\n        color: ${({ theme }) => theme?.action?.active};\r\n      }\r\n`;\r\n\r\nconst CardFooterButton: React.FC<ICardFooterButtonProps> = ({\r\n    children,\r\n    isActive = false,\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <StyledCardFooterButton type=\"button\" $isActive={isActive} {...rest}>\r\n            {children}\r\n            <Icon iconId={isActive ? 'up' : 'down'} size={8} />\r\n        </StyledCardFooterButton>\r\n    );\r\n};\r\n\r\nexport default CardFooterButton;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledInputRow = styled.div`\r\n    display: flex;\r\n    align-items: flex-start;\r\n    flex-direction: column;\r\n    width: 100%;\r\n\r\n    ${props => props.$y ? '' : `\r\n        @media(min-width: 512px) {\r\n            align-items: center;\r\n            flex-direction: row;\r\n            justify-content: space-between;\r\n            //margin-bottom: 8px;\r\n        }\r\n    `}\r\n\r\n    > label {\r\n        color: ${({ theme }) => theme.dark3};\r\n        font-weight: bold;\r\n        margin: 8px;\r\n        white-space: nowrap;\r\n    }\r\n`;\r\n\r\nconst InputRow = ({ label, children, y = false, ...rest }) => {\r\n    return (\r\n        <StyledInputRow $y={y} {...rest}>\r\n            <label>{label}</label>\r\n            <div>\r\n                {children}\r\n            </div>\r\n        </StyledInputRow>\r\n    );\r\n}\r\n\r\nexport default InputRow;\r\n","import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\nimport ButtonInput from '../../shared/inputs/ButtonInput';\r\nimport Icon from '../../shared/ui/Icon';\r\n\r\nconst StyledMaximizeButton = styled(ButtonInput)`\r\n    background-color: transparent !important;\r\n`\r\n\r\nconst MaximizeButton = props => {\r\n    return (\r\n        <StyledMaximizeButton {...props}>\r\n            <Icon iconId=\"maximize\" size={24} />\r\n        </StyledMaximizeButton>\r\n    );\r\n}\r\n\r\nexport default MaximizeButton;\r\n","import React, { useState } from \"react\";\r\nimport styled from 'styled-components';\r\nimport { DEFAULT_FRETBOARD_PROPS } from \"../../../../core/Fretboard.constants\";\r\nimport { FRETBOARD_TUNING_VALUES, TuningId } from \"../../../../core/Tuning.constants\";\r\nimport { VOICING_OPTIONS } from \"../../../../core/Voicing.constants\";\r\nimport Fretboard from \"../../shared/fretboard/Fretboard\";\r\nimport DropdownInput from \"../../shared/inputs/DropdownInput\";\r\nimport NumericInput from \"../../shared/inputs/NumericInput\";\r\nimport SwitchInput from \"../../shared/inputs/SwitchInput\";\r\nimport Modal from \"../../shared/layout/Modal\";\r\nimport Card from \"../../shared/ui/Card\";\r\nimport CardFooterButton from \"../../shared/ui/CardFooterButton\";\r\nimport InputRow from \"../../shared/ui/InputRow\";\r\nimport CardSection from \"./CardSection\";\r\nimport MaximizeButton from \"./MaximizeButton\";\r\nimport { IFretboardState } from \"./useFretboardState\";\r\nimport { IModelState } from \"./useModelState\";\r\n\r\nexport const DEFAULT_VOICING = VOICING_OPTIONS[0];\r\nexport const DEFAULT_TUNING = FRETBOARD_TUNING_VALUES[0];\r\nexport const DEFAULT_FRET_RANGE = DEFAULT_FRETBOARD_PROPS.fretRange;\r\n\r\nconst StyledMainCol = styled.div`\r\n    padding: 16px;\r\n    .maximize {\r\n        background-color: transparent !important;\r\n    }\r\n`;\r\n\r\nconst FretboardCol: React.FC<IFretboardState & IModelState> = ({\r\n  voicing,\r\n  tuning,\r\n  fretRange,\r\n  setVoicing,\r\n  setTuning,\r\n  setFretRange,\r\n  showFretNumbers,\r\n  setShowFretNumbers,\r\n  showFretDots,\r\n  setShowFretDots,\r\n  presetConfig,\r\n  root\r\n}) => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [isFullScreen, setIsFullScreen] = useState(false);\r\n\r\n  const filteredVoicings = VOICING_OPTIONS;\r\n  /*.filter((v) => {\r\n    if (!v.value) return true;\r\n    const containsNonModelIntervals = v.value.some(\r\n      (x) => x && !model.intervals.find((ivl) => ivl.pod[1] + 1 === x)\r\n    );\r\n    return !containsNonModelIntervals;\r\n  });*/\r\n\r\n  const [fretLo, fretHi] = fretRange;\r\n\r\n  const viewer = <Fretboard\r\n    podListPreset={presetConfig}\r\n    rootNotePreset={root}\r\n    fretRange={fretRange}\r\n    showFretDots={showFretDots}\r\n    showFretNumbers={showFretNumbers}\r\n    //colorSchemeId={colorScheme}\r\n    //voicingId={voicing.presetId}\r\n    tuningId={tuning.presetId}\r\n  />;\r\n\r\n  return (\r\n    <Card\r\n      title=\"Fretboard\"\r\n      action={<MaximizeButton onClick={() => setIsFullScreen(true)} />}\r\n    >\r\n      {isFullScreen && (\r\n        <Modal setIsOpen={setIsFullScreen}>\r\n          <div className=\"resize\">\r\n            {viewer}\r\n          </div>\r\n        </Modal>\r\n      )}\r\n      <StyledMainCol>\r\n        {viewer}\r\n      </StyledMainCol>\r\n      {isEditing && (\r\n        <div>\r\n          <CardSection title=\"Tuning\">\r\n            <InputRow label=\"Preset\">\r\n              <DropdownInput\r\n                value={tuning}\r\n                setValue={setTuning}\r\n                options={FRETBOARD_TUNING_VALUES}\r\n              />\r\n            </InputRow>\r\n            {tuning.id === TuningId.Standard && (\r\n              <InputRow label=\"Voicing\">\r\n                <DropdownInput\r\n                  value={voicing}\r\n                  setValue={setVoicing}\r\n                  options={filteredVoicings}\r\n                />\r\n              </InputRow>\r\n            )}\r\n          </CardSection>\r\n          <CardSection title=\"Range\">\r\n            <InputRow label=\"Low Fret\">\r\n              <NumericInput\r\n                value={fretLo}\r\n                min={0}\r\n                max={fretHi}\r\n                setValue={(v) => setFretRange([v, fretHi])}\r\n              />\r\n            </InputRow>\r\n            <InputRow label=\"High Fret\">\r\n              <NumericInput\r\n                value={fretHi}\r\n                min={fretLo}\r\n                max={24}\r\n                setValue={(v) => setFretRange([fretLo, v])}\r\n              />\r\n            </InputRow>\r\n          </CardSection>\r\n          <CardSection title=\"Details\">\r\n            <InputRow label=\"Fret Dots\">\r\n              <SwitchInput\r\n                value={showFretDots}\r\n                setValue={setShowFretDots}\r\n              />\r\n            </InputRow>\r\n            <InputRow label=\"Fret Numbers\">\r\n              <SwitchInput\r\n                value={showFretNumbers}\r\n                setValue={setShowFretNumbers}\r\n              />\r\n            </InputRow>\r\n          </CardSection>\r\n        </div>\r\n      )}\r\n      <CardFooterButton isActive={isEditing} onClick={() => setIsEditing(!isEditing)}>{isEditing ? 'DONE' : 'EDIT'}</CardFooterButton>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default FretboardCol;\r\n","import { Link } from \"gatsby\";\r\nimport React, { useState } from 'react';\r\nimport styled from \"styled-components\";\r\nimport { POD_LIST_PRESET_TYPE_OPTIONS } from \"../../../../core/Core.derived\";\r\nimport { IIntervalPreset, INTERVAL_PRESET_MAP, IntervalId } from \"../../../../core/Interval.constants\";\r\nimport { getName as getIntervalName } from \"../../../../core/Interval.utils\";\r\nimport { NOTE_PRESETS } from \"../../../../core/Note.constants\";\r\nimport { getName as getNoteName } from \"../../../../core/Note.utils\";\r\nimport { addPods, getRootedName } from \"../../../../core/Pod.utils\";\r\nimport { getModelRoute } from \"../../../../core/Routing.utils\";\r\nimport DropdownInput from \"../../shared/inputs/DropdownInput\";\r\nimport Card from '../../shared/ui/Card';\r\nimport CardFooterButton from \"../../shared/ui/CardFooterButton\";\r\nimport InputRow from \"../../shared/ui/InputRow\";\r\nimport CardSection from \"./CardSection\";\r\nimport { IModelState } from \"./useModelState\";\r\n\r\nconst StyledDetailsCol = styled.div`\r\n  .name {\r\n    font-size: 140%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n  }\r\n  .info {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-top: 8px;\r\n\r\n    .item {\r\n      margin: 0 8px;\r\n      text-align: center;\r\n      .note {\r\n        font-weight: bold;\r\n        font-size: 120%;\r\n      }\r\n      .interval {\r\n        color: ${(props) => props.theme?.text?.secondary};\r\n      }\r\n    }\r\n  }\r\n  .notes {\r\n    padding: 8px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nconst NotesCol: React.FC<IModelState> = (props) => {\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const {\r\n        presetType,\r\n        setPresetType,\r\n        presetConfig,\r\n        setPresetConfig,\r\n        root,\r\n        setRoot\r\n    } = props;\r\n    const modelOptions = presetType.data;\r\n    const intervalIds = presetConfig.valueIds;\r\n\r\n    return (\r\n        <>\r\n            <Card title=\"Notes\">\r\n                <StyledDetailsCol>\r\n                    <CardSection>\r\n                        <div className=\"notes\">\r\n                            <Link\r\n                                to={getModelRoute(\r\n                                    presetType.id,\r\n                                    presetConfig.presetId,\r\n                                    root.presetId\r\n                                )}\r\n                                className=\"name\"\r\n                            >\r\n                                {getRootedName(presetConfig, root)}\r\n                            </Link>\r\n                            <div className=\"info\">\r\n                                {intervalIds.map((ivl, i) => {\r\n                                    const intervalPreset = INTERVAL_PRESET_MAP.get(ivl as IntervalId) as IIntervalPreset;\r\n                                    const intervalPod = intervalPreset.pod;\r\n                                    const intervalName = getIntervalName(intervalPod)\r\n                                    const notePod = root && addPods(root.pod, intervalPreset.pod);\r\n                                    const noteName = notePod && getNoteName(notePod);\r\n\r\n                                    return (\r\n                                        <div key={i} className=\"item\">\r\n                                            <div className=\"note\">{noteName}</div>\r\n                                            <div className=\"interval\">{intervalName}</div>\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    </CardSection>\r\n                    {isEditing && (\r\n                        <div>\r\n                            <CardSection title=\"Root\">\r\n                                <InputRow label=\"Key Center\">\r\n                                    <DropdownInput\r\n                                        value={root}\r\n                                        setValue={setRoot}\r\n                                        options={NOTE_PRESETS}\r\n                                        idProperty=\"presetId\"\r\n                                    />\r\n                                </InputRow>\r\n                            </CardSection>\r\n                            <CardSection title=\"Intervals\">\r\n                                <InputRow label=\"Model Type\">\r\n                                    <DropdownInput\r\n                                        value={presetType}\r\n                                        setValue={setPresetType}\r\n                                        options={POD_LIST_PRESET_TYPE_OPTIONS}\r\n                                        idProperty=\"id\"\r\n                                    />\r\n                                </InputRow>\r\n                                <InputRow label=\"Preset\">\r\n                                    <DropdownInput\r\n                                        value={presetConfig}\r\n                                        setValue={setPresetConfig}\r\n                                        options={modelOptions}\r\n                                        idProperty=\"presetId\"\r\n                                    />\r\n                                </InputRow>\r\n                            </CardSection>\r\n                            {/*<CardSection title=\"Colors\">\r\n                            <InputRow label=\"Color Scheme\">\r\n                                <DropdownInput\r\n                                    value={colorScheme}\r\n                                    setValue={setColorScheme}\r\n                                    options={COLOR_SCHEME_PRESETS}\r\n                                    idProperty=\"id\"\r\n                                />\r\n                            </InputRow>\r\n                            <InputRow label=\"Color Config\">\r\n                                <ColorSchemeInput\r\n                                    value={colorConfig}\r\n                                    setValue={setColorConfig}\r\n                                    labelFn={colorScheme.labelFn}\r\n                                />\r\n                            </InputRow>\r\n                        </CardSection>*/}\r\n                        </div>\r\n                    )}\r\n                    <CardFooterButton isActive={isEditing} onClick={() => setIsEditing(!isEditing)}>{isEditing ? 'DONE' : 'EDIT'}</CardFooterButton>\r\n                </StyledDetailsCol>\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NotesCol;\r\n","import { useState } from \"react\";\r\nimport { COLOR_SCHEME_PRESETS } from \"../../../../core/Color.utils\";\r\nimport { DEFAULT_FRETBOARD_PROPS } from \"../../../../core/Fretboard.constants\";\r\nimport { FRETBOARD_TUNING_VALUES } from \"../../../../core/Tuning.constants\";\r\nimport { VOICING_OPTIONS } from \"../../../../core/Voicing.constants\";\r\n\r\nexport const DEFAULT_VOICING = VOICING_OPTIONS[0];\r\nexport const DEFAULT_TUNING = FRETBOARD_TUNING_VALUES[0];\r\nexport const DEFAULT_FRET_RANGE = DEFAULT_FRETBOARD_PROPS.fretRange;\r\n\r\nexport interface IFretboardState {\r\n    voicing, setVoicing,\r\n    tuning, setTuning,\r\n    fretRange, setFretRange,\r\n    colorScheme, setColorScheme,\r\n    colorConfig, setColorConfig,\r\n    showFretNumbers, setShowFretNumbers,\r\n    showFretDots, setShowFretDots\r\n}\r\n\r\nconst useFretboardState = () => {\r\n    const [showFretDots, setShowFretDots] = useState(true);\r\n    const [showFretNumbers, setShowFretNumbers] = useState(true);\r\n    const [voicing, setVoicing] = useState(DEFAULT_VOICING);\r\n    const [tuning, setTuning] = useState(DEFAULT_TUNING);\r\n    const [fretRange, setFretRange] = useState(DEFAULT_FRET_RANGE);\r\n    const [colorScheme, _setColorScheme] = useState(COLOR_SCHEME_PRESETS[1]);\r\n    const [colorConfig, setColorConfig] = useState(colorScheme.defaultConfig);\r\n\r\n    const setColorScheme = (cs) => {\r\n        _setColorScheme(cs);\r\n        setColorConfig(cs.defaultConfig);\r\n    };\r\n\r\n    return {\r\n        voicing, setVoicing,\r\n        tuning, setTuning,\r\n        fretRange, setFretRange,\r\n        colorScheme, setColorScheme,\r\n        colorConfig, setColorConfig,\r\n        showFretDots, setShowFretDots,\r\n        showFretNumbers, setShowFretNumbers\r\n    }\r\n};\r\n\r\nexport default useFretboardState;\r\n","import { useQueryParam } from \"use-query-params\";\r\nimport { PresetType } from \"../../../../core/Core.constants\";\r\nimport { PresetId } from \"../../../../core/Core.derived\";\r\nimport { NoteId } from \"../../../../core/Note.constants\";\r\n\r\nconst useModelQueryParams = () => {\r\n  let qpPresetType;\r\n  let qpPresetId;\r\n  let qpRootId;\r\n  try {\r\n    [qpPresetType] = useQueryParam(\"presetType\");\r\n    [qpPresetId] = useQueryParam(\"presetId\");\r\n    [qpRootId] = useQueryParam(\"rootId\");\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n\r\n  return [\r\n    qpPresetType as PresetType,\r\n    qpPresetId as PresetId,\r\n    qpRootId as NoteId,\r\n  ];\r\n};\r\n\r\nexport default useModelQueryParams;\r\n","import { useState } from \"react\";\r\nimport { POD_LIST_PRESET_TYPE_OPTIONS } from \"../../../../core/Core.derived\";\r\nimport { NOTE_PRESETS } from \"../../../../core/Note.constants\";\r\n\r\nconst getInitPresetType = (qpPresetType?: string) => {\r\n    const found = POD_LIST_PRESET_TYPE_OPTIONS.find(\r\n        (type) => type.id && type.id === qpPresetType\r\n    );\r\n    //if (!found) throw new Error('Cannot find preset type: ' + qpPresetType);\r\n    return found || POD_LIST_PRESET_TYPE_OPTIONS[0];\r\n};\r\n\r\nconst getInitPresetConfig = (presetType, qpPresetId?: string) => {\r\n    const found = presetType.data.find((preset) => preset.presetId === qpPresetId);\r\n    //if (!found) throw new Error('Cannot find preset id: ' + qpPresetId);\r\n    return found || presetType.data[0];\r\n};\r\n\r\nconst getInitRoot = (qpRootId?: string) => {\r\n    const found = NOTE_PRESETS.find((note) => note.presetId === qpRootId);\r\n    //if (!found) throw new Error('Cannot find root id: ' + qpRootId);\r\n    return found || NOTE_PRESETS[0];\r\n};\r\n\r\nexport interface IModelState {\r\n    presetType,\r\n    setPresetType,\r\n    presetConfig,\r\n    setPresetConfig,\r\n    root,\r\n    setRoot\r\n}\r\n\r\nconst useModelState = (initPresetType: string, initPresetId: string, initRootId: string) => {\r\n    const [presetType, _setPresetType] = useState(() => getInitPresetType(initPresetType));\r\n    const [presetConfig, setPresetConfig] = useState(\r\n        () => getInitPresetConfig(presetType, initPresetId)\r\n    );\r\n    const setPresetType = (type) => {\r\n        _setPresetType(type);\r\n        setPresetConfig(type.data[0]);\r\n    };\r\n    const [root, setRoot] = useState(getInitRoot(initRootId));\r\n\r\n    return {\r\n        presetType,\r\n        setPresetType,\r\n        presetConfig,\r\n        setPresetConfig,\r\n        root,\r\n        setRoot\r\n    };\r\n};\r\n\r\nexport default useModelState;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport ColumnManager from \"../../shared/layout/ColumnManager\";\r\nimport PageLayout from \"../../shared/layout/PageLayout\";\r\nimport { StyledCardSection } from \"./CardSection\";\r\nimport FretboardCol from \"./FretboardCol\";\r\nimport NotesCol from \"./NotesCol\";\r\nimport useFretboardState from \"./useFretboardState\";\r\nimport useModelQueryParams from \"./useModelQueryParams\";\r\nimport useModelState from \"./useModelState\";\r\n\r\nconst StyledFretboardPage = styled(PageLayout)`\r\n  ${StyledCardSection} {\r\n    margin-top: 16px;\r\n  }\r\n`;\r\n\r\nconst Page: React.FC = () => {\r\n    const [qpPresetType, qpPresetId, qpRootId] = useModelQueryParams();\r\n\r\n    const modelState = useModelState(qpPresetType, qpPresetId, qpRootId);\r\n    const fretboardState = useFretboardState();\r\n\r\n    return (\r\n        <StyledFretboardPage hideHeader>\r\n            <ColumnManager desktop={[\"1fr\", \"1fr\"]}>\r\n                <div>\r\n                    <FretboardCol {...fretboardState} {...modelState} />\r\n                </div>\r\n                <div>\r\n                    <NotesCol {...modelState} />\r\n                </div>\r\n            </ColumnManager>\r\n        </StyledFretboardPage>\r\n    );\r\n};\r\n\r\nexport default Page;\r\n","import React, { PropsWithChildren } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { MediaQuery } from \"../../../styles/breakpoint\";\r\n\r\ninterface IStyledColumnManagerProps {\r\n  $tablet?: string[];\r\n  $desktop?: string[];\r\n}\r\n\r\nexport const StyledColumnManager = styled.div<IStyledColumnManagerProps>`\r\n  display: grid;\r\n  gap: 16px;\r\n  grid-template-columns: 1fr;\r\n\r\n  ${({ $tablet }) =>\r\n    $tablet\r\n      ? `\r\n        ${MediaQuery.Tablet} {\r\n            grid-template-columns: ${$tablet.join(\" \")}\r\n        }\r\n    `\r\n      : \"\"}\r\n\r\n  ${({ $desktop }) =>\r\n    $desktop\r\n      ? `\r\n        ${MediaQuery.Desktop} {\r\n            grid-template-columns: ${$desktop.join(\" \")}\r\n        }\r\n    `\r\n      : ``}\r\n`;\r\n\r\nexport interface IColumnManagerProps extends PropsWithChildren {\r\n  tablet?: string[];\r\n  desktop?: string[];\r\n}\r\n\r\nconst ColumnManager: React.FC<IColumnManagerProps> = ({\r\n  tablet,\r\n  desktop,\r\n  children,\r\n}) => {\r\n  return (\r\n    <StyledColumnManager $tablet={tablet} $desktop={desktop}>\r\n      {children}\r\n    </StyledColumnManager>\r\n  );\r\n};\r\n\r\nexport default ColumnManager;\r\n","import React, { PropsWithChildren } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface ICardHeaderProps {\r\n  title: string;\r\n  level?: number;\r\n  action?: any;\r\n}\r\n\r\nexport const StyledCardHeader = styled.div`\r\n  margin-bottom: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport const CardHeader: React.FC<ICardHeaderProps> = ({\r\n  title,\r\n  level = 2,\r\n  action = null,\r\n}) => {\r\n  const AsTag: any = `h${level}`;\r\n  return (\r\n    <StyledCardHeader>\r\n      <AsTag>{title}</AsTag>\r\n      {action}\r\n    </StyledCardHeader>\r\n  );\r\n};\r\n\r\nexport interface ICardProps extends PropsWithChildren<any> {\r\n  title?: string;\r\n  subtitle?: string;\r\n  action?: any;\r\n  level?: number;\r\n}\r\n\r\nexport const StyledCard = styled.div`\r\n  background: ${(props) => props.theme?.surface?.card};\r\n  width: 100%;\r\n  border-radius: 16px;\r\n  padding: 16px;\r\n`;\r\n\r\nconst Card: React.FC<ICardProps> = ({\r\n  title,\r\n  subtitle,\r\n  action,\r\n  children,\r\n  level = 1,\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <StyledCard {...rest}>\r\n      {title && <CardHeader title={title} action={action} level={level} />}\r\n      {subtitle && <CardHeader title={subtitle} level={level + 1} />}\r\n      {children}\r\n    </StyledCard>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import { Link } from \"gatsby\";\r\nimport React, { Fragment, ReactNode } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledTable = styled.table``;\r\n\r\ntype TOmit = undefined | null | false;\r\n\r\nconst getIsTypeOmit = (data: any): data is TOmit =>\r\n  data === undefined || data === null || data === false;\r\n\r\n// Col\r\n\r\nexport interface IColConfig {\r\n  isHeader?: boolean;\r\n  content: any;\r\n  colSpan?: number;\r\n  className?: string;\r\n  link?: string;\r\n}\r\n\r\ninterface IColProps extends IColConfig {\r\n  index: number;\r\n}\r\n\r\ntype TCol = string | number | IColConfig | ReactNode;\r\n\r\nconst Col: React.FC<IColProps> = ({\r\n  index,\r\n  isHeader,\r\n  content,\r\n  colSpan,\r\n  className,\r\n  link,\r\n}) => {\r\n  const ColTag = isHeader ? \"th\" : \"td\";\r\n  const WrapperTag = link ? Link : Fragment;\r\n  const wrapperProps: any = link ? { to: link } : {};\r\n\r\n  return (\r\n    <ColTag colSpan={colSpan} className={className}>\r\n      <WrapperTag {...wrapperProps}>{content || \"\"}</WrapperTag>\r\n    </ColTag>\r\n  );\r\n};\r\n\r\n// Row\r\n\r\nexport interface IRowConfig {\r\n  cols: (TCol | TOmit)[];\r\n  className?: string;\r\n  isHeader?: boolean;\r\n  headerColIndicies?: number[];\r\n}\r\n\r\nconst getIsConfig = (col: TCol): col is IColConfig =>\r\n  typeof col === \"object\" && col !== null && col.hasOwnProperty(\"content\");\r\n\r\nconst Row: React.FC<IRowConfig> = ({\r\n  cols,\r\n  isHeader,\r\n  className,\r\n  headerColIndicies = [],\r\n}) => {\r\n  return (\r\n    <tr className={className}>\r\n      {cols.map((col: any, i) => {\r\n        if (getIsTypeOmit(col)) return null;\r\n        const isConfig = getIsConfig(col);\r\n        const colConfig = !isConfig ? { content: col } : col;\r\n        return (\r\n          <Col\r\n            key={i}\r\n            index={i}\r\n            isHeader={isHeader || headerColIndicies.includes(i)}\r\n            {...colConfig}\r\n          />\r\n        );\r\n      })}\r\n    </tr>\r\n  );\r\n};\r\n\r\n// Table Section\r\n\r\ninterface ITableSectionConfig {\r\n  Tag: \"thead\" | \"tfoot\" | \"tbody\";\r\n  rows: (IRowConfig | TOmit)[];\r\n  headerColIndicies?: number[];\r\n}\r\n\r\nconst TableSection: React.FC<ITableSectionConfig> = ({\r\n  Tag,\r\n  rows,\r\n  headerColIndicies,\r\n}) => (\r\n  <Tag>\r\n    {rows.map((row, i) => {\r\n      if (getIsTypeOmit(row)) return null;\r\n      return (\r\n        <Row\r\n          key={i}\r\n          isHeader={Tag !== \"tbody\"}\r\n          headerColIndicies={headerColIndicies}\r\n          {...row}\r\n        />\r\n      );\r\n    })}\r\n  </Tag>\r\n);\r\n\r\n// Table\r\n\r\ninterface IColGroup {\r\n  span?: number;\r\n  className?: string;\r\n}\r\n\r\nexport interface ITableConfig {\r\n  thead?: (IRowConfig | TOmit)[];\r\n  tfoot?: (IRowConfig | TOmit)[];\r\n  tbody: (IRowConfig | TOmit)[];\r\n  styles?: any;\r\n  caption?: string;\r\n  colGroups?: IColGroup[];\r\n  className?: string;\r\n  headerColIndicies?: number[];\r\n}\r\n\r\nexport const Table: React.FC<ITableConfig> = ({\r\n  thead,\r\n  tfoot,\r\n  tbody,\r\n  styles,\r\n  colGroups,\r\n  caption,\r\n  headerColIndicies,\r\n  className,\r\n}) => {\r\n  return (\r\n    <StyledTable css={styles} className={className}>\r\n      {colGroups && (\r\n        <colgroup>\r\n          {colGroups.map((cg, i) => (\r\n            <col key={i} {...cg} />\r\n          ))}\r\n        </colgroup>\r\n      )}\r\n      {caption && <caption>{caption}</caption>}\r\n      {thead && (\r\n        <TableSection\r\n          Tag=\"thead\"\r\n          rows={thead}\r\n          headerColIndicies={headerColIndicies}\r\n        />\r\n      )}\r\n      {tfoot && (\r\n        <TableSection\r\n          Tag=\"tfoot\"\r\n          rows={tfoot}\r\n          headerColIndicies={headerColIndicies}\r\n        />\r\n      )}\r\n      {tbody && (\r\n        <TableSection\r\n          Tag=\"tbody\"\r\n          rows={tbody}\r\n          headerColIndicies={headerColIndicies}\r\n        />\r\n      )}\r\n    </StyledTable>\r\n  );\r\n};\r\n","const BASE_NOTE_INDEX = 9;\r\nconst BASE_PITCH = 440;\r\n\r\nexport const getFrequency = (p: number): number => {\r\n  const delta = p - BASE_NOTE_INDEX;\r\n  const exp = delta / 12;\r\n  const multiplier = Math.pow(2, exp);\r\n  const f = BASE_PITCH * multiplier;\r\n  return Math.round(f);\r\n};\r\n\r\n// const getFrequencies = pitches => {\r\n//     return pitches.map(p => getFrequency(p[0]));\r\n// }\r\n\r\n// const CALIBRATION_NOTE = {\r\n//     frequency: 440,\r\n//     noteIndex: 9\r\n// };\r\n\r\n// const CALIBRATION_CONSTANT = Math.pow(2, 1 / 12);\r\n\r\n// export const TUNING_FN = {\r\n// \tTET: {\r\n// \t\tid: 'TET',\r\n// \t\tname: 'TET',\r\n// \t\tvalue: (pod: IPod): number | null => {\r\n// \t\t\tif (!pod) return null;\r\n// \t\t\tconst [p, d] = pod;\r\n// \t\t\tconst a = p + 3;\r\n// \t\t\tconst b = a / 12;\r\n// \t\t\tconst c = Math.pow(2, b);\r\n// \t\t\tconst f = 440 * c;\r\n// \t\t\treturn Math.round(f);\r\n// \t\t}\r\n// \t}\r\n// };\r\n\r\n// Sound\r\n\r\n// static playSound = (note: IPod): void => {\r\n//     const frequency = TuningUtils.getFrequency(note[0]);\r\n//     ToneUtils.playSound(frequency)\r\n// }\r\n\r\n// static playSoundList = (notes: IPod[]): void => {\r\n//     const frequencies = notes.map(n => TuningUtils.getFrequency(n[0]));\r\n//     ToneUtils.playSound(frequencies)\r\n// }\r\n","import ArrayUtils from \"./primitives/Array.utils\";\r\nimport { IPreset, PresetMap } from \"./Core.constants\";\r\n\r\nexport enum IntervalQualityId {\r\n  Diminished = \"diminished\",\r\n  Minor = \"minor\",\r\n  Perfect = \"perfect\",\r\n  Major = \"major\",\r\n  Augmented = \"augmented\",\r\n}\r\n\r\nexport interface IIntervalQualityPreset extends IPreset<IntervalQualityId> {\r\n  symbol: string;\r\n  down?: IntervalQualityId;\r\n  up?: IntervalQualityId;\r\n}\r\n\r\nexport const INTERVAL_QUALITY_PRESET_MAP: PresetMap<\r\n  IntervalQualityId,\r\n  IIntervalQualityPreset\r\n> = new Map([\r\n  [\r\n    IntervalQualityId.Diminished,\r\n    {\r\n      presetId: IntervalQualityId.Diminished,\r\n      name: \"Diminished\",\r\n      symbol: \"d\",\r\n      down: undefined,\r\n      up: IntervalQualityId.Minor,\r\n    },\r\n  ],\r\n  [\r\n    IntervalQualityId.Minor,\r\n    {\r\n      presetId: IntervalQualityId.Minor,\r\n      name: \"Minor\",\r\n      symbol: \"m\",\r\n      down: IntervalQualityId.Diminished,\r\n      up: IntervalQualityId.Major,\r\n    },\r\n  ],\r\n  [\r\n    IntervalQualityId.Perfect,\r\n    {\r\n      presetId: IntervalQualityId.Perfect,\r\n      name: \"Perfect\",\r\n      symbol: \"P\",\r\n      down: IntervalQualityId.Diminished,\r\n      up: IntervalQualityId.Augmented,\r\n    },\r\n  ],\r\n  [\r\n    IntervalQualityId.Major,\r\n    {\r\n      presetId: IntervalQualityId.Major,\r\n      name: \"Major\",\r\n      symbol: \"M\",\r\n      down: IntervalQualityId.Minor,\r\n      up: IntervalQualityId.Augmented,\r\n    },\r\n  ],\r\n  [\r\n    IntervalQualityId.Augmented,\r\n    {\r\n      presetId: IntervalQualityId.Augmented,\r\n      name: \"Augmented\",\r\n      symbol: \"A\",\r\n      down: IntervalQualityId.Major,\r\n      up: undefined,\r\n    },\r\n  ],\r\n]);\r\n\r\nexport const INTERVAL_QUALITY_PRESETS = ArrayUtils.mapToArray(\r\n  INTERVAL_QUALITY_PRESET_MAP\r\n);\r\n","import { getFrequency } from \"./Frequency.utils\";\r\nimport {\r\n  CORE_INTERVALS,\r\n  IIntervalPreset,\r\n  INTERVAL_PRESET_MAP,\r\n  IntervalId,\r\n  getExtensionInversionId,\r\n} from \"./Interval.constants\";\r\nimport {\r\n  IIntervalQualityPreset,\r\n  INTERVAL_QUALITY_PRESET_MAP,\r\n  IntervalQualityId,\r\n} from \"./IntervalQuality.constants\";\r\nimport { IPod, MAX_POD } from \"./Pod.constants\";\r\nimport { reducePod } from \"./Pod.utils\";\r\n\r\nconst getIsExtended = (pod: IPod): boolean => {\r\n  return pod[0] > MAX_POD[0] || pod[1] > MAX_POD[1];\r\n};\r\n\r\nexport const getName = (pod: IPod) => {\r\n  const reduced = reducePod(pod);\r\n\r\n  const [noteIndex, d] = reduced;\r\n  const degreeIntervals = CORE_INTERVALS[d] as IIntervalPreset[];\r\n  if (!degreeIntervals) return \"?\";\r\n\r\n  const pIvl = degreeIntervals[0];\r\n  const loIvl = pIvl;\r\n  const hiIvl = degreeIntervals[degreeIntervals.length - 1];\r\n\r\n  // determine core interval and quality\r\n  let ivl: IIntervalPreset | undefined;\r\n  let quality: IIntervalQualityPreset | undefined;\r\n  if (degreeIntervals.length === 1) {\r\n    ivl = pIvl; // perfect\r\n    quality = INTERVAL_QUALITY_PRESET_MAP.get(\r\n      IntervalQualityId.Perfect\r\n    ) as IIntervalQualityPreset;\r\n  } else if (noteIndex <= loIvl.pod[0]) {\r\n    ivl = loIvl; // minor\r\n    quality = INTERVAL_QUALITY_PRESET_MAP.get(\r\n      IntervalQualityId.Minor\r\n    ) as IIntervalQualityPreset;\r\n  } else if (noteIndex >= hiIvl.pod[0]) {\r\n    ivl = hiIvl; // major\r\n    quality = INTERVAL_QUALITY_PRESET_MAP.get(\r\n      IntervalQualityId.Major\r\n    ) as IIntervalQualityPreset;\r\n  }\r\n\r\n  const offset = (ivl as IIntervalPreset).pod[0] - reduced[0];\r\n\r\n  if (offset === 0)\r\n    return `${(quality as IIntervalQualityPreset).symbol}${d + 1}`;\r\n  else if (offset > 0)\r\n    quality = INTERVAL_QUALITY_PRESET_MAP.get(\r\n      IntervalQualityId.Diminished\r\n    ) as IIntervalQualityPreset;\r\n  // dim\r\n  else if (offset < 0)\r\n    quality = INTERVAL_QUALITY_PRESET_MAP.get(\r\n      IntervalQualityId.Augmented\r\n    ) as IIntervalQualityPreset; // aug\r\n\r\n  const count = Math.abs(offset);\r\n  const qualityStr = (quality as IIntervalQualityPreset).symbol.repeat(count);\r\n\r\n  let value = `${qualityStr}${d + 1}`;\r\n\r\n  const isExtended = getIsExtended(pod);\r\n\r\n  if (isExtended) {\r\n    value = getExtensionInversionId(value as IntervalId);\r\n  }\r\n\r\n  return value;\r\n};\r\n\r\nexport const getNameFromId = (presetId: IntervalId) => {\r\n  return (INTERVAL_PRESET_MAP.get(presetId) as IIntervalPreset).name || \"\";\r\n};\r\n\r\nexport const getRatio = (pod: IPod) => {\r\n  const [p] = pod;\r\n\r\n  const baseline = getFrequency(0);\r\n  const compareTo = getFrequency(p);\r\n\r\n  const ratio = compareTo / baseline;\r\n\r\n  return `1:${ratio.toFixed(2)}`;\r\n};\r\n","import ArrayUtils from \"./primitives/Array.utils\";\r\nimport { IPreset, PresetMap } from \"./Core.constants\";\r\n\r\nexport enum AccidentalId {\r\n  DoubleFlat = \"double-flat\",\r\n  Flat = \"flat\",\r\n  Natural = \"natural\",\r\n  Sharp = \"sharp\",\r\n  DoubleSharp = \"double-sharp\",\r\n}\r\n\r\nexport interface IAccidentalPreset extends IPreset<AccidentalId> {\r\n  symbol: string;\r\n  offset: number;\r\n}\r\n\r\nexport const ACCIDENTAL_PRESET_MAP: PresetMap<AccidentalId, IAccidentalPreset> =\r\n  new Map([\r\n    [\r\n      AccidentalId.DoubleFlat,\r\n      {\r\n        presetId: AccidentalId.DoubleFlat,\r\n        name: \"Double Flat\",\r\n        symbol: \"bb\",\r\n        offset: -2,\r\n      },\r\n    ],\r\n    [\r\n      AccidentalId.Flat,\r\n      {\r\n        presetId: AccidentalId.Flat,\r\n        name: \"Flat\",\r\n        symbol: \"b\",\r\n        offset: -1,\r\n      },\r\n    ],\r\n    [\r\n      AccidentalId.Natural,\r\n      {\r\n        presetId: AccidentalId.Natural,\r\n        name: \"Natural\",\r\n        symbol: \"♮\",\r\n        offset: 0,\r\n      },\r\n    ],\r\n    [\r\n      AccidentalId.Sharp,\r\n      {\r\n        presetId: AccidentalId.Sharp,\r\n        name: \"Sharp\",\r\n        symbol: \"#\",\r\n        offset: 1,\r\n      },\r\n    ],\r\n    [\r\n      AccidentalId.DoubleSharp,\r\n      {\r\n        presetId: AccidentalId.DoubleSharp,\r\n        name: \"Double Sharp\",\r\n        symbol: \"##\",\r\n        offset: 2,\r\n      },\r\n    ],\r\n  ]);\r\n\r\nexport const ACCIDENTAL_PRESETS = ArrayUtils.mapToArray(ACCIDENTAL_PRESET_MAP);\r\n","import { PresetMap } from \"./Core.constants\";\r\nimport { ROOT_DEGREE } from \"./Degree.constants\";\r\nimport { ROOT_PITCH } from \"./Pitch.constants\";\r\nimport { IPodPreset } from \"./Pod.constants\";\r\nimport ArrayUtils from \"./primitives/Array.utils\";\r\n\r\nexport enum DiatonicId {\r\n  Tonic = \"tonic\",\r\n  Supertonic = \"supertonic\",\r\n  Mediant = \"mediant\",\r\n  Subdominant = \"subdominant\",\r\n  Dominant = \"dominant\",\r\n  Submediant = \"submediant\",\r\n  Subtonic = \"subtonic\",\r\n}\r\n\r\nexport interface IDiatonicPreset extends IPodPreset<DiatonicId> {}\r\n\r\nexport const DIATONIC_PRESET_MAP: PresetMap<DiatonicId, IDiatonicPreset> =\r\n  new Map([\r\n    [\r\n      DiatonicId.Tonic,\r\n      {\r\n        presetId: DiatonicId.Tonic,\r\n        name: \"Tonic\",\r\n        pod: [0, 0],\r\n      },\r\n    ],\r\n    [\r\n      DiatonicId.Supertonic,\r\n      {\r\n        presetId: DiatonicId.Supertonic,\r\n        name: \"Supertonic\",\r\n        pod: [2, 1],\r\n      },\r\n    ],\r\n    [\r\n      DiatonicId.Mediant,\r\n      {\r\n        presetId: DiatonicId.Mediant,\r\n        name: \"Mediant\",\r\n        pod: [4, 2],\r\n      },\r\n    ],\r\n    [\r\n      DiatonicId.Subdominant,\r\n      {\r\n        presetId: DiatonicId.Subdominant,\r\n        name: \"Subdominant\",\r\n        pod: [5, 3],\r\n      },\r\n    ],\r\n    [\r\n      DiatonicId.Dominant,\r\n      {\r\n        presetId: DiatonicId.Dominant,\r\n        name: \"Dominant\",\r\n        pod: [7, 4],\r\n      },\r\n    ],\r\n    [\r\n      DiatonicId.Submediant,\r\n      {\r\n        presetId: DiatonicId.Submediant,\r\n        name: \"Submediant\",\r\n        pod: [9, 5],\r\n      },\r\n    ],\r\n    [\r\n      DiatonicId.Subtonic,\r\n      {\r\n        presetId: DiatonicId.Subtonic,\r\n        name: \"Subtonic\",\r\n        pod: [11, 6],\r\n      },\r\n    ],\r\n  ]);\r\n\r\nexport const DIATONIC_PRESETS = ArrayUtils.mapToArray(DIATONIC_PRESET_MAP);\r\n\r\nexport const ROOT_SCALE = DIATONIC_PRESETS.map((preset, i) => [\r\n  ROOT_PITCH + preset.pod[0],\r\n  ROOT_DEGREE + preset.pod[1],\r\n]);\r\n","import {\r\n  AccidentalId,\r\n  ACCIDENTAL_PRESET_MAP,\r\n  IAccidentalPreset,\r\n} from \"./Accidental.constants\";\r\nimport { DegreeId, DEGREE_PRESETS } from \"./Degree.constants\";\r\nimport { ROOT_SCALE } from \"./Diatonic.constants\";\r\nimport { getFrequency as getFrequencyFromPitch } from \"./Frequency.utils\";\r\nimport {\r\n  INotePreset,\r\n  NoteId,\r\n  NOTE_PRESETS,\r\n  NOTE_PRESET_MAP,\r\n} from \"./Note.constants\";\r\nimport { IPod, MAX_POD } from \"./Pod.constants\";\r\nimport { arePodsEqual, getDegree, reducePod } from \"./Pod.utils\";\r\nimport NumberUtils from \"./primitives/Number.utils\";\r\n\r\ninterface INoteNameOptions {\r\n  includeOctave?: boolean;\r\n}\r\n\r\ninterface INoteNameParts {\r\n  spelling: string;\r\n  accidental: string;\r\n  octave: number;\r\n}\r\n\r\nexport const getNoteFromPod = (pod: IPod) => {\r\n  return NOTE_PRESETS.find((note) => arePodsEqual(note.pod, pod));\r\n};\r\n\r\nexport const getNoteWithOctave = (noteId: NoteId, octave: number): IPod => {\r\n  const notePreset = NOTE_PRESET_MAP.get(noteId) as INotePreset;\r\n  return [\r\n    (octave - 4) * 12 + NumberUtils.modulo(notePreset.pod[0], 12),\r\n    notePreset.pod[1],\r\n  ];\r\n};\r\n\r\n// export const  fromId = (presetId: string, octave = 4) => {\r\n//   let sharps = (presetId.match(/-sharp/g) || []).length;\r\n//   let flats = (presetId.match(/-flat/g) || []).length;\r\n//   const nativeNoteId = presetId.slice(0, 1) as NoteId;\r\n//   const nativePod = (NOTE_PRESET_MAP.get(nativeNoteId) as IModelConfig).value;\r\n//   const octaveBasePitch =\r\n//     typeof octave === \"undefined\" ? 0 : (octave - 4) * 12;\r\n//   const pitch = octaveBasePitch + nativePod[0] + sharps - flats;\r\n//   const pod = [pitch, nativePod[1]] as IPod;\r\n//   //const pod = [NumberUtils.modulo(nativePod[0] + sharps - flats, 12), nativePod[1]] as IPod;\r\n//   const note = new Note(pod);\r\n//   note.modelType = ModelType.Pod;\r\n//   note.presetType = PresetType.Note;\r\n//   note.presetId = presetId as any;\r\n//   note.name = getName();\r\n//   note.pod = pod as IPod;\r\n//   // @ts-ignore TODO\r\n//   note.value = note.pod;\r\n//   return note;\r\n// };\r\n\r\nexport const getAccidentalOffset = (pod: IPod): number => {\r\n  const [p, d] = reducePod(pod);\r\n\r\n  let offset = p - ROOT_SCALE[d][0];\r\n\r\n  // If offset spans more than half an octave, it's going the wrong way\r\n  // TODO need to formally confirm this\r\n  if (offset > 5) offset = offset - 12;\r\n  if (offset < -5) offset = offset + 12;\r\n\r\n  // Examples\r\n  // if (d === 0 && offset === 11) offset = offset - 12;\r\n  // if (d === 0 && offset === 10) offset = offset - 12;\r\n  // if (d === 0 && offset === 9) offset = offset - 12;\r\n  // if (d === 1 && offset === 9) offset = offset - 12;\r\n  // if (d === 1 && offset === 8) offset = offset - 12;\r\n  // if (d === 5 && offset === -9) offset = offset + 12;\r\n  // if (d === 6 && offset === -11) offset = offset + 12;\r\n  // if (d === 6 && offset === -10) offset = offset + 12;\r\n  // if (d === 6 && offset === -9) offset = offset + 12;\r\n  //console.log(`${p} - ${ROOT_SCALE[d][0]} = ${offset}, d = ${d}`);\r\n\r\n  return offset;\r\n};\r\n\r\nexport const getAccidentalString = (pod: IPod): string => {\r\n  const offset = getAccidentalOffset(pod);\r\n  if (offset > 0) {\r\n    return (\r\n      ACCIDENTAL_PRESET_MAP.get(AccidentalId.Sharp) as IAccidentalPreset\r\n    ).symbol.repeat(offset);\r\n  } else if (offset < 0) {\r\n    return (\r\n      ACCIDENTAL_PRESET_MAP.get(AccidentalId.Flat) as IAccidentalPreset\r\n    ).symbol.repeat(-offset);\r\n  }\r\n  return \"\";\r\n};\r\n\r\nexport const getPitch = (pod: IPod): number => {\r\n  return pod[0];\r\n};\r\n\r\nexport const getPitchClass = (pod: IPod): number => {\r\n  return NumberUtils.modulo(getPitch(pod), MAX_POD[0]);\r\n};\r\n\r\nexport const getOctave = (pod: IPod): number => {\r\n  const midi = true;\r\n  const raw = Math.floor(getPitch(pod) / 12);\r\n  return midi ? raw + 4 : raw;\r\n};\r\n\r\nexport const getDegreeId = (pod: IPod): DegreeId => {\r\n  const degree = getDegree(pod);\r\n  return DEGREE_PRESETS[degree].presetId;\r\n};\r\n\r\nexport const getSpelling = (pod: IPod): string => {\r\n  return getDegreeId(pod);\r\n};\r\n\r\nexport const getNameParts = (pod: IPod): INoteNameParts => {\r\n  const spelling = getSpelling(pod);\r\n  const accidental = getAccidentalString(pod);\r\n  const octave = getOctave(pod);\r\n  return { spelling, accidental, octave };\r\n};\r\n\r\nexport const getName = (pod: IPod, options: INoteNameOptions = {}): string => {\r\n  const { spelling, accidental, octave } = getNameParts(pod);\r\n\r\n  const o = options.includeOctave ? octave : \"\";\r\n  return `${spelling}${accidental}${o}`;\r\n};\r\n\r\nexport const getFrequency = (pod: IPod, format = false) => {\r\n  const f = getFrequencyFromPitch(getPitch(pod));\r\n  return format ? `${f.toFixed(0)} Hz` : f;\r\n};\r\n","import { CHORD_PRESETS } from \"./Chord.constants\";\r\nimport { AnyPodListPreset } from \"./Core.derived\";\r\nimport { INotePreset } from \"./Note.constants\";\r\nimport { IPod, MAX_POD } from \"./Pod.constants\";\r\nimport NumberUtils from \"./primitives/Number.utils\";\r\nimport { SCALE_PRESETS } from \"./Scale.constants\";\r\n\r\n// Search\r\n\r\nconst isPodAtPitch = (\r\n  pod: IPod,\r\n  p: number,\r\n  matchOctave = false\r\n): IPod | null => {\r\n  const pitchOffset = 0;\r\n  const target = p - pitchOffset;\r\n  let a = pod[0];\r\n  let b = target;\r\n  if (!matchOctave) {\r\n    a = NumberUtils.modulo(a, 12);\r\n    b = NumberUtils.modulo(b, 12);\r\n  }\r\n  return a === b ? pod : null;\r\n};\r\n\r\nexport const getIndexOfPodAtPitch = (\r\n  A: IPod[],\r\n  p: number,\r\n  matchOctave: boolean\r\n): number | null => {\r\n  const pod = A.findIndex((a) => isPodAtPitch(a, p, matchOctave));\r\n  return pod !== -1 ? pod : null;\r\n};\r\n\r\n/*static sort = (podList: IPod[]) => {\r\n    return podList.sort((a, b) => {\r\n        if (a[0] < b[0]) return -1;\r\n        else if (a[0] > b[0]) return 1;\r\n        else {\r\n            if (a[1] < b[1]) return -1;\r\n            else if (a[1] > b[1]) return 1;\r\n            else return 0;\r\n        }\r\n    });\r\n}*/\r\n\r\nexport const addPods = (a: IPod, b: IPod): IPod => {\r\n  const p = a[0] + b[0];\r\n  const d = a[1] + b[1];\r\n  const result: IPod = [p, d];\r\n  return result;\r\n};\r\n\r\nexport const subtractPods = (a: IPod, b: IPod): IPod => {\r\n  const p = a[0] - b[0];\r\n  const d = a[1] - b[1];\r\n  const result: IPod = [p, d];\r\n  return result;\r\n};\r\n\r\nexport const addPodList = (a: IPod, B: IPod[]): IPod[] => {\r\n  const result = B.map((b) => addPods(a, b));\r\n  return result;\r\n};\r\n\r\nexport const reducePod = (a: IPod, max = MAX_POD): IPod => {\r\n  const p = NumberUtils.modulo(a[0], max[0]);\r\n  const d = NumberUtils.modulo(a[1], max[1]);\r\n  return [p, d];\r\n};\r\n\r\nexport const arePodsEqual = (a: IPod, b: IPod): boolean => {\r\n  if (!a || !b || a.length !== 2 || b.length !== 2) return false;\r\n  return a[0] === b[0] && a[1] === b[1];\r\n};\r\n\r\nexport const reducePodList = (A: IPod[]): IPod[] => {\r\n  return A.map((a) => reducePod(a));\r\n};\r\n\r\nexport const arePodListsEqual = (A: IPod[], B: IPod[]): boolean => {\r\n  if (!A || !B || A.length !== B.length) return false;\r\n  for (let i = 0; i < A.length; i++) {\r\n    const a = A[i];\r\n    const b = B[i];\r\n    if (!arePodsEqual(a, b)) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const listContainsSubset = (\r\n  podList: IPod[],\r\n  subset: IPod[]\r\n): boolean => {\r\n  for (let i = 0; i < subset.length; i++) {\r\n    if (!podList.find((x) => x[0] === subset[i][0] && x[1] === subset[i][1]))\r\n      return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const getDegree = (pod: IPod) => {\r\n  return NumberUtils.modulo(pod[1], MAX_POD[1]);\r\n};\r\n\r\nexport const getShortName = (str) =>\r\n  str\r\n    .replace(\"Major\", \"Maj\")\r\n    .replace(\"Minor\", \"Min\")\r\n    .replace(\"Augmented\", \"Aug\")\r\n    .replace(\"Diminished\", \"Dim\")\r\n    .replace(\"Suspended\", \"Sus\")\r\n    .replace(\"Dominant\", \"Dom\")\r\n    .replace(\"Pentatonic\", \"Pent\")\r\n    .replace(\"st\", \"\")\r\n    .replace(\"nd\", \"\")\r\n    .replace(\"rd\", \"\")\r\n    .replace(\"th\", \"\");\r\n\r\nexport const getRootedName = (\r\n  podListPreset: AnyPodListPreset,\r\n  rootNotePreset?: INotePreset\r\n) => {\r\n  return `${rootNotePreset ? `${rootNotePreset.name} ` : \"\"}${\r\n    podListPreset.name\r\n  }`;\r\n};\r\n\r\nexport const isInSuperset = (intervalPods: IPod[], superset: IPod[]) => {\r\n  if (superset.length <= intervalPods.length) return false;\r\n  return listContainsSubset(superset, intervalPods);\r\n};\r\n\r\nexport const containsSubset = (intervalPods: IPod[], subset: IPod[]) => {\r\n  if (subset.length >= intervalPods.length) return false;\r\n  return listContainsSubset(intervalPods, subset);\r\n};\r\n\r\nexport const getSubchords = (intervalPods: IPod[]) => {\r\n  return CHORD_PRESETS.filter((preset) =>\r\n    containsSubset(intervalPods, preset.pods)\r\n  );\r\n};\r\n\r\nexport const getSuperchords = (intervalPods: IPod[]) => {\r\n  return CHORD_PRESETS.filter((preset) =>\r\n    isInSuperset(intervalPods, preset.pods)\r\n  );\r\n};\r\n\r\nexport const getSubscales = (intervalPods: IPod[]) => {\r\n  return SCALE_PRESETS.filter((preset) =>\r\n    containsSubset(intervalPods, preset.pods)\r\n  );\r\n};\r\n\r\nexport const getSuperscales = (intervalPods: IPod[]) => {\r\n  return SCALE_PRESETS.filter((preset) =>\r\n    isInSuperset(intervalPods, preset.pods)\r\n  );\r\n};\r\n\r\nexport const getAllRelated = (intervalPods: IPod[]) => {\r\n  return [\r\n    ...getSubchords(intervalPods),\r\n    ...getSubscales(intervalPods),\r\n    ...getSuperchords(intervalPods),\r\n    ...getSuperscales(intervalPods),\r\n  ];\r\n};\r\n\r\n// applyRoot(root: IPod) {\r\n//   let notePods;\r\n//   try {\r\n//     notePods = this.intervalPods.map((ivl) => addPods(root, ivl));\r\n//   } catch (e) {\r\n//     console.error(e);\r\n//     throw new Error(\"Unable to apply root\");\r\n//   }\r\n//   this.root = root;\r\n//   this.notePods = notePods;\r\n//   this.name = `${\"ROOT\"} ${this.name}`;\r\n//   return this;\r\n// }\r\n\r\nexport const tryGetPodPairAtPitch = (\r\n  intervalPods: IPod[],\r\n  notePods: IPod[],\r\n  noteIndex: number\r\n): [IPod, IPod] | [undefined, undefined] => {\r\n  if (!notePods) return [undefined, undefined];\r\n\r\n  const index = getIndexOfPodAtPitch(notePods, noteIndex, false);\r\n\r\n  if (index == null) return [undefined, undefined];\r\n\r\n  return [intervalPods[index], (notePods as IPod[])[index]];\r\n};\r\n\r\nexport const getNotePods = (\r\n  rootPod: IPod,\r\n  intervalPods: IPod[],\r\n  octave = 4\r\n): IPod[] => {\r\n  const notePods = intervalPods.map((ivl) => {\r\n    const notePod = addPods(rootPod, ivl);\r\n    return [\r\n      (octave - 4) * 12 + NumberUtils.modulo(notePod[0], 12),\r\n      notePod[1],\r\n    ] as IPod;\r\n  });\r\n  return notePods;\r\n};\r\n","const ROMAN_NUMERAL = {\r\n\tM: 1000,\r\n\tCM: 900,\r\n\tD: 500,\r\n\tCD: 400,\r\n\tC: 100,\r\n\tXC: 90,\r\n\tL: 50,\r\n\tXL: 40,\r\n\tX: 10,\r\n\tIX: 9,\r\n\tV: 5,\r\n\tIV: 4,\r\n\tI: 1\r\n} as const;\r\n\r\nconst modulo = (a: number, b: number): number => {\r\n\treturn ((a % b) + b) % b;\r\n}\r\n\r\nconst moduloSum = (a: number, b: number, divisor: number): number => {\r\n\tconst offset = 0;\r\n\tconst subtraction = false;\r\n\tconst dividend = (subtraction) ? ((a - offset) - (b - offset)) : ((a - offset) + (b - offset));\r\n\treturn modulo(dividend, divisor) + offset;\r\n};\r\n\r\nconst romanize = (n: number): string => {\r\n\tlet str = '';\r\n\tfor (const i of Object.keys(ROMAN_NUMERAL)) {\r\n\t\tvar q = Math.floor(n / ROMAN_NUMERAL[i]);\r\n\t\tn -= q * ROMAN_NUMERAL[i];\r\n\t\tstr += i.repeat(q);\r\n\t\tif (n === 0) return str;\r\n\t}\r\n\treturn str;\r\n}\r\n\r\nexport default {\r\n\tmodulo,\r\n\tmoduloSum,\r\n\tromanize\r\n};\r\n"],"names":["StyledCardSection","styled","props","theme","_props$theme","text","_props$theme$text","secondary","_props$theme2","surface","_props$theme2$surface","bg","_ref","title","children","React","className","StyledDropdownInput","value","setValue","options","idProperty","displayProperty","onChange","e","target","selectedIndex","map","v","i","key","StyledNumbericInput","utils","_theme$utils","border","_ref2","status","_theme$status","interactive","_ref3","_theme$status2","active","_ref4","_theme$status3","highlight","_ref5","_theme$utils2","_ref6","rest","ButtonInput","onClick","newVal","min","Math","max","Icon","iconId","size","type","StyledSwitch","$active","action","_theme$action","_theme$action2","_theme$surface","StyledOverlay","StyledContainer","StyledCard","setIsOpen","Card","draggable","StyledCardFooterButton","_props$theme$surface","card","_props$theme2$action","_props$theme3","_props$theme3$action","isActive","$isActive","StyledInputRow","$y","dark3","label","y","StyledMaximizeButton","VOICING_OPTIONS","FRETBOARD_TUNING_VALUES","DEFAULT_FRETBOARD_PROPS","StyledMainCol","voicing","tuning","fretRange","setVoicing","setTuning","setFretRange","showFretNumbers","setShowFretNumbers","showFretDots","setShowFretDots","presetConfig","root","isEditing","setIsEditing","useState","isFullScreen","setIsFullScreen","filteredVoicings","fretLo","fretHi","viewer","Fretboard","podListPreset","rootNotePreset","tuningId","presetId","MaximizeButton","Modal","CardSection","InputRow","DropdownInput","id","TuningId","NumericInput","SwitchInput","CardFooterButton","StyledDetailsCol","presetType","setPresetType","setPresetConfig","setRoot","modelOptions","data","intervalIds","valueIds","Link","to","getModelRoute","getRootedName","ivl","intervalPreset","INTERVAL_PRESET_MAP","intervalPod","pod","intervalName","getIntervalName","notePod","addPods","noteName","getNoteName","NOTE_PRESETS","POD_LIST_PRESET_TYPE_OPTIONS","DEFAULT_VOICING","DEFAULT_TUNING","DEFAULT_FRET_RANGE","colorScheme","_setColorScheme","COLOR_SCHEME_PRESETS","colorConfig","setColorConfig","defaultConfig","setColorScheme","cs","qpPresetType","qpPresetId","qpRootId","useQueryParam","console","error","initPresetType","initPresetId","initRootId","_setPresetType","getInitPresetType","find","preset","getInitPresetConfig","note","StyledFretboardPage","PageLayout","displayName","componentId","useModelQueryParams","modelState","useModelState","fretboardState","useFretboardState","hideHeader","ColumnManager","desktop","FretboardCol","NotesCol","StyledColumnManager","$tablet","MediaQuery","join","$desktop","tablet","StyledCardHeader","CardHeader","level","AsTag","subtitle","StyledTable","getIsTypeOmit","Col","index","isHeader","content","colSpan","link","ColTag","WrapperTag","Fragment","wrapperProps","Row","cols","headerColIndicies","col","isConfig","hasOwnProperty","getIsConfig","colConfig","includes","TableSection","Tag","rows","row","Table","thead","tfoot","tbody","styles","colGroups","caption","cg","getFrequency","p","exp","f","pow","round","IntervalQualityId","INTERVAL_QUALITY_PRESET_MAP","Map","Diminished","name","symbol","down","undefined","up","Minor","Major","Perfect","Augmented","ArrayUtils","getName","reduced","reducePod","noteIndex","d","degreeIntervals","CORE_INTERVALS","pIvl","loIvl","hiIvl","length","quality","get","offset","count","abs","repeat","isExtended","MAX_POD","getIsExtended","getExtensionInversionId","getRatio","baseline","toFixed","AccidentalId","ACCIDENTAL_PRESET_MAP","DoubleFlat","Flat","Natural","Sharp","DoubleSharp","DiatonicId","DIATONIC_PRESET_MAP","Tonic","Supertonic","Mediant","Subdominant","Dominant","Submediant","Subtonic","ROOT_SCALE","ROOT_PITCH","ROOT_DEGREE","getNoteFromPod","arePodsEqual","getNoteWithOctave","noteId","octave","notePreset","NOTE_PRESET_MAP","NumberUtils","getAccidentalString","getAccidentalOffset","getPitch","getPitchClass","getSpelling","degree","getDegree","DEGREE_PRESETS","getDegreeId","getNameParts","spelling","accidental","raw","floor","getOctave","includeOctave","format","getFrequencyFromPitch","getIndexOfPodAtPitch","A","matchOctave","findIndex","a","b","isPodAtPitch","subtractPods","arePodListsEqual","B","listContainsSubset","podList","subset","x","getShortName","str","replace","isInSuperset","intervalPods","superset","containsSubset","getSubchords","CHORD_PRESETS","pods","getSuperchords","getSubscales","SCALE_PRESETS","getSuperscales","tryGetPodPairAtPitch","notePods","getNotePods","rootPod","ROMAN_NUMERAL","M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I","modulo","moduloSum","divisor","romanize","n","Object","keys","q"],"sourceRoot":""}