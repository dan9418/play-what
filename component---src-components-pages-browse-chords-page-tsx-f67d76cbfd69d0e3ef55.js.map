{"version":3,"file":"component---src-components-pages-browse-chords-page-tsx-f67d76cbfd69d0e3ef55.js","mappings":"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","sources":["webpack://play-what/./src/components/collection/CollectionCard.tsx","webpack://play-what/./src/components/collection/CollectionTable.tsx","webpack://play-what/./src/components/column-manager/ColumnManager.tsx","webpack://play-what/./src/components/pages/browse/chords.page.tsx","webpack://play-what/./src/components/ui/Card.tsx","webpack://play-what/./src/components/ui/List.styles.tsx","webpack://play-what/./src/components/ui/List.tsx","webpack://play-what/./src/components/ui/Table.tsx","webpack://play-what/./src/core/routing/Routing.utils.ts"],"sourcesContent":["import { Link } from \"gatsby\";\r\nimport React from \"react\";\r\nimport { useRootSuffix } from \"../../contexts/PagePropsContext\";\r\nimport Chord from \"../../core/models/Chord\";\r\nimport { CHORD_PRESETS, SCALE_PRESETS } from \"../../core/models/Model.presets\";\r\nimport Scale from \"../../core/models/Scale\";\r\nimport Card from \"../ui/Card\";\r\nimport CollectionTable, { ICollectionTableProps } from \"./CollectionTable\";\r\n\r\nconst CollectionCard: React.FC<any> = ({ title, data }) => {\r\n    return (\r\n        <Card title={title} >\r\n            <CollectionTable data={data} />\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default CollectionCard;\r\n","import React from \"react\";\r\nimport { css } from \"styled-components\";\r\nimport { useRoot, useRootId } from \"../../contexts/PagePropsContext\";\r\nimport Chord from \"../../core/models/Chord\";\r\nimport {\r\n  IModelConfig,\r\n  ModelType,\r\n  NoteId,\r\n} from \"../../core/models/Model.constants\";\r\nimport Note from \"../../core/models/Note\";\r\nimport Scale from \"../../core/models/Scale\";\r\nimport { getModelRoute } from \"../../core/routing/Routing.utils\";\r\nimport { Table } from \"../ui/Table\";\r\n\r\nconst tableStyles = css`\r\n  width: 100%;\r\n  margin: auto;\r\n  border-collapse: collapse;\r\n  white-space: nowrap;\r\n\r\n  td {\r\n    &:not(:first-child) {\r\n      font-size: 80%;\r\n    }\r\n  }\r\n\r\n  td,\r\n  th {\r\n    line-height: 32px;\r\n    text-align: center;\r\n\r\n    &:not(:first-child) {\r\n      width: 32px;\r\n      height: 32px;\r\n\r\n      display: none;\r\n      @media (min-width: 512px) {\r\n        display: table-cell;\r\n      }\r\n    }\r\n\r\n    &:first-child {\r\n      text-align: left;\r\n      padding: 0 8px;\r\n    }\r\n  }\r\n\r\n  td {\r\n    //border-right: 1px solid ${(props) => props.theme.utils.border};\r\n    //border-bottom: 1px solid ${(props) => props.theme.utils.border};\r\n    &.active {\r\n      background-color: ${(props) => props.theme.surface.bg};\r\n    }\r\n  }\r\n\r\n  thead {\r\n    text-transform: uppercase;\r\n    font-size: 80%;\r\n\r\n    @media (max-width: 511px) {\r\n      display: none;\r\n    }\r\n    tr th {\r\n      background-color: ${(props) => props.theme.surface.nav};\r\n      color: ${({ theme }) => theme.text.inverted};\r\n    }\r\n\r\n    th:first-child {\r\n      border-radius: 8px 0 0 8px;\r\n    }\r\n    th:last-child {\r\n      border-radius: 0 8px 8px 0;\r\n    }\r\n  }\r\n\r\n  a {\r\n    display: block;\r\n  }\r\n`;\r\n\r\nexport interface ICollectionTableProps {\r\n  data: IModelConfig[];\r\n  semitones?: number[];\r\n}\r\n\r\nconst SEMITONES = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\r\n\r\nconst getSemitoneCol = (\r\n  model: Chord | Scale,\r\n  h: number,\r\n  semitones: number[],\r\n  root?: Note\r\n) => {\r\n  const index = model.intervals.findIndex((ivl) => ivl.pod[0] + 1 === h);\r\n  const className = semitones.includes(h) ? \"active\" : undefined;\r\n  if (index < 0) {\r\n    return {\r\n      className,\r\n      content: \"\",\r\n    };\r\n  }\r\n  const mod = root ? (model.notes as Note[])[index] : model.intervals[index];\r\n  return {\r\n    className,\r\n    content: mod.getName(),\r\n  };\r\n};\r\n\r\nconst CollectionTable: React.FC<ICollectionTableProps> = ({\r\n  data,\r\n  semitones = [],\r\n}) => {\r\n  const rootId = useRootId();\r\n  const root = useRoot();\r\n  return (\r\n    <Table\r\n      styles={tableStyles}\r\n      thead={[\r\n        {\r\n          cols: [\r\n            \"Name\",\r\n            {\r\n              colSpan: 12,\r\n              content: root ? \"Notes\" : \"Intervals\",\r\n            },\r\n          ],\r\n        },\r\n      ]}\r\n      tbody={data.map((d, i) => {\r\n        const cl = d.modelType === ModelType.Chord ? Chord : Scale;\r\n        // @ts-ignore\r\n        const model = new cl(d.modelId, { root });\r\n        return {\r\n          cols: [\r\n            {\r\n              link: getModelRoute(\r\n                model.modelType,\r\n                model.modelId,\r\n                rootId as NoteId\r\n              ),\r\n              content: model.getName(),\r\n            },\r\n            ...SEMITONES.map((h, i) =>\r\n              getSemitoneCol(model, h, semitones, root)\r\n            ),\r\n          ],\r\n        };\r\n      })}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CollectionTable;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledColumnManager = styled.div`\r\n    display: grid;\r\n    gap: 16px;\r\n    grid-template-columns: 1fr;\r\n\r\n    ${({ $tablet }) => $tablet ? `\r\n        @media(min-width: 512px) {\r\n            grid-template-columns: ${$tablet.join(' ')}\r\n        }\r\n    ` : ''}\r\n\r\n    ${({ $desktop }) => $desktop ? `\r\n        @media(min-width: 1024px) {\r\n            grid-template-columns: ${$desktop.join(' ')}\r\n        }\r\n    ` : ``}\r\n   \r\n`;\r\n\r\nexport interface IColumnManagerProps {\r\n    tablet?: string[];\r\n    desktop?: string[];\r\n}\r\n\r\nconst ColumnManager: React.FC<any> = ({ children, tablet, desktop }) => {\r\n    return (\r\n        <StyledColumnManager $tablet={tablet} $desktop={desktop}>\r\n            {children}\r\n        </StyledColumnManager >\r\n    );\r\n};\r\n\r\nexport default ColumnManager;\r\n","import { Link } from \"gatsby\";\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useRootId } from \"../../../contexts/PagePropsContext\";\r\nimport {\r\n  ChordId,\r\n  ModelType,\r\n  NoteId,\r\n} from \"../../../core/models/Model.constants\";\r\nimport { CHORD_PRESETS } from \"../../../core/models/Model.presets\";\r\nimport { getModelRoute } from \"../../../core/routing/Routing.utils\";\r\nimport CollectionCard from \"../../collection/CollectionCard\";\r\nimport ColumnManager from \"../../column-manager/ColumnManager\";\r\nimport PageLayout from \"../../layout/PageLayout\";\r\nimport Card from \"../../ui/Card\";\r\nimport { SimpleList } from \"../../ui/List\";\r\n\r\nconst StyledChordsPage = styled(PageLayout)`\r\n  .intro {\r\n    padding: 0 16px;\r\n    margin-bottom: 16px;\r\n  }\r\n\r\n  h3,\r\n  p {s\r\n    margin: 16px 0;\r\n  }\r\n`;\r\n\r\nconst ChordsPage: React.FC<any> = (props) => {\r\n  const rootId = useRootId();\r\n\r\n  return (\r\n    <StyledChordsPage title=\"Chords\" subtitle=\"The foundation of harmony\">\r\n      <div>\r\n        <p className=\"intro\">\r\n          A chord is a collection of musical notes, usually played\r\n          simultaneously. Chords are defined by their first note (the{\" \"}\r\n          <em>root</em>) and its relationship to the following notes (\r\n          <em>intervals</em>).\r\n        </p>\r\n        {false && (\r\n          <p className=\"intro\">\r\n            Most chords contain a root, a third, and a fifth. Advanced chords\r\n            may include additional intervals, substitutions, and/or omissions.\r\n            In their most common form, chords contain at least three notes\r\n            spanning a single octave. Chords spanning more than one octave are\r\n            called <em>extended chords</em> and are not yet covered here.\r\n          </p>\r\n        )}\r\n        {/*\r\n                    <h3>Types of Chords</h3>\r\n                    <ul>\r\n                        <li><a href=\"#triad\">Triads</a></li>\r\n                        <li><a href=\"#seventh\">Seventh Chords</a></li>\r\n                        <li><a href=\"#sixth\">Sixth Chords</a></li>\r\n                        <li><a href=\"#suspended\">Suspended Chords</a></li>\r\n                    />*/}\r\n      </div>\r\n      <ColumnManager>\r\n        <ColumnManager>\r\n          <CollectionCard title=\"All Chords\" data={CHORD_PRESETS} />\r\n        </ColumnManager>\r\n        <ColumnManager>\r\n          <Card title=\"Triads\" id=\"triad\">\r\n            <p>\r\n              A triad is the most basic type of chord. It consists of 3\r\n              intervals (a root, a third, and a fifth). The specific thirds and\r\n              fifths used determine the type (or <em>quality</em>) of the triad.\r\n            </p>\r\n            <h3>Examples</h3>\r\n            <SimpleList\r\n              items={[\r\n                [\r\n                  \"Major Triad\",\r\n                  getModelRoute(ModelType.Chord, ChordId.MajTriad, rootId),\r\n                ],\r\n                [\r\n                  \"Minor Triad\",\r\n                  getModelRoute(ModelType.Chord, ChordId.MinTriad, rootId),\r\n                ],\r\n                [\r\n                  \"Augmented Triad\",\r\n                  getModelRoute(ModelType.Chord, ChordId.AugTriad, rootId),\r\n                ],\r\n                [\r\n                  \"Diminished Triad\",\r\n                  getModelRoute(ModelType.Chord, ChordId.DimTriad, rootId),\r\n                ],\r\n              ]}\r\n            />\r\n          </Card>\r\n          <Card title=\"Seventh Chords\" id=\"seventh\">\r\n            <p>\r\n              A seventh chord is a triad with an additional seventh interval\r\n              stacked on top.\r\n            </p>\r\n            <h3>Examples</h3>\r\n            <SimpleList\r\n              items={[\r\n                [\r\n                  \"Major 7th\",\r\n                  getModelRoute(ModelType.Chord, ChordId.Maj7, rootId),\r\n                ],\r\n                [\r\n                  \"Minor 7th\",\r\n                  getModelRoute(ModelType.Chord, ChordId.Min7, rootId),\r\n                ],\r\n                [\r\n                  \"Dominant 7th\",\r\n                  getModelRoute(ModelType.Chord, ChordId.Dom7, rootId),\r\n                ],\r\n                [\r\n                  \"Minor - Major 7th\",\r\n                  getModelRoute(ModelType.Chord, ChordId.MinMaj7, rootId),\r\n                ],\r\n                [\r\n                  \"Diminished 7th\",\r\n                  getModelRoute(ModelType.Chord, ChordId.Dim7, rootId),\r\n                ],\r\n                [\r\n                  \"Half - Diminished 7th\",\r\n                  getModelRoute(ModelType.Chord, ChordId.HalfDim7, rootId),\r\n                ],\r\n                [\r\n                  \"Augmented 7th\",\r\n                  getModelRoute(ModelType.Chord, ChordId.Aug7, rootId),\r\n                ],\r\n                [\r\n                  \"Augmented Major 7th\",\r\n                  getModelRoute(ModelType.Chord, ChordId.AugMaj7, rootId),\r\n                ],\r\n              ]}\r\n            />\r\n          </Card>\r\n          <Card title=\"Sixth Chords\" id=\"sixth\">\r\n            <p>\r\n              A sixth chord is a triad with an additional sixth interval stacked\r\n              on top. They are similar in function to seventh chords.\r\n            </p>\r\n            <h3>Examples</h3>\r\n            <SimpleList\r\n              items={[\r\n                [\r\n                  \"Major 6th\",\r\n                  getModelRoute(ModelType.Chord, ChordId.Maj6, rootId),\r\n                ],\r\n                [\r\n                  \"Minor 6th\",\r\n                  getModelRoute(ModelType.Chord, ChordId.Min6, rootId),\r\n                ],\r\n              ]}\r\n            />\r\n          </Card>\r\n          <Card title=\"Suspended Chords\" id=\"suspended\">\r\n            <p>\r\n              A suspended chord is a like a triad, except it sustitutes a second\r\n              or fourth interval in place of the third.\r\n            </p>\r\n            <h3>Examples</h3>\r\n            <SimpleList\r\n              items={[\r\n                [\r\n                  \"Suspended 2nd\",\r\n                  getModelRoute(ModelType.Chord, ChordId.Sus2, rootId),\r\n                ],\r\n                [\r\n                  \"Suspended 4th\",\r\n                  getModelRoute(ModelType.Chord, ChordId.Sus4, rootId),\r\n                ],\r\n              ]}\r\n            />\r\n          </Card>\r\n        </ColumnManager>\r\n      </ColumnManager>\r\n    </StyledChordsPage>\r\n  );\r\n};\r\n\r\nexport default ChordsPage;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledCard = styled.div`\r\n    background: ${props => props.theme.surface.card};\r\n    width: 100%;\r\n    border-radius: 16px;\r\n    padding: 16px;\r\n\r\n    .header {\r\n        margin-bottom: 16px;\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 8px;\r\n        justify-content: space-between;\r\n    }\r\n`;\r\n\r\nexport const CardHeader: React.FC<any> = ({ title, level = 2, action = null }) => {\r\n    const AsTag: any = `h${level}`;\r\n    return (\r\n        <div className=\"header\">\r\n            <AsTag>{title}</AsTag>\r\n            {action}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Card: React.FC<any> = ({ title, subtitle, action, children, level, ...rest }) => {\r\n    return (\r\n        <StyledCard {...rest}>\r\n            {title &&\r\n                <CardHeader title={title} action={action} level={level} />\r\n            }\r\n            {subtitle &&\r\n                <CardHeader title={subtitle} level={level + 1} />\r\n            }\r\n            {children}\r\n        </StyledCard >\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import { css } from 'styled-components';\r\n\r\nexport const LIST_STYLES_1 = css`\r\n    li {\r\n        margin-left: 8px;\r\n        &:not(:first-child) {\r\n            margin-top: 4px;\r\n        }\r\n    }\r\n    h1, h2, h3, h4, h5, h6, h7 {\r\n        font-weight: bold;\r\n    }\r\n    section {\r\n        margin-left: 8px;\r\n        &:not(:first-child) {\r\n            margin-top: 24px;\r\n        }\r\n    }\r\n    ul {\r\n        &:not(:first-child) {\r\n            margin-top: 8px;\r\n            margin-left: 8px;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const LIST_STYLES_2 = css`\r\n    li {\r\n        list-style-type: disc;\r\n        margin: 8px 0 8px 16px;\r\n    }\r\n`;\r\n","import { Link } from \"gatsby\";\r\nimport React from \"react\";\r\nimport { LIST_STYLES_2 } from \"./List.styles\";\r\n\r\nexport interface IListItem {\r\n    text: string;\r\n    link?: string;\r\n}\r\n\r\nexport interface IList {\r\n    title?: string;\r\n    subtitle?: string;\r\n    lists?: IList[];\r\n    items?: | IListItem[];\r\n}\r\n\r\nexport interface IListProps extends IList {\r\n    level?: number;\r\n    prefix?: string;\r\n    styles?: any;\r\n}\r\n\r\nconst Heading: React.FC<any> = ({ title, subtitle, level }) => {\r\n    const Title = `h${level}` as any;\r\n    const Subtitle = `h${level + 1}` as any;\r\n    return (\r\n        <>\r\n            {title && <Title>{title}</Title>}\r\n            {subtitle && <Subtitle>{subtitle}</Subtitle>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport const List: React.FC<IListProps> = ({ title, subtitle, items, lists, level = 1, prefix = '', styles }) => {\r\n    return (\r\n        // @ts-ignore\r\n        <section css={styles}>\r\n            <Heading title={title} subtitle={subtitle} level={level} />\r\n            <ul>\r\n                {items && items.length > 0 && (\r\n                    items.map(({ text, link }) => (\r\n                        <li key={text}>{\r\n                            link ? <Link to={`${prefix}${link}`}>{text}</Link> : text\r\n                        }</li>\r\n                    ))\r\n                )}\r\n                {lists && (\r\n                    <li>\r\n                        {lists.map(l => <List {...l} key={l.title} level={level + 1} prefix={prefix} />)}\r\n                    </li>\r\n                )}\r\n            </ul>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport const SimpleList: React.FC<{ items: (string | [string, string])[] }> = ({ items }) => {\r\n    const formattedItems: IListItem[] = items.map(item => {\r\n        if (Array.isArray(item)) {\r\n            const [text, link] = item;\r\n            return {\r\n                text,\r\n                link\r\n            }\r\n        }\r\n        return {\r\n            text: item\r\n        }\r\n    })\r\n    return (\r\n        <List items={formattedItems} styles={LIST_STYLES_2} />\r\n    );\r\n}\r\n","\r\nimport { Link } from 'gatsby';\r\nimport React, { Fragment, ReactNode } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledTable = styled.table`\r\n   \r\n`;\r\n\r\ntype TOmit = undefined | null | false;\r\n\r\nconst getIsTypeOmit = (data: any): data is TOmit => data === undefined || data === null || data === false;\r\n\r\n// Col\r\n\r\ninterface IColConfig {\r\n    isHeader?: boolean;\r\n    content: any;\r\n    colSpan?: number;\r\n    className?: string;\r\n    link?: string;\r\n}\r\n\r\ninterface IColProps extends IColConfig {\r\n    index: number;\r\n}\r\n\r\ntype TCol = string | number | IColConfig | ReactNode;\r\n\r\nconst Col: React.FC<IColProps> = ({ index, isHeader, content, colSpan, className, link }) => {\r\n    const ColTag = isHeader ? 'th' : 'td';\r\n    const WrapperTag = link ? Link : Fragment;\r\n    const wrapperProps: any = link ? { to: link } : {};\r\n\r\n    return (\r\n        <ColTag colSpan={colSpan} className={className}>\r\n            <WrapperTag {...wrapperProps}>\r\n                {content || ''}\r\n            </WrapperTag>\r\n        </ColTag>\r\n    );\r\n}\r\n\r\n// Row\r\n\r\ninterface IRowConfig {\r\n    cols: (TCol | TOmit)[];\r\n    className?: string;\r\n    isHeader?: boolean;\r\n    headerColIndicies?: number[];\r\n}\r\n\r\nconst getIsConfig = (col: TCol): col is IColConfig => typeof col === 'object' && col !== null && col.hasOwnProperty('content');\r\n\r\nconst Row: React.FC<IRowConfig> = ({ cols, isHeader, className, headerColIndicies = [] }) => {\r\n    return (\r\n        <tr className={className}>\r\n            {cols.map((col: any, i) => {\r\n                if (getIsTypeOmit(col)) return null;\r\n                const isConfig = getIsConfig(col);\r\n                const colConfig = !isConfig ? { content: col } : col\r\n                return <Col key={i} index={i} isHeader={isHeader || headerColIndicies.includes(i)} {...colConfig} />\r\n            })}\r\n        </tr>\r\n    );\r\n}\r\n\r\n// Table Section\r\n\r\ninterface ITableSectionConfig {\r\n    Tag: 'thead' | 'tfoot' | 'tbody';\r\n    rows: (IRowConfig | TOmit)[];\r\n    headerColIndicies?: number[];\r\n}\r\n\r\nconst TableSection: React.FC<ITableSectionConfig> = ({ Tag, rows, headerColIndicies }) => (\r\n    <Tag>\r\n        {rows.map((row, i) => {\r\n            if (getIsTypeOmit(row)) return null;\r\n            return (\r\n                <Row\r\n                    key={i}\r\n                    isHeader={Tag !== 'tbody'}\r\n                    headerColIndicies={headerColIndicies}\r\n                    {...row} />\r\n            );\r\n        })}\r\n    </Tag>\r\n)\r\n\r\n// Table\r\n\r\ninterface IColGroup {\r\n    span?: number;\r\n    className?: string;\r\n}\r\n\r\ninterface ITableConfig {\r\n    thead?: (IRowConfig | TOmit)[];\r\n    tfoot?: (IRowConfig | TOmit)[];\r\n    tbody: (IRowConfig | TOmit)[];\r\n    styles?: any;\r\n    caption?: string;\r\n    colGroups?: IColGroup[];\r\n    className?: string;\r\n    headerColIndicies?: number[];\r\n}\r\n\r\nexport const Table: React.FC<ITableConfig> = ({ thead, tfoot, tbody, styles, colGroups, caption, headerColIndicies, className }) => {\r\n    return (\r\n        <StyledTable css={styles} className={className}>\r\n            {colGroups && <colgroup>{colGroups.map((cg, i) => <col key={i} {...cg} />)}</colgroup>}\r\n            {caption && <caption>{caption}</caption>}\r\n            {thead && <TableSection Tag=\"thead\" rows={thead} headerColIndicies={headerColIndicies} />}\r\n            {tfoot && <TableSection Tag=\"tfoot\" rows={tfoot} headerColIndicies={headerColIndicies} />}\r\n            {tbody && <TableSection Tag=\"tbody\" rows={tbody} headerColIndicies={headerColIndicies} />}\r\n        </StyledTable>\r\n    );\r\n}\r\n","import { ModelId, ModelType, NoteId } from \"../models/Model.constants\";\r\n\r\nexport const getModelRoute = (\r\n  modelType: ModelType,\r\n  modelId?: ModelId,\r\n  rootId?: NoteId\r\n) => {\r\n  const modelSuffix = modelId ? `/${modelId}` : \"\";\r\n  const rootSuffix = rootId ? `/root/${rootId}` : \"\";\r\n\r\n  return `/browse/${modelType}${modelSuffix}${rootSuffix}/`;\r\n};\r\n"],"names":["title","data","React","Card","CollectionTable","tableStyles","css","props","theme","surface","bg","nav","text","inverted","SEMITONES","semitones","rootId","useRootId","root","useRoot","Table","styles","thead","cols","colSpan","content","tbody","map","d","i","model","modelType","ModelType","Chord","Scale","modelId","link","getModelRoute","getName","h","index","intervals","findIndex","ivl","pod","className","includes","undefined","notes","getSemitoneCol","StyledColumnManager","styled","$tablet","join","$desktop","children","tablet","desktop","StyledChordsPage","PageLayout","withConfig","subtitle","ColumnManager","CollectionCard","CHORD_PRESETS","id","SimpleList","items","ChordId","StyledCard","card","CardHeader","level","action","AsTag","rest","LIST_STYLES_1","LIST_STYLES_2","Heading","Title","Subtitle","List","lists","prefix","length","key","Link","to","l","formattedItems","item","Array","isArray","StyledTable","getIsTypeOmit","Col","isHeader","ColTag","WrapperTag","Fragment","wrapperProps","Row","headerColIndicies","col","isConfig","hasOwnProperty","getIsConfig","colConfig","TableSection","Tag","rows","row","tfoot","colGroups","caption","cg"],"sourceRoot":""}