{"version":3,"file":"component---src-pages-dev-practice-chord-progressions-tsx-244d3415f918ff38d6b5.js","mappings":"yTAiBMA,GAAkBC,EAAAA,EAAAA,SAAOC,EAAAA,GAAV,4FAAGD,CAAH,oFAEfE,EAAAA,GAAeC,EAAAA,GCjBrB,ED8BiC,WAC7B,OAAoCC,EAAAA,EAAAA,UAASC,EAAAA,GAAAA,IAAoBC,EAAAA,GAAAA,IAA1DC,EAAP,KAAmBC,EAAnB,KAEMC,EAAO,IAAIC,EAAAA,EAAKH,EAAWI,OAC3BC,EAAa,IAAIC,EAAAA,EAAMC,EAAAA,GAAAA,OAAgB,CAAEL,KAAAA,IACzCM,EAAa,IAAIF,EAAAA,EAAMC,EAAAA,GAAAA,OAAgB,CAAEL,KAAAA,IAEzCO,EAAa,CACf,CACIC,MAAOC,EAAAA,EACPC,QAASC,EAAAA,EAAAA,KACTC,OAAQT,EAAWU,MAAM,GAAGH,QAC5BI,UAAW,MAEf,CACIN,MAAOC,EAAAA,EACPC,QAASC,EAAAA,EAAAA,KACTC,OAAQT,EAAWU,MAAM,GAAGH,QAC5BI,UAAW,MAEf,CACIN,MAAOC,EAAAA,EACPC,QAASC,EAAAA,EAAAA,KACTC,OAAQT,EAAWU,MAAM,GAAGH,QAC5BI,UAAW,OAIbC,EAAa,CACf,CACIP,MAAOC,EAAAA,EACPC,QAASC,EAAAA,EAAAA,SACTC,OAAQN,EAAWO,MAAM,GAAGH,QAC5BI,UAAW,MAEf,CACIN,MAAOC,EAAAA,EACPC,QAASC,EAAAA,EAAAA,KACTC,OAAQN,EAAWO,MAAM,GAAGH,QAC5BI,UAAW,MAEf,CACIN,MAAOC,EAAAA,EACPC,QAASC,EAAAA,EAAAA,KACTC,OAAQN,EAAWO,MAAM,GAAGH,QAC5BI,UAAW,OAIbE,EAAW,SAACC,EAAKC,GACnB,OAAmB,IAAfD,EAAIE,IAAI,GAAiB,MACV,IAAfF,EAAIE,IAAI,GAAiB,QACV,IAAfF,EAAIE,IAAI,IACRF,EAAIE,IAAI,GADiB,UAKjC,OACI,gBAAC7B,EAAD,KACI,gBAAC8B,EAAA,EAAD,CAAWC,MAAM,uBACjB,gBAACC,EAAA,EAAD,CAAUC,MAAM,QACZ,gBAACC,EAAA,EAAD,CAAeC,QAASC,EAAAA,GAAcxB,MAAOJ,EAAY6B,SAAU,SAAAC,GAC/D7B,EAAc6B,OAGtB,gBAACC,EAAA,GAAD,CAAMR,MAAM,gBACR,6BACI,6BACI,0BACI,gCACA,+BACA,iCAGR,6BACI,0BACKd,EAAWuB,KAAI,SAAAC,GACZ,MAA8CA,EAAtCvB,EAAR,EAAQA,MAAOE,EAAf,EAAeA,QAASE,EAAxB,EAAwBA,OAAQE,EAAhC,EAAgCA,UAC1BkB,EAAW,IAAIxB,EAAME,EAAS,CAAEV,KAAMC,EAAAA,EAAAA,OAAYW,KAExD,OACI,sBAAIqB,IAAKvB,GACL,0BAAKA,GACL,gBAACwB,EAAA,EAAD,kBACQC,EAAAA,EAAAA,IACAH,EACAlB,EAAYsB,EAAAA,GAAAA,IAAuBtB,QAAauB,OAChDA,OACAA,EACArB,GANR,CAQIsB,UAAW,CAAC,EAAG,YAMnC,0BACKC,EAAAA,EAAAA,OAAA,UAAsBhC,GAAa,GAAGuB,KAAI,SAAAC,GACvC,MAA8CA,EAAtCvB,EAAR,EAAQA,MAAOE,EAAf,EAAeA,QAASE,EAAxB,EAAwBA,OAAQE,EAAhC,EAAgCA,UAC1BkB,EAAW,IAAIxB,EAAME,EAAS,CAAEV,KAAMC,EAAAA,EAAAA,OAAYW,KAExD,OACI,sBAAIqB,IAAKvB,GACL,0BAAKA,GACL,gBAACwB,EAAA,EAAD,kBACQC,EAAAA,EAAAA,IACAH,EACAlB,EAAYsB,EAAAA,GAAAA,IAAuBtB,QAAauB,OAChDA,OACAA,EACArB,GANR,CAQIsB,UAAW,CAAC,EAAG,eAS/C,gBAACT,EAAA,GAAD,CAAMR,MAAM,gBACR,6BACI,6BACI,0BACI,gCACA,+BACA,iCAGR,6BACI,0BACKN,EAAWe,KAAI,SAAAC,GACZ,MAA8CA,EAAtCvB,EAAR,EAAQA,MAAOE,EAAf,EAAeA,QAASE,EAAxB,EAAwBA,OAAQE,EAAhC,EAAgCA,UAC1BkB,EAAW,IAAIxB,EAAME,EAAS,CAAEV,KAAMC,EAAAA,EAAAA,OAAYW,KAExD,OACI,sBAAIqB,IAAKvB,GACL,0BAAKA,GACL,gBAACwB,EAAA,EAAD,kBACQC,EAAAA,EAAAA,IACAH,EACAlB,EAAYsB,EAAAA,GAAAA,IAAuBtB,QAAauB,OAChDA,OACAA,EACArB,GANR,CAQIsB,UAAW,CAAC,EAAG,YAMnC,0BACKC,EAAAA,EAAAA,OAAA,UAAsBxB,GAAa,GAAGe,KAAI,SAAAC,GACvC,MAA8CA,EAAtCvB,EAAR,EAAQA,MAAOE,EAAf,EAAeA,QAASE,EAAxB,EAAwBA,OAAQE,EAAhC,EAAgCA,UAC1BkB,EAAW,IAAIxB,EAAME,EAAS,CAAEV,KAAMC,EAAAA,EAAAA,OAAYW,KAExD,OACI,sBAAIqB,IAAKvB,GACL,0BAAKA,GACL,gBAACwB,EAAA,EAAD,kBACQC,EAAAA,EAAAA,IACAH,EACAlB,EAAYsB,EAAAA,GAAAA,IAAuBtB,QAAauB,OAChDA,OACAA,EACArB,GANR,CAQIsB,UAAW,CAAC,EAAG","sources":["webpack://play-what/./src/components/pages/dev/ChordProgressionsPage.tsx","webpack://play-what/./src/pages/dev/practice/chord-progressions.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport styled from 'styled-components';\r\nimport ArrayUtils from \"../../../core/general/Array.utils\";\r\nimport Chord from \"../../../core/models/Chord\";\r\nimport { ChordId, NoteId, ScaleId } from \"../../../core/models/Model.constants\";\r\nimport { NOTE_PRESETS, NOTE_PRESET_MAP } from \"../../../core/models/Model.presets\";\r\nimport Note from \"../../../core/models/Note\";\r\nimport Scale from \"../../../core/models/Scale\";\r\nimport Fretboard from \"../../../viewers/fretboard/Fretboard\";\r\nimport { getFretboardProps } from \"../../../viewers/fretboard/Fretboard.utils\";\r\nimport { VOICING_PRESET_MAP } from \"../../../viewers/fretboard/Fretboard.voicing\";\r\nimport DropdownInput from \"../../inputs/DropdownInput\";\r\nimport { StyledPageBody } from \"../../layout/PageBody\";\r\nimport PageTitle from \"../../layout/PageTitle\";\r\nimport Card, { StyledCard } from \"../../ui/Card\";\r\nimport InputRow, { StyledInputRow } from \"../../ui/InputRow\";\r\n\r\nconst StyledCAGEDPage = styled(StyledPageBody)`\r\n\t    \r\n    ${StyledCard}, ${StyledInputRow} {\r\n        margin-top: 16px;\r\n        table {\r\n            width: 100%;\r\n\r\n            td {\r\n                width: 33%;\r\n                padding: 24px 2px 16px;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst CAGEDPage: React.FC<any> = () => {\r\n    const [rootPreset, setRootPreset] = useState(NOTE_PRESET_MAP.get(NoteId.C));\r\n\r\n    const root = new Note(rootPreset.value);\r\n    const majorScale = new Scale(ScaleId.Ionian, { root });\r\n    const minorScale = new Scale(ScaleId.Ionian, { root });\r\n\r\n    const majorItems = [\r\n        {\r\n            model: Chord,\r\n            modelId: ChordId.Min7,\r\n            rootId: majorScale.notes[1].modelId,\r\n            voicingId: null\r\n        },\r\n        {\r\n            model: Chord,\r\n            modelId: ChordId.Dom7,\r\n            rootId: majorScale.notes[4].modelId,\r\n            voicingId: null\r\n        },\r\n        {\r\n            model: Chord,\r\n            modelId: ChordId.Maj7,\r\n            rootId: majorScale.notes[0].modelId,\r\n            voicingId: null\r\n        }\r\n    ];\r\n\r\n    const minorItems = [\r\n        {\r\n            model: Chord,\r\n            modelId: ChordId.HalfDim7,\r\n            rootId: minorScale.notes[2].modelId,\r\n            voicingId: null\r\n        },\r\n        {\r\n            model: Chord,\r\n            modelId: ChordId.Min7,\r\n            rootId: minorScale.notes[4].modelId,\r\n            voicingId: null\r\n        },\r\n        {\r\n            model: Chord,\r\n            modelId: ChordId.Min7,\r\n            rootId: minorScale.notes[0].modelId,\r\n            voicingId: null\r\n        }\r\n    ];\r\n\r\n    const getColor = (ivl, note) => {\r\n        if (ivl.pod[1] === 0) return 'red';\r\n        if (ivl.pod[1] === 2) return 'blue';\r\n        if (ivl.pod[1] === 4) return 'black';\r\n        if (ivl.pod[1] === 6) return 'black';\r\n        return 'black';\r\n    };\r\n\r\n    return (\r\n        <StyledCAGEDPage>\r\n            <PageTitle title=\"Chord Progressions\" />\r\n            <InputRow label=\"Root\">\r\n                <DropdownInput options={NOTE_PRESETS} value={rootPreset} setValue={p => {\r\n                    setRootPreset(p);\r\n                }} />\r\n            </InputRow>\r\n            <Card title=\"Major II-V-I\" >\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>II</th>\r\n                            <th>V</th>\r\n                            <th>I</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr >\r\n                            {majorItems.map(item => {\r\n                                const { model, modelId, rootId, voicingId } = item as any;\r\n                                const instance = new model(modelId, { root: Note.fromId(rootId) });\r\n\r\n                                return (\r\n                                    <td key={modelId}>\r\n                                        <h3>{modelId}</h3>\r\n                                        <Fretboard\r\n                                            {...getFretboardProps(\r\n                                                instance,\r\n                                                voicingId ? VOICING_PRESET_MAP.get(voicingId) : undefined,\r\n                                                undefined,\r\n                                                undefined,\r\n                                                getColor\r\n                                            )}\r\n                                            fretRange={[1, 14]}\r\n                                        />\r\n                                    </td>\r\n                                );\r\n                            })}\r\n                        </tr>\r\n                        <tr >\r\n                            {ArrayUtils.rotate([...majorItems], 1).map(item => {\r\n                                const { model, modelId, rootId, voicingId } = item as any;\r\n                                const instance = new model(modelId, { root: Note.fromId(rootId) });\r\n\r\n                                return (\r\n                                    <td key={modelId}>\r\n                                        <h3>{modelId}</h3>\r\n                                        <Fretboard\r\n                                            {...getFretboardProps(\r\n                                                instance,\r\n                                                voicingId ? VOICING_PRESET_MAP.get(voicingId) : undefined,\r\n                                                undefined,\r\n                                                undefined,\r\n                                                getColor\r\n                                            )}\r\n                                            fretRange={[1, 14]}\r\n                                        />\r\n                                    </td>\r\n                                );\r\n                            })}\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </Card>\r\n            <Card title=\"Minor ii-v-i\" >\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ii</th>\r\n                            <th>v</th>\r\n                            <th>i</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr >\r\n                            {minorItems.map(item => {\r\n                                const { model, modelId, rootId, voicingId } = item as any;\r\n                                const instance = new model(modelId, { root: Note.fromId(rootId) });\r\n\r\n                                return (\r\n                                    <td key={modelId}>\r\n                                        <h3>{modelId}</h3>\r\n                                        <Fretboard\r\n                                            {...getFretboardProps(\r\n                                                instance,\r\n                                                voicingId ? VOICING_PRESET_MAP.get(voicingId) : undefined,\r\n                                                undefined,\r\n                                                undefined,\r\n                                                getColor\r\n                                            )}\r\n                                            fretRange={[1, 14]}\r\n                                        />\r\n                                    </td>\r\n                                );\r\n                            })}\r\n                        </tr>\r\n                        <tr>\r\n                            {ArrayUtils.rotate([...minorItems], 1).map(item => {\r\n                                const { model, modelId, rootId, voicingId } = item as any;\r\n                                const instance = new model(modelId, { root: Note.fromId(rootId) });\r\n\r\n                                return (\r\n                                    <td key={modelId}>\r\n                                        <h3>{modelId}</h3>\r\n                                        <Fretboard\r\n                                            {...getFretboardProps(\r\n                                                instance,\r\n                                                voicingId ? VOICING_PRESET_MAP.get(voicingId) : undefined,\r\n                                                undefined,\r\n                                                undefined,\r\n                                                getColor\r\n                                            )}\r\n                                            fretRange={[1, 14]}\r\n                                        />\r\n                                    </td>\r\n                                );\r\n                            })}\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </Card>\r\n        </StyledCAGEDPage>\r\n    );\r\n};\r\n\r\nexport default CAGEDPage;\r\n","import ChordProgressionsPage from \"../../../components/pages/dev/ChordProgressionsPage\";\r\n\r\nexport default ChordProgressionsPage;\r\n"],"names":["StyledCAGEDPage","styled","StyledPageBody","StyledCard","StyledInputRow","useState","NOTE_PRESET_MAP","NoteId","rootPreset","setRootPreset","root","Note","value","majorScale","Scale","ScaleId","minorScale","majorItems","model","Chord","modelId","ChordId","rootId","notes","voicingId","minorItems","getColor","ivl","note","pod","PageTitle","title","InputRow","label","DropdownInput","options","NOTE_PRESETS","setValue","p","Card","map","item","instance","key","Fretboard","getFretboardProps","VOICING_PRESET_MAP","undefined","fretRange","ArrayUtils"],"sourceRoot":""}