{"version":3,"file":"7c813b7b1f55e3ffe9c24d80cf0d962e08e2a725-f78eed157de66f907039.js","mappings":"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","sources":["webpack://play-what/./src/components/_shared/inputs/DropdownInput.tsx","webpack://play-what/./src/components/_shared/layout/PageBody.tsx","webpack://play-what/./src/components/_shared/layout/PageTitle.tsx","webpack://play-what/./src/components/_shared/ui/Card.tsx","webpack://play-what/./src/components/_shared/ui/InputRow.tsx","webpack://play-what/./src/core/models/Chord.ts","webpack://play-what/./src/core/models/Interval.ts","webpack://play-what/./src/core/models/PodList.ts","webpack://play-what/./src/core/models/Scale.ts","webpack://play-what/./src/viewers/fretboard/Fretboard.styles.tsx","webpack://play-what/./src/viewers/fretboard/FretLabel.tsx","webpack://play-what/./src/viewers/fretboard/Fretboard.tsx","webpack://play-what/./src/viewers/fretboard/Fretboard.tuning.ts","webpack://play-what/./src/viewers/fretboard/Fretboard.utils.ts","webpack://play-what/./src/viewers/fretboard/Fretboard.voicing.ts"],"sourcesContent":["import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nconst StyledDropdownInput = styled.select`\r\n\tfont-size: 110%;\r\n    min-width: 128px;\r\n\r\n\tpadding: 4px 8px;\r\n\r\n    cursor: pointer;\r\n    border-radius: 4px;\r\n\r\n\toption {\r\n\t\tcursor: pointer;\r\n\t}\r\n`;\r\n\r\ninterface IDropdownInputProps {\r\n\tvalue: any;\r\n\tsetValue: Function;\r\n\toptions: any[];\r\n\tidProperty?: string;\r\n\tdisplayProperty?: string;\r\n}\r\n\r\nconst DropdownInput: React.FC<IDropdownInputProps> = props => {\r\n\tconst { value, setValue, options, idProperty, displayProperty } = props;\r\n\r\n\treturn (\r\n\t\t<StyledDropdownInput\r\n\t\t\tclassName='dropdown-input'\r\n\t\t\tonChange={e => setValue(options[e.target.selectedIndex], e.target.selectedIndex)}\r\n\t\t\tvalue={value ? value[idProperty || 'id'] : ''}\r\n\t\t>\r\n\t\t\t{(options || []).map((v, i) => (\r\n\t\t\t\t<option key={i} value={v[idProperty || 'id']}>{displayProperty ? v[displayProperty] : v.name}</option>\r\n\t\t\t))}\r\n\t\t</StyledDropdownInput>\r\n\t);\r\n}\r\n\r\nexport default DropdownInput;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledPageBody = styled.div`\r\n\twidth: 100%;\r\n\t//max-width: 1920px;\r\n\tmax-width: 1024px;\r\n\tmin-height: calc(100vh - 96px);\r\n    \r\n\tmargin: auto;\r\n\tpadding: 16px;\r\n`\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledPageTitle = styled.div`\r\n    width: 100%;\r\n\r\n    .header {\r\n        border-bottom: 1px solid ${({ theme }) => theme.utils.border};    \r\n        width: 100%;\r\n        margin: auto;\r\n        padding-bottom: 8px;\r\n        @media(min-width: 512px) {\r\n            padding-bottom: 16px;\r\n        }\r\n\r\n        > h1 {\r\n            width: 100%;\r\n            font-size: 150%;\r\n            @media(min-width: 512px) {\r\n                font-size: 300%;\r\n            }\r\n            text-align: left;\r\n            color: ${({ theme }) => theme.text.primary};;\r\n        }\r\n\r\n        > h2 {\r\n            margin-top: 4px;\r\n            width: 100%;\r\n            text-align: left;\r\n            color: ${({ theme }) => theme.text.secondary};;\r\n            font-size: 80%;\r\n            @media(min-width: 512px) {\r\n                font-size: 100%;\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst PageTitle: React.FC<any> = ({ title, subtitle, children }) => {\r\n    return (\r\n        <StyledPageTitle>\r\n            <div className=\"header\">\r\n                <h1>{title}</h1>\r\n                {subtitle && <h2>{subtitle}</h2>}\r\n            </div>\r\n            {children}\r\n        </StyledPageTitle>\r\n    );\r\n};\r\n\r\nexport default PageTitle;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledCard = styled.div`\r\n    background: ${props => props.theme.surface.card};\r\n    width: 100%;\r\n    border-radius: 16px;\r\n    padding: 16px;\r\n\r\n    .header {\r\n        margin-bottom: 16px;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n    }\r\n`;\r\n\r\nconst Card: React.FC<any> = ({ title, action, children, ...rest }) => {\r\n    return (\r\n        <StyledCard {...rest}>\r\n            {title &&\r\n                <div className=\"header\">\r\n                    <h2>{title}</h2>\r\n                    {action}\r\n                </div>\r\n            }\r\n            {children}\r\n        </StyledCard >\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledInputRow = styled.div`\r\n    display: flex;\r\n    align-items: flex-start;\r\n    flex-direction: column;\r\n\r\n    ${props => props.$y ? '' : `\r\n        @media(min-width: 512px) {\r\n            align-items: center;\r\n            flex-direction: row;\r\n            justify-content: space-between;\r\n            //margin-bottom: 8px;\r\n        }\r\n    `}\r\n\r\n    > label {\r\n        color: ${({ theme }) => theme.dark3};\r\n        font-weight: bold;\r\n        margin: 8px;\r\n    }\r\n\r\n    > div {\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\nconst InputRow = ({ label, children, y = false, ...rest }) => {\r\n    return (\r\n        <StyledInputRow $y={y} {...rest}>\r\n            <label>{label}</label>\r\n            <div>\r\n                {children}\r\n            </div>\r\n        </StyledInputRow>\r\n    );\r\n}\r\n\r\nexport default InputRow;\r\n","import Model from './Model';\r\nimport { ChordId, IPod, ModelId } from './Model.constants';\r\nimport { CHORD_PRESETS, CHORD_PRESET_MAP } from './Model.presets';\r\nimport { arePodListsEqual, reducePodList } from './Pod.static';\r\nimport PodList from './PodList';\r\n\r\nconst getSymbol = (degree, quality) => {\r\n    switch (degree) {\r\n        case 1: {\r\n            switch (quality) {\r\n                case ChordId.MajTriad:\r\n                case ChordId.Maj7:\r\n                    return 'I';\r\n                case ChordId.MinTriad:\r\n                case ChordId.Min7:\r\n                    return 'i';\r\n                case ChordId.Dom7:\r\n                    return 'I⁷';\r\n                case ChordId.HalfDim7:\r\n                    return 'i ̽';\r\n                case ChordId.AugTriad:\r\n                    return 'I+';\r\n                case ChordId.DimTriad:\r\n                    return 'i°';\r\n            }\r\n        }\r\n        case 2: {\r\n            switch (quality) {\r\n                case ChordId.MajTriad:\r\n                case ChordId.Maj7:\r\n                    return 'II';\r\n                case ChordId.MinTriad:\r\n                case ChordId.Min7:\r\n                    return 'ii';\r\n                case ChordId.Dom7:\r\n                    return 'II⁷';\r\n                case ChordId.HalfDim7:\r\n                    return 'ii ̽';\r\n                case ChordId.AugTriad:\r\n                    return 'II+';\r\n                case ChordId.DimTriad:\r\n                    return 'ii°';\r\n            }\r\n        }\r\n        case 3: {\r\n            switch (quality) {\r\n                case ChordId.MajTriad:\r\n                case ChordId.Maj7:\r\n                    return 'III';\r\n                case ChordId.MinTriad:\r\n                case ChordId.Min7:\r\n                    return 'iiii';\r\n                case ChordId.Dom7:\r\n                    return 'III⁷';\r\n                case ChordId.HalfDim7:\r\n                    return 'iii ̽';\r\n                case ChordId.AugTriad:\r\n                    return 'III+';\r\n                case ChordId.DimTriad:\r\n                    return 'iii°';\r\n            }\r\n        }\r\n        case 4: {\r\n            switch (quality) {\r\n                case ChordId.MajTriad:\r\n                case ChordId.Maj7:\r\n                    return 'IV';\r\n                case ChordId.MinTriad:\r\n                case ChordId.Min7:\r\n                    return 'iv';\r\n                case ChordId.Dom7:\r\n                    return 'IV⁷';\r\n                case ChordId.HalfDim7:\r\n                    return 'iv ̽';\r\n                case ChordId.AugTriad:\r\n                    return 'IV+';\r\n                case ChordId.DimTriad:\r\n                    return 'iv°';\r\n            }\r\n        }\r\n        case 5: {\r\n            switch (quality) {\r\n                case ChordId.MajTriad:\r\n                case ChordId.Maj7:\r\n                    return 'V';\r\n                case ChordId.MinTriad:\r\n                case ChordId.Min7:\r\n                    return 'v';\r\n                case ChordId.Dom7:\r\n                    return 'V⁷';\r\n                case ChordId.HalfDim7:\r\n                    return 'v ̽';\r\n                case ChordId.AugTriad:\r\n                    return 'V+';\r\n                case ChordId.DimTriad:\r\n                    return 'v°';\r\n            }\r\n        }\r\n        case 6: {\r\n            switch (quality) {\r\n                case ChordId.MajTriad:\r\n                case ChordId.Maj7:\r\n                    return 'VI';\r\n                case ChordId.MinTriad:\r\n                case ChordId.Min7:\r\n                    return 'vi';\r\n                case ChordId.Dom7:\r\n                    return 'VI⁷';\r\n                case ChordId.HalfDim7:\r\n                    return 'vi ̽';\r\n                case ChordId.AugTriad:\r\n                    return 'VI+';\r\n                case ChordId.DimTriad:\r\n                    return 'vi°';\r\n            }\r\n        }\r\n        case 7: {\r\n            switch (quality) {\r\n                case ChordId.MajTriad:\r\n                case ChordId.Maj7:\r\n                    return 'VII';\r\n                case ChordId.MinTriad:\r\n                case ChordId.Min7:\r\n                    return 'vii';\r\n                case ChordId.Dom7:\r\n                    return 'VII⁷';\r\n                case ChordId.HalfDim7:\r\n                    return 'vii ̽';\r\n                case ChordId.AugTriad:\r\n                    return 'VII+';\r\n                case ChordId.DimTriad:\r\n                    return 'vii°';\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default class Chord extends PodList {\r\n\r\n    modelId = ModelId.Chord;\r\n\r\n    constructor(id: ChordId, options = undefined) {\r\n        super(CHORD_PRESET_MAP, id, options);\r\n    }\r\n\r\n    getNumeral(n) {\r\n        return getSymbol(n, this.id);\r\n    }\r\n\r\n    static fromValue = (value: IPod[]) => Model.fromValue(CHORD_PRESETS, Chord, value, arePodListsEqual, reducePodList);\r\n}\r\n","import { DEFAULT_DEGREE_COLOR_SCHEME } from \"../theory/Degree.constants\";\r\nimport TuningUtils from \"../tuning/Tuning.utils\";\r\nimport Model from \"./Model\";\r\nimport { IntervalId, INTERVAL_QUALITY, IPod } from './Model.constants';\r\nimport { CHORD_PRESETS, CORE_INTERVALS, INTERVAL_PRESETS, INTERVAL_PRESET_MAP, SCALE_PRESETS } from './Model.presets';\r\nimport Pod from \"./Pod\";\r\nimport { arePodsEqual, listContainsSubset, reducePod } from \"./Pod.static\";\r\n\r\nexport default class IntervalSpan extends Pod {\r\n\r\n    id: IntervalId;\r\n    offset: number;\r\n\r\n    constructor(id: IntervalId) {\r\n        super(INTERVAL_PRESET_MAP.get(id));\r\n    }\r\n\r\n    static fromValue = (value: IPod) => Model.fromValue(INTERVAL_PRESETS, IntervalSpan, value, arePodsEqual, reducePod);\r\n\r\n    getColor(): string | undefined {\r\n        return this.equals(new IntervalSpan(IntervalId.P1)) ?\r\n            'red' : '#333';\r\n\r\n        return DEFAULT_DEGREE_COLOR_SCHEME[this.pod[1]];\r\n    }\r\n\r\n    getName() {\r\n        const reduced = reducePod(this.pod);\r\n\r\n        const [noteIndex, d] = reduced;\r\n        const degreeIntervals = CORE_INTERVALS[d];\r\n        if (!degreeIntervals) return '?';\r\n\r\n        const pIvl = degreeIntervals[0];\r\n        const loIvl = pIvl;\r\n        const hiIvl = degreeIntervals[degreeIntervals.length - 1];\r\n\r\n        // determine core interval and quality\r\n        let ivl = null;\r\n        let quality = null;\r\n        if (degreeIntervals.length === 1) {\r\n            ivl = pIvl; // perfect\r\n            quality = INTERVAL_QUALITY.perfect;\r\n        }\r\n        else if (noteIndex <= loIvl.value[0]) {\r\n            ivl = loIvl; // minor\r\n            quality = INTERVAL_QUALITY.min;\r\n        }\r\n        else if (noteIndex >= hiIvl.value[0]) {\r\n            ivl = hiIvl; // major\r\n            quality = INTERVAL_QUALITY.maj;\r\n        }\r\n\r\n        const offset = ivl.value[0] - reduced[0];\r\n\r\n        this.offset = offset;\r\n\r\n        if (offset === 0) return `${quality.symbol}${d + 1}`;\r\n        else if (offset > 0) quality = INTERVAL_QUALITY.dim; // dim\r\n        else if (offset < 0) quality = INTERVAL_QUALITY.aug; // aug\r\n\r\n        const count = Math.abs(offset);\r\n        const qualityStr = quality.symbol.repeat(count);\r\n\r\n        const value = `${qualityStr}${d + 1}`;\r\n\r\n        /*if (isExtended) {\r\n            console.log('x', value);\r\n            if (value === 'm2') value = 'b9'\r\n            else if (value === 'M2') value = '9'\r\n            else if (value === 'm3') value = '#9'\r\n            else if (value === 'M3') value = 'b11'\r\n            else if (value === 'P4') value = '11'\r\n            else if (value === 'A4' || value === 'd5') value = '#11'\r\n            else if (value === 'm6') value = 'b13'\r\n            else if (value === 'M6') value = '13'\r\n            else if (value === 'm7') value = '#13'\r\n        }*/\r\n\r\n        return value;\r\n    }\r\n\r\n    getRatio() {\r\n        const [p] = this.pod;\r\n\r\n        const baseline = TuningUtils.getFrequency(0);\r\n        const compareTo = TuningUtils.getFrequency(p);\r\n\r\n        const ratio = compareTo / baseline;\r\n\r\n        return `1:${ratio.toFixed(2)}`;\r\n    }\r\n\r\n    isInSuperset(superset: IPod[]) {\r\n        if (superset.length <= 1) return false;\r\n        return listContainsSubset(superset, [this.pod]);\r\n    }\r\n\r\n    getSupersets() {\r\n        const result = [];\r\n\r\n        const chords = CHORD_PRESETS.filter(preset =>\r\n            this.isInSuperset(preset.value)\r\n        );\r\n\r\n        if (chords.length) {\r\n            result.push({\r\n                modelName: 'Chords',\r\n                values: chords\r\n            });\r\n        }\r\n\r\n        const scales = SCALE_PRESETS.filter(preset =>\r\n            this.isInSuperset(preset.value)\r\n        );\r\n\r\n        if (scales.length) {\r\n            result.push({\r\n                modelName: 'Scales',\r\n                values: scales\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n}\r\n","import IntervalSpan from './Interval';\r\nimport Model from './Model';\r\nimport { ChordId, IPod, ModelId, ScaleId } from './Model.constants';\r\nimport { CHORD_PRESETS, SCALE_PRESETS } from './Model.presets';\r\nimport Note from './Note';\r\nimport { addPods, arePodListsEqual, getIndexOfPodAtPitch, listContainsSubset } from './Pod.static';\r\n\r\nexport interface IPodListOptions {\r\n    root?: Note;\r\n}\r\n\r\nexport default class PodList extends Model {\r\n\r\n    modelId: ModelId | undefined;\r\n    id: ChordId | ScaleId;\r\n    root: Note;\r\n    podList: IPod[];\r\n    intervals: IntervalSpan[];\r\n    notePods?: IPod[];\r\n    notes?: Note;\r\n\r\n    constructor(presetMap, presetId: ChordId | ScaleId, options?: IPodListOptions) {\r\n        super();\r\n\r\n        const preset = presetMap.get(presetId);\r\n        if (!preset) throw new Error(`Unknown presetId: ${presetId}`);\r\n\r\n        this.modelId = preset.modelId;\r\n        this.id = preset.id;\r\n        this.name = preset.name;\r\n        this.tags = preset.tags;\r\n        this.podList = preset.value;\r\n        this.intervals = preset.value.map(pod => IntervalSpan.fromValue(pod));\r\n\r\n        if (options && options.root) {\r\n            this.applyRoot(options.root);\r\n        }\r\n    }\r\n\r\n    equals(B: PodList) {\r\n        return arePodListsEqual(this.podList, B.podList);\r\n    }\r\n\r\n    getName = () => {\r\n        return `${this.root ? `${this.root.name} ` : ''}${this.name}`;\r\n    }\r\n\r\n    getShortName = () => {\r\n        const name = this.name\r\n            .replace('Major', 'Maj')\r\n            .replace('Minor', 'Min')\r\n            .replace('Augmented', 'Aug')\r\n            .replace('Diminished', 'Dim')\r\n            .replace('Suspended', 'Sus')\r\n            .replace('Dominant', 'Dom')\r\n            .replace('st', '')\r\n            .replace('nd', '')\r\n            .replace('rd', '')\r\n            .replace('th', '')\r\n            .replace('Pentatonic', 'Pent');\r\n\r\n        return name;\r\n    }\r\n\r\n    applyRoot(root: Note) {\r\n        let notes;\r\n        let notePods;\r\n        try {\r\n            notePods = this.intervals.map(ivl => addPods(ivl.pod, root.pod));\r\n            notes = notePods.map(pod => new Note(pod));\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n            throw new Error('Unable to apply root');\r\n        }\r\n        this.root = root;\r\n        this.notes = notes;\r\n        this.notePods = notePods;\r\n        this.name = this.getName();\r\n        return this;\r\n    }\r\n\r\n    getIntervalListString(): string {\r\n        const nameArr = this.intervals.map(ivl => ivl.getName());\r\n        return nameArr.join(', ');\r\n    }\r\n\r\n    isInSuperset(superset: IPod[]) {\r\n        if (superset.length <= this.podList.length) return false;\r\n        return listContainsSubset(superset, this.podList);\r\n    }\r\n\r\n    containsSubset(subset: IPod[]) {\r\n        if (subset.length >= this.podList.length) return false;\r\n        return listContainsSubset(this.podList, subset);\r\n    }\r\n\r\n    getSubchords() {\r\n        return CHORD_PRESETS.filter(preset =>\r\n            this.containsSubset(preset.value)\r\n        );\r\n    }\r\n\r\n    getSuperchords() {\r\n        return CHORD_PRESETS.filter(preset =>\r\n            this.isInSuperset(preset.value)\r\n        );\r\n    }\r\n\r\n    getSubscales() {\r\n        return SCALE_PRESETS.filter(preset =>\r\n            this.containsSubset(preset.value)\r\n        );\r\n    }\r\n\r\n    getSuperscales() {\r\n        return SCALE_PRESETS.filter(preset =>\r\n            this.isInSuperset(preset.value)\r\n        );\r\n    }\r\n\r\n    getPreview() {\r\n        return this.getIntervalListString();\r\n    }\r\n\r\n    tryGetPodPairAtPitch(noteIndex: number): [IntervalSpan, Note] {\r\n        const index = getIndexOfPodAtPitch(this.notePods, noteIndex, false);\r\n\r\n        if (index == null) return [undefined, undefined];\r\n\r\n        return [\r\n            this.intervals[index],\r\n            this.notes[index]\r\n        ];\r\n    }\r\n}\r\n","import IntervalSpan from '@pw-core/models/Interval';\r\nimport ArrayUtils from '../general/Array.utils';\r\nimport NumberUtils from '../general/Number.utils';\r\nimport Chord from './Chord';\r\nimport Model from './Model';\r\nimport { IntervalId, IPod, ModelId, ScaleId, ScaleTag } from './Model.constants';\r\nimport { SCALE_PRESETS, SCALE_PRESET_MAP } from './Model.presets';\r\nimport { arePodListsEqual, reducePodList, subtractPods } from './Pod.static';\r\nimport PodList from './PodList';\r\n\r\nexport default class Scale extends PodList {\r\n\r\n    modelId = ModelId.Scale;\r\n\r\n    constructor(id: ScaleId, options = undefined) {\r\n        super(SCALE_PRESET_MAP, id, options);\r\n    }\r\n\r\n    static fromValue = (value: IPod[]) => Model.fromValue(SCALE_PRESETS, Scale, value, arePodListsEqual, reducePodList);\r\n\r\n    getMode(d) {\r\n        let rotated = [...this.podList];\r\n        rotated = ArrayUtils.rotate(rotated, d);\r\n        for (let i = (this.podList.length - d); i < rotated.length; i++) {\r\n            const curPod = rotated[i];\r\n            rotated[i] = [curPod[0] + 12, curPod[1] + 7];\r\n        }\r\n        // Get difference between each interval\r\n        const newPods: IPod[] = [[0, 0]];\r\n        const newIntervals = [new IntervalSpan(IntervalId.P1)];\r\n        for (let i = 0; i < rotated.length - 1; i++) {\r\n            const newPod = subtractPods(rotated[i + 1], rotated[0])\r\n            newPods.push(newPod);\r\n            const newIvl = IntervalSpan.fromValue(newPod);\r\n            newIntervals.push(newIvl);\r\n        }\r\n        const mode = Scale.fromValue(newPods);\r\n\r\n        /*if (this.root) {\r\n            numeral.applyRoot(this.notes[d]);\r\n            console.log('dpb num root', numeral);\r\n        }*/\r\n        return mode;\r\n    };\r\n\r\n    getAllModes() {\r\n        const modes = [];\r\n        if (this.tags.includes(ScaleTag.Diatonic) ||\r\n            this.tags.includes(ScaleTag.Pentatonic) ||\r\n            this.tags.includes(ScaleTag.MelodicMode) ||\r\n            this.tags.includes(ScaleTag.HarmonicMode)\r\n        ) {\r\n            for (let i = 0; i < this.podList.length; i++) {\r\n                modes.push(this.getMode(i));\r\n            }\r\n        }\r\n        return modes;\r\n    };\r\n\r\n    getNumeral(d) {\r\n        // Get every other interval\r\n        const curIntervals = [];\r\n        for (let i = 0; i < this.podList.length; i = i + 2) {\r\n            const curD = NumberUtils.moduloSum(d, i, this.podList.length);\r\n            const curIvl = this.intervals[curD];\r\n            curIntervals.push(curIvl);\r\n        }\r\n        // Get difference between each interval\r\n        const newPods: IPod[] = [[0, 0]];\r\n        //const newIntervals = [new IntervalSpan(IntervalId.P1)];\r\n        for (let i = 0; i < curIntervals.length - 1; i++) {\r\n            const newPod = subtractPods(curIntervals[i + 1].pod, curIntervals[0].pod)\r\n            newPods.push(newPod);\r\n            //const newIvl = IntervalSpan.fromValue(newPod);\r\n            //newIntervals.push(newIvl);\r\n        }\r\n        const numeral = Chord.fromValue(newPods);\r\n        if (this.root) {\r\n            numeral.applyRoot(this.notes[d]);\r\n        }\r\n        return numeral;\r\n    };\r\n\r\n    getAllNumerals() {\r\n        const numerals = [];\r\n        if (this.tags.includes(ScaleTag.Diatonic)) {\r\n            for (let i = 0; i < this.podList.length; i++) {\r\n                numerals.push(this.getNumeral(i));\r\n            }\r\n        }\r\n        return numerals;\r\n    };\r\n}\r\n","import styled from 'styled-components';\r\n\r\nconst StyledFretboard = styled.div`\r\n    display: inline-grid;\r\n\twidth: 100%;\r\n\tbackground-image: radial-gradient(ellipse, #E8DBB8 0%, #D0B27C 100%);\r\n\r\n\tfont-size: 90%;\r\n\t\r\n\tmargin: 16px 0;\r\n\r\n    .fret {\r\n        display: inline-flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        position: relative;\r\n        border-right: 2px solid darkgrey;\r\n    }\r\n\r\n    .fret.open {\r\n        border-right: 3px solid grey;\r\n        background-color: #D0B27C;;\r\n    }\r\n\r\n    /* Used to maintain aspect ratio */\r\n\r\n    .fret::before {\r\n        content: \"\";\r\n        display: block;\r\n        height: 0;\r\n        width: 0;\r\n        margin-top: calc(1/2 * 100%);\r\n    }\r\n\r\n    /* Fret String */\r\n\r\n    .fret-string {\r\n        border-top: 1px solid grey;\r\n        width: 100%;\r\n    }\r\n\r\n    /* Fret Numbers */\r\n\r\n    .fret-number {\r\n        position: absolute;\r\n        bottom: 100%;\r\n    }\r\n\r\n    /* Fret Dots */\r\n\r\n    .fret-dots {\r\n        position: absolute;\r\n        top: 95%;\r\n        font-size: 16px;\r\n        white-space: nowrap;\r\n    }\r\n\r\n    .fret-number, .fret-dots {\r\n        color: #888;\r\n    }\r\n`;\r\n\r\nexport default StyledFretboard;\r\n","\r\nimport * as React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { IFretLabelProps } from \"./Fretboard.utils\";\r\n\r\nconst StyledFretLabel = styled.div`\r\n\tposition: absolute;\r\n\theight: 60%;\r\n\taspect-ratio: 1;\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\tborder-radius: 100%;\r\n\tbackground-color: ${({ $bgColor }) => $bgColor ? $bgColor : 'transparent'};\r\n\tcolor: ${({ $fgColor }) => $fgColor ? $fgColor : ''};\r\n\r\n\tcursor: pointer;\r\n\t&:hover {\r\n\t\theight: 80%;\r\n\t}\r\n`;\r\n\r\n\r\nconst FretLabel: React.FC<IFretLabelProps> = ({ color, freq }) => {\r\n\r\n\tlet fgColor = 'white';\r\n\r\n\treturn (\r\n\t\t<StyledFretLabel $bgColor={color} $fgColor={fgColor} onClick={null} className=\"fret-label\">\r\n\t\t\t{null}\r\n\t\t</StyledFretLabel>\r\n\t);\r\n};\r\n\r\nexport default FretLabel;\r\n","import * as React from \"react\";\r\nimport StyledFretboard from \"./Fretboard.styles\";\r\nimport { DEFAULT_FRETBOARD_PROPS, getDotsForFret, getFretRatios, IFretboardProps, IFretProps } from \"./Fretboard.utils\";\r\nimport FretLabel from \"./FretLabel\";\r\n\r\nexport const Fret: React.FC<IFretProps> = props => {\r\n\r\n\tconst { tuning, stringIndex, fretIndex, showFretNumbers, showFretDots, getFretLabelProps } = props;\r\n\r\n\tconst classes = ['fret'];\r\n\tif (fretIndex === 0)\r\n\t\tclasses.push('open');\r\n\r\n\tconst isLowString = stringIndex === tuning.length - 1;\r\n\tconst isHighString = stringIndex === 0;\r\n\r\n\tconst fretLabelProps = getFretLabelProps ? getFretLabelProps(stringIndex, fretIndex, tuning) : {};\r\n\r\n\treturn (\r\n\t\t<div className={classes.join(' ')}>\r\n\t\t\t<div className=\"fret-number\">\r\n\t\t\t\t{showFretNumbers && isHighString && fretIndex > 0 && fretIndex}\r\n\t\t\t</div>\r\n\t\t\t<div className='fret-string' />\r\n\t\t\t<FretLabel {...fretLabelProps} />\r\n\t\t\t<div className=\"fret-dots\">\r\n\t\t\t\t{showFretDots && isLowString && fretIndex > 0 && getDotsForFret(fretIndex)}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst getFrets = (props: IFretboardProps) => {\r\n\tconst { fretRange, tuning } = props;\r\n\tconst [lo, hi] = fretRange;\r\n\r\n\tconst allFrets = [];\r\n\tfor (let s = 0; s < tuning.length; s++) {\r\n\t\tfor (let f = lo; f <= hi; f++) {\r\n\t\t\tallFrets.push(\r\n\t\t\t\t<Fret\r\n\t\t\t\t\tkey={`s${s}-f${f}`}\r\n\t\t\t\t\tstringIndex={s}\r\n\t\t\t\t\tfretIndex={f}\r\n\t\t\t\t\ttuning={tuning}\r\n\t\t\t\t\t{...props}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\treturn allFrets;\r\n};\r\n\r\nconst Fretboard: React.FC<IFretboardProps> = (userProps) => {\r\n\tconst props = { ...DEFAULT_FRETBOARD_PROPS, ...userProps };\r\n\r\n\tconst [lo, hi] = props.fretRange;\r\n\tconst numFrets = hi - lo + 1;\r\n\tconst numStrings = props.tuning.length;\r\n\tconst gridTemplateColumns = getFretRatios(numFrets).map(n => n + 'fr').join(' ');\r\n\tconst gridTemplateRows = `repeat(${numStrings}, 1fr)`;\r\n\tconst fretboardStyles = {\r\n\t\tgridTemplateColumns,\r\n\t\tgridTemplateRows\r\n\t};\r\n\r\n\treturn (\r\n\t\t<StyledFretboard className='fretboard' style={fretboardStyles}>\r\n\t\t\t{getFrets(props)}\r\n\t\t</StyledFretboard>\r\n\t);\r\n};\r\n\r\nexport default Fretboard;\r\n","import ArrayUtils from \"../../core/general/Array.utils\";\r\n\r\nexport enum TuningId {\r\n    Standard = 'standard',\r\n    StandardBass = 'standard-bass',\r\n    DropD = 'drop-d'\r\n}\r\n\r\nexport interface ITuning {\r\n    id: TuningId;\r\n    name: string;\r\n    value: number[]\r\n}\r\n\r\nconst formatPreset = (id: TuningId, name: string, value: number[]): ITuning => ({\r\n    id,\r\n    name,\r\n    value\r\n});\r\n\r\nexport const TUNING_PRESET_MAP = new Map<TuningId, ITuning>([\r\n    [TuningId.Standard, formatPreset(\r\n        TuningId.Standard,\r\n        'Standard',\r\n        [16, 11, 7, 2, -3, -8] // e B G D A E\r\n    )],\r\n    [TuningId.StandardBass, formatPreset(\r\n        TuningId.StandardBass,\r\n        'Standard Bass',\r\n        [7, 2, -3, -8] // G D A E\r\n    )],\r\n    [TuningId.DropD, formatPreset(\r\n        TuningId.DropD,\r\n        'Drop D',\r\n        [16, 11, 7, 2, -3, -10] // e B G D A D\r\n    )]\r\n]);\r\n\r\nexport const FRETBOARD_TUNING_VALUES = ArrayUtils.mapToArray(TUNING_PRESET_MAP);\r\n","import IntervalSpan from '../../core/models/Interval';\r\nimport Note from '../../core/models/Note';\r\nimport PodList from '../../core/models/PodList';\r\nimport { ITuning, TuningId, TUNING_PRESET_MAP } from './Fretboard.tuning';\r\nimport { IVoicing } from './Fretboard.voicing';\r\n\r\nexport interface IFretLabelProps {\r\n\tnote?: Note;\r\n\tcolor?: string;\r\n\tfreq?: number;\r\n}\r\n\r\nexport interface IFretboardProps {\r\n\tfretRange?: [number, number];\r\n\ttuning?: number[];\r\n\tshowFretDots?: boolean;\r\n\tshowFretNumbers?: boolean;\r\n\tgetFretLabelProps?: (stringIndex: number, fretIndex: number, tuning: number[]) => IFretLabelProps;\r\n}\r\n\r\nexport interface IFretProps extends IFretboardProps {\r\n\tstringIndex: number;\r\n\tfretIndex: number;\r\n}\r\n\r\nexport const DOTTED_FRET_INDICES = [true, false, false, true, false, true, false, true, false, true, false, false];\r\n\r\nexport const FRET_SIZE_RATIO = Math.pow((1 / 2), (1 / 12));\r\n\r\nexport const DEFAULT_FRETBOARD_PROPS: IFretboardProps = {\r\n\tfretRange: [1, 12],\r\n\ttuning: TUNING_PRESET_MAP.get(TuningId.Standard).value,\r\n\tshowFretDots: true,\r\n\tshowFretNumbers: true\r\n};\r\n\r\nexport const getFretRatios = (numFrets: number): number[] => {\r\n\tconst ratios = [];\r\n\tfor (let i = 1; i <= numFrets; i++) {\r\n\t\tratios.push((i <= 1) ? 1 : ratios[i - 2] * FRET_SIZE_RATIO);\r\n\t}\r\n\treturn ratios;\r\n};\r\n\r\nexport const getDotsForFret = (fretNumber: number): string => {\r\n\tconst mod = fretNumber % 12;\r\n\tif (mod === 0)\r\n\t\treturn '• •';\r\n\telse if (DOTTED_FRET_INDICES[mod])\r\n\t\treturn '•';\r\n\treturn '';\r\n};\r\n\r\nconst doesVoicingValueMatch = (d: number, v: number) => {\r\n\treturn d + 1 === v;\r\n}\r\n\r\nconst isIntervalInVoicing = (interval: IntervalSpan, voicing: IVoicing, stringIndex: number) => {\r\n\tif (!voicing) return true;\r\n\tconst v = voicing.value[stringIndex];\r\n\tconst d = interval.getDegree();\r\n\tif (Array.isArray(v)) {\r\n\t\treturn v.some(n => doesVoicingValueMatch(d, n));\r\n\t}\r\n\telse if (typeof v === 'number') {\r\n\t\treturn doesVoicingValueMatch(d, v);\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nconst getFretLabelPropsAnon = (model: PodList, stringIndex: number, fretIndex: number, tuning: number[], voicing?: IVoicing): IFretLabelProps => {\r\n\tconst noteIndex = tuning[stringIndex] + fretIndex;\r\n\tconst [interval, note] = model.tryGetPodPairAtPitch(noteIndex);\r\n\r\n\tif (!note) {\r\n\t\treturn {\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n\tif (!isIntervalInVoicing(interval, voicing, stringIndex)) {\r\n\t\treturn {\r\n\t\t\tcolor: `#00000033`\r\n\t\t}\r\n\t}\r\n\r\n\tconst color = interval.getColor();\r\n\tconst freq = note.getFrequency() as number;\r\n\r\n\treturn {\r\n\t\tcolor,\r\n\t\tfreq\r\n\t}\r\n}\r\n\r\nexport const getFretboardProps = (model: PodList, voicing?: IVoicing, tuning?: ITuning): IFretboardProps => {\r\n\r\n\tlet getFretLabelProps;\r\n\tif (model && model.root) {\r\n\t\tgetFretLabelProps = (stringIndex: number, fretIndex: number, tuning: number[]): IFretLabelProps =>\r\n\t\t\tgetFretLabelPropsAnon(model, stringIndex, fretIndex, tuning, voicing)\r\n\t}\r\n\r\n\treturn {\r\n\t\t...DEFAULT_FRETBOARD_PROPS,\r\n\t\ttuning: tuning ? tuning.value : DEFAULT_FRETBOARD_PROPS.tuning,\r\n\t\tgetFretLabelProps\r\n\t}\r\n}\r\n","import ArrayUtils from \"../../core/general/Array.utils\";\r\n\r\nexport enum VoicingId {\r\n    None = 'None',\r\n    Chord_Triad_CShape_1 = 'Chord_Triad_CShape_1',\r\n    Chord_Triad_AShape_1 = 'Chord_Triad_AShape_1',\r\n    Chord_Triad_GShape_1 = 'Chord_Triad_GShape_1',\r\n    Chord_Triad_EShape_1 = 'Chord_Triad_EShape_1',\r\n    Chord_Triad_DShape_1 = 'Chord_Triad_DShape_1',\r\n    Chord_Sixth_CShape_1 = 'Chord_Sixth_CShape_1',\r\n    Chord_Sixth_AShape_1 = 'Chord_Sixth_AShape_1',\r\n    Chord_Sixth_GShape_1 = 'Chord_Sixth_GShape_1',\r\n    Chord_Sixth_EShape_1 = 'Chord_Sixth_EShape_1',\r\n    Chord_Sixth_DShape_1 = 'Chord_Sixth_DShape_1',\r\n    Chord_Seventh_CShape_1 = 'Chord_Seventh_CShape_1',\r\n    Chord_Seventh_AShape_1 = 'Chord_Seventh_AShape_1',\r\n    Chord_Seventh_GShape_1 = 'Chord_Seventh_GShape_1',\r\n    Chord_Seventh_EShape_1 = 'Chord_Seventh_EShape_1',\r\n    Chord_Seventh_DShape_1 = 'Chord_Seventh_DShape_1',\r\n    Scale_DoubleOctave_CShape_1 = 'Scale_DoubleOctave_CShape_1',\r\n    Scale_DoubleOctave_CShape_2 = 'Scale_DoubleOctave_CShape_2',\r\n    Scale_DoubleOctave_AShape_1 = 'Scale_DoubleOctave_AShape_1',\r\n    Scale_DoubleOctave_GShape_1 = 'Scale_DoubleOctave_GShape_1',\r\n    Scale_DoubleOctave_EShape_1 = 'Scale_DoubleOctave_EShape_1',\r\n    Scale_DoubleOctave_EShape_2 = 'Scale_DoubleOctave_EShape_2',\r\n    Scale_DoubleOctave_DShape_1 = 'Scale_DoubleOctave_DShape_1',\r\n}\r\n\r\nexport interface IVoicing {\r\n    id: VoicingId;\r\n    name: string;\r\n    value: (number | number[])[]\r\n}\r\n\r\nconst formatPreset = (id: VoicingId, name: string, value: (number | number[])[]): IVoicing => ({\r\n    id,\r\n    name,\r\n    value\r\n});\r\n\r\nexport const VOICING_PRESET_MAP = new Map<VoicingId, IVoicing>([\r\n    // Triads\r\n    [VoicingId.Chord_Triad_CShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_CShape_1,\r\n        'C Shape Triad',\r\n        [3, 1, 5, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Triad_AShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_AShape_1,\r\n        'A Shape Triad',\r\n        [5, 3, 1, 5, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Triad_GShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_GShape_1,\r\n        'G Shape Triad',\r\n        [1, 5, 1, 5, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Triad_EShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_EShape_1,\r\n        'E Shape Triad',\r\n        [1, 5, 3, 1, 5, 1]\r\n    )],\r\n    [VoicingId.Chord_Triad_DShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_DShape_1,\r\n        'D Shape Triad',\r\n        [3, 1, 5, 1, null, null]\r\n    )],\r\n    // Sixths\r\n    [VoicingId.Chord_Sixth_CShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_CShape_1,\r\n        'C Shape 6th Chord',\r\n        [3, 6, 5, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Sixth_AShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_AShape_1,\r\n        'A Shape 6th Chord',\r\n        [5, 3, 6, 5, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Sixth_GShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_GShape_1,\r\n        'G Shape 6th Chord',\r\n        [6, 5, 1, 5, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Sixth_EShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_EShape_1,\r\n        'E Shape 6th Chord',\r\n        [1, 5, 3, 6, 5, 1]\r\n    )],\r\n    [VoicingId.Chord_Sixth_DShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_DShape_1,\r\n        'D Shape 6th Chord',\r\n        [3, 6, 5, 1, null, null]\r\n    )],\r\n    // Sevenths\r\n    [VoicingId.Chord_Seventh_CShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_CShape_1,\r\n        'C Shape 7th Chord',\r\n        [3, 7, 5, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Seventh_AShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_AShape_1,\r\n        'A Shape 7th Chord',\r\n        [5, 3, 7, 5, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Seventh_GShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_GShape_1,\r\n        'G Shape 7th Chord',\r\n        [7, 5, 1, 5, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Seventh_EShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_EShape_1,\r\n        'E Shape 7th Chord',\r\n        [1, 5, 3, 7, 5, 1]\r\n    )],\r\n    [VoicingId.Chord_Seventh_DShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_DShape_1,\r\n        'D Shape 7th Chord',\r\n        [3, 7, 5, 1, null, null]\r\n    )],\r\n    // CAGED Scales\r\n    [VoicingId.Scale_DoubleOctave_EShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_EShape_1,\r\n        'E Shape Scale (Locrian)',\r\n        [[1, 2, 3], [6, 7], [3, 4, 5], [7, 1, 2], [4, 5, 6], [1, 2, 3]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_EShape_2, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_EShape_2,\r\n        'E Shape Scale (Ionian)',\r\n        [[7, 1, 2], [5, 6], [2, 3, 4], [6, 7, 1], [3, 4, 5], [1, 2]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_DShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_DShape_1,\r\n        'D Shape Scale (Dorian)',\r\n        [[1, 2, 3], [5, 6, 7], [2, 3, 4], [6, 7, 1], [4, 5], [1, 2, 3]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_CShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_CShape_1,\r\n        'C Shape Scale (Phrygian)',\r\n        [[1, 2, 3], [5, 6, 7], [3, 4], [7, 1, 2], [4, 5, 6], [1, 2, 3]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_CShape_2, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_CShape_2,\r\n        'C Shape Scale (Lydian)',\r\n        [[7, 1, 2], [4, 5, 6], [2, 3], [6, 7, 1], [3, 4, 5], [1, 2]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_AShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_AShape_1,\r\n        'A Shape Scale (Mixolydian)',\r\n        [[1, 2], [5, 6, 7], [2, 3, 4], [6, 7, 1], [3, 4, 5], [1, 2]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_GShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_GShape_1,\r\n        'G Shape Scale (Aeolian)',\r\n        [[1, 2, 3], [5, 6, 7], [2, 3, 4], [7, 1], [4, 5, 6], [1, 2, 3]]\r\n    )]\r\n])\r\n\r\nexport const VOICING_PRESETS = ArrayUtils.mapToArray(VOICING_PRESET_MAP);\r\n"],"names":["StyledDropdownInput","styled","props","value","setValue","options","idProperty","displayProperty","className","onChange","e","target","selectedIndex","map","v","i","key","name","StyledPageBody","StyledPageTitle","theme","utils","border","text","primary","secondary","title","subtitle","children","StyledCard","surface","card","action","rest","StyledInputRow","$y","dark3","label","y","Chord","id","undefined","CHORD_PRESET_MAP","modelId","ModelId","getNumeral","n","degree","quality","ChordId","getSymbol","this","PodList","fromValue","Model","CHORD_PRESETS","arePodListsEqual","reducePodList","IntervalSpan","INTERVAL_PRESET_MAP","getColor","equals","IntervalId","getName","reduced","reducePod","pod","noteIndex","d","degreeIntervals","CORE_INTERVALS","pIvl","loIvl","hiIvl","length","ivl","INTERVAL_QUALITY","offset","symbol","count","Math","abs","repeat","getRatio","p","baseline","TuningUtils","toFixed","isInSuperset","superset","listContainsSubset","getSupersets","result","chords","preset","push","modelName","values","scales","SCALE_PRESETS","Pod","INTERVAL_PRESETS","arePodsEqual","presetMap","presetId","root","getShortName","replace","get","Error","tags","podList","intervals","applyRoot","B","notes","notePods","addPods","Note","console","error","getIntervalListString","join","containsSubset","subset","getSubchords","getSuperchords","getSubscales","getSuperscales","getPreview","tryGetPodPairAtPitch","index","getIndexOfPodAtPitch","Scale","SCALE_PRESET_MAP","getMode","rotated","ArrayUtils","curPod","newPods","newIntervals","newPod","subtractPods","newIvl","getAllModes","modes","includes","ScaleTag","curIntervals","curD","NumberUtils","curIvl","numeral","getAllNumerals","numerals","StyledFretLabel","$bgColor","$fgColor","color","freq","onClick","Fret","tuning","stringIndex","fretIndex","showFretNumbers","showFretDots","getFretLabelProps","classes","isLowString","isHighString","fretLabelProps","getDotsForFret","userProps","DEFAULT_FRETBOARD_PROPS","fretRange","lo","numFrets","numStrings","fretboardStyles","gridTemplateColumns","getFretRatios","gridTemplateRows","style","hi","allFrets","s","f","getFrets","TuningId","formatPreset","TUNING_PRESET_MAP","Map","Standard","StandardBass","DropD","FRETBOARD_TUNING_VALUES","DOTTED_FRET_INDICES","FRET_SIZE_RATIO","pow","ratios","fretNumber","mod","doesVoicingValueMatch","getFretLabelPropsAnon","model","voicing","interval","note","getDegree","Array","isArray","some","isIntervalInVoicing","getFrequency","getFretboardProps","VoicingId","VOICING_PRESET_MAP","Chord_Triad_CShape_1","Chord_Triad_AShape_1","Chord_Triad_GShape_1","Chord_Triad_EShape_1","Chord_Triad_DShape_1","Chord_Sixth_CShape_1","Chord_Sixth_AShape_1","Chord_Sixth_GShape_1","Chord_Sixth_EShape_1","Chord_Sixth_DShape_1","Chord_Seventh_CShape_1","Chord_Seventh_AShape_1","Chord_Seventh_GShape_1","Chord_Seventh_EShape_1","Chord_Seventh_DShape_1","Scale_DoubleOctave_EShape_1","Scale_DoubleOctave_EShape_2","Scale_DoubleOctave_DShape_1","Scale_DoubleOctave_CShape_1","Scale_DoubleOctave_CShape_2","Scale_DoubleOctave_AShape_1","Scale_DoubleOctave_GShape_1","VOICING_PRESETS"],"sourceRoot":""}