{"version":3,"file":"component---src-pages-view-fretboard-tsx-44f6c133df7e7d9e04b9.js","mappings":"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","sources":["webpack://play-what/./src/components/inputs/NumericInput.tsx","webpack://play-what/./src/components/pages/view/CardSection.tsx","webpack://play-what/./src/core/routing/Routing.utils.ts","webpack://play-what/./src/components/pages/view/DetailsCol.tsx","webpack://play-what/./src/components/layout/Modal.tsx","webpack://play-what/./src/components/pages/view/MainCol.tsx","webpack://play-what/./src/components/inputs/ColorSchemeInput.tsx","webpack://play-what/./src/components/pages/view/NotesCol.tsx","webpack://play-what/./src/components/pages/view/TabCard.tsx","webpack://play-what/./src/components/pages/view/useModelQueryParams.tsx","webpack://play-what/./src/components/pages/view/useModelState.tsx","webpack://play-what/./src/components/pages/view/FretboardCol.tsx","webpack://play-what/./src/components/pages/view/FretboardPage.tsx","webpack://play-what/./src/pages/view/fretboard.tsx","webpack://play-what/./src/viewers/fretboard/Fretboard.styles.tsx","webpack://play-what/./src/viewers/fretboard/FretLabel.tsx","webpack://play-what/./src/viewers/fretboard/Fretboard.tsx","webpack://play-what/./src/viewers/fretboard/Fretboard.tuning.ts","webpack://play-what/./src/viewers/fretboard/Fretboard.utils.ts","webpack://play-what/./src/viewers/fretboard/Fretboard.voicing.ts"],"sourcesContent":["import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport Icon from \"../ui/Icon\";\r\nimport ButtonInput from \"./ButtonInput\";\r\n\r\nexport const StyledNumbericInput = styled.div`\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\r\n\tinput, button {\r\n\t\theight: 32px;\r\n\t\tpadding: 0;\r\n\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t}\r\n\r\n\tbutton {\r\n\t\twidth: 32px;\r\n\t\tborder: 1px solid ${({ theme }) => theme.utils.border};\r\n\t\tsvg, svg * {\r\n\t\t\tfill: white;\r\n\t\t}\r\n\r\n\t\tbackground-color: ${({ theme }) => theme.status.interactive};\r\n\t\tcolor: white;\r\n\t\t&:hover {\r\n\t\t\tbackground-color: ${({ theme }) => theme.status.active};\r\n\t\t}\r\n\r\n\t\t:first-child {\r\n\t\t\tborder-right: none;\r\n\t\t\tborder-radius: 8px 0 0 8px;\r\n\t\t}\r\n\t\t:last-child {\r\n\t\t\tborder-left: none;\r\n\t\t\tborder-radius: 0 8px 8px 0\r\n\t\t}\r\n\t}\r\n\r\n\tinput {\r\n\t\twidth: 48px;\r\n\t\tcursor: pointer;\r\n\t\tborder: none;\r\n\t\tfont-weight: bold;\r\n\t\ttext-align: center;\r\n\t\tbackground-color: white;\r\n\t\t&:hover {\r\n\t\t\tbackground-color: ${({ theme }) => theme.status.highlight};\r\n\t\t}\r\n\r\n\t\tborder: 1px solid ${({ theme }) => theme.utils.border};\r\n\t}\r\n    \r\n\tfont-size: 110%;\r\n\tcursor: pointer;\r\n`;\r\n\r\ninterface INumericInputProps {\r\n\tvalue: number;\r\n\tsetValue: (number) => void;\r\n\tmin?: number;\r\n\tmax?: number;\r\n}\r\n\r\nconst NumericInput: React.FC<INumericInputProps> = ({ value, setValue, ...rest }) => {\r\n\tconst onChange = e => setValue(parseInt(e.target.value));\r\n\r\n\tconst onDown = () => {\r\n\t\tlet newVal = value - 1;\r\n\t\tif (typeof rest.min !== 'undefined') {\r\n\t\t\tnewVal = Math.max(rest.min, newVal);\r\n\t\t}\r\n\t\tsetValue(newVal);\r\n\t};\r\n\r\n\tconst onUp = () => {\r\n\t\tlet newVal = value + 1;\r\n\t\tif (typeof rest.max !== 'undefined') {\r\n\t\t\tnewVal = Math.min(rest.max, newVal);\r\n\t\t}\r\n\t\tsetValue(newVal);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<StyledNumbericInput>\r\n\t\t\t<ButtonInput onClick={onDown}><Icon iconId=\"minus\" size={12} /></ButtonInput>\r\n\t\t\t<input type=\"number\" value={value} onChange={null} {...rest} />\r\n\t\t\t<ButtonInput onClick={onUp}><Icon iconId=\"plus\" size={12} /></ButtonInput>\r\n\t\t</StyledNumbericInput>\r\n\t);\r\n}\r\n\r\nexport default NumericInput;\r\n","import styled from 'styled-components';\r\nimport React from \"react\";\r\n\r\nconst StyledCardSection = styled.div`\r\n    h3 {\r\n        text-transform: uppercase;\r\n        font-size: 80%;\r\n        margin-bottom: 8px;\r\n        color: ${props => props.theme.text.secondary};\r\n    }\r\n    & > .content {\r\n        background: ${props => props.theme.surface.bg};\r\n        border-radius: 8px;\r\n        padding: 8px;\r\n    }\r\n`;\r\n\r\nconst CardSection = ({ title, children }) => {\r\n    return (\r\n        <StyledCardSection>\r\n            <h3>{title}</h3>\r\n            <div className=\"content\">\r\n                {children}\r\n            </div>\r\n        </StyledCardSection>\r\n    );\r\n}\r\n\r\nexport default CardSection;\r\n","import { ModelId, ModelType, NoteId } from \"../models/Model.constants\";\r\n\r\nexport const getModelRoute = (modelType: ModelType, modelId: ModelId, rootId?: NoteId) => {\r\n\r\n    const rootSuffix = rootId ? `/root/${rootId}` : '';\r\n\r\n    return `/browse/${modelType}/${modelId}${rootSuffix}`;\r\n}\r\n","import { Link } from \"gatsby\";\r\nimport React from \"react\";\r\nimport styled from 'styled-components';\r\nimport Chord from \"../../../core/models/Chord\";\r\nimport { IModelConfig } from \"../../../core/models/Model.constants\";\r\nimport Scale from \"../../../core/models/Scale\";\r\nimport { getModelRoute } from \"../../../core/routing/Routing.utils\";\r\nimport CardSection from \"./CardSection\";\r\nimport { MODEL_TYPE_OPTIONS } from \"./NotesCol\";\r\n\r\nconst StyledDetailsCol = styled.div`\r\n    display: grid;\r\n    gap: 16px;\r\n    grid-template-columns: 1fr;\r\n    @media(min-width: 512px) {\r\n        grid-template-columns: 1fr 1fr;\r\n    }\r\n    \r\n    .name {\r\n        font-size: 140%;\r\n        display: block;\r\n        padding: 8px;\r\n        \r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        flex-direction: column;\r\n    }\r\n    .info {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        \r\n        .item {\r\n            margin: 8px;\r\n            text-align: center;\r\n            .note {\r\n                font-weight: bold;\r\n                font-size: 120%;\r\n            }\r\n            .interval {\r\n                color: ${props => props.theme.text.secondary};\r\n            }\r\n        }\r\n    }\r\n    .notes, .instrument {\r\n        \r\n        min-height: 128px;\r\n\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        flex-direction: column;\r\n    }\r\n    .inst-name {\r\n        font-weight: bold;\r\n        font-size: 140%;\r\n        text-align: center;\r\n        padding: 8px;\r\n    }\r\n    .tuning {\r\n        font-size: 120%;\r\n        text-align: center;\r\n        color: ${props => props.theme.text.secondary};\r\n    }\r\n`;\r\n\r\nexport interface IDetailsColProps {\r\n    modelType: typeof MODEL_TYPE_OPTIONS[0];\r\n    modelConfig;\r\n    root: IModelConfig | any;\r\n    model: Chord | Scale;\r\n    setModelType?;\r\n    setModelConfig?;\r\n    setRoot?;\r\n    setModel?;\r\n    instrumentName: string;\r\n    instrumentTuning: string;\r\n}\r\n\r\nconst DetailsCol: React.FC<IDetailsColProps> = props => {\r\n\r\n    const { modelType, modelConfig, root, setModelType: _setModelType, setModelConfig: _setModelConfig, setRoot: _setRoot, model, setModel, instrumentName, instrumentTuning } = props;\r\n\r\n    return (\r\n        <StyledDetailsCol>\r\n            <CardSection title=\"Notes\">\r\n                <div className=\"notes\">\r\n                    <Link to={getModelRoute(modelType.id, modelConfig.modelId, root.modelId)}\r\n                        className=\"name\"\r\n                    >{model.name}</Link>\r\n                    <div className=\"info\">\r\n                        {model.notes && model.notes.map((note, i) => (\r\n                            <div key={i} className=\"item\">\r\n                                <div className=\"note\">{note.name}</div>\r\n                                <div className=\"interval\">{model.intervals[i].getName()}</div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </CardSection>\r\n            <CardSection title=\"Instrument\">\r\n                <div className=\"instrument\">\r\n                    <div className=\"inst-name\">{instrumentName}</div>\r\n                    <div className=\"tuning\">{instrumentTuning}</div>\r\n                </div>\r\n            </CardSection>\r\n        </StyledDetailsCol>\r\n    );\r\n};\r\n\r\nexport default DetailsCol;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport ButtonInput from '../inputs/ButtonInput';\r\nimport Card, { StyledCard } from '../ui/Card';\r\nimport Icon from '../ui/Icon';\r\n\r\nconst StyledOverlay = styled.div`\r\n    //width: 100vw;\r\n    //height: 100vw;\r\n    opacity: 0.8;\r\n    background-color: black;\r\n    position: fixed;\r\n    top: 48px;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 3000;\r\n`\r\n\r\nconst StyledContainer = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    position: fixed;\r\n    top: 48px;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 3001;\r\n\r\n    & > ${StyledCard} {\r\n        width: 80%;\r\n        height: 80%;\r\n        position: relative;\r\n        padding: 64px 16px;\r\n\r\n        overflow: auto;\r\n        resize: both;\r\n\r\n        .close {\r\n            position: absolute;\r\n            top: 16px;\r\n            right: 16px;\r\n            background-color: transparent !important;\r\n        }\r\n    }\r\n`\r\n\r\nconst Modal: React.FC<any> = ({ setIsOpen, children, ...rest }) => {\r\n    return (\r\n        <>\r\n            <StyledOverlay />\r\n            <StyledContainer >\r\n                <Card {...rest} draggable=\"true\">\r\n                    <ButtonInput onClick={() => setIsOpen(false)} className=\"close\">\r\n                        <Icon iconId='close' />\r\n                    </ButtonInput>\r\n                    {children}\r\n                </Card>\r\n            </StyledContainer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Modal;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport Modal from \"../../layout/Modal\";\r\n\r\nconst StyledMainCol = styled.div`\r\n    padding: 16px;\r\n    .maximize {\r\n        background-color: transparent !important;\r\n    }\r\n`;\r\n\r\ninterface IMainColProps {\r\n    viewer: any;\r\n    isFullScreen: boolean;\r\n    setIsFullScreen: Function;\r\n}\r\n\r\nconst MainCol: React.FC<IMainColProps> = (props) => {\r\n\r\n    const { viewer, isFullScreen, setIsFullScreen } = props;\r\n\r\n    return (\r\n        <>\r\n            {isFullScreen && (\r\n                <Modal setIsOpen={setIsFullScreen}>\r\n                    <div className=\"resize\">\r\n                        {viewer}\r\n                    </div>\r\n                </Modal>\r\n            )}\r\n            <StyledMainCol>\r\n                {viewer}\r\n            </StyledMainCol>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainCol;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nconst StyledColorSchemeInput = styled.div`\r\n\tpadding: 4px 8px;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-end;\r\n    gap: 4px;\r\n\r\n    & > div {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        gap: 4px;\r\n        font-size: 80%;\r\n        color: ${props => props.theme.text.secondary};\r\n    }\r\n\r\n    input {\r\n        height: 32px;\r\n        width: 32px;\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\ninterface IColorSchemeInputProps {\r\n    value: string[];\r\n    setValue: Function;\r\n    labelFn: Function;\r\n}\r\n\r\nconst ColorSchemeInput: React.FC<IColorSchemeInputProps> = props => {\r\n    const { value, setValue, labelFn } = props;\r\n\r\n    return (\r\n        <StyledColorSchemeInput>\r\n            {value.map((v, i) => (\r\n                <div>\r\n                    <input type=\"color\"\r\n                        value={v}\r\n                        onChange={e => setValue([...value.slice(0, i), e.target.value, ...value.slice(i + 1)])}\r\n                    />\r\n                    <label>\r\n                        {labelFn(i)}\r\n                    </label>\r\n                </div>\r\n            ))}\r\n        </StyledColorSchemeInput>\r\n    );\r\n}\r\n\r\nexport default ColorSchemeInput;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport { ColorScheme, COLOR_SCHEMES, IColorScheme } from \"../../../core/color/Color.utils\";\r\nimport Chord from \"../../../core/models/Chord\";\r\nimport { ChordId, IModelConfig, ModelId, ModelType, NoteId, ScaleId } from \"../../../core/models/Model.constants\";\r\nimport { CHORD_PRESETS, NOTE_PRESETS, SCALE_PRESETS } from \"../../../core/models/Model.presets\";\r\nimport Note from \"../../../core/models/Note\";\r\nimport Scale from \"../../../core/models/Scale\";\r\nimport ColorSchemeInput from \"../../inputs/ColorSchemeInput\";\r\nimport DropdownInput from \"../../inputs/DropdownInput\";\r\nimport InputRow from \"../../ui/InputRow\";\r\nimport CardSection from \"./CardSection\";\r\n\r\nconst StyledNotesCol = styled.div`\r\n    display: grid;\r\n    gap: 16px;\r\n    grid-template-columns: 1fr;\r\n`;\r\n\r\nexport const MODEL_TYPE_OPTIONS = [\r\n    {\r\n        id: ModelType.Chord,\r\n        name: 'Chords',\r\n        value: ModelType.Chord,\r\n        data: CHORD_PRESETS\r\n    },\r\n    {\r\n        id: ModelType.Scale,\r\n        name: 'Scales',\r\n        value: ModelType.Scale,\r\n        data: SCALE_PRESETS\r\n    }\r\n]\r\n\r\nexport interface INotesColProps {\r\n    modelType: typeof MODEL_TYPE_OPTIONS[0];\r\n    modelConfig;\r\n    root: IModelConfig | any;\r\n    model: Chord | Scale;\r\n    setModelType?;\r\n    setModelConfig?;\r\n    setRoot?;\r\n    setModel?;\r\n    colorScheme: IColorScheme;\r\n    setColorScheme;\r\n    colorConfig: string[];\r\n    setColorConfig;\r\n}\r\n\r\nexport const DEFAULT_MODEL_TYPE = MODEL_TYPE_OPTIONS[0];\r\nexport const DEFAULT_MODEL_CONFIG = MODEL_TYPE_OPTIONS[0].data[0];\r\nexport const DEFAULT_ROOT = NOTE_PRESETS[0];\r\n//export const DEFAULT_MODEL = new Chord(DEFAULT_MODEL_CONFIG.modelId, { root: Note.fromId(DEFAULT_ROOT.modelId) })\r\n\r\nexport const getNewModel = (modelType: ModelType, modelId: ModelId, root: NoteId) => {\r\n    let newModel;\r\n    if (modelType === ModelType.Chord) {\r\n        newModel = new Chord(modelId as ChordId, { root: Note.fromId(root) })\r\n    }\r\n    else if (modelType === ModelType.Scale) {\r\n        newModel = new Scale(modelId as ScaleId, { root: Note.fromId(root) })\r\n    }\r\n    return newModel;\r\n}\r\n\r\nconst NotesCol: React.FC<INotesColProps> = props => {\r\n\r\n    const { modelType, modelConfig, root, setModelType: _setModelType, setModelConfig: _setModelConfig, setRoot: _setRoot, model, setModel, colorScheme, setColorScheme, colorConfig, setColorConfig } = props;\r\n    const modelOptions = modelType.data;\r\n\r\n    const setModelType = type => {\r\n        _setModelType(type);\r\n        _setModelConfig(type.data[0])\r\n    }\r\n    const setModelConfig = config => {\r\n        let newModel = getNewModel(config.modelType, config.modelId, root.modelId);\r\n        _setModelConfig(config);\r\n        setModel(newModel);\r\n    }\r\n    const setRoot = newRoot => {\r\n        let newModel = getNewModel(modelConfig.modelType, modelConfig.modelId, newRoot.modelId);\r\n        _setRoot(newRoot);\r\n        setModel(newModel);\r\n    }\r\n\r\n    //console.log('dpb', MODEL_TYPE_OPTIONS, modelType, modelOptions, modelConfig)\r\n\r\n    return (\r\n        <StyledNotesCol>\r\n            <CardSection title=\"Root\" >\r\n                <ul>\r\n                    <li>\r\n                        <InputRow label=\"Key Center\">\r\n                            <DropdownInput value={root} setValue={setRoot} options={NOTE_PRESETS} idProperty=\"modelId\" />\r\n                        </InputRow>\r\n                    </li>\r\n                </ul>\r\n            </CardSection>\r\n            <CardSection title=\"Intervals\" >\r\n                <ul>\r\n                    <li>\r\n                        <InputRow label=\"Model Type\">\r\n                            <DropdownInput value={modelType} setValue={setModelType} options={MODEL_TYPE_OPTIONS} idProperty=\"id\" />\r\n                        </InputRow>\r\n                    </li>\r\n                    <li>\r\n                        <InputRow label=\"Preset\">\r\n                            <DropdownInput value={modelConfig} setValue={setModelConfig} options={modelOptions} idProperty=\"modelId\" />\r\n                        </InputRow>\r\n                    </li>\r\n                </ul>\r\n            </CardSection>\r\n            <CardSection title=\"Colors\" >\r\n                <ul>\r\n                    <li>\r\n                        <InputRow label=\"Color By\">\r\n                            <DropdownInput value={colorScheme} setValue={setColorScheme} options={COLOR_SCHEMES} idProperty=\"id\" />\r\n                        </InputRow>\r\n                    </li>\r\n                    <li>\r\n                        <InputRow label=\"Color Scheme\">\r\n                            <ColorSchemeInput value={colorConfig} setValue={setColorConfig} labelFn={colorScheme.labelFn} />\r\n                        </InputRow>\r\n                    </li>\r\n                </ul>\r\n            </CardSection>\r\n        </StyledNotesCol>\r\n    );\r\n};\r\n\r\nexport default NotesCol;\r\n","import React, { useState } from \"react\";\r\nimport styled from 'styled-components';\r\nimport { StyledCard } from \"../../ui/Card\";\r\n\r\nconst StyledTabCard = styled(StyledCard)`\r\n    padding: 0;\r\n    \r\n    .content {\r\n        padding: 16px;\r\n    }\r\n    .fake-border {\r\n        position: relative;\r\n        width: 100%;\r\n        bottom: 2px;\r\n        border-bottom: 2px solid ${props => props.theme.surface.bg};\r\n    }\r\n    > ul {\r\n        display: flex;\r\n        align-items: center;\r\n        overflow: auto;\r\n        \r\n        button {\r\n            position: relative;\r\n            z-index: 1000;\r\n            padding: 16px 16px 12px;\r\n            appearance: none;\r\n            border: none;\r\n            cursor: pointer;\r\n            background-color: ${props => props.theme.surface.card};\r\n            border-bottom: 2px solid transparent;\r\n            border-radius: 8px 8px 0 0;\r\n            border-bottom: 2px solid ${props => props.theme.surface.bg};\r\n\r\n            @media(min-width: 512px) {\r\n                font-size: 120%;\r\n            }\r\n\r\n            color: ${props => props.theme.text.secondary};\r\n\r\n            &:hover {\r\n                border-bottom: 2px solid  ${props => props.theme.action.interactive};\r\n                color: ${props => props.theme.text.primary};\r\n            }\r\n            \r\n            &.active {\r\n                border-color: ${props => props.theme.action.active};\r\n                font-weight: bold;\r\n                color: ${props => props.theme.text.primary};\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst TabCard: React.FC<any> = ({ tabs }) => {\r\n    const [index, setIndex] = useState(0);\r\n\r\n    return (\r\n        <StyledTabCard>\r\n            <ul>\r\n                {tabs.map((t, i) => (\r\n                    <li key={t.text}>\r\n                        <button\r\n                            type=\"button\"\r\n                            onClick={() => setIndex(i)}\r\n                            className={i === index ? 'active' : ''}\r\n                        >\r\n                            {t.text}\r\n                        </button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            <div className=\"fake-border\" />\r\n            <div className=\"content\">\r\n                {tabs[index].content}\r\n            </div>\r\n        </StyledTabCard>\r\n    );\r\n};\r\n\r\nexport default TabCard;\r\n","import { useQueryParam } from \"use-query-params\";\r\n\r\nconst useModelQueryParams = () => {\r\n    const [qpModelType] = useQueryParam('modelType');\r\n    const [qpModelId] = useQueryParam('modelId');\r\n    const [qpRootId] = useQueryParam('rootId');\r\n\r\n    return [qpModelType, qpModelId, qpRootId];\r\n}\r\n\r\nexport default useModelQueryParams;\r\n","import { useState } from \"react\";\r\nimport { NOTE_PRESETS } from \"../../../core/models/Model.presets\";\r\nimport { DEFAULT_MODEL_CONFIG, DEFAULT_MODEL_TYPE, DEFAULT_ROOT, getNewModel, MODEL_TYPE_OPTIONS } from \"./NotesCol\";\r\n\r\nconst getInitModelType = (qpModelType?: string) => {\r\n    const found = MODEL_TYPE_OPTIONS.find(type => type.id && type.id === qpModelType);\r\n    return found || DEFAULT_MODEL_TYPE;\r\n}\r\n\r\nconst getInitModelConfig = (modelType, qpModelId?: string) => {\r\n    const found = modelType.data.find(preset => preset.modelId === qpModelId);\r\n    return found || DEFAULT_MODEL_CONFIG;\r\n}\r\n\r\nconst getInitRoot = (qpRootId?: string) => {\r\n    const found = NOTE_PRESETS.find(note => note.modelId === qpRootId);\r\n    return found || DEFAULT_ROOT;\r\n}\r\n\r\nexport const useModelState = (initModelType, initModelId, initRootId) => {\r\n    const [modelType, setModelType] = useState(getInitModelType(initModelType));\r\n    const [modelConfig, setModelConfig] = useState(getInitModelConfig(modelType, initModelId));\r\n\r\n    const [root, setRoot] = useState(getInitRoot(initRootId));\r\n    const [model, setModel] = useState(getNewModel(modelType.id, modelConfig.modelId, root.modelId));\r\n\r\n    return {\r\n        modelType,\r\n        setModelType,\r\n        modelConfig,\r\n        setModelConfig,\r\n        root,\r\n        setRoot,\r\n        model,\r\n        setModel\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport { FRETBOARD_TUNING_VALUES, TuningId } from \"../../../viewers/fretboard/Fretboard.tuning\";\r\nimport { DEFAULT_FRETBOARD_PROPS } from \"../../../viewers/fretboard/Fretboard.utils\";\r\nimport { VoicingId, VOICING_PRESETS } from \"../../../viewers/fretboard/Fretboard.voicing\";\r\nimport DropdownInput from \"../../inputs/DropdownInput\";\r\nimport NumericInput from \"../../inputs/NumericInput\";\r\nimport InputRow from \"../../ui/InputRow\";\r\nimport CardSection from \"./CardSection\";\r\n\r\nconst StyledFretboardCol = styled.div`\r\n    display: grid;\r\n    gap: 16px;\r\n    grid-template-columns: 1fr;\r\n`;\r\n\r\nconst VOICING_OPTIONS = [\r\n    {\r\n        id: VoicingId.None,\r\n        name: '---',\r\n        value: undefined\r\n    },\r\n    ...VOICING_PRESETS\r\n];\r\n\r\nexport interface IFretboardColProps {\r\n    voicing;\r\n    tuning;\r\n    fretRange;\r\n    setVoicing;\r\n    setTuning;\r\n    setFretRange;\r\n    model;\r\n}\r\n\r\nexport const DEFAULT_VOICING = VOICING_OPTIONS[0];\r\nexport const DEFAULT_TUNING = FRETBOARD_TUNING_VALUES[0];\r\nexport const DEFAULT_FRET_RANGE = DEFAULT_FRETBOARD_PROPS.fretRange;\r\n\r\nconst FretboardCol: React.FC<IFretboardColProps> = ({ model, voicing, tuning, fretRange, setVoicing, setTuning, setFretRange }) => {\r\n\r\n    const filteredVoicings = VOICING_OPTIONS.filter(v => {\r\n        if (!v.value) return true;\r\n        const containsNonModelIntervals = v.value.some(x => x && !model.intervals.find(ivl => ivl.pod[1] + 1 === x));\r\n        return !containsNonModelIntervals;\r\n    });\r\n\r\n    const [fretLo, fretHi] = fretRange;\r\n\r\n    return (\r\n        <StyledFretboardCol>\r\n            <CardSection title=\"Tuning\" >\r\n                <ul>\r\n                    <li>\r\n                        <InputRow label=\"Preset\">\r\n                            <DropdownInput value={tuning} setValue={setTuning} options={FRETBOARD_TUNING_VALUES} />\r\n                        </InputRow>\r\n                    </li>\r\n                    {tuning.id === TuningId.Standard &&\r\n                        <li>\r\n                            <InputRow label=\"Voicing\">\r\n                                <DropdownInput value={voicing} setValue={setVoicing} options={filteredVoicings} />\r\n                            </InputRow>\r\n                        </li>\r\n                    }\r\n                </ul>\r\n            </CardSection>\r\n            <CardSection title=\"Range\" >\r\n                <ul>\r\n                    <li>\r\n                        <InputRow label=\"Low Fret\">\r\n                            <NumericInput value={fretLo} min={0} max={fretHi} setValue={v => setFretRange([v, fretHi])} />\r\n                        </InputRow>\r\n                    </li>\r\n                    <li>\r\n                        <InputRow label=\"High Fret\">\r\n                            <NumericInput value={fretHi} min={fretLo} max={24} setValue={v => setFretRange([fretLo, v])} />\r\n                        </InputRow>\r\n                    </li>\r\n                </ul>\r\n            </CardSection>\r\n        </StyledFretboardCol>\r\n    );\r\n};\r\n\r\nexport default FretboardCol;\r\n","import React, { useState } from \"react\";\r\nimport styled from 'styled-components';\r\nimport { COLOR_SCHEMES } from \"../../../core/color/Color.utils\";\r\nimport Fretboard from \"../../../viewers/fretboard/Fretboard\";\r\nimport ColumnManager, { StyledColumnManager } from \"../../column-manager/ColumnManager\";\r\nimport ButtonInput from \"../../inputs/ButtonInput\";\r\nimport PageTitle from \"../../layout/PageTitle\";\r\nimport { StyledCard } from \"../../ui/Card\";\r\nimport Icon from \"../../ui/Icon\";\r\nimport DetailsCol from \"./DetailsCol\";\r\nimport FretboardCol, { DEFAULT_FRET_RANGE, DEFAULT_TUNING, DEFAULT_VOICING } from \"./FretboardCol\";\r\nimport MainCol from \"./MainCol\";\r\nimport NotesCol from \"./NotesCol\";\r\nimport TabCard from \"./TabCard\";\r\nimport useModelQueryParams from \"./useModelQueryParams\";\r\nimport { useModelState } from \"./useModelState\";\r\n\r\nconst StyledFretboardPage = styled.div`\r\n    min-height: 95vh;\r\n    padding: 16px;\r\n    .maximize {\r\n        background-color: transparent !important;\r\n    }\r\n\r\n    ${StyledColumnManager} {\r\n        & > div > ${StyledCard}:not(:last-child) {\r\n            margin-bottom: 16px;\r\n        }\r\n    }\r\n\r\n    ${StyledColumnManager} {\r\n        margin-top: 16px;\r\n    }\r\n`;\r\n\r\nconst FretboardPage: React.FC = () => {\r\n\r\n    const [qpModelType, qpModelId, qpRootId] = useModelQueryParams();\r\n    const modelState = useModelState(qpModelType, qpModelId, qpRootId);\r\n    const {\r\n        modelType,\r\n        setModelType,\r\n        modelConfig,\r\n        setModelConfig,\r\n        root,\r\n        setRoot,\r\n        model,\r\n        setModel\r\n    } = modelState;\r\n\r\n    const [voicing, setVoicing] = useState(DEFAULT_VOICING);\r\n    const [tuning, setTuning] = useState(DEFAULT_TUNING);\r\n    const [fretRange, setFretRange] = useState(DEFAULT_FRET_RANGE);\r\n    const [isFullScreen, setIsFullScreen] = useState(false);\r\n    const [colorScheme, _setColorScheme] = useState(COLOR_SCHEMES[1]);\r\n    const [colorConfig, setColorConfig] = useState(colorScheme.defaultConfig);\r\n\r\n    const setColorScheme = cs => { _setColorScheme(cs); setColorConfig(cs.defaultConfig) }\r\n\r\n    const instrumentColProps = {\r\n        model,\r\n        voicing,\r\n        setVoicing,\r\n        tuning,\r\n        setTuning,\r\n        fretRange,\r\n        setFretRange\r\n    }\r\n\r\n    const notesColProps = {\r\n        modelType,\r\n        setModelType,\r\n        modelConfig,\r\n        setModelConfig,\r\n        root,\r\n        setRoot,\r\n        model,\r\n        setModel,\r\n        instrumentName: 'Guitar',\r\n        instrumentTuning: instrumentColProps.tuning.name,\r\n        colorScheme,\r\n        setColorScheme,\r\n        colorConfig,\r\n        setColorConfig\r\n    }\r\n\r\n    const mainColProps = {\r\n        isFullScreen,\r\n        setIsFullScreen,\r\n        viewer: <Fretboard\r\n            {...instrumentColProps}\r\n            {...notesColProps}\r\n            colorMapFn={props => {\r\n                const { stringIndex, fretIndex, tuning, model, voicing } = props;\r\n                const noteIndex = tuning[stringIndex] + fretIndex;\r\n                const [interval, note] = model.tryGetPodPairAtPitch(noteIndex);\r\n\r\n                const cs = COLOR_SCHEMES.find(cs => cs.id === colorScheme.id);\r\n\r\n                return cs && cs.fn(note, colorConfig)\r\n            }}\r\n            tuning={instrumentColProps.tuning.value}\r\n        />\r\n    };\r\n\r\n    return (\r\n        <StyledFretboardPage>\r\n            <PageTitle title=\"Fretboard\" subtitle={model.name}\r\n                action={\r\n                    <ButtonInput className=\"maximize\" onClick={() => setIsFullScreen(true)}>\r\n                        <Icon iconId=\"maximize\" size={24} />\r\n                    </ButtonInput>\r\n                }\r\n            />\r\n            <ColumnManager desktop={[\"1fr\", \"1fr\"]}>\r\n                <MainCol {...mainColProps} />\r\n                <TabCard\r\n                    tabs={[\r\n                        {\r\n                            text: 'Summary',\r\n                            content: <DetailsCol {...notesColProps} />\r\n                        },\r\n                        {\r\n                            text: 'Notes',\r\n                            content: <NotesCol {...notesColProps} />\r\n                        },\r\n                        {\r\n                            text: 'Instrument',\r\n                            content: <FretboardCol {...instrumentColProps} />\r\n                        }\r\n                    ]}\r\n                />\r\n            </ColumnManager>\r\n        </StyledFretboardPage>\r\n    );\r\n};\r\n\r\nexport default FretboardPage;\r\n","import FretboardPage from \"../../components/pages/view/FretboardPage\";\r\n\r\nexport default FretboardPage;\r\n","import styled from 'styled-components';\r\n\r\nconst StyledFretboard = styled.div`\r\n    display: inline-grid;\r\n\twidth: 100%;\r\n\tbackground-image: radial-gradient(ellipse, #E8DBB8 0%, #D0B27C 100%);\r\n\tfont-size: 90%;\r\n\tmargin: 16px 0;\r\n\r\n    .fret {\r\n        display: inline-flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        position: relative;\r\n        border-right: 2px solid darkgrey;\r\n    }\r\n\r\n    .fret.open {\r\n        border-right: 3px solid grey;\r\n        background-color: #D0B27C;;\r\n    }\r\n\r\n    /* Used to maintain aspect ratio */\r\n\r\n    .fret::before {\r\n        content: \"\";\r\n        display: block;\r\n        height: 0;\r\n        width: 0;\r\n        margin-top: calc(1/2 * 100%);\r\n    }\r\n\r\n    /* Fret String */\r\n\r\n    .fret-string {\r\n        border-top: 1px solid grey;\r\n        width: 100%;\r\n    }\r\n\r\n    /* Fret Numbers */\r\n\r\n    .fret-number {\r\n        position: absolute;\r\n        bottom: 100%;\r\n    }\r\n\r\n    /* Fret Dots */\r\n\r\n    .fret-dots {\r\n        position: absolute;\r\n        top: 95%;\r\n        font-size: 16px;\r\n        white-space: nowrap;\r\n    }\r\n\r\n    .fret-number, .fret-dots {\r\n        color: #888;\r\n    }\r\n`;\r\n\r\nexport default StyledFretboard;\r\n","\r\nimport * as React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { IFretProps } from \"./Fretboard.utils\";\r\n\r\nconst StyledFretLabel = styled.div`\r\n\tposition: absolute;\r\n\theight: 60%;\r\n\taspect-ratio: 1;\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\tborder-radius: 100%;\r\n\tbackground-color: ${({ $bgColor }) => $bgColor ? $bgColor : 'transparent'};\r\n\tcolor: ${({ $fgColor }) => $fgColor ? $fgColor : ''};\r\n\r\n\t/*cursor: pointer;\r\n\t&:hover {\r\n\t\theight: 80%;\r\n\t}*/\r\n`;\r\n\r\n\r\nconst FretLabel: React.FC<IFretProps> = props => {\r\n\r\n\tconst bgColor = props.colorMapFn(props);\r\n\r\n\tlet fgColor = 'white';\r\n\r\n\treturn (\r\n\t\t<StyledFretLabel $bgColor={bgColor} $fgColor={fgColor} onClick={null} className=\"fret-label\">\r\n\t\t\t{null}\r\n\t\t</StyledFretLabel>\r\n\t);\r\n};\r\n\r\nexport default FretLabel;\r\n","import * as React from \"react\";\r\nimport StyledFretboard from \"./Fretboard.styles\";\r\nimport { DEFAULT_FRETBOARD_PROPS, getDotsForFret, getFretRatios, IFretboardProps, IFretProps } from \"./Fretboard.utils\";\r\nimport FretLabel from \"./FretLabel\";\r\n\r\nexport const Fret: React.FC<IFretProps> = props => {\r\n\r\n\tconst { tuning, stringIndex, fretIndex, showFretNumbers, showFretDots } = props;\r\n\r\n\tconst classes = ['fret'];\r\n\tif (fretIndex === 0)\r\n\t\tclasses.push('open');\r\n\r\n\tconst isLowString = stringIndex === tuning.length - 1;\r\n\tconst isHighString = stringIndex === 0;\r\n\r\n\treturn (\r\n\t\t<div className={classes.join(' ')}>\r\n\t\t\t<div className=\"fret-number\">\r\n\t\t\t\t{showFretNumbers && isHighString && fretIndex > 0 && fretIndex}\r\n\t\t\t</div>\r\n\t\t\t<div className='fret-string' />\r\n\t\t\t<FretLabel {...props} />\r\n\t\t\t<div className=\"fret-dots\">\r\n\t\t\t\t{showFretDots && isLowString && fretIndex > 0 && getDotsForFret(fretIndex)}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst getFrets = (props: IFretboardProps) => {\r\n\tconst { fretRange, tuning } = props;\r\n\tconst [lo, hi] = fretRange;\r\n\r\n\tconst allFrets = [];\r\n\tfor (let s = 0; s < tuning.length; s++) {\r\n\t\tfor (let f = lo; f <= hi; f++) {\r\n\t\t\tallFrets.push(\r\n\t\t\t\t<Fret\r\n\t\t\t\t\tkey={`s${s}-f${f}`}\r\n\t\t\t\t\tstringIndex={s}\r\n\t\t\t\t\tfretIndex={f}\r\n\t\t\t\t\ttuning={tuning}\r\n\t\t\t\t\t{...props}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\treturn allFrets;\r\n};\r\n\r\nconst Fretboard: React.FC<IFretboardProps> = (userProps) => {\r\n\tconst props = { ...DEFAULT_FRETBOARD_PROPS, ...userProps };\r\n\r\n\tconst [lo, hi] = props.fretRange;\r\n\tconst numFrets = hi - lo + 1;\r\n\tconst numStrings = props.tuning.length;\r\n\tconst gridTemplateColumns = getFretRatios(numFrets).map(n => n + 'fr').join(' ');\r\n\tconst gridTemplateRows = `repeat(${numStrings}, 1fr)`;\r\n\tconst fretboardStyles = {\r\n\t\tgridTemplateColumns,\r\n\t\tgridTemplateRows\r\n\t};\r\n\r\n\treturn (\r\n\t\t<StyledFretboard className='fretboard' style={fretboardStyles}>\r\n\t\t\t{getFrets(props)}\r\n\t\t</StyledFretboard>\r\n\t);\r\n};\r\n\r\nexport default Fretboard;\r\n","import ArrayUtils from \"../../core/general/Array.utils\";\r\nimport Note from '../../core/models/Note';\r\nimport { NoteId } from './../../core/models/Model.constants';\r\n\r\nexport enum TuningId {\r\n    Standard = 'standard',\r\n    StandardSeven = 'standard-seven',\r\n    StandardBass = 'standard-bass',\r\n    Flat = 'flat',\r\n    DoubleFlat = 'double-flat',\r\n    DropD = 'drop-d',\r\n    DADGAD = 'dadgad',\r\n    Banjo = 'banjo',\r\n    Violin = 'violin',\r\n    OpenA = 'open-a',\r\n    OpenB = 'open-b',\r\n    OpenC = 'open-c',\r\n    OpenD = 'open-d',\r\n    OpenE = 'open-e',\r\n    OpenF = 'open-f',\r\n    OpenG = 'open-g',\r\n}\r\n\r\nexport interface ITuning {\r\n    id: TuningId;\r\n    name: string;\r\n    value: number[]\r\n}\r\n\r\nconst formatPreset = (id: TuningId, name: string, value: number[]): ITuning => ({\r\n    id,\r\n    name,\r\n    value\r\n});\r\n\r\nconst getPitch = (noteId: NoteId, octave: number): number => Note.getNote(noteId, octave).pod[0];\r\n\r\nexport const TUNING_PRESET_MAP = new Map<TuningId, ITuning>([\r\n    [TuningId.Standard, formatPreset(\r\n        TuningId.Standard,\r\n        'Standard',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.Flat, formatPreset(\r\n        TuningId.Flat,\r\n        'Flat',\r\n        [\r\n            getPitch(NoteId.Eb, 5),\r\n            getPitch(NoteId.Bb, 4),\r\n            getPitch(NoteId.Gb, 4),\r\n            getPitch(NoteId.Db, 4),\r\n            getPitch(NoteId.Ab, 3),\r\n            getPitch(NoteId.Eb, 3)\r\n        ]\r\n    )],\r\n    [TuningId.DoubleFlat, formatPreset(\r\n        TuningId.DoubleFlat,\r\n        'Double Flat',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.F, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.StandardSeven, formatPreset(\r\n        TuningId.StandardSeven,\r\n        'Standard 7-String',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3),\r\n            getPitch(NoteId.B, 3)\r\n        ]\r\n    )],\r\n    [TuningId.StandardBass, formatPreset(\r\n        TuningId.StandardBass,\r\n        'Standard Bass',\r\n        [\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3),\r\n            getPitch(NoteId.A, 2),\r\n            getPitch(NoteId.E, 2)\r\n        ]\r\n    )],\r\n    [TuningId.DropD, formatPreset(\r\n        TuningId.DropD,\r\n        'Drop D',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.DADGAD, formatPreset(\r\n        TuningId.DADGAD,\r\n        'DADGAD',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    // Unconfirmed\r\n    [TuningId.Banjo, formatPreset(\r\n        TuningId.Banjo,\r\n        'Banjo',\r\n        [\r\n            getPitch(NoteId.G, 5),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    // Unconfirmed\r\n    [TuningId.Violin, formatPreset(\r\n        TuningId.Violin,\r\n        'Violin',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 4)\r\n        ]\r\n    )],\r\n    [TuningId.OpenA, formatPreset(\r\n        TuningId.OpenA,\r\n        'Open A',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.E, 4),\r\n            getPitch(NoteId.Cs, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenB, formatPreset(\r\n        TuningId.OpenB,\r\n        'Open B',\r\n        [\r\n            getPitch(NoteId.Ds, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Fs, 4),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Fs, 3),\r\n            getPitch(NoteId.B, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenC, formatPreset(\r\n        TuningId.OpenC,\r\n        'Open C',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.C, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenD, formatPreset(\r\n        TuningId.OpenD,\r\n        'Open D',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.Fs, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenE, formatPreset(\r\n        TuningId.OpenE,\r\n        'Open E',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Gs, 4),\r\n            getPitch(NoteId.E, 4),\r\n            getPitch(NoteId.B, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenF, formatPreset(\r\n        TuningId.OpenF,\r\n        'Open F',\r\n        [\r\n            getPitch(NoteId.F, 5),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.F, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.F, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenG, formatPreset(\r\n        TuningId.OpenG,\r\n        'Open G',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )]\r\n]);\r\n\r\nexport const FRETBOARD_TUNING_VALUES = ArrayUtils.mapToArray(TUNING_PRESET_MAP);\r\n","import Chord from '../../core/models/Chord';\r\nimport IntervalSpan from '../../core/models/Interval';\r\nimport { IModelConfig } from '../../core/models/Model.constants';\r\nimport Note from '../../core/models/Note';\r\nimport Scale from '../../core/models/Scale';\r\nimport { ITuning, TuningId, TUNING_PRESET_MAP } from './Fretboard.tuning';\r\nimport { IVoicing } from './Fretboard.voicing';\r\n\r\nexport interface IFretLabelProps {\r\n\tnote?: Note;\r\n\tcolor?: string;\r\n\tfreq?: number;\r\n}\r\n\r\nexport interface IFretboardProps {\r\n\tfretRange?: [number, number];\r\n\tshowFretDots?: boolean;\r\n\tshowFretNumbers?: boolean;\r\n\tcolorMapFn?: (fretProps: IFretProps) => string | undefined;\r\n\tvoicing?: IVoicing,\r\n\ttuning?: number[]; // ITuning,\r\n\tmodel?: Chord | Scale;\r\n}\r\n\r\nexport interface IFretProps extends IFretboardProps {\r\n\tstringIndex: number;\r\n\tfretIndex: number;\r\n}\r\n\r\nexport const DOTTED_FRET_INDICES = [true, false, false, true, false, true, false, true, false, true, false, false];\r\n\r\nexport const FRET_SIZE_RATIO = Math.pow((1 / 2), (1 / 12));\r\n\r\nconst isIntervalInVoicing = (interval: IntervalSpan, voicing: IVoicing, stringIndex: number) => {\r\n\tif (!voicing || !voicing.value) return true;\r\n\tconst v = voicing.value[stringIndex];\r\n\tconst d = interval.getDegree();\r\n\tif (Array.isArray(v)) {\r\n\t\treturn v.some(n => doesVoicingValueMatch(d, n));\r\n\t}\r\n\telse if (typeof v === 'number') {\r\n\t\treturn doesVoicingValueMatch(d, v);\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nexport const getFretColor = (props: IFretProps): string | undefined => {\r\n\tconst { stringIndex, fretIndex, tuning, model, voicing } = props;\r\n\tconst noteIndex = tuning[stringIndex] + fretIndex;\r\n\tconst [interval, note] = model.tryGetPodPairAtPitch(noteIndex);\r\n\r\n\tif (!note) return;\r\n\r\n\tif (voicing && !isIntervalInVoicing(interval, voicing, stringIndex)) {\r\n\t\treturn `#00000033`\r\n\t}\r\n\r\n\treturn interval.getColor();\r\n}\r\n\r\nexport const DEFAULT_FRETBOARD_PROPS: IFretboardProps = {\r\n\tfretRange: [1, 12],\r\n\ttuning: TUNING_PRESET_MAP.get(TuningId.Standard).value,\r\n\tshowFretDots: true,\r\n\tshowFretNumbers: true,\r\n\tcolorMapFn: getFretColor\r\n};\r\n\r\nexport const getFretRatios = (numFrets: number): number[] => {\r\n\tconst ratios = [];\r\n\tfor (let i = 1; i <= numFrets; i++) {\r\n\t\tratios.push((i <= 1) ? 1 : ratios[i - 2] * FRET_SIZE_RATIO);\r\n\t}\r\n\treturn ratios;\r\n};\r\n\r\nexport const getDotsForFret = (fretNumber: number): string => {\r\n\tconst mod = fretNumber % 12;\r\n\tif (mod === 0)\r\n\t\treturn '• •';\r\n\telse if (DOTTED_FRET_INDICES[mod])\r\n\t\treturn '•';\r\n\treturn '';\r\n};\r\n\r\nconst doesVoicingValueMatch = (d: number, v: number) => {\r\n\treturn d + 1 === v;\r\n}\r\n","import ArrayUtils from \"../../core/general/Array.utils\";\r\n\r\nexport enum VoicingId {\r\n    None = 'None',\r\n    Chord_Triad_CShape_1 = 'Chord_Triad_CShape_1',\r\n    Chord_Triad_AShape_1 = 'Chord_Triad_AShape_1',\r\n    Chord_Triad_GShape_1 = 'Chord_Triad_GShape_1',\r\n    Chord_Triad_EShape_1 = 'Chord_Triad_EShape_1',\r\n    Chord_Triad_DShape_1 = 'Chord_Triad_DShape_1',\r\n    Chord_Sixth_CShape_1 = 'Chord_Sixth_CShape_1',\r\n    Chord_Sixth_AShape_1 = 'Chord_Sixth_AShape_1',\r\n    Chord_Sixth_GShape_1 = 'Chord_Sixth_GShape_1',\r\n    Chord_Sixth_EShape_1 = 'Chord_Sixth_EShape_1',\r\n    Chord_Sixth_DShape_1 = 'Chord_Sixth_DShape_1',\r\n    Chord_Seventh_CShape_1 = 'Chord_Seventh_CShape_1',\r\n    Chord_Seventh_AShape_1 = 'Chord_Seventh_AShape_1',\r\n    Chord_Seventh_GShape_1 = 'Chord_Seventh_GShape_1',\r\n    Chord_Seventh_EShape_1 = 'Chord_Seventh_EShape_1',\r\n    Chord_Seventh_DShape_1 = 'Chord_Seventh_DShape_1',\r\n    Chord_Shell_E_37 = 'Chord_Shell_E_37',\r\n    Chord_Shell_E_73 = 'Chord_Shell_E_73',\r\n    Chord_Shell_A_37 = 'Chord_Shell_A_37',\r\n    Chord_Shell_A_73 = 'Chord_Shell_A_73',\r\n    Chord_Shell_D_37 = 'Chord_Shell_D_37',\r\n    Chord_Shell_D_73 = 'Chord_Shell_D_73',\r\n    Scale_DoubleOctave_CShape_1 = 'Scale_DoubleOctave_CShape_1',\r\n    Scale_DoubleOctave_CShape_2 = 'Scale_DoubleOctave_CShape_2',\r\n    Scale_DoubleOctave_AShape_1 = 'Scale_DoubleOctave_AShape_1',\r\n    Scale_DoubleOctave_GShape_1 = 'Scale_DoubleOctave_GShape_1',\r\n    Scale_DoubleOctave_EShape_1 = 'Scale_DoubleOctave_EShape_1',\r\n    Scale_DoubleOctave_EShape_2 = 'Scale_DoubleOctave_EShape_2',\r\n    Scale_DoubleOctave_DShape_1 = 'Scale_DoubleOctave_DShape_1',\r\n}\r\n\r\nexport interface IVoicing {\r\n    id: VoicingId;\r\n    name: string;\r\n    value: (number | number[])[]\r\n}\r\n\r\nconst formatPreset = (id: VoicingId, name: string, value: (number | number[])[]): IVoicing => ({\r\n    id,\r\n    name,\r\n    value\r\n});\r\n\r\nexport const VOICING_PRESET_MAP = new Map<VoicingId, IVoicing>([\r\n    // Triads\r\n    [VoicingId.Chord_Triad_CShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_CShape_1,\r\n        'C Shape Triad',\r\n        [3, 1, 5, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Triad_AShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_AShape_1,\r\n        'A Shape Triad',\r\n        [5, 3, 1, 5, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Triad_GShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_GShape_1,\r\n        'G Shape Triad',\r\n        [1, 5, 1, 5, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Triad_EShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_EShape_1,\r\n        'E Shape Triad',\r\n        [1, 5, 3, 1, 5, 1]\r\n    )],\r\n    [VoicingId.Chord_Triad_DShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_DShape_1,\r\n        'D Shape Triad',\r\n        [3, 1, 5, 1, null, null]\r\n    )],\r\n    // Sixths\r\n    [VoicingId.Chord_Sixth_CShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_CShape_1,\r\n        'C Shape 6th Chord',\r\n        [3, 6, 5, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Sixth_AShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_AShape_1,\r\n        'A Shape 6th Chord',\r\n        [5, 3, 6, 5, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Sixth_GShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_GShape_1,\r\n        'G Shape 6th Chord',\r\n        [6, 5, 1, 5, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Sixth_EShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_EShape_1,\r\n        'E Shape 6th Chord',\r\n        [1, 5, 3, 6, 5, 1]\r\n    )],\r\n    [VoicingId.Chord_Sixth_DShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_DShape_1,\r\n        'D Shape 6th Chord',\r\n        [3, 6, 5, 1, null, null]\r\n    )],\r\n    // Sevenths\r\n    [VoicingId.Chord_Seventh_CShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_CShape_1,\r\n        'C Shape 7th Chord',\r\n        [3, 7, 5, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Seventh_AShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_AShape_1,\r\n        'A Shape 7th Chord',\r\n        [5, 3, 7, 5, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Seventh_GShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_GShape_1,\r\n        'G Shape 7th Chord',\r\n        [7, 5, 1, 5, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Seventh_EShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_EShape_1,\r\n        'E Shape 7th Chord',\r\n        [1, 5, 3, 7, 5, 1]\r\n    )],\r\n    [VoicingId.Chord_Seventh_DShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_DShape_1,\r\n        'D Shape 7th Chord',\r\n        [3, 7, 5, 1, null, null]\r\n    )],\r\n    // Shells\r\n    [VoicingId.Chord_Shell_E_37, formatPreset(\r\n        VoicingId.Chord_Shell_E_37,\r\n        'Shell E 3-7',\r\n        [null, null, null, 7, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Shell_E_73, formatPreset(\r\n        VoicingId.Chord_Shell_E_73,\r\n        'Shell E 7-3',\r\n        [null, null, 3, 7, null, 1]\r\n    )],\r\n    [VoicingId.Chord_Shell_A_37, formatPreset(\r\n        VoicingId.Chord_Shell_A_37,\r\n        'Shell A 3-7',\r\n        [null, null, 7, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Shell_A_73, formatPreset(\r\n        VoicingId.Chord_Shell_A_73,\r\n        'Shell A 7-3',\r\n        [null, 3, 7, null, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Shell_D_37, formatPreset(\r\n        VoicingId.Chord_Shell_D_37,\r\n        'Shell D 3-7',\r\n        [null, 7, 3, 1, null, null]\r\n    )],\r\n    [VoicingId.Chord_Shell_D_73, formatPreset(\r\n        VoicingId.Chord_Shell_D_73,\r\n        'Shell D 7-3',\r\n        [3, 7, null, 1, null, null]\r\n    )],\r\n    // CAGED Scales\r\n    [VoicingId.Scale_DoubleOctave_EShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_EShape_1,\r\n        'E Shape Scale (Locrian)',\r\n        [[1, 2, 3], [6, 7], [3, 4, 5], [7, 1, 2], [4, 5, 6], [1, 2, 3]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_EShape_2, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_EShape_2,\r\n        'E Shape Scale (Ionian)',\r\n        [[7, 1, 2], [5, 6], [2, 3, 4], [6, 7, 1], [3, 4, 5], [1, 2]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_DShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_DShape_1,\r\n        'D Shape Scale (Dorian)',\r\n        [[1, 2, 3], [5, 6, 7], [2, 3, 4], [6, 7, 1], [4, 5], [1, 2, 3]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_CShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_CShape_1,\r\n        'C Shape Scale (Phrygian)',\r\n        [[1, 2, 3], [5, 6, 7], [3, 4], [7, 1, 2], [4, 5, 6], [1, 2, 3]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_CShape_2, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_CShape_2,\r\n        'C Shape Scale (Lydian)',\r\n        [[7, 1, 2], [4, 5, 6], [2, 3], [6, 7, 1], [3, 4, 5], [1, 2]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_AShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_AShape_1,\r\n        'A Shape Scale (Mixolydian)',\r\n        [[1, 2], [5, 6, 7], [2, 3, 4], [6, 7, 1], [3, 4, 5], [1, 2]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_GShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_GShape_1,\r\n        'G Shape Scale (Aeolian)',\r\n        [[1, 2, 3], [5, 6, 7], [2, 3, 4], [7, 1], [4, 5, 6], [1, 2, 3]]\r\n    )]\r\n])\r\n\r\nexport const VOICING_PRESETS = ArrayUtils.mapToArray(VOICING_PRESET_MAP);\r\n"],"names":["StyledNumbericInput","styled","theme","utils","border","status","interactive","active","highlight","value","setValue","rest","React","ButtonInput","onClick","newVal","min","Math","max","Icon","iconId","size","type","onChange","StyledCardSection","props","text","secondary","surface","bg","title","children","className","getModelRoute","modelType","modelId","rootId","StyledDetailsCol","modelConfig","root","model","setModelType","setModelConfig","setRoot","instrumentName","setModel","instrumentTuning","CardSection","Link","to","id","name","notes","map","note","i","key","intervals","getName","StyledOverlay","StyledContainer","StyledCard","setIsOpen","Card","draggable","StyledMainCol","viewer","isFullScreen","setIsFullScreen","Modal","StyledColorSchemeInput","labelFn","v","e","slice","target","StyledNotesCol","MODEL_TYPE_OPTIONS","ModelType","data","CHORD_PRESETS","SCALE_PRESETS","DEFAULT_MODEL_TYPE","DEFAULT_MODEL_CONFIG","DEFAULT_ROOT","NOTE_PRESETS","getNewModel","newModel","Chord","Note","Scale","_setModelType","_setModelConfig","_setRoot","colorScheme","setColorScheme","colorConfig","setColorConfig","modelOptions","InputRow","label","DropdownInput","newRoot","options","idProperty","config","COLOR_SCHEMES","ColorSchemeInput","StyledTabCard","withConfig","card","action","primary","tabs","useState","index","setIndex","t","content","useQueryParam","useModelState","initModelType","initModelId","initRootId","qpModelType","qpRootId","qpModelId","find","preset","getInitModelConfig","StyledFretboardCol","VOICING_OPTIONS","VoicingId","undefined","VOICING_PRESETS","DEFAULT_VOICING","DEFAULT_TUNING","FRETBOARD_TUNING_VALUES","DEFAULT_FRET_RANGE","DEFAULT_FRETBOARD_PROPS","voicing","tuning","fretRange","setVoicing","setTuning","setFretRange","filteredVoicings","filter","some","x","ivl","pod","fretLo","fretHi","TuningId","NumericInput","StyledFretboardPage","StyledColumnManager","useModelQueryParams","modelState","_setColorScheme","defaultConfig","instrumentColProps","notesColProps","cs","mainColProps","Fretboard","colorMapFn","stringIndex","fretIndex","noteIndex","tryGetPodPairAtPitch","fn","PageTitle","subtitle","ColumnManager","desktop","MainCol","TabCard","DetailsCol","NotesCol","FretboardCol","StyledFretLabel","$bgColor","$fgColor","bgColor","Fret","showFretNumbers","showFretDots","classes","push","isLowString","length","isHighString","join","FretLabel","getDotsForFret","userProps","lo","numFrets","numStrings","fretboardStyles","gridTemplateColumns","getFretRatios","n","gridTemplateRows","StyledFretboard","style","hi","allFrets","s","f","getFrets","formatPreset","getPitch","noteId","octave","TUNING_PRESET_MAP","Map","Standard","NoteId","Flat","DoubleFlat","StandardSeven","StandardBass","DropD","DADGAD","Banjo","Violin","OpenA","OpenB","OpenC","OpenD","OpenE","OpenF","OpenG","ArrayUtils","DOTTED_FRET_INDICES","FRET_SIZE_RATIO","pow","interval","d","getDegree","Array","isArray","doesVoicingValueMatch","isIntervalInVoicing","getColor","ratios","fretNumber","mod","VOICING_PRESET_MAP","Chord_Triad_CShape_1","Chord_Triad_AShape_1","Chord_Triad_GShape_1","Chord_Triad_EShape_1","Chord_Triad_DShape_1","Chord_Sixth_CShape_1","Chord_Sixth_AShape_1","Chord_Sixth_GShape_1","Chord_Sixth_EShape_1","Chord_Sixth_DShape_1","Chord_Seventh_CShape_1","Chord_Seventh_AShape_1","Chord_Seventh_GShape_1","Chord_Seventh_EShape_1","Chord_Seventh_DShape_1","Chord_Shell_E_37","Chord_Shell_E_73","Chord_Shell_A_37","Chord_Shell_A_73","Chord_Shell_D_37","Chord_Shell_D_73","Scale_DoubleOctave_EShape_1","Scale_DoubleOctave_EShape_2","Scale_DoubleOctave_DShape_1","Scale_DoubleOctave_CShape_1","Scale_DoubleOctave_CShape_2","Scale_DoubleOctave_AShape_1","Scale_DoubleOctave_GShape_1"],"sourceRoot":""}