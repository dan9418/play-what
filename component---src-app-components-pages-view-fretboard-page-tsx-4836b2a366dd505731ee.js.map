{"version":3,"file":"component---src-app-components-pages-view-fretboard-page-tsx-4836b2a366dd505731ee.js","mappings":"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","sources":["webpack://play-what/./src/app/components/pages/view/CardSection.tsx","webpack://play-what/./src/app/components/shared/inputs/DropdownInput.tsx","webpack://play-what/./src/app/components/shared/inputs/NumericInput.tsx","webpack://play-what/./src/app/components/shared/inputs/SwitchInput.tsx","webpack://play-what/./src/app/components/shared/layout/Modal.tsx","webpack://play-what/./src/app/components/shared/ui/CardFooterButton.tsx","webpack://play-what/./src/app/components/shared/ui/InputRow.tsx","webpack://play-what/./src/app/components/pages/view/MaximizeButton.tsx","webpack://play-what/./src/app/components/pages/view/FretboardCol.tsx","webpack://play-what/./src/app/components/pages/view/NotesCol.tsx","webpack://play-what/./src/app/components/pages/view/useFretboardState.ts","webpack://play-what/./src/app/components/pages/view/useModelQueryParams.tsx","webpack://play-what/./src/app/components/pages/view/useModelState.tsx","webpack://play-what/./src/app/components/pages/view/fretboard.page.tsx","webpack://play-what/./src/core/Fretboard.utils.ts","webpack://play-what/./src/app/components/shared/fretboard/Fretboard.tsx","webpack://play-what/./src/app/components/shared/layout/ColumnManager.tsx","webpack://play-what/./src/app/components/shared/ui/Card.tsx","webpack://play-what/./src/app/components/shared/ui/Table.tsx","webpack://play-what/./src/core/Color.utils.ts","webpack://play-what/./src/core/Core.derived.ts","webpack://play-what/./src/core/Frequency.utils.ts","webpack://play-what/./src/core/Fretboard.constants.ts","webpack://play-what/./src/core/IntervalQuality.constants.ts","webpack://play-what/./src/core/Interval.utils.ts","webpack://play-what/./src/core/Accidental.constants.ts","webpack://play-what/./src/core/Diatonic.constants.ts","webpack://play-what/./src/core/Note.utils.ts","webpack://play-what/./src/core/Pod.utils.ts","webpack://play-what/./src/core/Tuning.constants.ts","webpack://play-what/./src/core/Voicing.constants.ts","webpack://play-what/./src/core/primitives/Number.utils.ts"],"sourcesContent":["import styled from \"styled-components\";\r\nimport React from \"react\";\r\n\r\nexport const StyledCardSection = styled.div`\r\n  h3 {\r\n    text-transform: uppercase;\r\n    font-size: 80%;\r\n    margin-bottom: 8px;\r\n    color: ${(props) => props.theme?.text?.secondary};\r\n  }\r\n  & > .content {\r\n    background: ${(props) => props.theme?.surface?.bg};\r\n    border-radius: 8px;\r\n    padding: 8px;\r\n  }\r\n`;\r\n\r\nconst CardSection: React.FC<any> = ({ title, children }) => {\r\n  return (\r\n    <StyledCardSection>\r\n      {title && <h3>{title}</h3>}\r\n      <div className=\"content\">{children}</div>\r\n    </StyledCardSection>\r\n  );\r\n};\r\n\r\nexport default CardSection;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nconst StyledDropdownInput = styled.select`\r\n\tfont-size: 110%;\r\n    min-width: 128px;\r\n\r\n\tpadding: 4px 8px;\r\n\r\n    cursor: pointer;\r\n    border-radius: 4px;\r\n\r\n\toption {\r\n\t\tcursor: pointer;\r\n\t}\r\n`;\r\n\r\ninterface IDropdownInputProps {\r\n\tvalue: any;\r\n\tsetValue: Function;\r\n\toptions: any[];\r\n\tidProperty?: string;\r\n\tdisplayProperty?: string;\r\n}\r\n\r\nconst DropdownInput: React.FC<IDropdownInputProps> = props => {\r\n\tconst { value, setValue, options, idProperty, displayProperty } = props;\r\n\r\n\treturn (\r\n\t\t<StyledDropdownInput\r\n\t\t\tclassName='dropdown-input'\r\n\t\t\tonChange={e => setValue(options[e.target.selectedIndex], e.target.selectedIndex)}\r\n\t\t\tvalue={value ? value[idProperty || 'id'] : ''}\r\n\t\t>\r\n\t\t\t{(options || []).map((v, i) => (\r\n\t\t\t\t<option key={i} value={v[idProperty || 'id']}>{v[displayProperty || 'name']}</option>\r\n\t\t\t))}\r\n\t\t</StyledDropdownInput>\r\n\t);\r\n}\r\n\r\nexport default DropdownInput;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Icon from \"../ui/Icon\";\r\nimport ButtonInput from \"./ButtonInput\";\r\n\r\nexport const StyledNumbericInput = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  input,\r\n  button {\r\n    height: 32px;\r\n    padding: 0;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n\r\n  button {\r\n    width: 32px;\r\n    border: 1px solid ${({ theme }) => theme?.utils?.border};\r\n    svg,\r\n    svg * {\r\n      fill: white;\r\n    }\r\n\r\n    background-color: ${({ theme }) => theme?.status?.interactive};\r\n    color: white;\r\n    &:hover {\r\n      background-color: ${({ theme }) => theme?.status?.active};\r\n    }\r\n\r\n    :first-child {\r\n      border-right: none;\r\n      border-radius: 8px 0 0 8px;\r\n    }\r\n    :last-child {\r\n      border-left: none;\r\n      border-radius: 0 8px 8px 0;\r\n    }\r\n  }\r\n\r\n  input {\r\n    width: 48px;\r\n    cursor: pointer;\r\n    border: none;\r\n    font-weight: bold;\r\n    text-align: center;\r\n    background-color: white;\r\n    &:hover {\r\n      background-color: ${({ theme }) => theme?.status?.highlight};\r\n    }\r\n\r\n    border: 1px solid ${({ theme }) => theme?.utils?.border};\r\n  }\r\n\r\n  font-size: 110%;\r\n  cursor: pointer;\r\n`;\r\n\r\ninterface INumericInputProps {\r\n  value: number;\r\n  setValue: (number) => void;\r\n  min?: number;\r\n  max?: number;\r\n}\r\n\r\nconst NumericInput: React.FC<INumericInputProps> = ({\r\n  value,\r\n  setValue,\r\n  ...rest\r\n}) => {\r\n  const onChange = (e) => setValue(parseInt(e.target.value));\r\n\r\n  const onDown = () => {\r\n    let newVal = value - 1;\r\n    if (typeof rest.min !== \"undefined\") {\r\n      newVal = Math.max(rest.min, newVal);\r\n    }\r\n    setValue(newVal);\r\n  };\r\n\r\n  const onUp = () => {\r\n    let newVal = value + 1;\r\n    if (typeof rest.max !== \"undefined\") {\r\n      newVal = Math.min(rest.max, newVal);\r\n    }\r\n    setValue(newVal);\r\n  };\r\n\r\n  return (\r\n    <StyledNumbericInput>\r\n      <ButtonInput onClick={onDown}>\r\n        <Icon iconId=\"minus\" size={12} />\r\n      </ButtonInput>\r\n      <input type=\"number\" value={value} onChange={null} {...rest} />\r\n      <ButtonInput onClick={onUp}>\r\n        <Icon iconId=\"plus\" size={12} />\r\n      </ButtonInput>\r\n    </StyledNumbericInput>\r\n  );\r\n};\r\n\r\nexport default NumericInput;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledSwitch = styled.button`\r\n  border: none;\r\n  -ms-user-select: none;\r\n  user-select: none;\r\n  height: 22px;\r\n  width: 64px;\r\n  border-radius: 24px;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  overflow: hidden;\r\n  ${({ $active }) => `justify-content: flex-${$active ? 'end' : 'start'}`};\r\n\r\n\r\n  background-color: white;\r\n  :hover {\r\n    background-color: ${({ theme }) => theme?.action?.interactive};\r\n  }\r\n\r\n  & .ball {\r\n    height: 18px;\r\n    width: 18px;\r\n    border-radius: 100%;\r\n    margin: 0 4px;\r\n    background-color: ${({ theme, $active }) => $active ? theme?.action?.active : theme?.surface?.bg};\r\n\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\ninterface ISwitchInputProps {\r\n  value: boolean;\r\n  setValue: (boolean) => void;\r\n}\r\n\r\nconst SwitchInput: React.FC<ISwitchInputProps> = ({ value, setValue }) => {\r\n  return (\r\n    <StyledSwitch $active={value} onClick={() => setValue(!value)}>\r\n      <div className=\"ball\" />\r\n    </StyledSwitch>\r\n  );\r\n};\r\n\r\nexport default SwitchInput;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport ButtonInput from '../inputs/ButtonInput';\r\nimport Card, { StyledCard } from '../ui/Card';\r\nimport Icon from '../ui/Icon';\r\n\r\nconst StyledOverlay = styled.div`\r\n    //width: 100vw;\r\n    //height: 100vw;\r\n    opacity: 0.8;\r\n    background-color: black;\r\n    position: fixed;\r\n    top: 48px;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 3000;\r\n`\r\n\r\nconst StyledContainer = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    position: fixed;\r\n    top: 48px;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 3001;\r\n\r\n    & > ${StyledCard} {\r\n        width: 80%;\r\n        height: 80%;\r\n        position: relative;\r\n        padding: 64px 16px;\r\n\r\n        overflow: auto;\r\n        resize: both;\r\n\r\n        .close {\r\n            position: absolute;\r\n            top: 16px;\r\n            right: 16px;\r\n            background-color: transparent !important;\r\n        }\r\n    }\r\n`\r\n\r\nconst Modal: React.FC<any> = ({ setIsOpen, children, ...rest }) => {\r\n    return (\r\n        <>\r\n            <StyledOverlay />\r\n            <StyledContainer >\r\n                <Card {...rest} draggable=\"true\">\r\n                    <ButtonInput onClick={() => setIsOpen(false)} className=\"close\">\r\n                        <Icon iconId='close' />\r\n                    </ButtonInput>\r\n                    {children}\r\n                </Card>\r\n            </StyledContainer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { HTMLProps, PropsWithChildren } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Icon from \"./Icon\";\r\n\r\n\r\nexport interface ICardFooterButtonProps extends PropsWithChildren, HTMLProps<HTMLButtonElement> {\r\n    isActive?: boolean;\r\n}\r\n\r\nexport const StyledCardFooterButton = styled.div`\r\n    background: ${(props) => props.theme?.surface?.card};\r\n    border-radius: 0 0 12px 12px;\r\n    appearance: none;\r\n    background: transparent;\r\n    cursor: pointer;\r\n    width: 100%;\r\n    border: none;\r\n    margin-top: 16px;\r\n    padding: 8px 0;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-weight: bold;\r\n    color: ${(props) => props.theme?.action?.interactive};\r\n\r\n    svg {\r\n        margin-left: 8px;\r\n        margin-bottom: 2px;\r\n        * {\r\n            fill: ${(props) => props.theme?.action?.interactive};\r\n        }\r\n    }\r\n\r\n    &:hover {\r\n        svg,\r\n        svg * {\r\n          fill: ${({ theme }) => theme?.action?.active};\r\n        }\r\n        color: ${({ theme }) => theme?.action?.active};\r\n      }\r\n`;\r\n\r\nconst CardFooterButton: React.FC<ICardFooterButtonProps> = ({\r\n    children,\r\n    isActive = false,\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <StyledCardFooterButton type=\"button\" $isActive={isActive} {...rest}>\r\n            {children}\r\n            <Icon iconId={isActive ? 'up' : 'down'} size={8} />\r\n        </StyledCardFooterButton>\r\n    );\r\n};\r\n\r\nexport default CardFooterButton;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledInputRow = styled.div`\r\n    display: flex;\r\n    align-items: flex-start;\r\n    flex-direction: column;\r\n    width: 100%;\r\n\r\n    ${props => props.$y ? '' : `\r\n        @media(min-width: 512px) {\r\n            align-items: center;\r\n            flex-direction: row;\r\n            justify-content: space-between;\r\n            //margin-bottom: 8px;\r\n        }\r\n    `}\r\n\r\n    > label {\r\n        color: ${({ theme }) => theme.dark3};\r\n        font-weight: bold;\r\n        margin: 8px;\r\n        white-space: nowrap;\r\n    }\r\n`;\r\n\r\nconst InputRow = ({ label, children, y = false, ...rest }) => {\r\n    return (\r\n        <StyledInputRow $y={y} {...rest}>\r\n            <label>{label}</label>\r\n            <div>\r\n                {children}\r\n            </div>\r\n        </StyledInputRow>\r\n    );\r\n}\r\n\r\nexport default InputRow;\r\n","import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\nimport ButtonInput from '../../shared/inputs/ButtonInput';\r\nimport Icon from '../../shared/ui/Icon';\r\n\r\nconst StyledMaximizeButton = styled(ButtonInput)`\r\n    background-color: transparent !important;\r\n`\r\n\r\nconst MaximizeButton = props => {\r\n    return (\r\n        <StyledMaximizeButton {...props}>\r\n            <Icon iconId=\"maximize\" size={24} />\r\n        </StyledMaximizeButton>\r\n    );\r\n}\r\n\r\nexport default MaximizeButton;\r\n","import React, { useState } from \"react\";\r\nimport styled from 'styled-components';\r\nimport { DEFAULT_FRETBOARD_PROPS } from \"../../../../core/Fretboard.constants\";\r\nimport { FRETBOARD_TUNING_VALUES, TuningId } from \"../../../../core/Tuning.constants\";\r\nimport { VOICING_OPTIONS } from \"../../../../core/Voicing.constants\";\r\nimport Fretboard from \"../../shared/fretboard/Fretboard\";\r\nimport DropdownInput from \"../../shared/inputs/DropdownInput\";\r\nimport NumericInput from \"../../shared/inputs/NumericInput\";\r\nimport SwitchInput from \"../../shared/inputs/SwitchInput\";\r\nimport Modal from \"../../shared/layout/Modal\";\r\nimport Card from \"../../shared/ui/Card\";\r\nimport CardFooterButton from \"../../shared/ui/CardFooterButton\";\r\nimport InputRow from \"../../shared/ui/InputRow\";\r\nimport CardSection from \"./CardSection\";\r\nimport MaximizeButton from \"./MaximizeButton\";\r\nimport { IFretboardState } from \"./useFretboardState\";\r\nimport { IModelState } from \"./useModelState\";\r\n\r\nexport const DEFAULT_VOICING = VOICING_OPTIONS[0];\r\nexport const DEFAULT_TUNING = FRETBOARD_TUNING_VALUES[0];\r\nexport const DEFAULT_FRET_RANGE = DEFAULT_FRETBOARD_PROPS.fretRange;\r\n\r\nconst StyledMainCol = styled.div`\r\n    padding: 16px;\r\n    .maximize {\r\n        background-color: transparent !important;\r\n    }\r\n`;\r\n\r\nconst FretboardCol: React.FC<IFretboardState & IModelState> = ({\r\n  voicing,\r\n  tuning,\r\n  fretRange,\r\n  setVoicing,\r\n  setTuning,\r\n  setFretRange,\r\n  showFretNumbers,\r\n  setShowFretNumbers,\r\n  showFretDots,\r\n  setShowFretDots,\r\n  presetConfig,\r\n  root\r\n}) => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [isFullScreen, setIsFullScreen] = useState(false);\r\n\r\n  const filteredVoicings = VOICING_OPTIONS;\r\n  /*.filter((v) => {\r\n    if (!v.value) return true;\r\n    const containsNonModelIntervals = v.value.some(\r\n      (x) => x && !model.intervals.find((ivl) => ivl.pod[1] + 1 === x)\r\n    );\r\n    return !containsNonModelIntervals;\r\n  });*/\r\n\r\n  const [fretLo, fretHi] = fretRange;\r\n\r\n  const viewer = <Fretboard\r\n    podListPreset={presetConfig}\r\n    rootNotePreset={root}\r\n    fretRange={fretRange}\r\n    showFretDots={showFretDots}\r\n    showFretNumbers={showFretNumbers}\r\n    //colorSchemeId={colorScheme}\r\n    //voicingId={voicing.presetId}\r\n    tuningId={tuning.presetId}\r\n  />;\r\n\r\n  return (\r\n    <Card\r\n      title=\"Fretboard\"\r\n      action={<MaximizeButton onClick={() => setIsFullScreen(true)} />}\r\n    >\r\n      {isFullScreen && (\r\n        <Modal setIsOpen={setIsFullScreen}>\r\n          <div className=\"resize\">\r\n            {viewer}\r\n          </div>\r\n        </Modal>\r\n      )}\r\n      <StyledMainCol>\r\n        {viewer}\r\n      </StyledMainCol>\r\n      {isEditing && (\r\n        <div>\r\n          <CardSection title=\"Tuning\">\r\n            <InputRow label=\"Preset\">\r\n              <DropdownInput\r\n                value={tuning}\r\n                setValue={setTuning}\r\n                options={FRETBOARD_TUNING_VALUES}\r\n              />\r\n            </InputRow>\r\n            {tuning.id === TuningId.Standard && (\r\n              <InputRow label=\"Voicing\">\r\n                <DropdownInput\r\n                  value={voicing}\r\n                  setValue={setVoicing}\r\n                  options={filteredVoicings}\r\n                />\r\n              </InputRow>\r\n            )}\r\n          </CardSection>\r\n          <CardSection title=\"Range\">\r\n            <InputRow label=\"Low Fret\">\r\n              <NumericInput\r\n                value={fretLo}\r\n                min={0}\r\n                max={fretHi}\r\n                setValue={(v) => setFretRange([v, fretHi])}\r\n              />\r\n            </InputRow>\r\n            <InputRow label=\"High Fret\">\r\n              <NumericInput\r\n                value={fretHi}\r\n                min={fretLo}\r\n                max={24}\r\n                setValue={(v) => setFretRange([fretLo, v])}\r\n              />\r\n            </InputRow>\r\n          </CardSection>\r\n          <CardSection title=\"Details\">\r\n            <InputRow label=\"Fret Dots\">\r\n              <SwitchInput\r\n                value={showFretDots}\r\n                setValue={setShowFretDots}\r\n              />\r\n            </InputRow>\r\n            <InputRow label=\"Fret Numbers\">\r\n              <SwitchInput\r\n                value={showFretNumbers}\r\n                setValue={setShowFretNumbers}\r\n              />\r\n            </InputRow>\r\n          </CardSection>\r\n        </div>\r\n      )}\r\n      <CardFooterButton isActive={isEditing} onClick={() => setIsEditing(!isEditing)}>{isEditing ? 'DONE' : 'EDIT'}</CardFooterButton>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default FretboardCol;\r\n","import { Link } from \"gatsby\";\r\nimport React, { useState } from 'react';\r\nimport styled from \"styled-components\";\r\nimport { POD_LIST_PRESET_TYPE_OPTIONS } from \"../../../../core/Core.derived\";\r\nimport { IIntervalPreset, INTERVAL_PRESET_MAP, IntervalId } from \"../../../../core/Interval.constants\";\r\nimport { getName as getIntervalName } from \"../../../../core/Interval.utils\";\r\nimport { NOTE_PRESETS } from \"../../../../core/Note.constants\";\r\nimport { getName as getNoteName } from \"../../../../core/Note.utils\";\r\nimport { addPods, getRootedName } from \"../../../../core/Pod.utils\";\r\nimport { getModelRoute } from \"../../../../core/Routing.utils\";\r\nimport DropdownInput from \"../../shared/inputs/DropdownInput\";\r\nimport Card from '../../shared/ui/Card';\r\nimport CardFooterButton from \"../../shared/ui/CardFooterButton\";\r\nimport InputRow from \"../../shared/ui/InputRow\";\r\nimport CardSection from \"./CardSection\";\r\nimport { IModelState } from \"./useModelState\";\r\n\r\nconst StyledDetailsCol = styled.div`\r\n  .name {\r\n    font-size: 140%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n  }\r\n  .info {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-top: 8px;\r\n\r\n    .item {\r\n      margin: 0 8px;\r\n      text-align: center;\r\n      .note {\r\n        font-weight: bold;\r\n        font-size: 120%;\r\n      }\r\n      .interval {\r\n        color: ${(props) => props.theme?.text?.secondary};\r\n      }\r\n    }\r\n  }\r\n  .notes {\r\n    padding: 8px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nconst NotesCol: React.FC<IModelState> = (props) => {\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const {\r\n        presetType,\r\n        setPresetType,\r\n        presetConfig,\r\n        setPresetConfig,\r\n        root,\r\n        setRoot\r\n    } = props;\r\n    const modelOptions = presetType.data;\r\n    const intervalIds = presetConfig.valueIds;\r\n\r\n    return (\r\n        <>\r\n            <Card title=\"Notes\">\r\n                <StyledDetailsCol>\r\n                    <CardSection>\r\n                        <div className=\"notes\">\r\n                            <Link\r\n                                to={getModelRoute(\r\n                                    presetType.id,\r\n                                    presetConfig.presetId,\r\n                                    root.presetId\r\n                                )}\r\n                                className=\"name\"\r\n                            >\r\n                                {getRootedName(presetConfig, root)}\r\n                            </Link>\r\n                            <div className=\"info\">\r\n                                {intervalIds.map((ivl, i) => {\r\n                                    const intervalPreset = INTERVAL_PRESET_MAP.get(ivl as IntervalId) as IIntervalPreset;\r\n                                    const intervalPod = intervalPreset.pod;\r\n                                    const intervalName = getIntervalName(intervalPod)\r\n                                    const notePod = root && addPods(root.pod, intervalPreset.pod);\r\n                                    const noteName = notePod && getNoteName(notePod);\r\n\r\n                                    return (\r\n                                        <div key={i} className=\"item\">\r\n                                            <div className=\"note\">{noteName}</div>\r\n                                            <div className=\"interval\">{intervalName}</div>\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    </CardSection>\r\n                    {isEditing && (\r\n                        <div>\r\n                            <CardSection title=\"Root\">\r\n                                <InputRow label=\"Key Center\">\r\n                                    <DropdownInput\r\n                                        value={root}\r\n                                        setValue={setRoot}\r\n                                        options={NOTE_PRESETS}\r\n                                        idProperty=\"presetId\"\r\n                                    />\r\n                                </InputRow>\r\n                            </CardSection>\r\n                            <CardSection title=\"Intervals\">\r\n                                <InputRow label=\"Model Type\">\r\n                                    <DropdownInput\r\n                                        value={presetType}\r\n                                        setValue={setPresetType}\r\n                                        options={POD_LIST_PRESET_TYPE_OPTIONS}\r\n                                        idProperty=\"id\"\r\n                                    />\r\n                                </InputRow>\r\n                                <InputRow label=\"Preset\">\r\n                                    <DropdownInput\r\n                                        value={presetConfig}\r\n                                        setValue={setPresetConfig}\r\n                                        options={modelOptions}\r\n                                        idProperty=\"presetId\"\r\n                                    />\r\n                                </InputRow>\r\n                            </CardSection>\r\n                            {/*<CardSection title=\"Colors\">\r\n                            <InputRow label=\"Color Scheme\">\r\n                                <DropdownInput\r\n                                    value={colorScheme}\r\n                                    setValue={setColorScheme}\r\n                                    options={COLOR_SCHEME_PRESETS}\r\n                                    idProperty=\"id\"\r\n                                />\r\n                            </InputRow>\r\n                            <InputRow label=\"Color Config\">\r\n                                <ColorSchemeInput\r\n                                    value={colorConfig}\r\n                                    setValue={setColorConfig}\r\n                                    labelFn={colorScheme.labelFn}\r\n                                />\r\n                            </InputRow>\r\n                        </CardSection>*/}\r\n                        </div>\r\n                    )}\r\n                    <CardFooterButton isActive={isEditing} onClick={() => setIsEditing(!isEditing)}>{isEditing ? 'DONE' : 'EDIT'}</CardFooterButton>\r\n                </StyledDetailsCol>\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NotesCol;\r\n","import { useState } from \"react\";\r\nimport { COLOR_SCHEME_PRESETS } from \"../../../../core/Color.utils\";\r\nimport { DEFAULT_FRETBOARD_PROPS } from \"../../../../core/Fretboard.constants\";\r\nimport { FRETBOARD_TUNING_VALUES } from \"../../../../core/Tuning.constants\";\r\nimport { VOICING_OPTIONS } from \"../../../../core/Voicing.constants\";\r\n\r\nexport const DEFAULT_VOICING = VOICING_OPTIONS[0];\r\nexport const DEFAULT_TUNING = FRETBOARD_TUNING_VALUES[0];\r\nexport const DEFAULT_FRET_RANGE = DEFAULT_FRETBOARD_PROPS.fretRange;\r\n\r\nexport interface IFretboardState {\r\n    voicing, setVoicing,\r\n    tuning, setTuning,\r\n    fretRange, setFretRange,\r\n    colorScheme, setColorScheme,\r\n    colorConfig, setColorConfig,\r\n    showFretNumbers, setShowFretNumbers,\r\n    showFretDots, setShowFretDots\r\n}\r\n\r\nconst useFretboardState = () => {\r\n    const [showFretDots, setShowFretDots] = useState(true);\r\n    const [showFretNumbers, setShowFretNumbers] = useState(true);\r\n    const [voicing, setVoicing] = useState(DEFAULT_VOICING);\r\n    const [tuning, setTuning] = useState(DEFAULT_TUNING);\r\n    const [fretRange, setFretRange] = useState(DEFAULT_FRET_RANGE);\r\n    const [colorScheme, _setColorScheme] = useState(COLOR_SCHEME_PRESETS[1]);\r\n    const [colorConfig, setColorConfig] = useState(colorScheme.defaultConfig);\r\n\r\n    const setColorScheme = (cs) => {\r\n        _setColorScheme(cs);\r\n        setColorConfig(cs.defaultConfig);\r\n    };\r\n\r\n    return {\r\n        voicing, setVoicing,\r\n        tuning, setTuning,\r\n        fretRange, setFretRange,\r\n        colorScheme, setColorScheme,\r\n        colorConfig, setColorConfig,\r\n        showFretDots, setShowFretDots,\r\n        showFretNumbers, setShowFretNumbers\r\n    }\r\n};\r\n\r\nexport default useFretboardState;\r\n","import { useQueryParam } from \"use-query-params\";\r\nimport { PresetType } from \"../../../../core/Core.constants\";\r\nimport { PresetId } from \"../../../../core/Core.derived\";\r\nimport { NoteId } from \"../../../../core/Note.constants\";\r\n\r\nconst useModelQueryParams = () => {\r\n  const [qpPresetType] = useQueryParam(\"presetType\");\r\n  const [qpPresetId] = useQueryParam(\"presetId\");\r\n  const [qpRootId] = useQueryParam(\"rootId\");\r\n\r\n  return [qpPresetType as PresetType, qpPresetId as PresetId, qpRootId as NoteId];\r\n};\r\n\r\nexport default useModelQueryParams;\r\n","import { useState } from \"react\";\r\nimport { POD_LIST_PRESET_TYPE_OPTIONS } from \"../../../../core/Core.derived\";\r\nimport { NOTE_PRESETS } from \"../../../../core/Note.constants\";\r\n\r\nconst getInitPresetType = (qpPresetType?: string) => {\r\n    const found = POD_LIST_PRESET_TYPE_OPTIONS.find(\r\n        (type) => type.id && type.id === qpPresetType\r\n    );\r\n    //if (!found) throw new Error('Cannot find preset type: ' + qpPresetType);\r\n    return found || POD_LIST_PRESET_TYPE_OPTIONS[0];\r\n};\r\n\r\nconst getInitPresetConfig = (presetType, qpPresetId?: string) => {\r\n    const found = presetType.data.find((preset) => preset.presetId === qpPresetId);\r\n    //if (!found) throw new Error('Cannot find preset id: ' + qpPresetId);\r\n    return found || presetType.data[0];\r\n};\r\n\r\nconst getInitRoot = (qpRootId?: string) => {\r\n    const found = NOTE_PRESETS.find((note) => note.presetId === qpRootId);\r\n    //if (!found) throw new Error('Cannot find root id: ' + qpRootId);\r\n    return found || NOTE_PRESETS[0];\r\n};\r\n\r\nexport interface IModelState {\r\n    presetType,\r\n    setPresetType,\r\n    presetConfig,\r\n    setPresetConfig,\r\n    root,\r\n    setRoot\r\n}\r\n\r\nconst useModelState = (initPresetType: string, initPresetId: string, initRootId: string) => {\r\n    const [presetType, _setPresetType] = useState(() => getInitPresetType(initPresetType));\r\n    const [presetConfig, setPresetConfig] = useState(\r\n        () => getInitPresetConfig(presetType, initPresetId)\r\n    );\r\n    const setPresetType = (type) => {\r\n        _setPresetType(type);\r\n        setPresetConfig(type.data[0]);\r\n    };\r\n    const [root, setRoot] = useState(getInitRoot(initRootId));\r\n\r\n    return {\r\n        presetType,\r\n        setPresetType,\r\n        presetConfig,\r\n        setPresetConfig,\r\n        root,\r\n        setRoot\r\n    };\r\n};\r\n\r\nexport default useModelState;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport ColumnManager from \"../../shared/layout/ColumnManager\";\r\nimport PageLayout from \"../../shared/layout/PageLayout\";\r\nimport { StyledCardSection } from \"./CardSection\";\r\nimport FretboardCol from \"./FretboardCol\";\r\nimport NotesCol from \"./NotesCol\";\r\nimport useFretboardState from \"./useFretboardState\";\r\nimport useModelQueryParams from \"./useModelQueryParams\";\r\nimport useModelState from \"./useModelState\";\r\n\r\nconst StyledFretboardPage = styled(PageLayout)`\r\n  ${StyledCardSection} {\r\n    margin-top: 16px;\r\n  }\r\n`;\r\n\r\nconst Page: React.FC = () => {\r\n    const [qpPresetType, qpPresetId, qpRootId] = useModelQueryParams();\r\n\r\n    const modelState = useModelState(qpPresetType, qpPresetId, qpRootId);\r\n    const fretboardState = useFretboardState();\r\n\r\n    return (\r\n        <StyledFretboardPage hideHeader>\r\n            <ColumnManager desktop={[\"1fr\", \"1fr\"]}>\r\n                <div>\r\n                    <FretboardCol {...fretboardState} {...modelState} />\r\n                </div>\r\n                <div>\r\n                    <NotesCol {...modelState} />\r\n                </div>\r\n            </ColumnManager>\r\n        </StyledFretboardPage>\r\n    );\r\n};\r\n\r\nexport default Page;\r\n","import { COLOR_SCHEME_PRESET_MAP, IColorSchemePreset } from \"./Color.utils\";\r\nimport {\r\n  DEFAULT_FRETBOARD_PROPS,\r\n  DOTTED_FRET_INDICES,\r\n  FRET_SIZE_RATIO,\r\n  IFretboardProps,\r\n  IFretConfig,\r\n  IFretContext,\r\n  IFretMap,\r\n} from \"./Fretboard.constants\";\r\nimport { IPod } from \"./Pod.constants\";\r\nimport { getDegree, getNotePods, tryGetPodPairAtPitch } from \"./Pod.utils\";\r\nimport { ITuningPreset, TUNING_PRESET_MAP } from \"./Tuning.constants\";\r\nimport { IVoicingPreset, VOICING_PRESET_MAP } from \"./Voicing.constants\";\r\n\r\nexport const isIntervalInVoicing = (\r\n  interval: IPod,\r\n  voicing: IVoicingPreset,\r\n  stringIndex: number\r\n) => {\r\n  if (!voicing || !voicing.value) return true;\r\n  const v = voicing.value[stringIndex];\r\n  const d = getDegree(interval);\r\n  if (Array.isArray(v)) {\r\n    return v.some((n) => doesVoicingValueMatch(d, n));\r\n  } else if (typeof v === \"number\") {\r\n    return doesVoicingValueMatch(d, v);\r\n  }\r\n  return false;\r\n};\r\n\r\nconst getFretConfig = (fretContext: IFretContext): IFretConfig => {\r\n  const {\r\n    stringIndex,\r\n    fretIndex,\r\n    tuningValue,\r\n    podListPreset,\r\n    rootNotePreset,\r\n    voicingValue,\r\n    colorSchemeFn,\r\n  } = fretContext;\r\n\r\n  const noteIndex = tuningValue[stringIndex] + fretIndex;\r\n\r\n  const rootPod = rootNotePreset.pod;\r\n  const intervalPods = podListPreset.pods;\r\n  const notePods = getNotePods(rootPod, intervalPods);\r\n\r\n  const [interval, note] = tryGetPodPairAtPitch(\r\n    intervalPods,\r\n    notePods,\r\n    noteIndex\r\n  );\r\n\r\n  if (!note) return {};\r\n\r\n  const color = colorSchemeFn(note, interval);\r\n\r\n  return {\r\n    color,\r\n    //opacity: voicingValue && !isIntervalInVoicing(interval, voicingValue, stringIndex) ? 0.5 : 1\r\n  };\r\n};\r\n\r\nexport const getFretRatios = (numFrets: number): number[] => {\r\n  const ratios: number[] = [];\r\n  for (let i = 1; i <= numFrets; i++) {\r\n    ratios.push(i <= 1 ? 1 : ratios[i - 2] * FRET_SIZE_RATIO);\r\n  }\r\n  return ratios;\r\n};\r\n\r\nexport const getDotsForFret = (fretNumber: number): string => {\r\n  if (fretNumber === 0) return \"\";\r\n  const mod = fretNumber % 12;\r\n  if (mod === 0) return \"• •\";\r\n  else if (DOTTED_FRET_INDICES[mod]) return \"•\";\r\n  return \"\";\r\n};\r\n\r\nconst doesVoicingValueMatch = (d: number, v: number) => {\r\n  return d + 1 === v;\r\n};\r\n\r\nexport const getFretMapFromFretboardProps = (\r\n  userProps: Partial<IFretboardProps>\r\n): IFretMap => {\r\n  const props = { ...DEFAULT_FRETBOARD_PROPS, ...userProps };\r\n\r\n  const {\r\n    showFretDots,\r\n    showFretNumbers,\r\n    fretRange,\r\n    tuningId,\r\n    colorSchemeId,\r\n    voicingId,\r\n    podListPreset,\r\n    rootNotePreset,\r\n  } = props;\r\n\r\n  const [lo, hi] = fretRange;\r\n\r\n  const tuningValue = (TUNING_PRESET_MAP.get(tuningId) as ITuningPreset).value;\r\n  const voicingValue = (VOICING_PRESET_MAP.get(voicingId) as IVoicingPreset)\r\n    .value;\r\n  const colorSchemeFn = (\r\n    COLOR_SCHEME_PRESET_MAP.get(colorSchemeId) as IColorSchemePreset\r\n  ).fn;\r\n\r\n  const numFrets = hi - lo + 1;\r\n  const numStrings = tuningValue.length;\r\n\r\n  const fretNums: number[] = [];\r\n  if (showFretNumbers) {\r\n    for (let i = 0; i < numFrets; i++) {\r\n      fretNums.push(lo + i);\r\n    }\r\n  }\r\n\r\n  const fretDots: string[] = [];\r\n  if (showFretDots) {\r\n    for (let i = 0; i < numFrets; i++) {\r\n      fretDots.push(getDotsForFret(lo + i));\r\n    }\r\n  }\r\n\r\n  const strings: IFretConfig[][] = [];\r\n  for (let s = 0; s < numStrings; s++) {\r\n    const frets: IFretConfig[] = [];\r\n    for (let f = lo; f <= hi; f++) {\r\n      frets.push(\r\n        getFretConfig({\r\n          stringIndex: s,\r\n          fretIndex: f,\r\n          tuningValue,\r\n          podListPreset,\r\n          rootNotePreset,\r\n          colorSchemeFn,\r\n          voicingValue,\r\n        })\r\n      );\r\n    }\r\n    strings.push(frets);\r\n  }\r\n\r\n  return {\r\n    fretNums,\r\n    fretDots,\r\n    strings,\r\n  };\r\n};\r\n","import * as React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { IFretboardProps } from \"../../../../core/Fretboard.constants\";\r\nimport { getFretMapFromFretboardProps } from \"../../../../core/Fretboard.utils\";\r\nimport { IColConfig, IRowConfig, Table } from \"../ui/Table\";\r\n\r\nexport const StyledFretTable = styled.div``;\r\n\r\nexport const StyledFretFlag = styled.div<{\r\n  $color?: string;\r\n  $opacity?: number;\r\n}>`\r\n  height: 16px;\r\n  width: 16px;\r\n  background: ${(props) => props.$color || \"transparent\"};\r\n  opacity: ${(props) => props.$opacity || 1};\r\n  border-radius: 100%;\r\n  z-index: 1;\r\n`;\r\n\r\nconst tableStyles = css`\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  td,\r\n  th {\r\n    min-width: 18px;\r\n    text-align: center;\r\n  }\r\n  tbody td {\r\n    background-color: #e8dbb8;\r\n\r\n    border-right: 1px solid grey;\r\n    &:first-child {\r\n      border-left: 1px solid grey;\r\n    }\r\n    .fret-content {\r\n      min-height: 32px;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      position: relative;\r\n    }\r\n    .fret-string {\r\n      height: 1px;\r\n      background: #bbb;\r\n      width: 100%;\r\n      position: absolute;\r\n      margin: auto 0;\r\n    }\r\n  }\r\n  tbody tr {\r\n    &:first-child {\r\n      border-top: 1px solid grey;\r\n    }\r\n    &:last-child {\r\n      border-bottom: 1px solid grey;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Fretboard: React.FC<Partial<IFretboardProps>> = (props) => {\r\n  const fretMap = getFretMapFromFretboardProps(props);\r\n\r\n  const { fretNums, fretDots, strings } = fretMap;\r\n\r\n  const rows: IRowConfig[] = [];\r\n  for (let s = 0; s < strings.length; s++) {\r\n    const cols: IColConfig[] = [];\r\n    for (let f = 0; f < strings[s].length; f++) {\r\n      const { color, opacity } = strings[s][f];\r\n      cols.push({\r\n        content: (\r\n          <div className=\"fret-content\">\r\n            <div className=\"fret-string\" />\r\n            <StyledFretFlag $color={color} $opacity={opacity} />\r\n          </div>\r\n        ),\r\n      });\r\n    }\r\n    rows.push({ cols });\r\n  }\r\n\r\n  return (\r\n    <StyledFretTable>\r\n      <Table\r\n        thead={fretNums.length ? [{ cols: fretNums }] : undefined}\r\n        tfoot={fretDots.length ? [{ cols: fretDots }] : undefined}\r\n        tbody={rows}\r\n        styles={tableStyles}\r\n      />\r\n    </StyledFretTable>\r\n  );\r\n};\r\n\r\nexport default Fretboard;\r\n","import React, { PropsWithChildren } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { MediaQuery } from \"../../../styles/breakpoint\";\r\n\r\ninterface IStyledColumnManagerProps {\r\n  $tablet?: string[];\r\n  $desktop?: string[];\r\n}\r\n\r\nexport const StyledColumnManager = styled.div<IStyledColumnManagerProps>`\r\n  display: grid;\r\n  gap: 16px;\r\n  grid-template-columns: 1fr;\r\n\r\n  ${({ $tablet }) =>\r\n    $tablet\r\n      ? `\r\n        ${MediaQuery.Tablet} {\r\n            grid-template-columns: ${$tablet.join(\" \")}\r\n        }\r\n    `\r\n      : \"\"}\r\n\r\n  ${({ $desktop }) =>\r\n    $desktop\r\n      ? `\r\n        ${MediaQuery.Desktop} {\r\n            grid-template-columns: ${$desktop.join(\" \")}\r\n        }\r\n    `\r\n      : ``}\r\n`;\r\n\r\nexport interface IColumnManagerProps extends PropsWithChildren {\r\n  tablet?: string[];\r\n  desktop?: string[];\r\n}\r\n\r\nconst ColumnManager: React.FC<IColumnManagerProps> = ({\r\n  tablet,\r\n  desktop,\r\n  children,\r\n}) => {\r\n  return (\r\n    <StyledColumnManager $tablet={tablet} $desktop={desktop}>\r\n      {children}\r\n    </StyledColumnManager>\r\n  );\r\n};\r\n\r\nexport default ColumnManager;\r\n","import React, { PropsWithChildren } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface ICardHeaderProps {\r\n  title: string;\r\n  level?: number;\r\n  action?: any;\r\n}\r\n\r\nexport const StyledCardHeader = styled.div`\r\n  margin-bottom: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport const CardHeader: React.FC<ICardHeaderProps> = ({\r\n  title,\r\n  level = 2,\r\n  action = null,\r\n}) => {\r\n  const AsTag: any = `h${level}`;\r\n  return (\r\n    <StyledCardHeader>\r\n      <AsTag>{title}</AsTag>\r\n      {action}\r\n    </StyledCardHeader>\r\n  );\r\n};\r\n\r\nexport interface ICardProps extends PropsWithChildren<any> {\r\n  title?: string;\r\n  subtitle?: string;\r\n  action?: any;\r\n  level?: number;\r\n}\r\n\r\nexport const StyledCard = styled.div`\r\n  background: ${(props) => props.theme?.surface?.card};\r\n  width: 100%;\r\n  border-radius: 16px;\r\n  padding: 16px;\r\n`;\r\n\r\nconst Card: React.FC<ICardProps> = ({\r\n  title,\r\n  subtitle,\r\n  action,\r\n  children,\r\n  level = 1,\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <StyledCard {...rest}>\r\n      {title && <CardHeader title={title} action={action} level={level} />}\r\n      {subtitle && <CardHeader title={subtitle} level={level + 1} />}\r\n      {children}\r\n    </StyledCard>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import { Link } from \"gatsby\";\r\nimport React, { Fragment, ReactNode } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledTable = styled.table``;\r\n\r\ntype TOmit = undefined | null | false;\r\n\r\nconst getIsTypeOmit = (data: any): data is TOmit =>\r\n  data === undefined || data === null || data === false;\r\n\r\n// Col\r\n\r\nexport interface IColConfig {\r\n  isHeader?: boolean;\r\n  content: any;\r\n  colSpan?: number;\r\n  className?: string;\r\n  link?: string;\r\n}\r\n\r\ninterface IColProps extends IColConfig {\r\n  index: number;\r\n}\r\n\r\ntype TCol = string | number | IColConfig | ReactNode;\r\n\r\nconst Col: React.FC<IColProps> = ({\r\n  index,\r\n  isHeader,\r\n  content,\r\n  colSpan,\r\n  className,\r\n  link,\r\n}) => {\r\n  const ColTag = isHeader ? \"th\" : \"td\";\r\n  const WrapperTag = link ? Link : Fragment;\r\n  const wrapperProps: any = link ? { to: link } : {};\r\n\r\n  return (\r\n    <ColTag colSpan={colSpan} className={className}>\r\n      <WrapperTag {...wrapperProps}>{content || \"\"}</WrapperTag>\r\n    </ColTag>\r\n  );\r\n};\r\n\r\n// Row\r\n\r\nexport interface IRowConfig {\r\n  cols: (TCol | TOmit)[];\r\n  className?: string;\r\n  isHeader?: boolean;\r\n  headerColIndicies?: number[];\r\n}\r\n\r\nconst getIsConfig = (col: TCol): col is IColConfig =>\r\n  typeof col === \"object\" && col !== null && col.hasOwnProperty(\"content\");\r\n\r\nconst Row: React.FC<IRowConfig> = ({\r\n  cols,\r\n  isHeader,\r\n  className,\r\n  headerColIndicies = [],\r\n}) => {\r\n  return (\r\n    <tr className={className}>\r\n      {cols.map((col: any, i) => {\r\n        if (getIsTypeOmit(col)) return null;\r\n        const isConfig = getIsConfig(col);\r\n        const colConfig = !isConfig ? { content: col } : col;\r\n        return (\r\n          <Col\r\n            key={i}\r\n            index={i}\r\n            isHeader={isHeader || headerColIndicies.includes(i)}\r\n            {...colConfig}\r\n          />\r\n        );\r\n      })}\r\n    </tr>\r\n  );\r\n};\r\n\r\n// Table Section\r\n\r\ninterface ITableSectionConfig {\r\n  Tag: \"thead\" | \"tfoot\" | \"tbody\";\r\n  rows: (IRowConfig | TOmit)[];\r\n  headerColIndicies?: number[];\r\n}\r\n\r\nconst TableSection: React.FC<ITableSectionConfig> = ({\r\n  Tag,\r\n  rows,\r\n  headerColIndicies,\r\n}) => (\r\n  <Tag>\r\n    {rows.map((row, i) => {\r\n      if (getIsTypeOmit(row)) return null;\r\n      return (\r\n        <Row\r\n          key={i}\r\n          isHeader={Tag !== \"tbody\"}\r\n          headerColIndicies={headerColIndicies}\r\n          {...row}\r\n        />\r\n      );\r\n    })}\r\n  </Tag>\r\n);\r\n\r\n// Table\r\n\r\ninterface IColGroup {\r\n  span?: number;\r\n  className?: string;\r\n}\r\n\r\nexport interface ITableConfig {\r\n  thead?: (IRowConfig | TOmit)[];\r\n  tfoot?: (IRowConfig | TOmit)[];\r\n  tbody: (IRowConfig | TOmit)[];\r\n  styles?: any;\r\n  caption?: string;\r\n  colGroups?: IColGroup[];\r\n  className?: string;\r\n  headerColIndicies?: number[];\r\n}\r\n\r\nexport const Table: React.FC<ITableConfig> = ({\r\n  thead,\r\n  tfoot,\r\n  tbody,\r\n  styles,\r\n  colGroups,\r\n  caption,\r\n  headerColIndicies,\r\n  className,\r\n}) => {\r\n  return (\r\n    <StyledTable css={styles} className={className}>\r\n      {colGroups && (\r\n        <colgroup>\r\n          {colGroups.map((cg, i) => (\r\n            <col key={i} {...cg} />\r\n          ))}\r\n        </colgroup>\r\n      )}\r\n      {caption && <caption>{caption}</caption>}\r\n      {thead && (\r\n        <TableSection\r\n          Tag=\"thead\"\r\n          rows={thead}\r\n          headerColIndicies={headerColIndicies}\r\n        />\r\n      )}\r\n      {tfoot && (\r\n        <TableSection\r\n          Tag=\"tfoot\"\r\n          rows={tfoot}\r\n          headerColIndicies={headerColIndicies}\r\n        />\r\n      )}\r\n      {tbody && (\r\n        <TableSection\r\n          Tag=\"tbody\"\r\n          rows={tbody}\r\n          headerColIndicies={headerColIndicies}\r\n        />\r\n      )}\r\n    </StyledTable>\r\n  );\r\n};\r\n","import { IPreset } from \"./Core.constants\";\r\nimport { getPitchClass } from \"./Note.utils\";\r\nimport { IPod } from \"./Pod.constants\";\r\nimport { getDegree } from \"./Pod.utils\";\r\nimport ArrayUtils from \"./primitives/Array.utils\";\r\n\r\nexport enum ColorSchemeId {\r\n  None = \"none\",\r\n  Monochrome = \"monochrome\",\r\n  HighlightRoot = \"highlight-root\",\r\n  Degree = \"degree\",\r\n  PitchClass = \"pitch-class\",\r\n}\r\n\r\nexport type ColorSchemeFn = (\r\n  note?: IPod,\r\n  interval?: IPod,\r\n  config?: string[]\r\n) => string | undefined;\r\n\r\nexport interface IColorSchemePreset extends IPreset<ColorSchemeId> {\r\n  defaultConfig: string[];\r\n  fn: ColorSchemeFn;\r\n}\r\n\r\nconst RED = \"#dd1122\";\r\nconst BLACK = \"#6b6b7b\";\r\n\r\nconst DEFAULT_MONOCHROME_CONFIG = [BLACK];\r\n\r\nconst DEFAULT_HIGHLIGHT_ROOT_CONFIG = [RED, BLACK];\r\n\r\nconst DEFAULT_DEGREE_COLOR_SCHEME = [\r\n  \"#E6194B\",\r\n  \"#F58231\",\r\n  \"#FFE119\",\r\n  \"#3CB44B\",\r\n  \"#4363D8\",\r\n  \"#911DB4\",\r\n  \"#F032E6\",\r\n];\r\n\r\nconst DEFAULT_PITCH_COLOR_SCHEME = [\r\n  \"#ED1C24\",\r\n  \"#F1592A\",\r\n  \"#F8981E\",\r\n  \"#FCB040\",\r\n  \"#FFF200\",\r\n  \"#8CC63F\",\r\n  \"#056839\",\r\n  \"#13A89E\",\r\n  \"#A898C8\",\r\n  \"#662D91\",\r\n  \"#92278F\",\r\n  \"#C2305E\",\r\n];\r\n\r\nexport const COLOR_SCHEME_PRESET_MAP: Map<ColorSchemeId, IColorSchemePreset> =\r\n  new Map([\r\n    [\r\n      ColorSchemeId.Monochrome,\r\n      {\r\n        presetId: ColorSchemeId.Monochrome,\r\n        name: \"Monochrome\",\r\n        defaultConfig: DEFAULT_MONOCHROME_CONFIG,\r\n        fn: (note, interval, config = DEFAULT_MONOCHROME_CONFIG) =>\r\n          note ? config[0] : undefined,\r\n      },\r\n    ],\r\n    [\r\n      ColorSchemeId.HighlightRoot,\r\n      {\r\n        presetId: ColorSchemeId.HighlightRoot,\r\n        name: \"Highlight Root\",\r\n        defaultConfig: DEFAULT_HIGHLIGHT_ROOT_CONFIG,\r\n        fn: (note, interval, config = DEFAULT_HIGHLIGHT_ROOT_CONFIG) =>\r\n          interval\r\n            ? getDegree(interval) === 0\r\n              ? config[0]\r\n              : config[1]\r\n            : undefined,\r\n      },\r\n    ],\r\n    [\r\n      ColorSchemeId.Degree,\r\n      {\r\n        presetId: ColorSchemeId.Degree,\r\n        name: \"Interval Degree\",\r\n        defaultConfig: DEFAULT_DEGREE_COLOR_SCHEME,\r\n        fn: (note, interval, config = DEFAULT_DEGREE_COLOR_SCHEME) =>\r\n          interval ? config[getDegree(interval) || 0] : undefined,\r\n      },\r\n    ],\r\n    [\r\n      ColorSchemeId.PitchClass,\r\n      {\r\n        presetId: ColorSchemeId.PitchClass,\r\n        name: \"Pitch Class\",\r\n        defaultConfig: DEFAULT_PITCH_COLOR_SCHEME,\r\n        fn: (note, interval, config = DEFAULT_PITCH_COLOR_SCHEME) =>\r\n          note ? config[getPitchClass(note) || 0] : undefined,\r\n      },\r\n    ],\r\n  ]);\r\n\r\nexport const COLOR_SCHEME_PRESETS = ArrayUtils.mapToArray(\r\n  COLOR_SCHEME_PRESET_MAP\r\n);\r\n\r\n// const getFgColor = (bg?: string): string => {\r\n//   if (!bg) return \"#000\";\r\n//   return color(bg).isDark() ? \"#fff\" : \"#000\";\r\n// };\r\n\r\n// const getStylesFromBgColor = (bg?: string): any => {\r\n//   if (!bg) return {};\r\n//   const fg = getFgColor(bg);\r\n//   return {\r\n//     backgroundColor: bg,\r\n//     color: fg,\r\n//   };\r\n// };\r\n\r\n// const getColorFromContinuousScheme = (value, min, max, scheme) => {\r\n//   let percent = (value - min) / (max - min);\r\n//   percent = percent <= 0 ? 0 : percent >= 1 ? 1 : percent;\r\n\r\n//   const initialColor = color(scheme.min);\r\n//   const finalColor = color(scheme.max);\r\n//   const background = initialColor.mix(finalColor, percent);\r\n\r\n//   return background;\r\n// };\r\n","import {\r\n  ChordId,\r\n  CHORD_PRESETS,\r\n  CHORD_PRESET_MAP,\r\n  IChordPreset,\r\n} from \"./Chord.constants\";\r\nimport { PresetType } from \"./Core.constants\";\r\nimport { IntervalId, INTERVAL_PRESET_MAP } from \"./Interval.constants\";\r\nimport { NoteId, NOTE_PRESET_MAP } from \"./Note.constants\";\r\nimport {\r\n  IScalePreset,\r\n  ScaleId,\r\n  SCALE_PRESETS,\r\n  SCALE_PRESET_MAP,\r\n} from \"./Scale.constants\";\r\n\r\nexport type AnyPodListPreset = IChordPreset | IScalePreset;\r\n\r\nexport const POD_LIST_PRESETS: AnyPodListPreset[] = [\r\n  ...SCALE_PRESETS,\r\n  ...CHORD_PRESETS,\r\n];\r\n\r\n\r\nexport const POD_LIST_PRESET_TYPE_OPTIONS = [\r\n  {\r\n    id: PresetType.Chord,\r\n    name: \"Chords\",\r\n    value: PresetType.Chord,\r\n    data: CHORD_PRESETS,\r\n  },\r\n  {\r\n    id: PresetType.Scale,\r\n    name: \"Scales\",\r\n    value: PresetType.Scale,\r\n    data: SCALE_PRESETS,\r\n  },\r\n];\r\n\r\nexport type PresetId = NoteId | IntervalId | ChordId | ScaleId;\r\n\r\nexport const getPreset = (presetType?: PresetType, presetId?: PresetId) => {\r\n  switch (presetType) {\r\n    case PresetType.Note:\r\n      return NOTE_PRESET_MAP.get(presetId as NoteId);\r\n    case PresetType.Interval:\r\n      return INTERVAL_PRESET_MAP.get(presetId as IntervalId);\r\n    case PresetType.Chord:\r\n      return CHORD_PRESET_MAP.get(presetId as ChordId);\r\n    case PresetType.Scale:\r\n      return SCALE_PRESET_MAP.get(presetId as ScaleId);\r\n  }\r\n};\r\n\r\n// export const logPresetJson = () => {\r\n//   console.log(\"pw-presets notes\", JSON.stringify(NOTE_PRESETS));\r\n//   console.log(\"pw-presets intervals\", JSON.stringify(INTERVAL_PRESETS));\r\n//   console.log(\"pw-presets chords\", JSON.stringify(CHORD_PRESETS));\r\n//   console.log(\"pw-presets scales\", JSON.stringify(SCALE_PRESETS));\r\n// };\r\n","const BASE_NOTE_INDEX = 9;\r\nconst BASE_PITCH = 440;\r\n\r\nexport const getFrequency = (p: number): number => {\r\n  const delta = p - BASE_NOTE_INDEX;\r\n  const exp = delta / 12;\r\n  const multiplier = Math.pow(2, exp);\r\n  const f = BASE_PITCH * multiplier;\r\n  return Math.round(f);\r\n};\r\n\r\n// const getFrequencies = pitches => {\r\n//     return pitches.map(p => getFrequency(p[0]));\r\n// }\r\n\r\n// const CALIBRATION_NOTE = {\r\n//     frequency: 440,\r\n//     noteIndex: 9\r\n// };\r\n\r\n// const CALIBRATION_CONSTANT = Math.pow(2, 1 / 12);\r\n\r\n// export const TUNING_FN = {\r\n// \tTET: {\r\n// \t\tid: 'TET',\r\n// \t\tname: 'TET',\r\n// \t\tvalue: (pod: IPod): number | null => {\r\n// \t\t\tif (!pod) return null;\r\n// \t\t\tconst [p, d] = pod;\r\n// \t\t\tconst a = p + 3;\r\n// \t\t\tconst b = a / 12;\r\n// \t\t\tconst c = Math.pow(2, b);\r\n// \t\t\tconst f = 440 * c;\r\n// \t\t\treturn Math.round(f);\r\n// \t\t}\r\n// \t}\r\n// };\r\n\r\n// Sound\r\n\r\n// static playSound = (note: IPod): void => {\r\n//     const frequency = TuningUtils.getFrequency(note[0]);\r\n//     ToneUtils.playSound(frequency)\r\n// }\r\n\r\n// static playSoundList = (notes: IPod[]): void => {\r\n//     const frequencies = notes.map(n => TuningUtils.getFrequency(n[0]));\r\n//     ToneUtils.playSound(frequencies)\r\n// }\r\n","import { ColorSchemeFn, ColorSchemeId } from \"./Color.utils\";\r\nimport { CHORD_PRESETS } from \"./Chord.constants\";\r\nimport { TuningId } from \"./Tuning.constants\";\r\nimport { VoicingId, VoicingValue } from \"./Voicing.constants\";\r\nimport { AnyPodListPreset } from \"./Core.derived\";\r\nimport { INotePreset, NOTE_PRESETS } from \"./Note.constants\";\r\n\r\nexport const DOTTED_FRET_INDICES = [\r\n  true,\r\n  false,\r\n  false,\r\n  true,\r\n  false,\r\n  true,\r\n  false,\r\n  true,\r\n  false,\r\n  true,\r\n  false,\r\n  false,\r\n];\r\n\r\nexport const FRET_SIZE_RATIO = Math.pow(1 / 2, 1 / 12);\r\n\r\nexport interface IFretboardProps {\r\n  // UI\r\n  fretRange: [number, number];\r\n  showFretDots: boolean;\r\n  showFretNumbers: boolean;\r\n  // Info\r\n  colorSchemeId: ColorSchemeId;\r\n  voicingId: VoicingId;\r\n  tuningId: TuningId;\r\n  podListPreset: AnyPodListPreset;\r\n  rootNotePreset: INotePreset;\r\n}\r\n\r\nexport interface IFretContext {\r\n  stringIndex: number;\r\n  fretIndex: number;\r\n  tuningValue: number[];\r\n  podListPreset: AnyPodListPreset;\r\n  rootNotePreset: INotePreset;\r\n  colorSchemeFn: ColorSchemeFn;\r\n  voicingValue: VoicingValue;\r\n}\r\n\r\nexport interface IFretConfig {\r\n  color?: string;\r\n  opacity?: number;\r\n}\r\n\r\nexport interface IFretMap {\r\n  fretNums: number[];\r\n  fretDots: string[];\r\n  strings: IFretConfig[][];\r\n}\r\n\r\nexport const DEFAULT_FRETBOARD_PROPS: IFretboardProps = {\r\n  fretRange: [1, 12],\r\n  showFretDots: true,\r\n  showFretNumbers: true,\r\n  colorSchemeId: ColorSchemeId.HighlightRoot,\r\n  voicingId: VoicingId.None,\r\n  tuningId: TuningId.Standard,\r\n  podListPreset: CHORD_PRESETS[0],\r\n  rootNotePreset: NOTE_PRESETS[0],\r\n};\r\n","import ArrayUtils from \"./primitives/Array.utils\";\r\nimport { IPreset, PresetMap } from \"./Core.constants\";\r\n\r\nexport enum IntervalQualityId {\r\n  Diminished = \"diminished\",\r\n  Minor = \"minor\",\r\n  Perfect = \"perfect\",\r\n  Major = \"major\",\r\n  Augmented = \"augmented\",\r\n}\r\n\r\nexport interface IIntervalQualityPreset extends IPreset<IntervalQualityId> {\r\n  symbol: string;\r\n  down?: IntervalQualityId;\r\n  up?: IntervalQualityId;\r\n}\r\n\r\nexport const INTERVAL_QUALITY_PRESET_MAP: PresetMap<\r\n  IntervalQualityId,\r\n  IIntervalQualityPreset\r\n> = new Map([\r\n  [\r\n    IntervalQualityId.Diminished,\r\n    {\r\n      presetId: IntervalQualityId.Diminished,\r\n      name: \"Diminished\",\r\n      symbol: \"d\",\r\n      down: undefined,\r\n      up: IntervalQualityId.Minor,\r\n    },\r\n  ],\r\n  [\r\n    IntervalQualityId.Minor,\r\n    {\r\n      presetId: IntervalQualityId.Minor,\r\n      name: \"Minor\",\r\n      symbol: \"m\",\r\n      down: IntervalQualityId.Diminished,\r\n      up: IntervalQualityId.Major,\r\n    },\r\n  ],\r\n  [\r\n    IntervalQualityId.Perfect,\r\n    {\r\n      presetId: IntervalQualityId.Perfect,\r\n      name: \"Perfect\",\r\n      symbol: \"P\",\r\n      down: IntervalQualityId.Diminished,\r\n      up: IntervalQualityId.Augmented,\r\n    },\r\n  ],\r\n  [\r\n    IntervalQualityId.Major,\r\n    {\r\n      presetId: IntervalQualityId.Major,\r\n      name: \"Major\",\r\n      symbol: \"M\",\r\n      down: IntervalQualityId.Minor,\r\n      up: IntervalQualityId.Augmented,\r\n    },\r\n  ],\r\n  [\r\n    IntervalQualityId.Augmented,\r\n    {\r\n      presetId: IntervalQualityId.Augmented,\r\n      name: \"Augmented\",\r\n      symbol: \"A\",\r\n      down: IntervalQualityId.Major,\r\n      up: undefined,\r\n    },\r\n  ],\r\n]);\r\n\r\nexport const INTERVAL_QUALITY_PRESETS = ArrayUtils.mapToArray(\r\n  INTERVAL_QUALITY_PRESET_MAP\r\n);\r\n","import { getFrequency } from \"./Frequency.utils\";\r\nimport {\r\n  CORE_INTERVALS,\r\n  IIntervalPreset,\r\n  INTERVAL_PRESET_MAP,\r\n  IntervalId,\r\n  getExtensionInversionId,\r\n} from \"./Interval.constants\";\r\nimport {\r\n  IIntervalQualityPreset,\r\n  INTERVAL_QUALITY_PRESET_MAP,\r\n  IntervalQualityId,\r\n} from \"./IntervalQuality.constants\";\r\nimport { IPod, MAX_POD } from \"./Pod.constants\";\r\nimport { reducePod } from \"./Pod.utils\";\r\n\r\nconst getIsExtended = (pod: IPod): boolean => {\r\n  return pod[0] > MAX_POD[0] || pod[1] > MAX_POD[1];\r\n};\r\n\r\nexport const getName = (pod: IPod) => {\r\n  const reduced = reducePod(pod);\r\n\r\n  const [noteIndex, d] = reduced;\r\n  const degreeIntervals = CORE_INTERVALS[d] as IIntervalPreset[];\r\n  if (!degreeIntervals) return \"?\";\r\n\r\n  const pIvl = degreeIntervals[0];\r\n  const loIvl = pIvl;\r\n  const hiIvl = degreeIntervals[degreeIntervals.length - 1];\r\n\r\n  // determine core interval and quality\r\n  let ivl: IIntervalPreset | undefined;\r\n  let quality: IIntervalQualityPreset | undefined;\r\n  if (degreeIntervals.length === 1) {\r\n    ivl = pIvl; // perfect\r\n    quality = INTERVAL_QUALITY_PRESET_MAP.get(\r\n      IntervalQualityId.Perfect\r\n    ) as IIntervalQualityPreset;\r\n  } else if (noteIndex <= loIvl.pod[0]) {\r\n    ivl = loIvl; // minor\r\n    quality = INTERVAL_QUALITY_PRESET_MAP.get(\r\n      IntervalQualityId.Minor\r\n    ) as IIntervalQualityPreset;\r\n  } else if (noteIndex >= hiIvl.pod[0]) {\r\n    ivl = hiIvl; // major\r\n    quality = INTERVAL_QUALITY_PRESET_MAP.get(\r\n      IntervalQualityId.Major\r\n    ) as IIntervalQualityPreset;\r\n  }\r\n\r\n  const offset = (ivl as IIntervalPreset).pod[0] - reduced[0];\r\n\r\n  if (offset === 0)\r\n    return `${(quality as IIntervalQualityPreset).symbol}${d + 1}`;\r\n  else if (offset > 0)\r\n    quality = INTERVAL_QUALITY_PRESET_MAP.get(\r\n      IntervalQualityId.Diminished\r\n    ) as IIntervalQualityPreset;\r\n  // dim\r\n  else if (offset < 0)\r\n    quality = INTERVAL_QUALITY_PRESET_MAP.get(\r\n      IntervalQualityId.Augmented\r\n    ) as IIntervalQualityPreset; // aug\r\n\r\n  const count = Math.abs(offset);\r\n  const qualityStr = (quality as IIntervalQualityPreset).symbol.repeat(count);\r\n\r\n  let value = `${qualityStr}${d + 1}`;\r\n\r\n  const isExtended = getIsExtended(pod);\r\n\r\n  if (isExtended) {\r\n    value = getExtensionInversionId(value as IntervalId);\r\n  }\r\n\r\n  return value;\r\n};\r\n\r\nexport const getNameFromId = (presetId: IntervalId) => {\r\n  return (INTERVAL_PRESET_MAP.get(presetId) as IIntervalPreset).name || \"\";\r\n};\r\n\r\nexport const getRatio = (pod: IPod) => {\r\n  const [p] = pod;\r\n\r\n  const baseline = getFrequency(0);\r\n  const compareTo = getFrequency(p);\r\n\r\n  const ratio = compareTo / baseline;\r\n\r\n  return `1:${ratio.toFixed(2)}`;\r\n};\r\n","import ArrayUtils from \"./primitives/Array.utils\";\r\nimport { IPreset, PresetMap } from \"./Core.constants\";\r\n\r\nexport enum AccidentalId {\r\n  DoubleFlat = \"double-flat\",\r\n  Flat = \"flat\",\r\n  Natural = \"natural\",\r\n  Sharp = \"sharp\",\r\n  DoubleSharp = \"double-sharp\",\r\n}\r\n\r\nexport interface IAccidentalPreset extends IPreset<AccidentalId> {\r\n  symbol: string;\r\n  offset: number;\r\n}\r\n\r\nexport const ACCIDENTAL_PRESET_MAP: PresetMap<AccidentalId, IAccidentalPreset> =\r\n  new Map([\r\n    [\r\n      AccidentalId.DoubleFlat,\r\n      {\r\n        presetId: AccidentalId.DoubleFlat,\r\n        name: \"Double Flat\",\r\n        symbol: \"bb\",\r\n        offset: -2,\r\n      },\r\n    ],\r\n    [\r\n      AccidentalId.Flat,\r\n      {\r\n        presetId: AccidentalId.Flat,\r\n        name: \"Flat\",\r\n        symbol: \"b\",\r\n        offset: -1,\r\n      },\r\n    ],\r\n    [\r\n      AccidentalId.Natural,\r\n      {\r\n        presetId: AccidentalId.Natural,\r\n        name: \"Natural\",\r\n        symbol: \"♮\",\r\n        offset: 0,\r\n      },\r\n    ],\r\n    [\r\n      AccidentalId.Sharp,\r\n      {\r\n        presetId: AccidentalId.Sharp,\r\n        name: \"Sharp\",\r\n        symbol: \"#\",\r\n        offset: 1,\r\n      },\r\n    ],\r\n    [\r\n      AccidentalId.DoubleSharp,\r\n      {\r\n        presetId: AccidentalId.DoubleSharp,\r\n        name: \"Double Sharp\",\r\n        symbol: \"##\",\r\n        offset: 2,\r\n      },\r\n    ],\r\n  ]);\r\n\r\nexport const ACCIDENTAL_PRESETS = ArrayUtils.mapToArray(ACCIDENTAL_PRESET_MAP);\r\n","import { PresetMap } from \"./Core.constants\";\r\nimport { ROOT_DEGREE } from \"./Degree.constants\";\r\nimport { ROOT_PITCH } from \"./Pitch.constants\";\r\nimport { IPodPreset } from \"./Pod.constants\";\r\nimport ArrayUtils from \"./primitives/Array.utils\";\r\n\r\nexport enum DiatonicId {\r\n  Tonic = \"tonic\",\r\n  Supertonic = \"supertonic\",\r\n  Mediant = \"mediant\",\r\n  Subdominant = \"subdominant\",\r\n  Dominant = \"dominant\",\r\n  Submediant = \"submediant\",\r\n  Subtonic = \"subtonic\",\r\n}\r\n\r\nexport interface IDiatonicPreset extends IPodPreset<DiatonicId> {}\r\n\r\nexport const DIATONIC_PRESET_MAP: PresetMap<DiatonicId, IDiatonicPreset> =\r\n  new Map([\r\n    [\r\n      DiatonicId.Tonic,\r\n      {\r\n        presetId: DiatonicId.Tonic,\r\n        name: \"Tonic\",\r\n        pod: [0, 0],\r\n      },\r\n    ],\r\n    [\r\n      DiatonicId.Supertonic,\r\n      {\r\n        presetId: DiatonicId.Supertonic,\r\n        name: \"Supertonic\",\r\n        pod: [2, 1],\r\n      },\r\n    ],\r\n    [\r\n      DiatonicId.Mediant,\r\n      {\r\n        presetId: DiatonicId.Mediant,\r\n        name: \"Mediant\",\r\n        pod: [4, 2],\r\n      },\r\n    ],\r\n    [\r\n      DiatonicId.Subdominant,\r\n      {\r\n        presetId: DiatonicId.Subdominant,\r\n        name: \"Subdominant\",\r\n        pod: [5, 3],\r\n      },\r\n    ],\r\n    [\r\n      DiatonicId.Dominant,\r\n      {\r\n        presetId: DiatonicId.Dominant,\r\n        name: \"Dominant\",\r\n        pod: [7, 4],\r\n      },\r\n    ],\r\n    [\r\n      DiatonicId.Submediant,\r\n      {\r\n        presetId: DiatonicId.Submediant,\r\n        name: \"Submediant\",\r\n        pod: [9, 5],\r\n      },\r\n    ],\r\n    [\r\n      DiatonicId.Subtonic,\r\n      {\r\n        presetId: DiatonicId.Subtonic,\r\n        name: \"Subtonic\",\r\n        pod: [11, 6],\r\n      },\r\n    ],\r\n  ]);\r\n\r\nexport const DIATONIC_PRESETS = ArrayUtils.mapToArray(DIATONIC_PRESET_MAP);\r\n\r\nexport const ROOT_SCALE = DIATONIC_PRESETS.map((preset, i) => [\r\n  ROOT_PITCH + preset.pod[0],\r\n  ROOT_DEGREE + preset.pod[1],\r\n]);\r\n","import {\r\n  AccidentalId,\r\n  ACCIDENTAL_PRESET_MAP,\r\n  IAccidentalPreset,\r\n} from \"./Accidental.constants\";\r\nimport { DegreeId, DEGREE_PRESETS } from \"./Degree.constants\";\r\nimport { ROOT_SCALE } from \"./Diatonic.constants\";\r\nimport { getFrequency as getFrequencyFromPitch } from \"./Frequency.utils\";\r\nimport {\r\n  INotePreset,\r\n  NoteId,\r\n  NOTE_PRESETS,\r\n  NOTE_PRESET_MAP,\r\n} from \"./Note.constants\";\r\nimport { IPod, MAX_POD } from \"./Pod.constants\";\r\nimport { arePodsEqual, getDegree, reducePod } from \"./Pod.utils\";\r\nimport NumberUtils from \"./primitives/Number.utils\";\r\n\r\ninterface INoteNameOptions {\r\n  includeOctave?: boolean;\r\n}\r\n\r\ninterface INoteNameParts {\r\n  spelling: string;\r\n  accidental: string;\r\n  octave: number;\r\n}\r\n\r\nexport const getNoteFromPod = (pod: IPod) => {\r\n  return NOTE_PRESETS.find((note) => arePodsEqual(note.pod, pod));\r\n};\r\n\r\nexport const getNoteWithOctave = (noteId: NoteId, octave: number): IPod => {\r\n  const notePreset = NOTE_PRESET_MAP.get(noteId) as INotePreset;\r\n  return [\r\n    (octave - 4) * 12 + NumberUtils.modulo(notePreset.pod[0], 12),\r\n    notePreset.pod[1],\r\n  ];\r\n};\r\n\r\n// export const  fromId = (presetId: string, octave = 4) => {\r\n//   let sharps = (presetId.match(/-sharp/g) || []).length;\r\n//   let flats = (presetId.match(/-flat/g) || []).length;\r\n//   const nativeNoteId = presetId.slice(0, 1) as NoteId;\r\n//   const nativePod = (NOTE_PRESET_MAP.get(nativeNoteId) as IModelConfig).value;\r\n//   const octaveBasePitch =\r\n//     typeof octave === \"undefined\" ? 0 : (octave - 4) * 12;\r\n//   const pitch = octaveBasePitch + nativePod[0] + sharps - flats;\r\n//   const pod = [pitch, nativePod[1]] as IPod;\r\n//   //const pod = [NumberUtils.modulo(nativePod[0] + sharps - flats, 12), nativePod[1]] as IPod;\r\n//   const note = new Note(pod);\r\n//   note.modelType = ModelType.Pod;\r\n//   note.presetType = PresetType.Note;\r\n//   note.presetId = presetId as any;\r\n//   note.name = getName();\r\n//   note.pod = pod as IPod;\r\n//   // @ts-ignore TODO\r\n//   note.value = note.pod;\r\n//   return note;\r\n// };\r\n\r\nexport const getAccidentalOffset = (pod: IPod): number => {\r\n  const [p, d] = reducePod(pod);\r\n\r\n  let offset = p - ROOT_SCALE[d][0];\r\n\r\n  // If offset spans more than half an octave, it's going the wrong way\r\n  // TODO need to formally confirm this\r\n  if (offset > 5) offset = offset - 12;\r\n  if (offset < -5) offset = offset + 12;\r\n\r\n  // Examples\r\n  // if (d === 0 && offset === 11) offset = offset - 12;\r\n  // if (d === 0 && offset === 10) offset = offset - 12;\r\n  // if (d === 0 && offset === 9) offset = offset - 12;\r\n  // if (d === 1 && offset === 9) offset = offset - 12;\r\n  // if (d === 1 && offset === 8) offset = offset - 12;\r\n  // if (d === 5 && offset === -9) offset = offset + 12;\r\n  // if (d === 6 && offset === -11) offset = offset + 12;\r\n  // if (d === 6 && offset === -10) offset = offset + 12;\r\n  // if (d === 6 && offset === -9) offset = offset + 12;\r\n  //console.log(`${p} - ${ROOT_SCALE[d][0]} = ${offset}, d = ${d}`);\r\n\r\n  return offset;\r\n};\r\n\r\nexport const getAccidentalString = (pod: IPod): string => {\r\n  const offset = getAccidentalOffset(pod);\r\n  if (offset > 0) {\r\n    return (\r\n      ACCIDENTAL_PRESET_MAP.get(AccidentalId.Sharp) as IAccidentalPreset\r\n    ).symbol.repeat(offset);\r\n  } else if (offset < 0) {\r\n    return (\r\n      ACCIDENTAL_PRESET_MAP.get(AccidentalId.Flat) as IAccidentalPreset\r\n    ).symbol.repeat(-offset);\r\n  }\r\n  return \"\";\r\n};\r\n\r\nexport const getPitch = (pod: IPod): number => {\r\n  return pod[0];\r\n};\r\n\r\nexport const getPitchClass = (pod: IPod): number => {\r\n  return NumberUtils.modulo(getPitch(pod), MAX_POD[0]);\r\n};\r\n\r\nexport const getOctave = (pod: IPod): number => {\r\n  const midi = true;\r\n  const raw = Math.floor(getPitch(pod) / 12);\r\n  return midi ? raw + 4 : raw;\r\n};\r\n\r\nexport const getDegreeId = (pod: IPod): DegreeId => {\r\n  const degree = getDegree(pod);\r\n  return DEGREE_PRESETS[degree].presetId;\r\n};\r\n\r\nexport const getSpelling = (pod: IPod): string => {\r\n  return getDegreeId(pod);\r\n};\r\n\r\nexport const getNameParts = (pod: IPod): INoteNameParts => {\r\n  const spelling = getSpelling(pod);\r\n  const accidental = getAccidentalString(pod);\r\n  const octave = getOctave(pod);\r\n  return { spelling, accidental, octave };\r\n};\r\n\r\nexport const getName = (pod: IPod, options: INoteNameOptions = {}): string => {\r\n  const { spelling, accidental, octave } = getNameParts(pod);\r\n\r\n  const o = options.includeOctave ? octave : \"\";\r\n  return `${spelling}${accidental}${o}`;\r\n};\r\n\r\nexport const getFrequency = (pod: IPod, format = false) => {\r\n  const f = getFrequencyFromPitch(getPitch(pod));\r\n  return format ? `${f.toFixed(0)} Hz` : f;\r\n};\r\n","import { CHORD_PRESETS } from \"./Chord.constants\";\r\nimport { AnyPodListPreset } from \"./Core.derived\";\r\nimport { INotePreset } from \"./Note.constants\";\r\nimport { IPod, MAX_POD } from \"./Pod.constants\";\r\nimport NumberUtils from \"./primitives/Number.utils\";\r\nimport { SCALE_PRESETS } from \"./Scale.constants\";\r\n\r\n// Search\r\n\r\nconst isPodAtPitch = (\r\n  pod: IPod,\r\n  p: number,\r\n  matchOctave = false\r\n): IPod | null => {\r\n  const pitchOffset = 0;\r\n  const target = p - pitchOffset;\r\n  let a = pod[0];\r\n  let b = target;\r\n  if (!matchOctave) {\r\n    a = NumberUtils.modulo(a, 12);\r\n    b = NumberUtils.modulo(b, 12);\r\n  }\r\n  return a === b ? pod : null;\r\n};\r\n\r\nexport const getIndexOfPodAtPitch = (\r\n  A: IPod[],\r\n  p: number,\r\n  matchOctave: boolean\r\n): number | null => {\r\n  const pod = A.findIndex((a) => isPodAtPitch(a, p, matchOctave));\r\n  return pod !== -1 ? pod : null;\r\n};\r\n\r\n/*static sort = (podList: IPod[]) => {\r\n    return podList.sort((a, b) => {\r\n        if (a[0] < b[0]) return -1;\r\n        else if (a[0] > b[0]) return 1;\r\n        else {\r\n            if (a[1] < b[1]) return -1;\r\n            else if (a[1] > b[1]) return 1;\r\n            else return 0;\r\n        }\r\n    });\r\n}*/\r\n\r\nexport const addPods = (a: IPod, b: IPod): IPod => {\r\n  const p = a[0] + b[0];\r\n  const d = a[1] + b[1];\r\n  const result: IPod = [p, d];\r\n  return result;\r\n};\r\n\r\nexport const subtractPods = (a: IPod, b: IPod): IPod => {\r\n  const p = a[0] - b[0];\r\n  const d = a[1] - b[1];\r\n  const result: IPod = [p, d];\r\n  return result;\r\n};\r\n\r\nexport const addPodList = (a: IPod, B: IPod[]): IPod[] => {\r\n  const result = B.map((b) => addPods(a, b));\r\n  return result;\r\n};\r\n\r\nexport const reducePod = (a: IPod, max = MAX_POD): IPod => {\r\n  const p = NumberUtils.modulo(a[0], max[0]);\r\n  const d = NumberUtils.modulo(a[1], max[1]);\r\n  return [p, d];\r\n};\r\n\r\nexport const arePodsEqual = (a: IPod, b: IPod): boolean => {\r\n  if (!a || !b || a.length !== 2 || b.length !== 2) return false;\r\n  return a[0] === b[0] && a[1] === b[1];\r\n};\r\n\r\nexport const reducePodList = (A: IPod[]): IPod[] => {\r\n  return A.map((a) => reducePod(a));\r\n};\r\n\r\nexport const arePodListsEqual = (A: IPod[], B: IPod[]): boolean => {\r\n  if (!A || !B || A.length !== B.length) return false;\r\n  for (let i = 0; i < A.length; i++) {\r\n    const a = A[i];\r\n    const b = B[i];\r\n    if (!arePodsEqual(a, b)) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const listContainsSubset = (\r\n  podList: IPod[],\r\n  subset: IPod[]\r\n): boolean => {\r\n  for (let i = 0; i < subset.length; i++) {\r\n    if (!podList.find((x) => x[0] === subset[i][0] && x[1] === subset[i][1]))\r\n      return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const getDegree = (pod: IPod) => {\r\n  return NumberUtils.modulo(pod[1], MAX_POD[1]);\r\n};\r\n\r\nexport const getShortName = (str) =>\r\n  str\r\n    .replace(\"Major\", \"Maj\")\r\n    .replace(\"Minor\", \"Min\")\r\n    .replace(\"Augmented\", \"Aug\")\r\n    .replace(\"Diminished\", \"Dim\")\r\n    .replace(\"Suspended\", \"Sus\")\r\n    .replace(\"Dominant\", \"Dom\")\r\n    .replace(\"Pentatonic\", \"Pent\")\r\n    .replace(\"st\", \"\")\r\n    .replace(\"nd\", \"\")\r\n    .replace(\"rd\", \"\")\r\n    .replace(\"th\", \"\");\r\n\r\nexport const getRootedName = (\r\n  podListPreset: AnyPodListPreset,\r\n  rootNotePreset?: INotePreset\r\n) => {\r\n  return `${rootNotePreset ? `${rootNotePreset.name} ` : \"\"}${\r\n    podListPreset.name\r\n  }`;\r\n};\r\n\r\nexport const isInSuperset = (intervalPods: IPod[], superset: IPod[]) => {\r\n  if (superset.length <= intervalPods.length) return false;\r\n  return listContainsSubset(superset, intervalPods);\r\n};\r\n\r\nexport const containsSubset = (intervalPods: IPod[], subset: IPod[]) => {\r\n  if (subset.length >= intervalPods.length) return false;\r\n  return listContainsSubset(intervalPods, subset);\r\n};\r\n\r\nexport const getSubchords = (intervalPods: IPod[]) => {\r\n  return CHORD_PRESETS.filter((preset) =>\r\n    containsSubset(intervalPods, preset.pods)\r\n  );\r\n};\r\n\r\nexport const getSuperchords = (intervalPods: IPod[]) => {\r\n  return CHORD_PRESETS.filter((preset) =>\r\n    isInSuperset(intervalPods, preset.pods)\r\n  );\r\n};\r\n\r\nexport const getSubscales = (intervalPods: IPod[]) => {\r\n  return SCALE_PRESETS.filter((preset) =>\r\n    containsSubset(intervalPods, preset.pods)\r\n  );\r\n};\r\n\r\nexport const getSuperscales = (intervalPods: IPod[]) => {\r\n  return SCALE_PRESETS.filter((preset) =>\r\n    isInSuperset(intervalPods, preset.pods)\r\n  );\r\n};\r\n\r\nexport const getAllRelated = (intervalPods: IPod[]) => {\r\n  return [\r\n    ...getSubchords(intervalPods),\r\n    ...getSubscales(intervalPods),\r\n    ...getSuperchords(intervalPods),\r\n    ...getSuperscales(intervalPods),\r\n  ];\r\n};\r\n\r\n// applyRoot(root: IPod) {\r\n//   let notePods;\r\n//   try {\r\n//     notePods = this.intervalPods.map((ivl) => addPods(root, ivl));\r\n//   } catch (e) {\r\n//     console.error(e);\r\n//     throw new Error(\"Unable to apply root\");\r\n//   }\r\n//   this.root = root;\r\n//   this.notePods = notePods;\r\n//   this.name = `${\"ROOT\"} ${this.name}`;\r\n//   return this;\r\n// }\r\n\r\nexport const tryGetPodPairAtPitch = (\r\n  intervalPods: IPod[],\r\n  notePods: IPod[],\r\n  noteIndex: number\r\n): [IPod, IPod] | [undefined, undefined] => {\r\n  if (!notePods) return [undefined, undefined];\r\n\r\n  const index = getIndexOfPodAtPitch(notePods, noteIndex, false);\r\n\r\n  if (index == null) return [undefined, undefined];\r\n\r\n  return [intervalPods[index], (notePods as IPod[])[index]];\r\n};\r\n\r\nexport const getNotePods = (\r\n  rootPod: IPod,\r\n  intervalPods: IPod[],\r\n  octave = 4\r\n): IPod[] => {\r\n  const notePods = intervalPods.map((ivl) => {\r\n    const notePod = addPods(rootPod, ivl);\r\n    return [\r\n      (octave - 4) * 12 + NumberUtils.modulo(notePod[0], 12),\r\n      notePod[1],\r\n    ] as IPod;\r\n  });\r\n  return notePods;\r\n};\r\n","import { NoteId } from \".//Note.constants\";\r\nimport { IPreset, PresetMap } from \"./Core.constants\";\r\nimport { getNoteWithOctave } from \"./Note.utils\";\r\nimport ArrayUtils from \"./primitives/Array.utils\";\r\n\r\nexport enum TuningId {\r\n  Standard = \"standard\",\r\n  StandardSeven = \"standard-seven\",\r\n  StandardBass = \"standard-bass\",\r\n  Flat = \"flat\",\r\n  DoubleFlat = \"double-flat\",\r\n  DropD = \"drop-d\",\r\n  DADGAD = \"dadgad\",\r\n  Banjo = \"banjo\",\r\n  Violin = \"violin\",\r\n  OpenA = \"open-a\",\r\n  OpenB = \"open-b\",\r\n  OpenC = \"open-c\",\r\n  OpenD = \"open-d\",\r\n  OpenE = \"open-e\",\r\n  OpenF = \"open-f\",\r\n  OpenG = \"open-g\",\r\n}\r\n\r\nexport type TuningValue = number[];\r\n\r\nexport interface ITuningPreset extends IPreset<TuningId> {\r\n  value: TuningValue;\r\n}\r\n\r\nconst formatPreset = (\r\n  presetId: TuningId,\r\n  name: string,\r\n  value: TuningValue\r\n): ITuningPreset => ({\r\n  presetId,\r\n  name,\r\n  value,\r\n});\r\n\r\nconst getPitch = (noteId: NoteId, octave: number): number =>\r\n  getNoteWithOctave(noteId, octave)[0];\r\n\r\nexport const TUNING_PRESET_MAP: PresetMap<TuningId, ITuningPreset> = new Map([\r\n  [\r\n    TuningId.Standard,\r\n    formatPreset(TuningId.Standard, \"Standard Guitar\", [\r\n      getPitch(NoteId.E, 5),\r\n      getPitch(NoteId.B, 4),\r\n      getPitch(NoteId.G, 4),\r\n      getPitch(NoteId.D, 4),\r\n      getPitch(NoteId.A, 3),\r\n      getPitch(NoteId.E, 3),\r\n    ]),\r\n  ],\r\n  [\r\n    TuningId.Flat,\r\n    formatPreset(TuningId.Flat, \"Flat Gtr\", [\r\n      getPitch(NoteId.Eb, 5),\r\n      getPitch(NoteId.Bb, 4),\r\n      getPitch(NoteId.Gb, 4),\r\n      getPitch(NoteId.Db, 4),\r\n      getPitch(NoteId.Ab, 3),\r\n      getPitch(NoteId.Eb, 3),\r\n    ]),\r\n  ],\r\n  [\r\n    TuningId.DoubleFlat,\r\n    formatPreset(TuningId.DoubleFlat, \"Double Flat Gtr\", [\r\n      getPitch(NoteId.D, 5),\r\n      getPitch(NoteId.A, 4),\r\n      getPitch(NoteId.F, 4),\r\n      getPitch(NoteId.C, 4),\r\n      getPitch(NoteId.G, 3),\r\n      getPitch(NoteId.D, 3),\r\n    ]),\r\n  ],\r\n  [\r\n    TuningId.StandardSeven,\r\n    formatPreset(TuningId.StandardSeven, \"Standard 7-String Gtr\", [\r\n      getPitch(NoteId.E, 5),\r\n      getPitch(NoteId.B, 4),\r\n      getPitch(NoteId.G, 4),\r\n      getPitch(NoteId.D, 4),\r\n      getPitch(NoteId.A, 3),\r\n      getPitch(NoteId.E, 3),\r\n      getPitch(NoteId.B, 3),\r\n    ]),\r\n  ],\r\n  [\r\n    TuningId.StandardBass,\r\n    formatPreset(TuningId.StandardBass, \"Standard Bass\", [\r\n      getPitch(NoteId.G, 3),\r\n      getPitch(NoteId.D, 3),\r\n      getPitch(NoteId.A, 2),\r\n      getPitch(NoteId.E, 2),\r\n    ]),\r\n  ],\r\n  [\r\n    TuningId.DropD,\r\n    formatPreset(TuningId.DropD, \"Drop D Gtr\", [\r\n      getPitch(NoteId.E, 5),\r\n      getPitch(NoteId.B, 4),\r\n      getPitch(NoteId.G, 4),\r\n      getPitch(NoteId.D, 4),\r\n      getPitch(NoteId.A, 3),\r\n      getPitch(NoteId.D, 3),\r\n    ]),\r\n  ],\r\n  [\r\n    TuningId.DADGAD,\r\n    formatPreset(TuningId.DADGAD, \"DADGAD\", [\r\n      getPitch(NoteId.D, 5),\r\n      getPitch(NoteId.A, 4),\r\n      getPitch(NoteId.G, 4),\r\n      getPitch(NoteId.D, 4),\r\n      getPitch(NoteId.A, 3),\r\n      getPitch(NoteId.D, 3),\r\n    ]),\r\n  ],\r\n  // Unconfirmed\r\n  /*[TuningId.Banjo, formatPreset(\r\n        TuningId.Banjo,\r\n        'Banjo',\r\n        [\r\n            getPitch(NoteId.G, 5),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],*/\r\n  // Unconfirmed\r\n  [\r\n    TuningId.Violin,\r\n    formatPreset(TuningId.Violin, \"Violin\", [\r\n      getPitch(NoteId.E, 5),\r\n      getPitch(NoteId.A, 4),\r\n      getPitch(NoteId.D, 4),\r\n      getPitch(NoteId.G, 4),\r\n    ]),\r\n  ],\r\n  [\r\n    TuningId.OpenA,\r\n    formatPreset(TuningId.OpenA, \"Open A\", [\r\n      getPitch(NoteId.E, 5),\r\n      getPitch(NoteId.A, 4),\r\n      getPitch(NoteId.E, 4),\r\n      getPitch(NoteId.Cs, 4),\r\n      getPitch(NoteId.A, 3),\r\n      getPitch(NoteId.E, 3),\r\n    ]),\r\n  ],\r\n  [\r\n    TuningId.OpenB,\r\n    formatPreset(TuningId.OpenB, \"Open B\", [\r\n      getPitch(NoteId.Ds, 5),\r\n      getPitch(NoteId.B, 4),\r\n      getPitch(NoteId.Fs, 4),\r\n      getPitch(NoteId.B, 4),\r\n      getPitch(NoteId.Fs, 3),\r\n      getPitch(NoteId.B, 3),\r\n    ]),\r\n  ],\r\n  [\r\n    TuningId.OpenC,\r\n    formatPreset(TuningId.OpenC, \"Open C\", [\r\n      getPitch(NoteId.E, 5),\r\n      getPitch(NoteId.C, 4),\r\n      getPitch(NoteId.G, 4),\r\n      getPitch(NoteId.C, 4),\r\n      getPitch(NoteId.G, 3),\r\n      getPitch(NoteId.C, 3),\r\n    ]),\r\n  ],\r\n  [\r\n    TuningId.OpenD,\r\n    formatPreset(TuningId.OpenD, \"Open D\", [\r\n      getPitch(NoteId.D, 5),\r\n      getPitch(NoteId.A, 4),\r\n      getPitch(NoteId.Fs, 4),\r\n      getPitch(NoteId.D, 4),\r\n      getPitch(NoteId.A, 3),\r\n      getPitch(NoteId.D, 3),\r\n    ]),\r\n  ],\r\n  [\r\n    TuningId.OpenE,\r\n    formatPreset(TuningId.OpenE, \"Open E\", [\r\n      getPitch(NoteId.E, 5),\r\n      getPitch(NoteId.B, 4),\r\n      getPitch(NoteId.Gs, 4),\r\n      getPitch(NoteId.E, 4),\r\n      getPitch(NoteId.B, 3),\r\n      getPitch(NoteId.E, 3),\r\n    ]),\r\n  ],\r\n  [\r\n    TuningId.OpenF,\r\n    formatPreset(TuningId.OpenF, \"Open F\", [\r\n      getPitch(NoteId.F, 5),\r\n      getPitch(NoteId.C, 4),\r\n      getPitch(NoteId.F, 4),\r\n      getPitch(NoteId.C, 4),\r\n      getPitch(NoteId.A, 3),\r\n      getPitch(NoteId.F, 3),\r\n    ]),\r\n  ],\r\n  [\r\n    TuningId.OpenG,\r\n    formatPreset(TuningId.OpenG, \"Open G\", [\r\n      getPitch(NoteId.D, 5),\r\n      getPitch(NoteId.B, 4),\r\n      getPitch(NoteId.G, 4),\r\n      getPitch(NoteId.D, 4),\r\n      getPitch(NoteId.G, 3),\r\n      getPitch(NoteId.D, 3),\r\n    ]),\r\n  ],\r\n]);\r\n\r\nexport const FRETBOARD_TUNING_VALUES: ITuningPreset[] = ArrayUtils.mapToArray(TUNING_PRESET_MAP);\r\n","import { IPreset, PresetMap } from \"./Core.constants\";\r\nimport ArrayUtils from \"./primitives/Array.utils\";\r\n\r\nexport enum VoicingId {\r\n  None = \"None\",\r\n  Chord_Triad_CShape_1 = \"Chord_Triad_CShape_1\",\r\n  Chord_Triad_AShape_1 = \"Chord_Triad_AShape_1\",\r\n  Chord_Triad_GShape_1 = \"Chord_Triad_GShape_1\",\r\n  Chord_Triad_EShape_1 = \"Chord_Triad_EShape_1\",\r\n  Chord_Triad_DShape_1 = \"Chord_Triad_DShape_1\",\r\n  Chord_Sixth_CShape_1 = \"Chord_Sixth_CShape_1\",\r\n  Chord_Sixth_AShape_1 = \"Chord_Sixth_AShape_1\",\r\n  Chord_Sixth_GShape_1 = \"Chord_Sixth_GShape_1\",\r\n  Chord_Sixth_EShape_1 = \"Chord_Sixth_EShape_1\",\r\n  Chord_Sixth_DShape_1 = \"Chord_Sixth_DShape_1\",\r\n  Chord_Seventh_CShape_1 = \"Chord_Seventh_CShape_1\",\r\n  Chord_Seventh_AShape_1 = \"Chord_Seventh_AShape_1\",\r\n  Chord_Seventh_GShape_1 = \"Chord_Seventh_GShape_1\",\r\n  Chord_Seventh_EShape_1 = \"Chord_Seventh_EShape_1\",\r\n  Chord_Seventh_DShape_1 = \"Chord_Seventh_DShape_1\",\r\n  Chord_Shell_E_37 = \"Chord_Shell_E_37\",\r\n  Chord_Shell_E_73 = \"Chord_Shell_E_73\",\r\n  Chord_Shell_A_37 = \"Chord_Shell_A_37\",\r\n  Chord_Shell_A_73 = \"Chord_Shell_A_73\",\r\n  Chord_Shell_D_37 = \"Chord_Shell_D_37\",\r\n  Chord_Shell_D_73 = \"Chord_Shell_D_73\",\r\n  Scale_DoubleOctave_CShape_1 = \"Scale_DoubleOctave_CShape_1\",\r\n  Scale_DoubleOctave_CShape_2 = \"Scale_DoubleOctave_CShape_2\",\r\n  Scale_DoubleOctave_AShape_1 = \"Scale_DoubleOctave_AShape_1\",\r\n  Scale_DoubleOctave_GShape_1 = \"Scale_DoubleOctave_GShape_1\",\r\n  Scale_DoubleOctave_EShape_1 = \"Scale_DoubleOctave_EShape_1\",\r\n  Scale_DoubleOctave_EShape_2 = \"Scale_DoubleOctave_EShape_2\",\r\n  Scale_DoubleOctave_DShape_1 = \"Scale_DoubleOctave_DShape_1\",\r\n}\r\n\r\nexport type VoicingValue = (number | number[] | undefined)[];\r\n\r\nexport interface IVoicingPreset extends IPreset<VoicingId> {\r\n  value: VoicingValue;\r\n}\r\n\r\nconst formatVoicingPreset = (\r\n  presetId: VoicingId,\r\n  name: string,\r\n  value: VoicingValue\r\n): IVoicingPreset => ({\r\n  presetId,\r\n  name,\r\n  value,\r\n});\r\n\r\nexport const VOICING_PRESET_MAP: PresetMap<VoicingId, IVoicingPreset> = new Map(\r\n  [\r\n    [VoicingId.None, formatVoicingPreset(VoicingId.None, \"None\", [])],\r\n    // Triads\r\n    [\r\n      VoicingId.Chord_Triad_CShape_1,\r\n      formatVoicingPreset(VoicingId.Chord_Triad_CShape_1, \"C Shape Triad\", [\r\n        3,\r\n        1,\r\n        5,\r\n        3,\r\n        1,\r\n        undefined,\r\n      ]),\r\n    ],\r\n    [\r\n      VoicingId.Chord_Triad_AShape_1,\r\n      formatVoicingPreset(VoicingId.Chord_Triad_AShape_1, \"A Shape Triad\", [\r\n        5,\r\n        3,\r\n        1,\r\n        5,\r\n        1,\r\n        undefined,\r\n      ]),\r\n    ],\r\n    [\r\n      VoicingId.Chord_Triad_GShape_1,\r\n      formatVoicingPreset(\r\n        VoicingId.Chord_Triad_GShape_1,\r\n        \"G Shape Triad\",\r\n        [1, 5, 1, 5, 3, 1]\r\n      ),\r\n    ],\r\n    [\r\n      VoicingId.Chord_Triad_EShape_1,\r\n      formatVoicingPreset(\r\n        VoicingId.Chord_Triad_EShape_1,\r\n        \"E Shape Triad\",\r\n        [1, 5, 3, 1, 5, 1]\r\n      ),\r\n    ],\r\n    [\r\n      VoicingId.Chord_Triad_DShape_1,\r\n      formatVoicingPreset(VoicingId.Chord_Triad_DShape_1, \"D Shape Triad\", [\r\n        3,\r\n        1,\r\n        5,\r\n        1,\r\n        undefined,\r\n        undefined,\r\n      ]),\r\n    ],\r\n    // Sixths\r\n    [\r\n      VoicingId.Chord_Sixth_CShape_1,\r\n      formatVoicingPreset(VoicingId.Chord_Sixth_CShape_1, \"C Shape 6th Chord\", [\r\n        3,\r\n        6,\r\n        5,\r\n        3,\r\n        1,\r\n        undefined,\r\n      ]),\r\n    ],\r\n    [\r\n      VoicingId.Chord_Sixth_AShape_1,\r\n      formatVoicingPreset(VoicingId.Chord_Sixth_AShape_1, \"A Shape 6th Chord\", [\r\n        5,\r\n        3,\r\n        6,\r\n        5,\r\n        1,\r\n        undefined,\r\n      ]),\r\n    ],\r\n    [\r\n      VoicingId.Chord_Sixth_GShape_1,\r\n      formatVoicingPreset(\r\n        VoicingId.Chord_Sixth_GShape_1,\r\n        \"G Shape 6th Chord\",\r\n        [6, 5, 1, 5, 3, 1]\r\n      ),\r\n    ],\r\n    [\r\n      VoicingId.Chord_Sixth_EShape_1,\r\n      formatVoicingPreset(\r\n        VoicingId.Chord_Sixth_EShape_1,\r\n        \"E Shape 6th Chord\",\r\n        [1, 5, 3, 6, 5, 1]\r\n      ),\r\n    ],\r\n    [\r\n      VoicingId.Chord_Sixth_DShape_1,\r\n      formatVoicingPreset(VoicingId.Chord_Sixth_DShape_1, \"D Shape 6th Chord\", [\r\n        3,\r\n        6,\r\n        5,\r\n        1,\r\n        undefined,\r\n        undefined,\r\n      ]),\r\n    ],\r\n    // Sevenths\r\n    [\r\n      VoicingId.Chord_Seventh_CShape_1,\r\n      formatVoicingPreset(\r\n        VoicingId.Chord_Seventh_CShape_1,\r\n        \"C Shape 7th Chord\",\r\n        [3, 7, 5, 3, 1, undefined]\r\n      ),\r\n    ],\r\n    [\r\n      VoicingId.Chord_Seventh_AShape_1,\r\n      formatVoicingPreset(\r\n        VoicingId.Chord_Seventh_AShape_1,\r\n        \"A Shape 7th Chord\",\r\n        [5, 3, 7, 5, 1, undefined]\r\n      ),\r\n    ],\r\n    [\r\n      VoicingId.Chord_Seventh_GShape_1,\r\n      formatVoicingPreset(\r\n        VoicingId.Chord_Seventh_GShape_1,\r\n        \"G Shape 7th Chord\",\r\n        [7, 5, 1, 5, 3, 1]\r\n      ),\r\n    ],\r\n    [\r\n      VoicingId.Chord_Seventh_EShape_1,\r\n      formatVoicingPreset(\r\n        VoicingId.Chord_Seventh_EShape_1,\r\n        \"E Shape 7th Chord\",\r\n        [1, 5, 3, 7, 5, 1]\r\n      ),\r\n    ],\r\n    [\r\n      VoicingId.Chord_Seventh_DShape_1,\r\n      formatVoicingPreset(\r\n        VoicingId.Chord_Seventh_DShape_1,\r\n        \"D Shape 7th Chord\",\r\n        [3, 7, 5, 1, undefined, undefined]\r\n      ),\r\n    ],\r\n    // Shells\r\n    [\r\n      VoicingId.Chord_Shell_E_37,\r\n      formatVoicingPreset(VoicingId.Chord_Shell_E_37, \"Shell E 3-7\", [\r\n        undefined,\r\n        undefined,\r\n        undefined,\r\n        7,\r\n        3,\r\n        1,\r\n      ]),\r\n    ],\r\n    [\r\n      VoicingId.Chord_Shell_E_73,\r\n      formatVoicingPreset(VoicingId.Chord_Shell_E_73, \"Shell E 7-3\", [\r\n        undefined,\r\n        undefined,\r\n        3,\r\n        7,\r\n        undefined,\r\n        1,\r\n      ]),\r\n    ],\r\n    [\r\n      VoicingId.Chord_Shell_A_37,\r\n      formatVoicingPreset(VoicingId.Chord_Shell_A_37, \"Shell A 3-7\", [\r\n        undefined,\r\n        undefined,\r\n        7,\r\n        3,\r\n        1,\r\n        undefined,\r\n      ]),\r\n    ],\r\n    [\r\n      VoicingId.Chord_Shell_A_73,\r\n      formatVoicingPreset(VoicingId.Chord_Shell_A_73, \"Shell A 7-3\", [\r\n        undefined,\r\n        3,\r\n        7,\r\n        undefined,\r\n        1,\r\n        undefined,\r\n      ]),\r\n    ],\r\n    [\r\n      VoicingId.Chord_Shell_D_37,\r\n      formatVoicingPreset(VoicingId.Chord_Shell_D_37, \"Shell D 3-7\", [\r\n        undefined,\r\n        7,\r\n        3,\r\n        1,\r\n        undefined,\r\n        undefined,\r\n      ]),\r\n    ],\r\n    [\r\n      VoicingId.Chord_Shell_D_73,\r\n      formatVoicingPreset(VoicingId.Chord_Shell_D_73, \"Shell D 7-3\", [\r\n        3,\r\n        7,\r\n        undefined,\r\n        1,\r\n        undefined,\r\n        undefined,\r\n      ]),\r\n    ],\r\n    // CAGED Scales\r\n    [\r\n      VoicingId.Scale_DoubleOctave_EShape_1,\r\n      formatVoicingPreset(\r\n        VoicingId.Scale_DoubleOctave_EShape_1,\r\n        \"E Shape Scale (Locrian)\",\r\n        [\r\n          [1, 2, 3],\r\n          [6, 7],\r\n          [3, 4, 5],\r\n          [7, 1, 2],\r\n          [4, 5, 6],\r\n          [1, 2, 3],\r\n        ]\r\n      ),\r\n    ],\r\n    [\r\n      VoicingId.Scale_DoubleOctave_EShape_2,\r\n      formatVoicingPreset(\r\n        VoicingId.Scale_DoubleOctave_EShape_2,\r\n        \"E Shape Scale (Ionian)\",\r\n        [\r\n          [7, 1, 2],\r\n          [5, 6],\r\n          [2, 3, 4],\r\n          [6, 7, 1],\r\n          [3, 4, 5],\r\n          [1, 2],\r\n        ]\r\n      ),\r\n    ],\r\n    [\r\n      VoicingId.Scale_DoubleOctave_DShape_1,\r\n      formatVoicingPreset(\r\n        VoicingId.Scale_DoubleOctave_DShape_1,\r\n        \"D Shape Scale (Dorian)\",\r\n        [\r\n          [1, 2, 3],\r\n          [5, 6, 7],\r\n          [2, 3, 4],\r\n          [6, 7, 1],\r\n          [4, 5],\r\n          [1, 2, 3],\r\n        ]\r\n      ),\r\n    ],\r\n    [\r\n      VoicingId.Scale_DoubleOctave_CShape_1,\r\n      formatVoicingPreset(\r\n        VoicingId.Scale_DoubleOctave_CShape_1,\r\n        \"C Shape Scale (Phrygian)\",\r\n        [\r\n          [1, 2, 3],\r\n          [5, 6, 7],\r\n          [3, 4],\r\n          [7, 1, 2],\r\n          [4, 5, 6],\r\n          [1, 2, 3],\r\n        ]\r\n      ),\r\n    ],\r\n    [\r\n      VoicingId.Scale_DoubleOctave_CShape_2,\r\n      formatVoicingPreset(\r\n        VoicingId.Scale_DoubleOctave_CShape_2,\r\n        \"C Shape Scale (Lydian)\",\r\n        [\r\n          [7, 1, 2],\r\n          [4, 5, 6],\r\n          [2, 3],\r\n          [6, 7, 1],\r\n          [3, 4, 5],\r\n          [1, 2],\r\n        ]\r\n      ),\r\n    ],\r\n    [\r\n      VoicingId.Scale_DoubleOctave_AShape_1,\r\n      formatVoicingPreset(\r\n        VoicingId.Scale_DoubleOctave_AShape_1,\r\n        \"A Shape Scale (Mixolydian)\",\r\n        [\r\n          [1, 2],\r\n          [5, 6, 7],\r\n          [2, 3, 4],\r\n          [6, 7, 1],\r\n          [3, 4, 5],\r\n          [1, 2],\r\n        ]\r\n      ),\r\n    ],\r\n    [\r\n      VoicingId.Scale_DoubleOctave_GShape_1,\r\n      formatVoicingPreset(\r\n        VoicingId.Scale_DoubleOctave_GShape_1,\r\n        \"G Shape Scale (Aeolian)\",\r\n        [\r\n          [1, 2, 3],\r\n          [5, 6, 7],\r\n          [2, 3, 4],\r\n          [7, 1],\r\n          [4, 5, 6],\r\n          [1, 2, 3],\r\n        ]\r\n      ),\r\n    ],\r\n  ]\r\n);\r\n\r\nexport const VOICING_PRESETS = ArrayUtils.mapToArray(VOICING_PRESET_MAP);\r\n\r\nexport const VOICING_OPTIONS: IVoicingPreset[] = [\r\n  {\r\n    id: VoicingId.None,\r\n    name: \"---\",\r\n    value: undefined,\r\n  },\r\n  ...VOICING_PRESETS,\r\n];\r\n","const ROMAN_NUMERAL = {\r\n\tM: 1000,\r\n\tCM: 900,\r\n\tD: 500,\r\n\tCD: 400,\r\n\tC: 100,\r\n\tXC: 90,\r\n\tL: 50,\r\n\tXL: 40,\r\n\tX: 10,\r\n\tIX: 9,\r\n\tV: 5,\r\n\tIV: 4,\r\n\tI: 1\r\n} as const;\r\n\r\nconst modulo = (a: number, b: number): number => {\r\n\treturn ((a % b) + b) % b;\r\n}\r\n\r\nconst moduloSum = (a: number, b: number, divisor: number): number => {\r\n\tconst offset = 0;\r\n\tconst subtraction = false;\r\n\tconst dividend = (subtraction) ? ((a - offset) - (b - offset)) : ((a - offset) + (b - offset));\r\n\treturn modulo(dividend, divisor) + offset;\r\n};\r\n\r\nconst romanize = (n: number): string => {\r\n\tlet str = '';\r\n\tfor (const i of Object.keys(ROMAN_NUMERAL)) {\r\n\t\tvar q = Math.floor(n / ROMAN_NUMERAL[i]);\r\n\t\tn -= q * ROMAN_NUMERAL[i];\r\n\t\tstr += i.repeat(q);\r\n\t\tif (n === 0) return str;\r\n\t}\r\n\treturn str;\r\n}\r\n\r\nexport default {\r\n\tmodulo,\r\n\tmoduloSum,\r\n\tromanize\r\n};\r\n"],"names":["StyledCardSection","styled","props","theme","_props$theme","text","_props$theme$text","secondary","_props$theme2","surface","_props$theme2$surface","bg","_ref","title","children","React","className","StyledDropdownInput","value","setValue","options","idProperty","displayProperty","onChange","e","target","selectedIndex","map","v","i","key","StyledNumbericInput","utils","_theme$utils","border","_ref2","status","_theme$status","interactive","_ref3","_theme$status2","active","_ref4","_theme$status3","highlight","_ref5","_theme$utils2","_ref6","rest","ButtonInput","onClick","newVal","min","Math","max","Icon","iconId","size","type","StyledSwitch","$active","action","_theme$action","_theme$action2","_theme$surface","StyledOverlay","StyledContainer","StyledCard","setIsOpen","Card","draggable","StyledCardFooterButton","_props$theme$surface","card","_props$theme2$action","_props$theme3","_props$theme3$action","isActive","$isActive","StyledInputRow","$y","dark3","label","y","StyledMaximizeButton","VOICING_OPTIONS","FRETBOARD_TUNING_VALUES","DEFAULT_FRETBOARD_PROPS","StyledMainCol","voicing","tuning","fretRange","setVoicing","setTuning","setFretRange","showFretNumbers","setShowFretNumbers","showFretDots","setShowFretDots","presetConfig","root","isEditing","setIsEditing","useState","isFullScreen","setIsFullScreen","filteredVoicings","fretLo","fretHi","viewer","Fretboard","podListPreset","rootNotePreset","tuningId","presetId","MaximizeButton","Modal","CardSection","InputRow","DropdownInput","id","TuningId","NumericInput","SwitchInput","CardFooterButton","StyledDetailsCol","presetType","setPresetType","setPresetConfig","setRoot","modelOptions","data","intervalIds","valueIds","Link","to","getModelRoute","getRootedName","ivl","intervalPreset","INTERVAL_PRESET_MAP","intervalPod","pod","intervalName","getIntervalName","notePod","addPods","noteName","getNoteName","NOTE_PRESETS","POD_LIST_PRESET_TYPE_OPTIONS","DEFAULT_VOICING","DEFAULT_TUNING","DEFAULT_FRET_RANGE","colorScheme","_setColorScheme","COLOR_SCHEME_PRESETS","colorConfig","setColorConfig","defaultConfig","setColorScheme","cs","qpPresetType","useQueryParam","qpPresetId","qpRootId","initPresetType","initPresetId","initRootId","_setPresetType","getInitPresetType","find","preset","getInitPresetConfig","note","StyledFretboardPage","PageLayout","displayName","componentId","useModelQueryParams","modelState","useModelState","fretboardState","useFretboardState","hideHeader","ColumnManager","desktop","FretboardCol","NotesCol","getFretConfig","fretContext","stringIndex","fretIndex","tuningValue","voicingValue","colorSchemeFn","noteIndex","rootPod","intervalPods","pods","notePods","getNotePods","interval","tryGetPodPairAtPitch","color","getDotsForFret","fretNumber","mod","DOTTED_FRET_INDICES","StyledFretTable","StyledFretFlag","$color","$opacity","tableStyles","css","fretMap","userProps","colorSchemeId","voicingId","lo","hi","TUNING_PRESET_MAP","VOICING_PRESET_MAP","COLOR_SCHEME_PRESET_MAP","fn","numFrets","numStrings","length","fretNums","push","fretDots","strings","s","frets","f","getFretMapFromFretboardProps","rows","cols","opacity","content","Table","thead","undefined","tfoot","tbody","styles","StyledColumnManager","$tablet","MediaQuery","join","$desktop","tablet","StyledCardHeader","CardHeader","level","AsTag","subtitle","StyledTable","getIsTypeOmit","Col","index","isHeader","colSpan","link","ColTag","WrapperTag","Fragment","wrapperProps","Row","headerColIndicies","col","isConfig","hasOwnProperty","getIsConfig","colConfig","includes","TableSection","Tag","row","colGroups","caption","cg","ColorSchemeId","BLACK","DEFAULT_MONOCHROME_CONFIG","DEFAULT_HIGHLIGHT_ROOT_CONFIG","DEFAULT_DEGREE_COLOR_SCHEME","DEFAULT_PITCH_COLOR_SCHEME","Map","Monochrome","name","config","HighlightRoot","getDegree","Degree","PitchClass","getPitchClass","ArrayUtils","SCALE_PRESETS","CHORD_PRESETS","PresetType","getPreset","NOTE_PRESET_MAP","CHORD_PRESET_MAP","SCALE_PRESET_MAP","getFrequency","p","exp","pow","round","VoicingId","IntervalQualityId","INTERVAL_QUALITY_PRESET_MAP","Diminished","symbol","down","up","Minor","Major","Perfect","Augmented","getName","reduced","reducePod","d","degreeIntervals","CORE_INTERVALS","pIvl","loIvl","hiIvl","quality","get","offset","count","abs","repeat","isExtended","MAX_POD","getIsExtended","getExtensionInversionId","getRatio","baseline","toFixed","AccidentalId","ACCIDENTAL_PRESET_MAP","DoubleFlat","Flat","Natural","Sharp","DoubleSharp","DiatonicId","DIATONIC_PRESET_MAP","Tonic","Supertonic","Mediant","Subdominant","Dominant","Submediant","Subtonic","ROOT_SCALE","ROOT_PITCH","ROOT_DEGREE","getNoteFromPod","arePodsEqual","getNoteWithOctave","noteId","octave","notePreset","NumberUtils","getAccidentalString","getAccidentalOffset","getPitch","getSpelling","degree","DEGREE_PRESETS","getDegreeId","getNameParts","spelling","accidental","raw","floor","getOctave","includeOctave","format","getFrequencyFromPitch","getIndexOfPodAtPitch","A","matchOctave","findIndex","a","b","isPodAtPitch","subtractPods","arePodListsEqual","B","listContainsSubset","podList","subset","x","getShortName","str","replace","isInSuperset","superset","containsSubset","getSubchords","getSuperchords","getSubscales","getSuperscales","formatPreset","Standard","NoteId","StandardSeven","StandardBass","DropD","DADGAD","Violin","OpenA","OpenB","OpenC","OpenD","OpenE","OpenF","OpenG","formatVoicingPreset","None","Chord_Triad_CShape_1","Chord_Triad_AShape_1","Chord_Triad_GShape_1","Chord_Triad_EShape_1","Chord_Triad_DShape_1","Chord_Sixth_CShape_1","Chord_Sixth_AShape_1","Chord_Sixth_GShape_1","Chord_Sixth_EShape_1","Chord_Sixth_DShape_1","Chord_Seventh_CShape_1","Chord_Seventh_AShape_1","Chord_Seventh_GShape_1","Chord_Seventh_EShape_1","Chord_Seventh_DShape_1","Chord_Shell_E_37","Chord_Shell_E_73","Chord_Shell_A_37","Chord_Shell_A_73","Chord_Shell_D_37","Chord_Shell_D_73","Scale_DoubleOctave_EShape_1","Scale_DoubleOctave_EShape_2","Scale_DoubleOctave_DShape_1","Scale_DoubleOctave_CShape_1","Scale_DoubleOctave_CShape_2","Scale_DoubleOctave_AShape_1","Scale_DoubleOctave_GShape_1","VOICING_PRESETS","ROMAN_NUMERAL","M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I","modulo","moduloSum","divisor","romanize","n","Object","keys","q"],"sourceRoot":""}