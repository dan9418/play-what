{"version":3,"file":"component---src-app-components-pages-browse-chords-page-tsx-65b5d91b5f77469cdfac.js","mappings":"2MAaA,MAAMA,GAAuBC,EAAAA,EAAAA,SAAOC,EAAAA,IAAK,0FAAZD,CAAY,uBAoBzC,MAduDE,IAKhD,IALiD,YACtDC,EAAW,KACXC,EAAI,WACJC,KACGC,GACJ,EACC,OACEC,EAAAA,cAACR,EAAyBO,EACvBH,GAAeI,EAAAA,cAAAA,IAAAA,KAAIJ,GACpBI,EAAAA,cAACC,EAAAA,EAAe,CAACH,WAAYA,EAAYD,KAAMA,IAC1B,ECtB3B,MAAMK,GAAuBT,EAAAA,EAAAA,SAAOU,EAAAA,GAAW,2FAAlBV,CAAkB,gDAiD/C,MA/BuDE,IAMhD,IANiD,MACtDS,EAAK,SACLC,EAAQ,MACRC,EAAK,WACLR,EAAU,MACVS,GACD,EACC,OACEP,EAAAA,cAACE,EAAoB,CAACE,MAAOA,EAAOC,SAAUA,GAC5CL,EAAAA,cAAAA,MAAAA,KACEA,EAAAA,cAAAA,IAAAA,CAAGQ,UAAU,SAASF,IAExBN,EAAAA,cAACS,EAAAA,EAAa,KACZT,EAAAA,cAACS,EAAAA,EAAa,KACXF,EAAMG,KAAKC,IACV,MAAM,MAAEP,EAAK,YAAER,EAAW,KAAEC,GAASc,EACrC,OACEX,EAAAA,cAACY,EAAc,CACbd,WAAYA,EACZM,MAAOA,EACPR,YAAaA,EACbC,KAAMA,GACN,MAKW,C,0EC5C3B,MAAMgB,EAA+B,CACnC,CACET,MAAO,SACPR,YAAa,oNAKbC,KAAMiB,EAAAA,GAAAA,QAAsBC,GAAUA,EAAMC,KAAKC,SAASC,EAAAA,GAAAA,UAE5D,CACEd,MAAO,iBACPR,YAAa,sGAIbC,KAAMiB,EAAAA,GAAAA,QACHC,GACCA,EAAMC,KAAKC,SAASC,EAAAA,GAAAA,WAAiBH,EAAMC,KAAKC,SAASC,EAAAA,GAAAA,aAG/D,CACEd,MAAO,eACPR,YAAa,kJAIbC,KAAMiB,EAAAA,GAAAA,QACHC,GACCA,EAAMC,KAAKC,SAASC,EAAAA,GAAAA,SAAeH,EAAMC,KAAKC,SAASC,EAAAA,GAAAA,aAG7D,CACEd,MAAO,mBACPR,YAAa,oIAIbC,KAAMiB,EAAAA,GAAAA,QAAsBC,GAAUA,EAAMC,KAAKC,SAASC,EAAAA,GAAAA,cAE5D,CACEd,MAAO,kBACPR,YAAa,4EAGbC,KAAMiB,EAAAA,GAAAA,QAAsBC,GAAUA,EAAMC,KAAKC,SAASC,EAAAA,GAAAA,cAIxDC,EAA8B,CAClCrB,WAAYsB,EAAAA,GAAAA,MACZhB,MAAO,SACPC,SAAU,4BACVC,MAAO,+MAMPC,MAAOM,GAOT,UAJ6B,IACpBb,EAAAA,cAACqB,EAAAA,EAAmBF,E","sources":["webpack://play-what/./src/app/components/pages/browse/cards/CollectionCard.tsx","webpack://play-what/./src/app/components/pages/browse/CollectionPage.tsx","webpack://play-what/./src/app/components/pages/browse/chords.page.tsx"],"sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { PresetType } from \"../../../../../core/Core.constants\";\r\nimport { AnyPodListPreset } from \"../../../../../core/Core.derived\";\r\nimport Card, { ICardProps } from \"../../../shared/ui/Card\";\r\nimport CollectionTable from \"./CollectionTable\";\r\n\r\nexport interface ICollectionCardProps extends ICardProps {\r\n  data: AnyPodListPreset[];\r\n  description?: string;\r\n  presetType: PresetType;\r\n}\r\n\r\nconst StyledCollectionCard = styled(Card)`\r\n  p {\r\n    margin: 16px 0;\r\n  }\r\n`;\r\n\r\nconst CollectionCard: React.FC<ICollectionCardProps> = ({\r\n  description,\r\n  data,\r\n  presetType,\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <StyledCollectionCard {...rest}>\r\n      {description && <p>{description}</p>}\r\n      <CollectionTable presetType={presetType} data={data} />\r\n    </StyledCollectionCard>\r\n  );\r\n};\r\n\r\nexport default CollectionCard;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { PresetType } from \"../../../../core/Core.constants\";\r\nimport ColumnManager from \"../../shared/layout/ColumnManager\";\r\nimport PageLayout from \"../../shared/layout/PageLayout\";\r\nimport CollectionCard, { ICollectionCardProps } from \"./cards/CollectionCard\";\r\n\r\nconst StyledCollectionPage = styled(PageLayout)`\r\n  .intro {\r\n    padding: 0 16px;\r\n    margin-bottom: 16px;\r\n  }\r\n`;\r\n\r\nexport interface ICollectionPageCard\r\n  extends Omit<ICollectionCardProps, \"presetType\"> {}\r\n\r\nexport interface ICollectionPageProps {\r\n  title: string;\r\n  subtitle: string;\r\n  intro: string;\r\n  presetType: PresetType;\r\n  cards: ICollectionPageCard[];\r\n}\r\n\r\nconst CollectionPage: React.FC<ICollectionPageProps> = ({\r\n  title,\r\n  subtitle,\r\n  intro,\r\n  presetType,\r\n  cards,\r\n}) => {\r\n  return (\r\n    <StyledCollectionPage title={title} subtitle={subtitle}>\r\n      <div>\r\n        <p className=\"intro\">{intro}</p>\r\n      </div>\r\n      <ColumnManager>\r\n        <ColumnManager>\r\n          {cards.map((card) => {\r\n            const { title, description, data } = card;\r\n            return (\r\n              <CollectionCard\r\n                presetType={presetType}\r\n                title={title}\r\n                description={description}\r\n                data={data}\r\n              />\r\n            );\r\n          })}\r\n        </ColumnManager>\r\n      </ColumnManager>\r\n    </StyledCollectionPage>\r\n  );\r\n};\r\n\r\nexport default CollectionPage;\r\n","import React from \"react\";\r\nimport { CHORD_PRESETS } from \"../../../../core/Chord.constants\";\r\nimport { PresetType, Tag } from \"../../../../core/Core.constants\";\r\nimport CollectionPage, {\r\n  ICollectionPageCard,\r\n  ICollectionPageProps,\r\n} from \"./CollectionPage\";\r\n\r\nconst CARDS: ICollectionPageCard[] = [\r\n  {\r\n    title: \"Triads\",\r\n    description: `\r\n      A triad is the most basic type of chord. It consists of 3\r\n      intervals (a root, a third, and a fifth). The specific thirds and\r\n      fifths used determine the type (or quality) of the triad.\r\n    `,\r\n    data: CHORD_PRESETS.filter((chord) => chord.tags.includes(Tag.Triad)),\r\n  },\r\n  {\r\n    title: \"Seventh Chords\",\r\n    description: `\r\n      A seventh chord is a triad with an additional seventh interval\r\n      stacked on top.\r\n    `,\r\n    data: CHORD_PRESETS.filter(\r\n      (chord) =>\r\n        chord.tags.includes(Tag.Seventh) && !chord.tags.includes(Tag.Extended)\r\n    ),\r\n  },\r\n  {\r\n    title: \"Sixth Chords\",\r\n    description: `\r\n      A sixth chord is a triad with an additional sixth interval stacked\r\n      on top. They are similar in function to seventh chords.\r\n    `,\r\n    data: CHORD_PRESETS.filter(\r\n      (chord) =>\r\n        chord.tags.includes(Tag.Sixth) && !chord.tags.includes(Tag.Extended)\r\n    ),\r\n  },\r\n  {\r\n    title: \"Suspended Chords\",\r\n    description: `\r\n      A suspended chord is a like a triad, except it sustitutes a second\r\n      or fourth interval in place of the third.\r\n    `,\r\n    data: CHORD_PRESETS.filter((chord) => chord.tags.includes(Tag.Suspended)),\r\n  },\r\n  {\r\n    title: \"Extended Chords\",\r\n    description: `\r\n      An extended chord contains extended intervals. [INCOMPLETE]\r\n    `,\r\n    data: CHORD_PRESETS.filter((chord) => chord.tags.includes(Tag.Extended)),\r\n  },\r\n];\r\n\r\nconst PROPS: ICollectionPageProps = {\r\n  presetType: PresetType.Chord,\r\n  title: \"Chords\",\r\n  subtitle: \"The foundation of harmony\",\r\n  intro: `\r\n    A chord is a collection of musical notes, usually played\r\n    simultaneously. Chords are defined by their first note (the\r\n    root) and its relationship to the following notes (\r\n    intervals)\r\n  `,\r\n  cards: CARDS,\r\n};\r\n\r\nconst ChordsPage: React.FC = () => {\r\n  return <CollectionPage {...PROPS} />;\r\n};\r\n\r\nexport default ChordsPage;\r\n"],"names":["StyledCollectionCard","styled","Card","_ref","description","data","presetType","rest","React","CollectionTable","StyledCollectionPage","PageLayout","title","subtitle","intro","cards","className","ColumnManager","map","card","CollectionCard","CARDS","CHORD_PRESETS","chord","tags","includes","Tag","PROPS","PresetType","CollectionPage"],"sourceRoot":""}