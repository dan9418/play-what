{"version":3,"file":"component---src-pages-dev-practice-chord-progressions-tsx-b7615be265145d3abe4e.js","mappings":"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","sources":["webpack://play-what/./src/components/inputs/DropdownInput.tsx","webpack://play-what/./src/components/breadcrumb-list/BreadcrumbList.tsx","webpack://play-what/./src/components/layout/PageTitle.tsx","webpack://play-what/./src/components/ui/Card.tsx","webpack://play-what/./src/components/ui/InputRow.tsx","webpack://play-what/./src/components/pages/dev/ChordProgressionsPage.tsx","webpack://play-what/./src/pages/dev/practice/chord-progressions.tsx","webpack://play-what/./src/viewers/fretboard/Fretboard.styles.tsx","webpack://play-what/./src/viewers/fretboard/FretLabel.tsx","webpack://play-what/./src/viewers/fretboard/Fretboard.tsx","webpack://play-what/./src/viewers/fretboard/Fretboard.tuning.ts","webpack://play-what/./src/viewers/fretboard/Fretboard.utils.ts","webpack://play-what/./src/viewers/fretboard/Fretboard.voicing.ts"],"sourcesContent":["import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nconst StyledDropdownInput = styled.select`\r\n\tfont-size: 110%;\r\n    min-width: 128px;\r\n\r\n\tpadding: 4px 8px;\r\n\r\n    cursor: pointer;\r\n    border-radius: 4px;\r\n\r\n\toption {\r\n\t\tcursor: pointer;\r\n\t}\r\n`;\r\n\r\ninterface IDropdownInputProps {\r\n\tvalue: any;\r\n\tsetValue: Function;\r\n\toptions: any[];\r\n\tidProperty?: string;\r\n\tdisplayProperty?: string;\r\n}\r\n\r\nconst DropdownInput: React.FC<IDropdownInputProps> = props => {\r\n\tconst { value, setValue, options, idProperty, displayProperty } = props;\r\n\r\n\treturn (\r\n\t\t<StyledDropdownInput\r\n\t\t\tclassName='dropdown-input'\r\n\t\t\tonChange={e => setValue(options[e.target.selectedIndex], e.target.selectedIndex)}\r\n\t\t\tvalue={value ? value[idProperty || 'id'] : ''}\r\n\t\t>\r\n\t\t\t{(options || []).map((v, i) => (\r\n\t\t\t\t<option key={i} value={v[idProperty || 'id']}>{displayProperty ? v[displayProperty] : v.name}</option>\r\n\t\t\t))}\r\n\t\t</StyledDropdownInput>\r\n\t);\r\n}\r\n\r\nexport default DropdownInput;\r\n","import { Link } from \"gatsby\";\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { usePageProps } from \"../../contexts/PagePropsContext\";\r\nimport Icon from \"../ui/Icon\";\r\n\r\nconst StyledBreadcrumbList = styled.ul`\r\n    font-size: 80%;\r\n    padding: 0 0 8px 0;\r\n    @media(min-width: 512px) {\r\n        font-size: 110%;\r\n        padding: 0 0 16px 0;\r\n    }\r\n\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    gap: 8px;\r\n    white-space: nowrap;\r\n    text-transform: capitalize;\r\n    svg {\r\n        margin-right: 8px;\r\n    }\r\n\r\n    span {\r\n        color: ${props => props.theme.text.secondary};\r\n    }\r\n`\r\n\r\nconst BreadcrumbList = () => {\r\n    const { path } = usePageProps();\r\n    let pieces = path.split('/');\r\n    const paths = [];\r\n    pieces.reduce((prev, cur, i, arr) => {\r\n        const path = `${prev}/${cur}`.replace('//', '/') || '/';\r\n        const isLink = !['root', 'practice', 'test', 'experimental'].includes(cur);\r\n        const text = i === 0 ? 'Home' : cur.replaceAll('-', ' ').replace(' sharp', '#').replace(' flat', 'b');\r\n\r\n        const Tag = isLink ? Link : 'span';\r\n        const to = isLink ? path : undefined;\r\n\r\n        paths.push(\r\n            <li key={i}>\r\n                {i > 0 && <Icon iconId=\"next\" size={10} color=\"grey\" />}\r\n                <Tag to={to}>{text}</Tag>\r\n            </li>\r\n        );\r\n        return path;\r\n    }, '/');\r\n    return <StyledBreadcrumbList>{paths.slice(0, paths.length - 1)}</StyledBreadcrumbList>;\r\n}\r\n\r\nexport default BreadcrumbList;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport BreadcrumbList from '../breadcrumb-list/BreadcrumbList';\r\nimport SEO from \"../utils/SEO\";\r\n\r\nconst StyledPageTitle = styled.div`\r\n    width: 100%;\r\n\r\n    .header {\r\n        border-bottom: 1px solid ${({ theme }) => theme.utils.border};    \r\n        width: 100%;\r\n        margin: auto;\r\n        padding-bottom: 8px;\r\n        @media(min-width: 512px) {\r\n            padding-bottom: 16px;\r\n        }\r\n\r\n        > h1 {\r\n            width: 100%;\r\n            font-size: 150%;\r\n            @media(min-width: 512px) {\r\n                font-size: 300%;\r\n            }\r\n            text-align: left;\r\n            color: ${({ theme }) => theme.text.primary};;\r\n        }\r\n\r\n        > h2 {\r\n            margin-top: 4px;\r\n            width: 100%;\r\n            text-align: left;\r\n            color: ${({ theme }) => theme.text.secondary};;\r\n            font-size: 80%;\r\n            @media(min-width: 512px) {\r\n                font-size: 100%;\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst PageTitle: React.FC<any> = ({ title, subtitle, action, children }) => {\r\n    return (\r\n        <>\r\n            <SEO title={title} />\r\n            <BreadcrumbList />\r\n            <StyledPageTitle>\r\n                <div className=\"header\">\r\n                    <h1>{title}</h1>\r\n                    {subtitle && <h2>{subtitle}</h2>}\r\n                    {action}\r\n                </div>\r\n                {children}\r\n            </StyledPageTitle>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PageTitle;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledCard = styled.div`\r\n    background: ${props => props.theme.surface.card};\r\n    width: 100%;\r\n    border-radius: 16px;\r\n    padding: 16px;\r\n\r\n    .header {\r\n        margin-bottom: 16px;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n    }\r\n`;\r\n\r\nexport const CardHeader = ({ title, action = null }) => (\r\n    <div className=\"header\">\r\n        <h2>{title}</h2>\r\n        {action}\r\n    </div>\r\n);\r\n\r\nconst Card: React.FC<any> = ({ title, action, children, ...rest }) => {\r\n    return (\r\n        <StyledCard {...rest}>\r\n            {title &&\r\n                <CardHeader title={title} action={action} />\r\n            }\r\n            {children}\r\n        </StyledCard >\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledInputRow = styled.div`\r\n    display: flex;\r\n    align-items: flex-start;\r\n    flex-direction: column;\r\n    width: 100%;\r\n\r\n    ${props => props.$y ? '' : `\r\n        @media(min-width: 512px) {\r\n            align-items: center;\r\n            flex-direction: row;\r\n            justify-content: space-between;\r\n            //margin-bottom: 8px;\r\n        }\r\n    `}\r\n\r\n    > label {\r\n        color: ${({ theme }) => theme.dark3};\r\n        font-weight: bold;\r\n        margin: 8px;\r\n        white-space: nowrap;\r\n    }\r\n`;\r\n\r\nconst InputRow = ({ label, children, y = false, ...rest }) => {\r\n    return (\r\n        <StyledInputRow $y={y} {...rest}>\r\n            <label>{label}</label>\r\n            <div>\r\n                {children}\r\n            </div>\r\n        </StyledInputRow>\r\n    );\r\n}\r\n\r\nexport default InputRow;\r\n","import React, { useState } from \"react\";\r\nimport styled from 'styled-components';\r\nimport ArrayUtils from \"../../../core/general/Array.utils\";\r\nimport Chord from \"../../../core/models/Chord\";\r\nimport { ChordId, NoteId, ScaleId } from \"../../../core/models/Model.constants\";\r\nimport { NOTE_PRESETS, NOTE_PRESET_MAP } from \"../../../core/models/Model.presets\";\r\nimport Note from \"../../../core/models/Note\";\r\nimport Scale from \"../../../core/models/Scale\";\r\nimport Fretboard from \"../../../viewers/fretboard/Fretboard\";\r\nimport { IFretProps } from \"../../../viewers/fretboard/Fretboard.utils\";\r\nimport { VOICING_PRESET_MAP } from \"../../../viewers/fretboard/Fretboard.voicing\";\r\nimport DropdownInput from \"../../inputs/DropdownInput\";\r\nimport { StyledPageBody } from \"../../layout/PageBody\";\r\nimport PageTitle from \"../../layout/PageTitle\";\r\nimport Card, { StyledCard } from \"../../ui/Card\";\r\nimport InputRow, { StyledInputRow } from \"../../ui/InputRow\";\r\n\r\nconst StyledCAGEDPage = styled(StyledPageBody)`\r\n\t    \r\n    ${StyledCard}, ${StyledInputRow} {\r\n        margin-top: 16px;\r\n        table {\r\n            width: 100%;\r\n\r\n            td {\r\n                width: 33%;\r\n                padding: 24px 2px 16px;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst CAGEDPage: React.FC<any> = () => {\r\n    const [rootPreset, setRootPreset] = useState(NOTE_PRESET_MAP.get(NoteId.C));\r\n\r\n    const root = new Note(rootPreset.value);\r\n    const majorScale = new Scale(ScaleId.Ionian, { root });\r\n    const minorScale = new Scale(ScaleId.Ionian, { root });\r\n\r\n    const majorItems = [\r\n        {\r\n            model: Chord,\r\n            modelId: ChordId.Min7,\r\n            rootId: majorScale.notes[1].modelId,\r\n            voicingId: null\r\n        },\r\n        {\r\n            model: Chord,\r\n            modelId: ChordId.Dom7,\r\n            rootId: majorScale.notes[4].modelId,\r\n            voicingId: null\r\n        },\r\n        {\r\n            model: Chord,\r\n            modelId: ChordId.Maj7,\r\n            rootId: majorScale.notes[0].modelId,\r\n            voicingId: null\r\n        }\r\n    ];\r\n\r\n    const minorItems = [\r\n        {\r\n            model: Chord,\r\n            modelId: ChordId.HalfDim7,\r\n            rootId: minorScale.notes[2].modelId,\r\n            voicingId: null\r\n        },\r\n        {\r\n            model: Chord,\r\n            modelId: ChordId.Min7,\r\n            rootId: minorScale.notes[4].modelId,\r\n            voicingId: null\r\n        },\r\n        {\r\n            model: Chord,\r\n            modelId: ChordId.Min7,\r\n            rootId: minorScale.notes[0].modelId,\r\n            voicingId: null\r\n        }\r\n    ];\r\n\r\n    const getColor = (fretProps: IFretProps) => {\r\n        const { stringIndex, fretIndex, tuning, model, voicing } = fretProps;\r\n        const noteIndex = tuning[stringIndex] + fretIndex;\r\n        const [interval, note] = model.tryGetPodPairAtPitch(noteIndex);\r\n\r\n        if (!note) return;\r\n\r\n        if (interval.pod[1] === 0) return 'red';\r\n        if (interval.pod[1] === 2) return 'blue';\r\n        if (interval.pod[1] === 4) return 'black';\r\n        if (interval.pod[1] === 6) return 'black';\r\n        return 'black';\r\n    };\r\n\r\n    return (\r\n        <StyledCAGEDPage>\r\n            <PageTitle title=\"Chord Progressions\" />\r\n            <InputRow label=\"Root\">\r\n                <DropdownInput options={NOTE_PRESETS} value={rootPreset} setValue={p => {\r\n                    setRootPreset(p);\r\n                }} />\r\n            </InputRow>\r\n            <Card title=\"Major II-V-I\" >\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>II</th>\r\n                            <th>V</th>\r\n                            <th>I</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr >\r\n                            {majorItems.map(item => {\r\n                                const { model, modelId, rootId, voicingId } = item as any;\r\n                                const instance = new model(modelId, { root: Note.fromId(rootId) });\r\n\r\n                                return (\r\n                                    <td key={modelId}>\r\n                                        <h3>{modelId}</h3>\r\n                                        <Fretboard\r\n                                            model={instance}\r\n                                            voicing={voicingId ? VOICING_PRESET_MAP.get(voicingId) : undefined}\r\n                                            colorMapFn={getColor}\r\n                                            fretRange={[1, 14]}\r\n                                        />\r\n                                    </td>\r\n                                );\r\n                            })}\r\n                        </tr>\r\n                        <tr >\r\n                            {ArrayUtils.rotate([...majorItems], 1).map(item => {\r\n                                const { model, modelId, rootId, voicingId } = item as any;\r\n                                const instance = new model(modelId, { root: Note.fromId(rootId) });\r\n\r\n                                return (\r\n                                    <td key={modelId}>\r\n                                        <h3>{modelId}</h3>\r\n                                        <Fretboard\r\n                                            model={instance}\r\n                                            voicing={voicingId ? VOICING_PRESET_MAP.get(voicingId) : undefined}\r\n                                            colorMapFn={getColor}\r\n                                            fretRange={[1, 14]}\r\n                                        />\r\n                                    </td>\r\n                                );\r\n                            })}\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </Card>\r\n            <Card title=\"Minor ii-v-i\" >\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ii</th>\r\n                            <th>v</th>\r\n                            <th>i</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr >\r\n                            {minorItems.map(item => {\r\n                                const { model, modelId, rootId, voicingId } = item as any;\r\n                                const instance = new model(modelId, { root: Note.fromId(rootId) });\r\n\r\n                                return (\r\n                                    <td key={modelId}>\r\n                                        <h3>{modelId}</h3>\r\n                                        <Fretboard\r\n                                            model={instance}\r\n                                            voicing={voicingId ? VOICING_PRESET_MAP.get(voicingId) : undefined}\r\n                                            colorMapFn={getColor}\r\n                                            fretRange={[1, 14]}\r\n                                        />\r\n                                    </td>\r\n                                );\r\n                            })}\r\n                        </tr>\r\n                        <tr>\r\n                            {ArrayUtils.rotate([...minorItems], 1).map(item => {\r\n                                const { model, modelId, rootId, voicingId } = item as any;\r\n                                const instance = new model(modelId, { root: Note.fromId(rootId) });\r\n\r\n                                return (\r\n                                    <td key={modelId}>\r\n                                        <h3>{modelId}</h3>\r\n                                        <Fretboard\r\n                                            model={instance}\r\n                                            voicing={voicingId ? VOICING_PRESET_MAP.get(voicingId) : undefined}\r\n                                            colorMapFn={getColor}\r\n                                            fretRange={[1, 14]}\r\n                                        />\r\n                                    </td>\r\n                                );\r\n                            })}\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </Card>\r\n        </StyledCAGEDPage>\r\n    );\r\n};\r\n\r\nexport default CAGEDPage;\r\n","import ChordProgressionsPage from \"../../../components/pages/dev/ChordProgressionsPage\";\r\n\r\nexport default ChordProgressionsPage;\r\n","import styled from 'styled-components';\r\n\r\nconst StyledFretboard = styled.div`\r\n    display: inline-grid;\r\n\twidth: 100%;\r\n\tbackground-image: radial-gradient(ellipse, #E8DBB8 0%, #D0B27C 100%);\r\n\tfont-size: 90%;\r\n\tmargin: 16px 0;\r\n\r\n    .fret {\r\n        display: inline-flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        position: relative;\r\n        border-right: 2px solid darkgrey;\r\n    }\r\n\r\n    .fret.open {\r\n        border-right: 3px solid grey;\r\n        background-color: #D0B27C;;\r\n    }\r\n\r\n    /* Used to maintain aspect ratio */\r\n\r\n    .fret::before {\r\n        content: \"\";\r\n        display: block;\r\n        height: 0;\r\n        width: 0;\r\n        margin-top: calc(1/2 * 100%);\r\n    }\r\n\r\n    /* Fret String */\r\n\r\n    .fret-string {\r\n        border-top: 1px solid grey;\r\n        width: 100%;\r\n    }\r\n\r\n    /* Fret Numbers */\r\n\r\n    .fret-number {\r\n        position: absolute;\r\n        bottom: 100%;\r\n    }\r\n\r\n    /* Fret Dots */\r\n\r\n    .fret-dots {\r\n        position: absolute;\r\n        top: 95%;\r\n        font-size: 16px;\r\n        white-space: nowrap;\r\n    }\r\n\r\n    .fret-number, .fret-dots {\r\n        color: #888;\r\n    }\r\n`;\r\n\r\nexport default StyledFretboard;\r\n","\r\nimport * as React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { IFretProps } from \"./Fretboard.utils\";\r\n\r\nconst StyledFretLabel = styled.div`\r\n\tposition: absolute;\r\n\theight: 60%;\r\n\taspect-ratio: 1;\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\tborder-radius: 100%;\r\n\tbackground-color: ${({ $bgColor }) => $bgColor ? $bgColor : 'transparent'};\r\n\tcolor: ${({ $fgColor }) => $fgColor ? $fgColor : ''};\r\n\r\n\tcursor: pointer;\r\n\t&:hover {\r\n\t\theight: 80%;\r\n\t}\r\n`;\r\n\r\n\r\nconst FretLabel: React.FC<IFretProps> = props => {\r\n\r\n\tconst bgColor = props.colorMapFn(props);\r\n\r\n\tlet fgColor = 'white';\r\n\r\n\treturn (\r\n\t\t<StyledFretLabel $bgColor={bgColor} $fgColor={fgColor} onClick={null} className=\"fret-label\">\r\n\t\t\t{null}\r\n\t\t</StyledFretLabel>\r\n\t);\r\n};\r\n\r\nexport default FretLabel;\r\n","import * as React from \"react\";\r\nimport StyledFretboard from \"./Fretboard.styles\";\r\nimport { DEFAULT_FRETBOARD_PROPS, getDotsForFret, getFretRatios, IFretboardProps, IFretProps } from \"./Fretboard.utils\";\r\nimport FretLabel from \"./FretLabel\";\r\n\r\nexport const Fret: React.FC<IFretProps> = props => {\r\n\r\n\tconst { tuning, stringIndex, fretIndex, showFretNumbers, showFretDots } = props;\r\n\r\n\tconst classes = ['fret'];\r\n\tif (fretIndex === 0)\r\n\t\tclasses.push('open');\r\n\r\n\tconst isLowString = stringIndex === tuning.length - 1;\r\n\tconst isHighString = stringIndex === 0;\r\n\r\n\treturn (\r\n\t\t<div className={classes.join(' ')}>\r\n\t\t\t<div className=\"fret-number\">\r\n\t\t\t\t{showFretNumbers && isHighString && fretIndex > 0 && fretIndex}\r\n\t\t\t</div>\r\n\t\t\t<div className='fret-string' />\r\n\t\t\t<FretLabel {...props} />\r\n\t\t\t<div className=\"fret-dots\">\r\n\t\t\t\t{showFretDots && isLowString && fretIndex > 0 && getDotsForFret(fretIndex)}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst getFrets = (props: IFretboardProps) => {\r\n\tconst { fretRange, tuning } = props;\r\n\tconst [lo, hi] = fretRange;\r\n\r\n\tconst allFrets = [];\r\n\tfor (let s = 0; s < tuning.length; s++) {\r\n\t\tfor (let f = lo; f <= hi; f++) {\r\n\t\t\tallFrets.push(\r\n\t\t\t\t<Fret\r\n\t\t\t\t\tkey={`s${s}-f${f}`}\r\n\t\t\t\t\tstringIndex={s}\r\n\t\t\t\t\tfretIndex={f}\r\n\t\t\t\t\ttuning={tuning}\r\n\t\t\t\t\t{...props}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\treturn allFrets;\r\n};\r\n\r\nconst Fretboard: React.FC<IFretboardProps> = (userProps) => {\r\n\tconst props = { ...DEFAULT_FRETBOARD_PROPS, ...userProps };\r\n\r\n\tconst [lo, hi] = props.fretRange;\r\n\tconst numFrets = hi - lo + 1;\r\n\tconst numStrings = props.tuning.length;\r\n\tconst gridTemplateColumns = getFretRatios(numFrets).map(n => n + 'fr').join(' ');\r\n\tconst gridTemplateRows = `repeat(${numStrings}, 1fr)`;\r\n\tconst fretboardStyles = {\r\n\t\tgridTemplateColumns,\r\n\t\tgridTemplateRows\r\n\t};\r\n\r\n\treturn (\r\n\t\t<StyledFretboard className='fretboard' style={fretboardStyles}>\r\n\t\t\t{getFrets(props)}\r\n\t\t</StyledFretboard>\r\n\t);\r\n};\r\n\r\nexport default Fretboard;\r\n","import ArrayUtils from \"../../core/general/Array.utils\";\r\nimport Note from '../../core/models/Note';\r\nimport { NoteId } from './../../core/models/Model.constants';\r\n\r\nexport enum TuningId {\r\n    Standard = 'standard',\r\n    StandardSeven = 'standard-seven',\r\n    StandardBass = 'standard-bass',\r\n    Flat = 'flat',\r\n    DoubleFlat = 'double-flat',\r\n    DropD = 'drop-d',\r\n    DADGAD = 'dadgad',\r\n    Banjo = 'banjo',\r\n    Violin = 'violin',\r\n    OpenA = 'open-a',\r\n    OpenB = 'open-b',\r\n    OpenC = 'open-c',\r\n    OpenD = 'open-d',\r\n    OpenE = 'open-e',\r\n    OpenF = 'open-f',\r\n    OpenG = 'open-g',\r\n}\r\n\r\nexport interface ITuning {\r\n    id: TuningId;\r\n    name: string;\r\n    value: number[]\r\n}\r\n\r\nconst formatPreset = (id: TuningId, name: string, value: number[]): ITuning => ({\r\n    id,\r\n    name,\r\n    value\r\n});\r\n\r\nconst getPitch = (noteId: NoteId, octave: number): number => Note.getNote(noteId, octave).pod[0];\r\n\r\nexport const TUNING_PRESET_MAP = new Map<TuningId, ITuning>([\r\n    [TuningId.Standard, formatPreset(\r\n        TuningId.Standard,\r\n        'Standard',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.Flat, formatPreset(\r\n        TuningId.Flat,\r\n        'Flat',\r\n        [\r\n            getPitch(NoteId.Eb, 5),\r\n            getPitch(NoteId.Bb, 4),\r\n            getPitch(NoteId.Gb, 4),\r\n            getPitch(NoteId.Db, 4),\r\n            getPitch(NoteId.Ab, 3),\r\n            getPitch(NoteId.Eb, 3)\r\n        ]\r\n    )],\r\n    [TuningId.DoubleFlat, formatPreset(\r\n        TuningId.DoubleFlat,\r\n        'Double Flat',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.F, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.StandardSeven, formatPreset(\r\n        TuningId.StandardSeven,\r\n        'Standard 7-String',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3),\r\n            getPitch(NoteId.B, 3)\r\n        ]\r\n    )],\r\n    [TuningId.StandardBass, formatPreset(\r\n        TuningId.StandardBass,\r\n        'Standard Bass',\r\n        [\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3),\r\n            getPitch(NoteId.A, 2),\r\n            getPitch(NoteId.E, 2)\r\n        ]\r\n    )],\r\n    [TuningId.DropD, formatPreset(\r\n        TuningId.DropD,\r\n        'Drop D',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.DADGAD, formatPreset(\r\n        TuningId.DADGAD,\r\n        'DADGAD',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    // Unconfirmed\r\n    [TuningId.Banjo, formatPreset(\r\n        TuningId.Banjo,\r\n        'Banjo',\r\n        [\r\n            getPitch(NoteId.G, 5),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    // Unconfirmed\r\n    [TuningId.Violin, formatPreset(\r\n        TuningId.Violin,\r\n        'Violin',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 4)\r\n        ]\r\n    )],\r\n    [TuningId.OpenA, formatPreset(\r\n        TuningId.OpenA,\r\n        'Open A',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.E, 4),\r\n            getPitch(NoteId.Cs, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenB, formatPreset(\r\n        TuningId.OpenB,\r\n        'Open B',\r\n        [\r\n            getPitch(NoteId.Ds, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Fs, 4),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Fs, 3),\r\n            getPitch(NoteId.B, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenC, formatPreset(\r\n        TuningId.OpenC,\r\n        'Open C',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.C, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenD, formatPreset(\r\n        TuningId.OpenD,\r\n        'Open D',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.Fs, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenE, formatPreset(\r\n        TuningId.OpenE,\r\n        'Open E',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Gs, 4),\r\n            getPitch(NoteId.E, 4),\r\n            getPitch(NoteId.B, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenF, formatPreset(\r\n        TuningId.OpenF,\r\n        'Open F',\r\n        [\r\n            getPitch(NoteId.F, 5),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.F, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.F, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenG, formatPreset(\r\n        TuningId.OpenG,\r\n        'Open G',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )]\r\n]);\r\n\r\nexport const FRETBOARD_TUNING_VALUES = ArrayUtils.mapToArray(TUNING_PRESET_MAP);\r\n","import Chord from '../../core/models/Chord';\r\nimport IntervalSpan from '../../core/models/Interval';\r\nimport { IModelConfig } from '../../core/models/Model.constants';\r\nimport Note from '../../core/models/Note';\r\nimport Scale from '../../core/models/Scale';\r\nimport { ITuning, TuningId, TUNING_PRESET_MAP } from './Fretboard.tuning';\r\nimport { IVoicing } from './Fretboard.voicing';\r\n\r\nexport interface IFretLabelProps {\r\n\tnote?: Note;\r\n\tcolor?: string;\r\n\tfreq?: number;\r\n}\r\n\r\nexport interface IFretboardProps {\r\n\tfretRange?: [number, number];\r\n\tshowFretDots?: boolean;\r\n\tshowFretNumbers?: boolean;\r\n\tcolorMapFn?: (fretProps: IFretProps) => string | undefined;\r\n\tvoicing?: IVoicing,\r\n\ttuning?: number[]; // ITuning,\r\n\tmodel?: Chord | Scale;\r\n}\r\n\r\nexport interface IFretProps extends IFretboardProps {\r\n\tstringIndex: number;\r\n\tfretIndex: number;\r\n}\r\n\r\nexport const DOTTED_FRET_INDICES = [true, false, false, true, false, true, false, true, false, true, false, false];\r\n\r\nexport const FRET_SIZE_RATIO = Math.pow((1 / 2), (1 / 12));\r\n\r\nconst isIntervalInVoicing = (interval: IntervalSpan, voicing: IVoicing, stringIndex: number) => {\r\n\tif (!voicing || !voicing.value) return true;\r\n\tconst v = voicing.value[stringIndex];\r\n\tconst d = interval.getDegree();\r\n\tif (Array.isArray(v)) {\r\n\t\treturn v.some(n => doesVoicingValueMatch(d, n));\r\n\t}\r\n\telse if (typeof v === 'number') {\r\n\t\treturn doesVoicingValueMatch(d, v);\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nexport const getFretColor = (props: IFretProps): string | undefined => {\r\n\tconst { stringIndex, fretIndex, tuning, model, voicing } = props;\r\n\tconst noteIndex = tuning[stringIndex] + fretIndex;\r\n\tconst [interval, note] = model.tryGetPodPairAtPitch(noteIndex);\r\n\r\n\tif (!note) return;\r\n\r\n\tif (voicing && !isIntervalInVoicing(interval, voicing, stringIndex)) {\r\n\t\treturn `#00000033`\r\n\t}\r\n\r\n\treturn interval.getColor();\r\n}\r\n\r\nexport const DEFAULT_FRETBOARD_PROPS: IFretboardProps = {\r\n\tfretRange: [1, 12],\r\n\ttuning: TUNING_PRESET_MAP.get(TuningId.Standard).value,\r\n\tshowFretDots: true,\r\n\tshowFretNumbers: true,\r\n\tcolorMapFn: getFretColor\r\n};\r\n\r\nexport const getFretRatios = (numFrets: number): number[] => {\r\n\tconst ratios = [];\r\n\tfor (let i = 1; i <= numFrets; i++) {\r\n\t\tratios.push((i <= 1) ? 1 : ratios[i - 2] * FRET_SIZE_RATIO);\r\n\t}\r\n\treturn ratios;\r\n};\r\n\r\nexport const getDotsForFret = (fretNumber: number): string => {\r\n\tconst mod = fretNumber % 12;\r\n\tif (mod === 0)\r\n\t\treturn '• •';\r\n\telse if (DOTTED_FRET_INDICES[mod])\r\n\t\treturn '•';\r\n\treturn '';\r\n};\r\n\r\nconst doesVoicingValueMatch = (d: number, v: number) => {\r\n\treturn d + 1 === v;\r\n}\r\n","import ArrayUtils from \"../../core/general/Array.utils\";\r\n\r\nexport enum VoicingId {\r\n    None = 'None',\r\n    Chord_Triad_CShape_1 = 'Chord_Triad_CShape_1',\r\n    Chord_Triad_AShape_1 = 'Chord_Triad_AShape_1',\r\n    Chord_Triad_GShape_1 = 'Chord_Triad_GShape_1',\r\n    Chord_Triad_EShape_1 = 'Chord_Triad_EShape_1',\r\n    Chord_Triad_DShape_1 = 'Chord_Triad_DShape_1',\r\n    Chord_Sixth_CShape_1 = 'Chord_Sixth_CShape_1',\r\n    Chord_Sixth_AShape_1 = 'Chord_Sixth_AShape_1',\r\n    Chord_Sixth_GShape_1 = 'Chord_Sixth_GShape_1',\r\n    Chord_Sixth_EShape_1 = 'Chord_Sixth_EShape_1',\r\n    Chord_Sixth_DShape_1 = 'Chord_Sixth_DShape_1',\r\n    Chord_Seventh_CShape_1 = 'Chord_Seventh_CShape_1',\r\n    Chord_Seventh_AShape_1 = 'Chord_Seventh_AShape_1',\r\n    Chord_Seventh_GShape_1 = 'Chord_Seventh_GShape_1',\r\n    Chord_Seventh_EShape_1 = 'Chord_Seventh_EShape_1',\r\n    Chord_Seventh_DShape_1 = 'Chord_Seventh_DShape_1',\r\n    Chord_Shell_E_37 = 'Chord_Shell_E_37',\r\n    Chord_Shell_E_73 = 'Chord_Shell_E_73',\r\n    Chord_Shell_A_37 = 'Chord_Shell_A_37',\r\n    Chord_Shell_A_73 = 'Chord_Shell_A_73',\r\n    Chord_Shell_D_37 = 'Chord_Shell_D_37',\r\n    Chord_Shell_D_73 = 'Chord_Shell_D_73',\r\n    Scale_DoubleOctave_CShape_1 = 'Scale_DoubleOctave_CShape_1',\r\n    Scale_DoubleOctave_CShape_2 = 'Scale_DoubleOctave_CShape_2',\r\n    Scale_DoubleOctave_AShape_1 = 'Scale_DoubleOctave_AShape_1',\r\n    Scale_DoubleOctave_GShape_1 = 'Scale_DoubleOctave_GShape_1',\r\n    Scale_DoubleOctave_EShape_1 = 'Scale_DoubleOctave_EShape_1',\r\n    Scale_DoubleOctave_EShape_2 = 'Scale_DoubleOctave_EShape_2',\r\n    Scale_DoubleOctave_DShape_1 = 'Scale_DoubleOctave_DShape_1',\r\n}\r\n\r\nexport interface IVoicing {\r\n    id: VoicingId;\r\n    name: string;\r\n    value: (number | number[])[]\r\n}\r\n\r\nconst formatPreset = (id: VoicingId, name: string, value: (number | number[])[]): IVoicing => ({\r\n    id,\r\n    name,\r\n    value\r\n});\r\n\r\nexport const VOICING_PRESET_MAP = new Map<VoicingId, IVoicing>([\r\n    // Triads\r\n    [VoicingId.Chord_Triad_CShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_CShape_1,\r\n        'C Shape Triad',\r\n        [3, 1, 5, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Triad_AShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_AShape_1,\r\n        'A Shape Triad',\r\n        [5, 3, 1, 5, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Triad_GShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_GShape_1,\r\n        'G Shape Triad',\r\n        [1, 5, 1, 5, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Triad_EShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_EShape_1,\r\n        'E Shape Triad',\r\n        [1, 5, 3, 1, 5, 1]\r\n    )],\r\n    [VoicingId.Chord_Triad_DShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_DShape_1,\r\n        'D Shape Triad',\r\n        [3, 1, 5, 1, null, null]\r\n    )],\r\n    // Sixths\r\n    [VoicingId.Chord_Sixth_CShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_CShape_1,\r\n        'C Shape 6th Chord',\r\n        [3, 6, 5, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Sixth_AShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_AShape_1,\r\n        'A Shape 6th Chord',\r\n        [5, 3, 6, 5, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Sixth_GShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_GShape_1,\r\n        'G Shape 6th Chord',\r\n        [6, 5, 1, 5, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Sixth_EShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_EShape_1,\r\n        'E Shape 6th Chord',\r\n        [1, 5, 3, 6, 5, 1]\r\n    )],\r\n    [VoicingId.Chord_Sixth_DShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_DShape_1,\r\n        'D Shape 6th Chord',\r\n        [3, 6, 5, 1, null, null]\r\n    )],\r\n    // Sevenths\r\n    [VoicingId.Chord_Seventh_CShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_CShape_1,\r\n        'C Shape 7th Chord',\r\n        [3, 7, 5, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Seventh_AShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_AShape_1,\r\n        'A Shape 7th Chord',\r\n        [5, 3, 7, 5, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Seventh_GShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_GShape_1,\r\n        'G Shape 7th Chord',\r\n        [7, 5, 1, 5, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Seventh_EShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_EShape_1,\r\n        'E Shape 7th Chord',\r\n        [1, 5, 3, 7, 5, 1]\r\n    )],\r\n    [VoicingId.Chord_Seventh_DShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_DShape_1,\r\n        'D Shape 7th Chord',\r\n        [3, 7, 5, 1, null, null]\r\n    )],\r\n    // Shells\r\n    [VoicingId.Chord_Shell_E_37, formatPreset(\r\n        VoicingId.Chord_Shell_E_37,\r\n        'Shell E 3-7',\r\n        [null, null, null, 7, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Shell_E_73, formatPreset(\r\n        VoicingId.Chord_Shell_E_73,\r\n        'Shell E 7-3',\r\n        [null, null, 3, 7, null, 1]\r\n    )],\r\n    [VoicingId.Chord_Shell_A_37, formatPreset(\r\n        VoicingId.Chord_Shell_A_37,\r\n        'Shell A 3-7',\r\n        [null, null, 7, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Shell_A_73, formatPreset(\r\n        VoicingId.Chord_Shell_A_73,\r\n        'Shell A 7-3',\r\n        [null, 3, 7, null, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Shell_D_37, formatPreset(\r\n        VoicingId.Chord_Shell_D_37,\r\n        'Shell D 3-7',\r\n        [null, 7, 3, 1, null, null]\r\n    )],\r\n    [VoicingId.Chord_Shell_D_73, formatPreset(\r\n        VoicingId.Chord_Shell_D_73,\r\n        'Shell D 7-3',\r\n        [3, 7, null, 1, null, null]\r\n    )],\r\n    // CAGED Scales\r\n    [VoicingId.Scale_DoubleOctave_EShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_EShape_1,\r\n        'E Shape Scale (Locrian)',\r\n        [[1, 2, 3], [6, 7], [3, 4, 5], [7, 1, 2], [4, 5, 6], [1, 2, 3]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_EShape_2, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_EShape_2,\r\n        'E Shape Scale (Ionian)',\r\n        [[7, 1, 2], [5, 6], [2, 3, 4], [6, 7, 1], [3, 4, 5], [1, 2]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_DShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_DShape_1,\r\n        'D Shape Scale (Dorian)',\r\n        [[1, 2, 3], [5, 6, 7], [2, 3, 4], [6, 7, 1], [4, 5], [1, 2, 3]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_CShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_CShape_1,\r\n        'C Shape Scale (Phrygian)',\r\n        [[1, 2, 3], [5, 6, 7], [3, 4], [7, 1, 2], [4, 5, 6], [1, 2, 3]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_CShape_2, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_CShape_2,\r\n        'C Shape Scale (Lydian)',\r\n        [[7, 1, 2], [4, 5, 6], [2, 3], [6, 7, 1], [3, 4, 5], [1, 2]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_AShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_AShape_1,\r\n        'A Shape Scale (Mixolydian)',\r\n        [[1, 2], [5, 6, 7], [2, 3, 4], [6, 7, 1], [3, 4, 5], [1, 2]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_GShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_GShape_1,\r\n        'G Shape Scale (Aeolian)',\r\n        [[1, 2, 3], [5, 6, 7], [2, 3, 4], [7, 1], [4, 5, 6], [1, 2, 3]]\r\n    )]\r\n])\r\n\r\nexport const VOICING_PRESETS = ArrayUtils.mapToArray(VOICING_PRESET_MAP);\r\n"],"names":["StyledDropdownInput","styled","props","value","setValue","options","idProperty","displayProperty","React","className","onChange","e","target","selectedIndex","map","v","i","key","name","StyledBreadcrumbList","theme","text","secondary","pieces","usePageProps","path","split","paths","reduce","prev","cur","arr","replace","isLink","includes","replaceAll","Tag","Link","to","undefined","push","Icon","iconId","size","color","slice","length","StyledPageTitle","utils","border","primary","title","subtitle","action","children","SEO","BreadcrumbList","StyledCard","surface","card","CardHeader","rest","StyledInputRow","$y","dark3","label","y","StyledCAGEDPage","StyledPageBody","withConfig","useState","NOTE_PRESET_MAP","NoteId","rootPreset","setRootPreset","root","Note","majorScale","Scale","ScaleId","minorScale","majorItems","model","Chord","modelId","ChordId","rootId","notes","voicingId","minorItems","getColor","fretProps","stringIndex","fretIndex","tuning","noteIndex","voicing","tryGetPodPairAtPitch","interval","pod","PageTitle","InputRow","DropdownInput","NOTE_PRESETS","p","Card","item","instance","Fretboard","VOICING_PRESET_MAP","colorMapFn","fretRange","ArrayUtils","StyledFretLabel","$bgColor","$fgColor","bgColor","onClick","Fret","showFretNumbers","showFretDots","classes","isLowString","isHighString","join","FretLabel","getDotsForFret","userProps","DEFAULT_FRETBOARD_PROPS","lo","numFrets","numStrings","fretboardStyles","gridTemplateColumns","getFretRatios","n","gridTemplateRows","StyledFretboard","style","hi","allFrets","s","f","getFrets","TuningId","formatPreset","id","getPitch","noteId","octave","TUNING_PRESET_MAP","Map","Standard","Flat","DoubleFlat","StandardSeven","StandardBass","DropD","DADGAD","Banjo","Violin","OpenA","OpenB","OpenC","OpenD","OpenE","OpenF","OpenG","FRETBOARD_TUNING_VALUES","DOTTED_FRET_INDICES","FRET_SIZE_RATIO","Math","pow","d","getDegree","Array","isArray","some","doesVoicingValueMatch","isIntervalInVoicing","ratios","fretNumber","mod","VoicingId","Chord_Triad_CShape_1","Chord_Triad_AShape_1","Chord_Triad_GShape_1","Chord_Triad_EShape_1","Chord_Triad_DShape_1","Chord_Sixth_CShape_1","Chord_Sixth_AShape_1","Chord_Sixth_GShape_1","Chord_Sixth_EShape_1","Chord_Sixth_DShape_1","Chord_Seventh_CShape_1","Chord_Seventh_AShape_1","Chord_Seventh_GShape_1","Chord_Seventh_EShape_1","Chord_Seventh_DShape_1","Chord_Shell_E_37","Chord_Shell_E_73","Chord_Shell_A_37","Chord_Shell_A_73","Chord_Shell_D_37","Chord_Shell_D_73","Scale_DoubleOctave_EShape_1","Scale_DoubleOctave_EShape_2","Scale_DoubleOctave_DShape_1","Scale_DoubleOctave_CShape_1","Scale_DoubleOctave_CShape_2","Scale_DoubleOctave_AShape_1","Scale_DoubleOctave_GShape_1","VOICING_PRESETS"],"sourceRoot":""}