{"version":3,"file":"component---src-pages-view-index-tsx-116f1fc81cfef8987a4e.js","mappings":"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","sources":["webpack://play-what/./src/components/breadcrumb-list/BreadcrumbList.tsx","webpack://play-what/./src/components/layout/PageTitle.tsx","webpack://play-what/./src/components/pages/view/ColHeader.tsx","webpack://play-what/./src/core/routing/Routing.utils.ts","webpack://play-what/./src/components/pages/view/NotesCol.tsx","webpack://play-what/./src/components/pages/view/ViewPage.tsx","webpack://play-what/./src/pages/view/index.tsx","webpack://play-what/./src/viewers/fretboard/Fretboard.styles.tsx","webpack://play-what/./src/viewers/fretboard/FretLabel.tsx","webpack://play-what/./src/viewers/fretboard/Fretboard.tsx","webpack://play-what/./src/viewers/fretboard/Fretboard.tuning.ts","webpack://play-what/./src/viewers/fretboard/Fretboard.utils.ts"],"sourcesContent":["import { Link } from \"gatsby\";\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { usePageProps } from \"../../contexts/PagePropsContext\";\r\nimport Icon from \"../ui/Icon\";\r\n\r\nconst StyledBreadcrumbList = styled.ul`\r\n    font-size: 80%;\r\n    padding: 0 0 8px 0;\r\n    @media(min-width: 512px) {\r\n        font-size: 110%;\r\n        padding: 0 0 16px 0;\r\n    }\r\n\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    gap: 8px;\r\n    white-space: nowrap;\r\n    text-transform: capitalize;\r\n    svg {\r\n        margin-right: 8px;\r\n    }\r\n\r\n    span {\r\n        color: ${props => props.theme.text.secondary};\r\n    }\r\n`\r\n\r\nconst BreadcrumbList = () => {\r\n    const { path } = usePageProps();\r\n    let pieces = path.split('/');\r\n    const paths = [];\r\n    pieces.reduce((prev, cur, i, arr) => {\r\n        const path = `${prev}/${cur}`.replace('//', '/') || '/';\r\n        const isLink = !['root', 'practice', 'test', 'experimental'].includes(cur);\r\n        const text = i === 0 ? 'Home' : cur.replaceAll('-', ' ').replace(' sharp', '#').replace(' flat', 'b');\r\n\r\n        const Tag = isLink ? Link : 'span';\r\n        const to = isLink ? path : undefined;\r\n\r\n        paths.push(\r\n            <li key={i}>\r\n                {i > 0 && <Icon iconId=\"next\" size={10} color=\"grey\" />}\r\n                <Tag to={to}>{text}</Tag>\r\n            </li>\r\n        );\r\n        return path;\r\n    }, '/');\r\n    return <StyledBreadcrumbList>{paths.slice(0, paths.length - 1)}</StyledBreadcrumbList>;\r\n}\r\n\r\nexport default BreadcrumbList;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport BreadcrumbList from '../breadcrumb-list/BreadcrumbList';\r\nimport SEO from \"../utils/SEO\";\r\n\r\nconst StyledPageTitle = styled.div`\r\n    width: 100%;\r\n\r\n    .header {\r\n        border-bottom: 1px solid ${({ theme }) => theme.utils.border};    \r\n        width: 100%;\r\n        margin: auto;\r\n        padding-bottom: 8px;\r\n        @media(min-width: 512px) {\r\n            padding-bottom: 16px;\r\n        }\r\n\r\n        > h1 {\r\n            width: 100%;\r\n            font-size: 150%;\r\n            @media(min-width: 512px) {\r\n                font-size: 300%;\r\n            }\r\n            text-align: left;\r\n            color: ${({ theme }) => theme.text.primary};;\r\n        }\r\n\r\n        > h2 {\r\n            margin-top: 4px;\r\n            width: 100%;\r\n            text-align: left;\r\n            color: ${({ theme }) => theme.text.secondary};;\r\n            font-size: 80%;\r\n            @media(min-width: 512px) {\r\n                font-size: 100%;\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst PageTitle: React.FC<any> = ({ title, subtitle, action, children }) => {\r\n    return (\r\n        <>\r\n            <SEO title={title} />\r\n            <BreadcrumbList />\r\n            <StyledPageTitle>\r\n                <div className=\"header\">\r\n                    <h1>{title}</h1>\r\n                    {subtitle && <h2>{subtitle}</h2>}\r\n                    {action}\r\n                </div>\r\n                {children}\r\n            </StyledPageTitle>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PageTitle;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nconst StyledColHeader = styled.div`\r\n    h2 {\r\n        text-align: center;\r\n        padding-bottom: 8px;\r\n        margin-bottom: 16px;\r\n        //font-weight: normal;\r\n        //color: ${props => props.theme.text.secondary};\r\n        border-bottom: 1px solid ${props => props.theme.utils.border};\r\n    }\r\n`;\r\n\r\nconst ColHeader: React.FC<any> = ({ title, subTitle }) => {\r\n\r\n    return (\r\n        <StyledColHeader>\r\n            <h2>{title}</h2>\r\n            {/*<h3>{subTitle}</h3>*/}\r\n        </StyledColHeader>\r\n    );\r\n};\r\n\r\nexport default ColHeader;\r\n","import { ModelId, ModelType, NoteId } from \"../models/Model.constants\";\r\n\r\nexport const getModelRoute = (modelType: ModelType, modelId: ModelId, rootId?: NoteId) => {\r\n\r\n    const rootSuffix = rootId ? `/root/${rootId}` : '';\r\n\r\n    return `/browse/${modelType}/${modelId}${rootSuffix}`;\r\n}\r\n","import { Link } from \"gatsby\";\r\nimport React from \"react\";\r\nimport styled from 'styled-components';\r\nimport Chord from \"../../../core/models/Chord\";\r\nimport { ChordId, IModelConfig, ModelId, ModelType, NoteId, ScaleId } from \"../../../core/models/Model.constants\";\r\nimport { CHORD_PRESETS, NOTE_PRESETS, SCALE_PRESETS } from \"../../../core/models/Model.presets\";\r\nimport Note from \"../../../core/models/Note\";\r\nimport Scale from \"../../../core/models/Scale\";\r\nimport { getModelRoute } from \"../../../core/routing/Routing.utils\";\r\nimport DropdownInput from \"../../inputs/DropdownInput\";\r\nimport Card from \"../../ui/Card\";\r\nimport InputRow from \"../../ui/InputRow\";\r\nimport ColHeader from \"./ColHeader\";\r\n\r\nconst StyledNotesCol = styled.div`\r\n    \r\n`;\r\n\r\nexport const MODEL_TYPE_OPTIONS = [\r\n    {\r\n        id: ModelType.Chord,\r\n        name: 'Chords',\r\n        value: ModelType.Chord,\r\n        data: CHORD_PRESETS\r\n    },\r\n    {\r\n        id: ModelType.Scale,\r\n        name: 'Scales',\r\n        value: ModelType.Scale,\r\n        data: SCALE_PRESETS\r\n    }\r\n]\r\n\r\nexport interface INotesColProps {\r\n    modelType: typeof MODEL_TYPE_OPTIONS[0];\r\n    modelConfig;\r\n    root: IModelConfig | any;\r\n    model: Chord | Scale;\r\n    setModelType?;\r\n    setModelConfig?;\r\n    setRoot?;\r\n    setModel?;\r\n}\r\n\r\nexport const DEFAULT_MODEL_TYPE = MODEL_TYPE_OPTIONS[0];\r\nexport const DEFAULT_MODEL_CONFIG = MODEL_TYPE_OPTIONS[0].data[0];\r\nexport const DEFAULT_ROOT = NOTE_PRESETS[0];\r\n//export const DEFAULT_MODEL = new Chord(DEFAULT_MODEL_CONFIG.modelId, { root: Note.fromId(DEFAULT_ROOT.modelId) })\r\n\r\nexport const getNewModel = (modelType: ModelType, modelId: ModelId, root: NoteId) => {\r\n    let newModel;\r\n    if (modelType === ModelType.Chord) {\r\n        newModel = new Chord(modelId as ChordId, { root: Note.fromId(root) })\r\n    }\r\n    else if (modelType === ModelType.Scale) {\r\n        newModel = new Scale(modelId as ScaleId, { root: Note.fromId(root) })\r\n    }\r\n    return newModel;\r\n}\r\n\r\nconst NotesCol: React.FC<INotesColProps> = props => {\r\n\r\n    const { modelType, modelConfig, root, setModelType: _setModelType, setModelConfig: _setModelConfig, setRoot: _setRoot, model, setModel } = props;\r\n    const modelOptions = modelType.data;\r\n\r\n    const setModelType = type => {\r\n        _setModelType(type);\r\n        _setModelConfig(type.data[0])\r\n    }\r\n    const setModelConfig = config => {\r\n        let newModel = getNewModel(config.modelType, config.modelId, root.modelId);\r\n        _setModelConfig(config);\r\n        setModel(newModel);\r\n    }\r\n    const setRoot = newRoot => {\r\n        let newModel = getNewModel(modelConfig.modelType, modelConfig.modelId, newRoot.modelId);\r\n        _setRoot(newRoot);\r\n        setModel(newModel);\r\n    }\r\n\r\n    console.log('dpb', MODEL_TYPE_OPTIONS, modelType, modelOptions, modelConfig)\r\n\r\n    return (\r\n        <StyledNotesCol>\r\n            <ColHeader title=\"Notes\" subTitle=\"...\" />\r\n            <Card title=\"Notes\">\r\n                <Link to={getModelRoute(modelType.id, modelConfig.modelId, root.modelId)}>{model.name}</Link>\r\n            </Card>\r\n            <Card title=\"Root\">\r\n                <ul>\r\n                    <li>\r\n                        <InputRow label=\"Key Center\">\r\n                            <DropdownInput value={root} setValue={setRoot} options={NOTE_PRESETS} idProperty=\"modelId\" />\r\n                        </InputRow>\r\n                    </li>\r\n                </ul>\r\n            </Card>\r\n            <Card title=\"Intervals\">\r\n                <ul>\r\n                    <li>\r\n                        <InputRow label=\"Model Type\">\r\n                            <DropdownInput value={modelType} setValue={setModelType} options={MODEL_TYPE_OPTIONS} idProperty=\"id\" />\r\n                        </InputRow>\r\n                    </li>\r\n                    <li>\r\n                        <InputRow label=\"Preset\">\r\n                            <DropdownInput value={modelConfig} setValue={setModelConfig} options={modelOptions} idProperty=\"modelId\" />\r\n                        </InputRow>\r\n                    </li>\r\n                </ul>\r\n            </Card>\r\n        </StyledNotesCol>\r\n    );\r\n};\r\n\r\nexport default NotesCol;\r\n","import { Link } from \"gatsby\";\r\nimport React from \"react\";\r\nimport styled from 'styled-components';\r\nimport { ChordId, ModelType, NoteId } from \"../../../core/models/Model.constants\";\r\nimport Fretboard from \"../../../viewers/fretboard/Fretboard\";\r\nimport { TuningId, TUNING_PRESET_MAP } from \"../../../viewers/fretboard/Fretboard.tuning\";\r\nimport Keyboard from \"../../../viewers/keyboard/Keyboard\";\r\nimport DEFAULT_KEYBOARD_PROPS from \"../../../viewers/keyboard/Keyboard.defaults\";\r\nimport { StyledPageBody } from \"../../layout/PageBody\";\r\nimport PageTitle from \"../../layout/PageTitle\";\r\nimport Card, { StyledCard } from \"../../ui/Card\";\r\nimport { getNewModel } from \"./NotesCol\";\r\n\r\nconst StyledViewPage = styled(StyledPageBody)`\r\n\r\n    p {\r\n        margin-top: 16px;\r\n    }\r\n\t\r\n    ${StyledCard} {\r\n        .fretboard, .keyboard {\r\n            margin: 0;\r\n            & + a {\r\n                padding-top: 16px;\r\n                font-size: 150%;\r\n                font-weight: bold;\r\n                display: block;\r\n                text-align: right;\r\n            }\r\n        }\r\n\r\n        margin-top: 16px;\r\n         .instrument {\r\n            display: grid;\r\n            grid-template-columns: 1fr;\r\n            @media(min-width: 512px) {\r\n                grid-template-columns: 1fr 1fr;\r\n            }\r\n            gap: 16px;\r\n            align-items: flex-start;\r\n\r\n            h4 {\r\n                text-transform: uppercase;\r\n            }\r\n\r\n            table {\r\n                width: 100%;\r\n                border-collapse: collapse;\r\n                td, th {\r\n                    padding: 4px 0;\r\n                    text-align: left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst COMMON_MODEL = getNewModel(ModelType.Chord, ChordId.MajTriad, NoteId.C);\r\n\r\nconst COMMON_FRETBOARD_PROPS = {\r\n    model: COMMON_MODEL,\r\n    showFretNumbers: false,\r\n    showFretDots: false\r\n}\r\n\r\nconst ViewPage: React.FC<any> = () => {\r\n\r\n    return (\r\n        <StyledViewPage>\r\n            <PageTitle title=\"Instruments\" subtitle=\"Choose an instrument preset\" />\r\n            <p>\r\n                More instruments and tunings coming soon!\r\n            </p>\r\n            <Card title=\"Guitar\">\r\n                <div className='instrument'>\r\n                    <div>\r\n                        <h4>Available Tunings</h4>\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Strings</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td><Link to='/view/fretboard/'>Standard 6-String</Link></td>\r\n                                    <td>E, A, D, G, B, E</td>\r\n                                </tr>\r\n                                {/*<tr>\r\n                                    <td><Link to='/view/fretboard/'>Flat</Link></td>\r\n                                    <td>Eb, Ab, Db, Gb, Bb, Eb</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><Link to='/view/fretboard/'>Double Flat</Link></td>\r\n                                    <td>D, G, C, F, A, D</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><Link to='/view/fretboard/'>Standard 7-String</Link></td>\r\n                                    <td>B, E, A, D, G, B, E</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><Link to='/view/fretboard/'>Drop D</Link></td>\r\n                                    <td>D, A, D, G, B, E</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><Link to='/view/fretboard/'>Open A</Link></td>\r\n                                    <td>E, A, C#, E, A, E</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><Link to='/view/fretboard/'>Open B</Link></td>\r\n                                    <td>B, F#, B, F#, B, D#</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><Link to='/view/fretboard/'>Open C</Link></td>\r\n                                    <td>C, G, C, G, C, E</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><Link to='/view/fretboard/'>Open D</Link></td>\r\n                                    <td>D, A, D, F#, A, D</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><Link to='/view/fretboard/'>Open E</Link></td>\r\n                                    <td>E, B, E, G#, B, E</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><Link to='/view/fretboard/'>Open F</Link></td>\r\n                                    <td>F, A, C, F, C, F</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td><Link to='/view/fretboard/'>Open G</Link></td>\r\n                                    <td>D, G, G, B, D</td>\r\n                                </tr>*/}\r\n                            </tbody>\r\n                        </table>\r\n\r\n                    </div>\r\n                    <div>\r\n                        <Fretboard\r\n                            {...COMMON_FRETBOARD_PROPS}\r\n                            tuning={TUNING_PRESET_MAP.get(TuningId.Standard).value}\r\n                        />\r\n                        <Link to='/view/fretboard/'>\r\n                            Use Default Guitar {'>'}\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </Card>\r\n            {/*<Card title=\"Bass\">\r\n                <div className='instrument'>\r\n                    <div>\r\n                        <h4>Available Tunings</h4>\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Strings</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td><Link to='/view/fretboard/'>Standard 4-String</Link></td>\r\n                                    <td>E, A, D, G</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div>\r\n                        <Fretboard\r\n                            {...COMMON_FRETBOARD_PROPS}\r\n                            tuning={TUNING_PRESET_MAP.get(TuningId.StandardBass).value}\r\n                        />\r\n                        <Link to='/view/fretboard/'>\r\n                            Use Default Bass {'>'}\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </Card>*/}\r\n            <Card title=\"Keyboard\">\r\n                <div className='instrument'>\r\n                    <div>\r\n                        <h4>Available Presets</h4>\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Key Range</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td><Link to='/view/keyboard/'>Double Octave</Link></td>\r\n                                    <td>C2-C4</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div>\r\n                        <Keyboard\r\n                            model={COMMON_MODEL}\r\n                            keyRange={DEFAULT_KEYBOARD_PROPS.keyRange as [number, number]}\r\n                        />\r\n                        <Link to='/view/keyboard/'>\r\n                            Use Default Keyboard {'>'}\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </Card>\r\n        </StyledViewPage >\r\n    )\r\n};\r\n\r\nexport default ViewPage;\r\n","import ViewPage from \"../../components/pages/view/ViewPage\";\r\n\r\nexport default ViewPage;\r\n","import styled from 'styled-components';\r\n\r\nconst StyledFretboard = styled.div`\r\n    display: inline-grid;\r\n\twidth: 100%;\r\n\tbackground-image: radial-gradient(ellipse, #E8DBB8 0%, #D0B27C 100%);\r\n\tfont-size: 90%;\r\n\tmargin: 16px 0;\r\n\r\n    .fret {\r\n        display: inline-flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        position: relative;\r\n        border-right: 2px solid darkgrey;\r\n    }\r\n\r\n    .fret.open {\r\n        border-right: 3px solid grey;\r\n        background-color: #D0B27C;;\r\n    }\r\n\r\n    /* Used to maintain aspect ratio */\r\n\r\n    .fret::before {\r\n        content: \"\";\r\n        display: block;\r\n        height: 0;\r\n        width: 0;\r\n        margin-top: calc(1/2 * 100%);\r\n    }\r\n\r\n    /* Fret String */\r\n\r\n    .fret-string {\r\n        border-top: 1px solid grey;\r\n        width: 100%;\r\n    }\r\n\r\n    /* Fret Numbers */\r\n\r\n    .fret-number {\r\n        position: absolute;\r\n        bottom: 100%;\r\n    }\r\n\r\n    /* Fret Dots */\r\n\r\n    .fret-dots {\r\n        position: absolute;\r\n        top: 95%;\r\n        font-size: 16px;\r\n        white-space: nowrap;\r\n    }\r\n\r\n    .fret-number, .fret-dots {\r\n        color: #888;\r\n    }\r\n`;\r\n\r\nexport default StyledFretboard;\r\n","\r\nimport * as React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { IFretProps } from \"./Fretboard.utils\";\r\n\r\nconst StyledFretLabel = styled.div`\r\n\tposition: absolute;\r\n\theight: 60%;\r\n\taspect-ratio: 1;\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\tborder-radius: 100%;\r\n\tbackground-color: ${({ $bgColor }) => $bgColor ? $bgColor : 'transparent'};\r\n\tcolor: ${({ $fgColor }) => $fgColor ? $fgColor : ''};\r\n\r\n\tcursor: pointer;\r\n\t&:hover {\r\n\t\theight: 80%;\r\n\t}\r\n`;\r\n\r\n\r\nconst FretLabel: React.FC<IFretProps> = props => {\r\n\r\n\tconst bgColor = props.colorMapFn(props);\r\n\r\n\tlet fgColor = 'white';\r\n\r\n\treturn (\r\n\t\t<StyledFretLabel $bgColor={bgColor} $fgColor={fgColor} onClick={null} className=\"fret-label\">\r\n\t\t\t{null}\r\n\t\t</StyledFretLabel>\r\n\t);\r\n};\r\n\r\nexport default FretLabel;\r\n","import * as React from \"react\";\r\nimport StyledFretboard from \"./Fretboard.styles\";\r\nimport { DEFAULT_FRETBOARD_PROPS, getDotsForFret, getFretRatios, IFretboardProps, IFretProps } from \"./Fretboard.utils\";\r\nimport FretLabel from \"./FretLabel\";\r\n\r\nexport const Fret: React.FC<IFretProps> = props => {\r\n\r\n\tconst { tuning, stringIndex, fretIndex, showFretNumbers, showFretDots } = props;\r\n\r\n\tconst classes = ['fret'];\r\n\tif (fretIndex === 0)\r\n\t\tclasses.push('open');\r\n\r\n\tconst isLowString = stringIndex === tuning.length - 1;\r\n\tconst isHighString = stringIndex === 0;\r\n\r\n\treturn (\r\n\t\t<div className={classes.join(' ')}>\r\n\t\t\t<div className=\"fret-number\">\r\n\t\t\t\t{showFretNumbers && isHighString && fretIndex > 0 && fretIndex}\r\n\t\t\t</div>\r\n\t\t\t<div className='fret-string' />\r\n\t\t\t<FretLabel {...props} />\r\n\t\t\t<div className=\"fret-dots\">\r\n\t\t\t\t{showFretDots && isLowString && fretIndex > 0 && getDotsForFret(fretIndex)}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst getFrets = (props: IFretboardProps) => {\r\n\tconst { fretRange, tuning } = props;\r\n\tconst [lo, hi] = fretRange;\r\n\r\n\tconst allFrets = [];\r\n\tfor (let s = 0; s < tuning.length; s++) {\r\n\t\tfor (let f = lo; f <= hi; f++) {\r\n\t\t\tallFrets.push(\r\n\t\t\t\t<Fret\r\n\t\t\t\t\tkey={`s${s}-f${f}`}\r\n\t\t\t\t\tstringIndex={s}\r\n\t\t\t\t\tfretIndex={f}\r\n\t\t\t\t\ttuning={tuning}\r\n\t\t\t\t\t{...props}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\treturn allFrets;\r\n};\r\n\r\nconst Fretboard: React.FC<IFretboardProps> = (userProps) => {\r\n\tconst props = { ...DEFAULT_FRETBOARD_PROPS, ...userProps };\r\n\r\n\tconst [lo, hi] = props.fretRange;\r\n\tconst numFrets = hi - lo + 1;\r\n\tconst numStrings = props.tuning.length;\r\n\tconst gridTemplateColumns = getFretRatios(numFrets).map(n => n + 'fr').join(' ');\r\n\tconst gridTemplateRows = `repeat(${numStrings}, 1fr)`;\r\n\tconst fretboardStyles = {\r\n\t\tgridTemplateColumns,\r\n\t\tgridTemplateRows\r\n\t};\r\n\r\n\treturn (\r\n\t\t<StyledFretboard className='fretboard' style={fretboardStyles}>\r\n\t\t\t{getFrets(props)}\r\n\t\t</StyledFretboard>\r\n\t);\r\n};\r\n\r\nexport default Fretboard;\r\n","import ArrayUtils from \"../../core/general/Array.utils\";\r\nimport Note from '../../core/models/Note';\r\nimport { NoteId } from './../../core/models/Model.constants';\r\n\r\nexport enum TuningId {\r\n    Standard = 'standard',\r\n    StandardSeven = 'standard-seven',\r\n    StandardBass = 'standard-bass',\r\n    Flat = 'flat',\r\n    DoubleFlat = 'double-flat',\r\n    DropD = 'drop-d',\r\n    DADGAD = 'dadgad',\r\n    Banjo = 'banjo',\r\n    Violin = 'violin',\r\n    OpenA = 'open-a',\r\n    OpenB = 'open-b',\r\n    OpenC = 'open-c',\r\n    OpenD = 'open-d',\r\n    OpenE = 'open-e',\r\n    OpenF = 'open-f',\r\n    OpenG = 'open-g',\r\n}\r\n\r\nexport interface ITuning {\r\n    id: TuningId;\r\n    name: string;\r\n    value: number[]\r\n}\r\n\r\nconst formatPreset = (id: TuningId, name: string, value: number[]): ITuning => ({\r\n    id,\r\n    name,\r\n    value\r\n});\r\n\r\nconst getPitch = (noteId: NoteId, octave: number): number => Note.getNote(noteId, octave).pod[0];\r\n\r\nexport const TUNING_PRESET_MAP = new Map<TuningId, ITuning>([\r\n    [TuningId.Standard, formatPreset(\r\n        TuningId.Standard,\r\n        'Standard',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.Flat, formatPreset(\r\n        TuningId.Flat,\r\n        'Flat',\r\n        [\r\n            getPitch(NoteId.Eb, 5),\r\n            getPitch(NoteId.Bb, 4),\r\n            getPitch(NoteId.Gb, 4),\r\n            getPitch(NoteId.Db, 4),\r\n            getPitch(NoteId.Ab, 3),\r\n            getPitch(NoteId.Eb, 3)\r\n        ]\r\n    )],\r\n    [TuningId.DoubleFlat, formatPreset(\r\n        TuningId.DoubleFlat,\r\n        'Double Flat',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.F, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.StandardSeven, formatPreset(\r\n        TuningId.StandardSeven,\r\n        'Standard 7-String',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3),\r\n            getPitch(NoteId.B, 3)\r\n        ]\r\n    )],\r\n    [TuningId.StandardBass, formatPreset(\r\n        TuningId.StandardBass,\r\n        'Standard Bass',\r\n        [\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3),\r\n            getPitch(NoteId.A, 2),\r\n            getPitch(NoteId.E, 2)\r\n        ]\r\n    )],\r\n    [TuningId.DropD, formatPreset(\r\n        TuningId.DropD,\r\n        'Drop D',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.DADGAD, formatPreset(\r\n        TuningId.DADGAD,\r\n        'DADGAD',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    // Unconfirmed\r\n    [TuningId.Banjo, formatPreset(\r\n        TuningId.Banjo,\r\n        'Banjo',\r\n        [\r\n            getPitch(NoteId.G, 5),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    // Unconfirmed\r\n    [TuningId.Violin, formatPreset(\r\n        TuningId.Violin,\r\n        'Violin',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 4)\r\n        ]\r\n    )],\r\n    [TuningId.OpenA, formatPreset(\r\n        TuningId.OpenA,\r\n        'Open A',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.E, 4),\r\n            getPitch(NoteId.Cs, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenB, formatPreset(\r\n        TuningId.OpenB,\r\n        'Open B',\r\n        [\r\n            getPitch(NoteId.Ds, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Fs, 4),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Fs, 3),\r\n            getPitch(NoteId.B, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenC, formatPreset(\r\n        TuningId.OpenC,\r\n        'Open C',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.C, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenD, formatPreset(\r\n        TuningId.OpenD,\r\n        'Open D',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.Fs, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenE, formatPreset(\r\n        TuningId.OpenE,\r\n        'Open E',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Gs, 4),\r\n            getPitch(NoteId.E, 4),\r\n            getPitch(NoteId.B, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenF, formatPreset(\r\n        TuningId.OpenF,\r\n        'Open F',\r\n        [\r\n            getPitch(NoteId.F, 5),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.F, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.F, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenG, formatPreset(\r\n        TuningId.OpenG,\r\n        'Open G',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )]\r\n]);\r\n\r\nexport const FRETBOARD_TUNING_VALUES = ArrayUtils.mapToArray(TUNING_PRESET_MAP);\r\n","import Chord from '../../core/models/Chord';\r\nimport IntervalSpan from '../../core/models/Interval';\r\nimport { IModelConfig } from '../../core/models/Model.constants';\r\nimport Note from '../../core/models/Note';\r\nimport Scale from '../../core/models/Scale';\r\nimport { ITuning, TuningId, TUNING_PRESET_MAP } from './Fretboard.tuning';\r\nimport { IVoicing } from './Fretboard.voicing';\r\n\r\nexport interface IFretLabelProps {\r\n\tnote?: Note;\r\n\tcolor?: string;\r\n\tfreq?: number;\r\n}\r\n\r\nexport interface IFretboardProps {\r\n\tfretRange?: [number, number];\r\n\tshowFretDots?: boolean;\r\n\tshowFretNumbers?: boolean;\r\n\tcolorMapFn?: (fretProps: IFretProps) => string | undefined;\r\n\tvoicing?: IVoicing,\r\n\ttuning?: number[]; // ITuning,\r\n\tmodel?: Chord | Scale;\r\n}\r\n\r\nexport interface IFretProps extends IFretboardProps {\r\n\tstringIndex: number;\r\n\tfretIndex: number;\r\n}\r\n\r\nexport const DOTTED_FRET_INDICES = [true, false, false, true, false, true, false, true, false, true, false, false];\r\n\r\nexport const FRET_SIZE_RATIO = Math.pow((1 / 2), (1 / 12));\r\n\r\nconst isIntervalInVoicing = (interval: IntervalSpan, voicing: IVoicing, stringIndex: number) => {\r\n\tif (!voicing || !voicing.value) return true;\r\n\tconst v = voicing.value[stringIndex];\r\n\tconst d = interval.getDegree();\r\n\tif (Array.isArray(v)) {\r\n\t\treturn v.some(n => doesVoicingValueMatch(d, n));\r\n\t}\r\n\telse if (typeof v === 'number') {\r\n\t\treturn doesVoicingValueMatch(d, v);\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nexport const getFretColor = (props: IFretProps): string | undefined => {\r\n\tconst { stringIndex, fretIndex, tuning, model, voicing } = props;\r\n\tconst noteIndex = tuning[stringIndex] + fretIndex;\r\n\tconst [interval, note] = model.tryGetPodPairAtPitch(noteIndex);\r\n\r\n\tif (!note) return;\r\n\r\n\tif (voicing && !isIntervalInVoicing(interval, voicing, stringIndex)) {\r\n\t\treturn `#00000033`\r\n\t}\r\n\r\n\treturn interval.getColor();\r\n}\r\n\r\nexport const DEFAULT_FRETBOARD_PROPS: IFretboardProps = {\r\n\tfretRange: [1, 12],\r\n\ttuning: TUNING_PRESET_MAP.get(TuningId.Standard).value,\r\n\tshowFretDots: true,\r\n\tshowFretNumbers: true,\r\n\tcolorMapFn: getFretColor\r\n};\r\n\r\nexport const getFretRatios = (numFrets: number): number[] => {\r\n\tconst ratios = [];\r\n\tfor (let i = 1; i <= numFrets; i++) {\r\n\t\tratios.push((i <= 1) ? 1 : ratios[i - 2] * FRET_SIZE_RATIO);\r\n\t}\r\n\treturn ratios;\r\n};\r\n\r\nexport const getDotsForFret = (fretNumber: number): string => {\r\n\tconst mod = fretNumber % 12;\r\n\tif (mod === 0)\r\n\t\treturn '• •';\r\n\telse if (DOTTED_FRET_INDICES[mod])\r\n\t\treturn '•';\r\n\treturn '';\r\n};\r\n\r\nconst doesVoicingValueMatch = (d: number, v: number) => {\r\n\treturn d + 1 === v;\r\n}\r\n"],"names":["StyledBreadcrumbList","styled","props","theme","text","secondary","pieces","usePageProps","path","split","paths","reduce","prev","cur","i","arr","replace","isLink","includes","replaceAll","Tag","Link","to","undefined","push","React","key","Icon","iconId","size","color","slice","length","StyledPageTitle","utils","border","primary","title","subtitle","action","children","SEO","BreadcrumbList","className","StyledColHeader","subTitle","getModelRoute","modelType","modelId","rootId","StyledNotesCol","MODEL_TYPE_OPTIONS","id","ModelType","name","value","data","CHORD_PRESETS","SCALE_PRESETS","DEFAULT_MODEL_TYPE","DEFAULT_MODEL_CONFIG","DEFAULT_ROOT","NOTE_PRESETS","getNewModel","root","newModel","Chord","Note","Scale","modelConfig","_setModelType","setModelType","_setModelConfig","setModelConfig","_setRoot","setRoot","model","setModel","modelOptions","console","log","ColHeader","Card","InputRow","label","DropdownInput","setValue","newRoot","options","idProperty","type","config","StyledViewPage","StyledPageBody","withConfig","StyledCard","COMMON_MODEL","ChordId","NoteId","COMMON_FRETBOARD_PROPS","showFretNumbers","showFretDots","PageTitle","Fretboard","tuning","TUNING_PRESET_MAP","TuningId","Keyboard","keyRange","DEFAULT_KEYBOARD_PROPS","StyledFretLabel","$bgColor","$fgColor","bgColor","colorMapFn","onClick","Fret","stringIndex","fretIndex","classes","isLowString","isHighString","join","FretLabel","getDotsForFret","userProps","DEFAULT_FRETBOARD_PROPS","fretRange","lo","numFrets","numStrings","fretboardStyles","gridTemplateColumns","getFretRatios","map","n","gridTemplateRows","StyledFretboard","style","hi","allFrets","s","f","getFrets","formatPreset","getPitch","noteId","octave","pod","Map","Standard","Flat","DoubleFlat","StandardSeven","StandardBass","DropD","DADGAD","Banjo","Violin","OpenA","OpenB","OpenC","OpenD","OpenE","OpenF","OpenG","FRETBOARD_TUNING_VALUES","ArrayUtils","DOTTED_FRET_INDICES","FRET_SIZE_RATIO","Math","pow","voicing","noteIndex","tryGetPodPairAtPitch","interval","v","d","getDegree","Array","isArray","some","doesVoicingValueMatch","isIntervalInVoicing","getColor","ratios","fretNumber","mod"],"sourceRoot":""}