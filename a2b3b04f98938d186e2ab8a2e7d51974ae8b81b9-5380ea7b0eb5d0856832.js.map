{"version":3,"file":"a2b3b04f98938d186e2ab8a2e7d51974ae8b81b9-5380ea7b0eb5d0856832.js","mappings":"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","sources":["webpack://play-what/./src/components/_shared/inputs/DropdownInput.tsx","webpack://play-what/./src/components/_shared/layout/PageBody.tsx","webpack://play-what/./src/components/_shared/layout/PageTitle.tsx","webpack://play-what/./src/components/_shared/ui/Card.tsx","webpack://play-what/./src/components/_shared/ui/InputRow.tsx","webpack://play-what/./src/core/models/Chord.ts","webpack://play-what/./src/core/models/Interval.ts","webpack://play-what/./src/core/models/PodList.ts","webpack://play-what/./src/viewers/fretboard/Fretboard.styles.tsx","webpack://play-what/./src/viewers/fretboard/FretLabel.tsx","webpack://play-what/./src/viewers/fretboard/Fretboard.tsx","webpack://play-what/./src/viewers/fretboard/Fretboard.tuning.ts","webpack://play-what/./src/viewers/fretboard/Fretboard.utils.ts","webpack://play-what/./src/viewers/fretboard/Fretboard.voicing.ts"],"sourcesContent":["import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nconst StyledDropdownInput = styled.select`\r\n\tfont-size: 110%;\r\n    min-width: 128px;\r\n\r\n\tpadding: 4px 8px;\r\n\r\n    cursor: pointer;\r\n    border-radius: 4px;\r\n\r\n\toption {\r\n\t\tcursor: pointer;\r\n\t}\r\n`;\r\n\r\ninterface IDropdownInputProps {\r\n\tvalue: any;\r\n\tsetValue: Function;\r\n\toptions: any[];\r\n\tidProperty?: string;\r\n\tdisplayProperty?: string;\r\n}\r\n\r\nconst DropdownInput: React.FC<IDropdownInputProps> = props => {\r\n\tconst { value, setValue, options, idProperty, displayProperty } = props;\r\n\r\n\treturn (\r\n\t\t<StyledDropdownInput\r\n\t\t\tclassName='dropdown-input'\r\n\t\t\tonChange={e => setValue(options[e.target.selectedIndex], e.target.selectedIndex)}\r\n\t\t\tvalue={value ? value[idProperty || 'id'] : ''}\r\n\t\t>\r\n\t\t\t{(options || []).map((v, i) => (\r\n\t\t\t\t<option key={i} value={v[idProperty || 'id']}>{displayProperty ? v[displayProperty] : v.name}</option>\r\n\t\t\t))}\r\n\t\t</StyledDropdownInput>\r\n\t);\r\n}\r\n\r\nexport default DropdownInput;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledPageBody = styled.div`\r\n\twidth: 100%;\r\n\t//max-width: 1920px;\r\n\tmax-width: 1024px;\r\n\tmin-height: calc(100vh - 128px);\r\n    \r\n\tmargin: auto;\r\n\tpadding: 16px;\r\n`\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledPageTitle = styled.div`\r\n    width: 100%;\r\n\r\n    .header {\r\n        border-bottom: 1px solid ${({ theme }) => theme.utils.border};    \r\n        padding-bottom: 16px;\r\n        width: 100%;\r\n        margin: auto;\r\n\r\n        > h1 {\r\n            width: 100%;\r\n            font-size: 300%;\r\n            text-align: left;\r\n            color: ${({ theme }) => theme.text.primary};;\r\n        }\r\n\r\n        > h2 {\r\n            margin-top: 8px;\r\n            width: 100%;\r\n            text-align: left;\r\n            color: ${({ theme }) => theme.text.secondary};;\r\n            font-size: 100%;\r\n        }\r\n    }\r\n`\r\n\r\nconst PageTitle: React.FC<any> = ({ title, subtitle, children }) => {\r\n    return (\r\n        <StyledPageTitle>\r\n            <div className=\"header\">\r\n                <h1>{title}</h1>\r\n                <h2>{subtitle}</h2>\r\n            </div>\r\n            {children}\r\n        </StyledPageTitle>\r\n    );\r\n};\r\n\r\nexport default PageTitle;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledCard = styled.div`\r\n    background: ${props => props.theme.surface.card};\r\n    width: 100%;\r\n    border-radius: 16px;\r\n    padding: 16px;\r\n\r\n    .header {\r\n        margin-bottom: 16px;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n    }\r\n`;\r\n\r\nconst Card: React.FC<any> = ({ title, action, children, ...rest }) => {\r\n    return (\r\n        <StyledCard {...rest}>\r\n            {title &&\r\n                <div className=\"header\">\r\n                    <h2>{title}</h2>\r\n                    {action}\r\n                </div>\r\n            }\r\n            {children}\r\n        </StyledCard >\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledInputRow = styled.div`\r\n    display: flex;\r\n    align-items: flex-start;\r\n    flex-direction: column;\r\n\r\n    ${props => props.$y ? '' : `\r\n        @media(min-width: 512px) {\r\n            align-items: center;\r\n            flex-direction: row;\r\n            justify-content: space-between;\r\n            margin-bottom: 8px;\r\n        }\r\n    `}\r\n\r\n    label {\r\n        color: ${({ theme }) => theme.dark3};\r\n        font-weight: bold;\r\n        margin: 4px;\r\n    }\r\n`;\r\n\r\nconst InputRow = ({ label, children, y = false, ...rest }) => {\r\n    return (\r\n        <StyledInputRow $y={y} {...rest}>\r\n            <label>{label}</label>\r\n            <div className=\"octave\">\r\n                {children}\r\n            </div>\r\n        </StyledInputRow>\r\n    );\r\n}\r\n\r\nexport default InputRow;\r\n","import Model from './Model';\r\nimport { ChordId, IPod } from './Model.constants';\r\nimport { CHORD_PRESETS, CHORD_PRESET_MAP } from './Model.presets';\r\nimport { arePodListsEqual, reducePodList } from './Pod.static';\r\nimport PodList from './PodList';\r\n\r\nexport default class Chord extends PodList {\r\n\r\n    constructor(id: ChordId, options = undefined) {\r\n        super(CHORD_PRESET_MAP, id, options);\r\n    }\r\n\r\n    static fromValue = (value: IPod[]) => Model.fromValue(CHORD_PRESETS, Chord, value, arePodListsEqual, reducePodList);\r\n}\r\n","import { DEFAULT_DEGREE_COLOR_SCHEME } from \"../theory/Degree.constants\";\r\nimport TuningUtils from \"../tuning/Tuning.utils\";\r\nimport Model from \"./Model\";\r\nimport { IntervalId, INTERVAL_QUALITY, IPod } from './Model.constants';\r\nimport { CHORD_PRESETS, CORE_INTERVALS, INTERVAL_PRESETS, INTERVAL_PRESET_MAP, SCALE_PRESETS } from './Model.presets';\r\nimport Pod from \"./Pod\";\r\nimport { arePodsEqual, listContainsSubset, reducePod } from \"./Pod.static\";\r\n\r\nexport default class IntervalSpan extends Pod {\r\n\r\n    id: IntervalId;\r\n\r\n    constructor(id: IntervalId) {\r\n        super(INTERVAL_PRESET_MAP.get(id));\r\n    }\r\n\r\n    static fromValue = (value: IPod) => Model.fromValue(INTERVAL_PRESETS, IntervalSpan, value, arePodsEqual, reducePod);\r\n\r\n    getColor(): string | undefined {\r\n        return this.equals(new IntervalSpan(IntervalId.P1)) ?\r\n            'red' : '#333';\r\n\r\n        return DEFAULT_DEGREE_COLOR_SCHEME[this.pod[1]];\r\n    }\r\n\r\n    getName = () => {\r\n        const reduced = reducePod(this.pod);\r\n\r\n        const [noteIndex, d] = reduced;\r\n        const degreeIntervals = CORE_INTERVALS[d];\r\n        if (!degreeIntervals) return '?';\r\n\r\n        const pIvl = degreeIntervals[0];\r\n        const loIvl = pIvl;\r\n        const hiIvl = degreeIntervals[degreeIntervals.length - 1];\r\n\r\n        // determine core interval and quality\r\n        let ivl = null;\r\n        let quality = null;\r\n        if (degreeIntervals.length === 1) {\r\n            ivl = pIvl; // perfect\r\n            quality = INTERVAL_QUALITY.perfect;\r\n        }\r\n        else if (noteIndex <= loIvl.value[0]) {\r\n            ivl = loIvl; // minor\r\n            quality = INTERVAL_QUALITY.min;\r\n        }\r\n        else if (noteIndex >= hiIvl.value[0]) {\r\n            ivl = hiIvl; // major\r\n            quality = INTERVAL_QUALITY.maj;\r\n        }\r\n\r\n        const offset = ivl.value[0] - reduced[0];\r\n\r\n        if (offset === 0) return `${quality.symbol}${d + 1}`;\r\n        else if (offset > 0) quality = INTERVAL_QUALITY.dim; // dim\r\n        else if (offset < 0) quality = INTERVAL_QUALITY.aug; // aug\r\n\r\n        const count = Math.abs(offset);\r\n        const qualityStr = quality.symbol.repeat(count);\r\n\r\n        const value = `${qualityStr}${d + 1}`;\r\n\r\n        /*if (isExtended) {\r\n            console.log('x', value);\r\n            if (value === 'm2') value = 'b9'\r\n            else if (value === 'M2') value = '9'\r\n            else if (value === 'm3') value = '#9'\r\n            else if (value === 'M3') value = 'b11'\r\n            else if (value === 'P4') value = '11'\r\n            else if (value === 'A4' || value === 'd5') value = '#11'\r\n            else if (value === 'm6') value = 'b13'\r\n            else if (value === 'M6') value = '13'\r\n            else if (value === 'm7') value = '#13'\r\n        }*/\r\n\r\n        return value;\r\n    }\r\n\r\n    getRatio = () => {\r\n        const [p] = this.pod;\r\n\r\n        const baseline = TuningUtils.getFrequency(0);\r\n        const compareTo = TuningUtils.getFrequency(p);\r\n\r\n        const ratio = compareTo / baseline;\r\n\r\n        return `1:${ratio.toFixed(2)}`;\r\n    }\r\n\r\n    isInSuperset(superset: IPod[]) {\r\n        if (superset.length <= 1) return false;\r\n        return listContainsSubset(superset, [this.pod]);\r\n    }\r\n\r\n    getSupersets() {\r\n        const result = [];\r\n\r\n        const chords = CHORD_PRESETS.filter(preset =>\r\n            this.isInSuperset(preset.value)\r\n        );\r\n\r\n        if (chords.length) {\r\n            result.push({\r\n                modelName: 'Chords',\r\n                values: chords\r\n            });\r\n        }\r\n\r\n        const scales = SCALE_PRESETS.filter(preset =>\r\n            this.isInSuperset(preset.value)\r\n        );\r\n\r\n        if (scales.length) {\r\n            result.push({\r\n                modelName: 'Scales',\r\n                values: scales\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n}\r\n","import IntervalSpan from './Interval';\r\nimport Model from './Model';\r\nimport { ChordId, IPod, ScaleId } from './Model.constants';\r\nimport { CHORD_PRESETS, SCALE_PRESETS } from './Model.presets';\r\nimport Note from './Note';\r\nimport { addPods, arePodListsEqual, getIndexOfPodAtPitch, listContainsSubset } from './Pod.static';\r\n\r\nexport interface IPodListOptions {\r\n    root?: Note;\r\n}\r\n\r\nexport default class PodList extends Model {\r\n\r\n    id: ChordId | ScaleId;\r\n    root: Note;\r\n    podList: IPod[];\r\n    intervals: IntervalSpan[];\r\n    notePods?: IPod[];\r\n    notes?: Note;\r\n\r\n    constructor(presetMap, presetId: ChordId | ScaleId, options?: IPodListOptions) {\r\n        super();\r\n\r\n        const preset = presetMap.get(presetId);\r\n        if (!preset) throw new Error(`Unknown presetId: ${presetId}`);\r\n\r\n        this.modelId = preset.modelId;\r\n        this.id = preset.id;\r\n        this.name = preset.name;\r\n        this.tags = preset.tags;\r\n        this.podList = preset.value;\r\n        this.intervals = preset.value.map(pod => IntervalSpan.fromValue(pod));\r\n\r\n        if (options && options.root) {\r\n            this.applyRoot(options.root);\r\n        }\r\n    }\r\n\r\n    equals(B: PodList) {\r\n        return arePodListsEqual(this.podList, B.podList);\r\n    }\r\n\r\n    getName = () => {\r\n        return `${this.root ? `${this.root.name} ` : ''}${this.name}`;\r\n    }\r\n\r\n    applyRoot(root: Note) {\r\n        let notes;\r\n        let notePods;\r\n        try {\r\n            notePods = this.intervals.map(ivl => addPods(ivl.pod, root.pod));\r\n            notes = notePods.map(pod => new Note(pod));\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n            throw new Error('Unable to apply root');\r\n        }\r\n        this.root = root;\r\n        this.notes = notes;\r\n        this.notePods = notePods;\r\n        this.name = this.getName();\r\n        return this;\r\n    }\r\n\r\n    getIntervalListString(): string {\r\n        const nameArr = this.intervals.map(ivl => ivl.getName());\r\n        return nameArr.join(', ');\r\n    }\r\n\r\n    isInSuperset(superset: IPod[]) {\r\n        if (superset.length <= this.podList.length) return false;\r\n        return listContainsSubset(superset, this.podList);\r\n    }\r\n\r\n    containsSubset(subset: IPod[]) {\r\n        if (subset.length >= this.podList.length) return false;\r\n        return listContainsSubset(this.podList, subset);\r\n    }\r\n\r\n    getSubchords() {\r\n        return CHORD_PRESETS.filter(preset =>\r\n            this.containsSubset(preset.value)\r\n        );\r\n    }\r\n    \r\n    getSuperchords() {\r\n        return CHORD_PRESETS.filter(preset =>\r\n            this.isInSuperset(preset.value)\r\n        );\r\n    }\r\n\r\n    getSubscales() {\r\n        return SCALE_PRESETS.filter(preset =>\r\n            this.containsSubset(preset.value)\r\n        );\r\n    }\r\n\r\n    getSuperscales() {\r\n        return SCALE_PRESETS.filter(preset =>\r\n            this.isInSuperset(preset.value)\r\n        );\r\n    }\r\n\r\n    getPreview() {\r\n        return this.getIntervalListString();\r\n    }\r\n\r\n    tryGetPodPairAtPitch(noteIndex: number): [IntervalSpan, Note] {\r\n        const index = getIndexOfPodAtPitch(this.notePods, noteIndex, false);\r\n\r\n        if (index == null) return [undefined, undefined];\r\n\r\n        return [\r\n            this.intervals[index],\r\n            this.notes[index]\r\n        ];\r\n    }\r\n}\r\n","import styled from 'styled-components';\r\n\r\nconst StyledFretboard = styled.div`\r\n    display: inline-grid;\r\n\twidth: 100%;\r\n\tbackground-image: radial-gradient(ellipse, #E8DBB8 0%, #D0B27C 100%);\r\n\r\n\tfont-size: 90%;\r\n\t\r\n\tmargin: 16px 0;\r\n\r\n    .fret {\r\n        display: inline-flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        position: relative;\r\n        border-right: 2px solid darkgrey;\r\n    }\r\n\r\n    .fret.open {\r\n        border-right: 3px solid grey;\r\n        background-color: #D0B27C;;\r\n    }\r\n\r\n    /* Used to maintain aspect ratio */\r\n\r\n    .fret::before {\r\n        content: \"\";\r\n        display: block;\r\n        height: 0;\r\n        width: 0;\r\n        margin-top: calc(1/2 * 100%);\r\n    }\r\n\r\n    /* Fret String */\r\n\r\n    .fret-string {\r\n        border-top: 1px solid grey;\r\n        width: 100%;\r\n    }\r\n\r\n    /* Fret Numbers */\r\n\r\n    .fret-number {\r\n        position: absolute;\r\n        bottom: 100%;\r\n    }\r\n\r\n    /* Fret Dots */\r\n\r\n    .fret-dots {\r\n        position: absolute;\r\n        top: 95%;\r\n        font-size: 16px;\r\n        white-space: nowrap;\r\n    }\r\n\r\n    .fret-number, .fret-dots {\r\n        color: #888;\r\n    }\r\n\r\n    /* Fret Label */\r\n\r\n    .fret-label {\r\n        position: absolute;\r\n        width: 90%;\r\n        height: 90%;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        border-radius: 100%;\r\n    }\r\n\r\n    .fret-label:hover {\r\n        width: 100%;\r\n        height: 100%;\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nexport default StyledFretboard;\r\n","\r\nimport * as React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { IFretLabelProps } from \"./Fretboard.utils\";\r\n\r\nconst StyledFretLabel = styled.div`\r\n\tposition: absolute;\r\n\twidth: 16px;\r\n\theight: 16px;\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\tborder-radius: 100%;\r\n\tbackground-color: ${({ $bgColor }) => $bgColor ? $bgColor : 'transparent'};\r\n\tcolor: ${({ $fgColor }) => $fgColor ? $fgColor : ''};\r\n\r\n\tcursor: pointer;\r\n\t&:hover {\r\n\t\twidth: 24px;\r\n\t\theight: 24px;\r\n\t}\r\n`;\r\n\r\n\r\nconst FretLabel: React.FC<IFretLabelProps> = ({ color, freq }) => {\r\n\r\n\tlet fgColor = 'white';\r\n\r\n\treturn (\r\n\t\t<StyledFretLabel $bgColor={color} $fgColor={fgColor} onClick={null}>\r\n\t\t\t{null}\r\n\t\t</StyledFretLabel>\r\n\t);\r\n};\r\n\r\nexport default FretLabel;\r\n","import * as React from \"react\";\r\nimport StyledFretboard from \"./Fretboard.styles\";\r\nimport { DEFAULT_FRETBOARD_PROPS, getDotsForFret, getFretRatios, IFretboardProps, IFretProps } from \"./Fretboard.utils\";\r\nimport FretLabel from \"./FretLabel\";\r\n\r\nexport const Fret: React.FC<IFretProps> = props => {\r\n\r\n\tconst { tuning, stringIndex, fretIndex, showFretNumbers, showFretDots, getFretLabelProps } = props;\r\n\r\n\tconst classes = ['fret'];\r\n\tif (fretIndex === 0)\r\n\t\tclasses.push('open');\r\n\r\n\tconst isLowString = stringIndex === tuning.length - 1;\r\n\tconst isHighString = stringIndex === 0;\r\n\r\n\tconst fretLabelProps = getFretLabelProps ? getFretLabelProps(stringIndex, fretIndex, tuning) : {};\r\n\r\n\treturn (\r\n\t\t<div className={classes.join(' ')}>\r\n\t\t\t<div className=\"fret-number\">\r\n\t\t\t\t{showFretNumbers && isHighString && fretIndex > 0 && fretIndex}\r\n\t\t\t</div>\r\n\t\t\t<div className='fret-string' />\r\n\t\t\t<FretLabel {...fretLabelProps} />\r\n\t\t\t<div className=\"fret-dots\">\r\n\t\t\t\t{showFretDots && isLowString && fretIndex > 0 && getDotsForFret(fretIndex)}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst getFrets = (props: IFretboardProps) => {\r\n\tconst { fretRange, tuning } = props;\r\n\tconst [lo, hi] = fretRange;\r\n\r\n\tconst allFrets = [];\r\n\tfor (let s = 0; s < tuning.length; s++) {\r\n\t\tfor (let f = lo; f <= hi; f++) {\r\n\t\t\tallFrets.push(\r\n\t\t\t\t<Fret\r\n\t\t\t\t\tkey={`s${s}-f${f}`}\r\n\t\t\t\t\tstringIndex={s}\r\n\t\t\t\t\tfretIndex={f}\r\n\t\t\t\t\ttuning={tuning}\r\n\t\t\t\t\t{...props}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\treturn allFrets;\r\n};\r\n\r\nconst Fretboard: React.FC<IFretboardProps> = (userProps) => {\r\n\tconst props = { ...DEFAULT_FRETBOARD_PROPS, ...userProps };\r\n\r\n\tconst [lo, hi] = props.fretRange;\r\n\tconst numFrets = hi - lo + 1;\r\n\tconst numStrings = props.tuning.length;\r\n\tconst gridTemplateColumns = getFretRatios(numFrets).map(n => n + 'fr').join(' ');\r\n\tconst gridTemplateRows = `repeat(${numStrings}, 1fr)`;\r\n\tconst fretboardStyles = {\r\n\t\tgridTemplateColumns,\r\n\t\tgridTemplateRows\r\n\t};\r\n\r\n\treturn (\r\n\t\t<StyledFretboard className='fretboard' style={fretboardStyles}>\r\n\t\t\t{getFrets(props)}\r\n\t\t</StyledFretboard>\r\n\t);\r\n};\r\n\r\nexport default Fretboard;\r\n","import ArrayUtils from \"../../core/general/Array.utils\";\r\n\r\nexport enum TuningId {\r\n    Standard = 'standard',\r\n    StandardBass = 'standard-bass',\r\n    DropD = 'drop-d'\r\n}\r\n\r\nexport interface ITuning {\r\n    id: TuningId;\r\n    name: string;\r\n    value: number[]\r\n}\r\n\r\nconst formatPreset = (id: TuningId, name: string, value: number[]): ITuning => ({\r\n    id,\r\n    name,\r\n    value\r\n});\r\n\r\nexport const TUNING_PRESET_MAP = new Map<TuningId, ITuning>([\r\n    [TuningId.Standard, formatPreset(\r\n        TuningId.Standard,\r\n        'Standard',\r\n        [16, 11, 7, 2, -3, -8] // e B G D A E\r\n    )],\r\n    [TuningId.StandardBass, formatPreset(\r\n        TuningId.StandardBass,\r\n        'Standard Bass',\r\n        [7, 2, -3, -8] // G D A E\r\n    )],\r\n    [TuningId.DropD, formatPreset(\r\n        TuningId.DropD,\r\n        'Drop D',\r\n        [16, 11, 7, 2, -3, -10] // e B G D A D\r\n    )]\r\n]);\r\n\r\nexport const FRETBOARD_TUNING_VALUES = ArrayUtils.mapToArray(TUNING_PRESET_MAP);\r\n","import IntervalSpan from '../../core/models/Interval';\r\nimport Note from '../../core/models/Note';\r\nimport PodList from '../../core/models/PodList';\r\nimport { TUNING_PRESET_MAP, ITuning, TuningId } from './Fretboard.tuning';\r\nimport { IVoicing } from './Fretboard.voicing';\r\n\r\nexport interface IFretLabelProps {\r\n\tnote?: Note;\r\n\tcolor?: string;\r\n\tfreq?: number;\r\n}\r\n\r\nexport interface IFretboardProps {\r\n\tfretRange?: [number, number];\r\n\ttuning?: number[];\r\n\tshowFretDots?: boolean;\r\n\tshowFretNumbers?: boolean;\r\n\tgetFretLabelProps?: (stringIndex: number, fretIndex: number, tuning: number[]) => IFretLabelProps;\r\n}\r\n\r\nexport interface IFretProps extends IFretboardProps {\r\n\tstringIndex: number;\r\n\tfretIndex: number;\r\n}\r\n\r\nexport const DOTTED_FRET_INDICES = [true, false, false, true, false, true, false, true, false, true, false, false];\r\n\r\nexport const FRET_SIZE_RATIO = Math.pow((1 / 2), (1 / 12));\r\n\r\nexport const DEFAULT_FRETBOARD_PROPS: IFretboardProps = {\r\n\tfretRange: [0, 12],\r\n\ttuning: TUNING_PRESET_MAP.get(TuningId.Standard).value,\r\n\tshowFretDots: true,\r\n\tshowFretNumbers: true\r\n};\r\n\r\nexport const getFretRatios = (numFrets: number): number[] => {\r\n\tconst ratios = [];\r\n\tfor (let i = 1; i <= numFrets; i++) {\r\n\t\tratios.push((i <= 1) ? 1 : ratios[i - 2] * FRET_SIZE_RATIO);\r\n\t}\r\n\treturn ratios;\r\n};\r\n\r\nexport const getDotsForFret = (fretNumber: number): string => {\r\n\tconst mod = fretNumber % 12;\r\n\tif (mod === 0)\r\n\t\treturn '• •';\r\n\telse if (DOTTED_FRET_INDICES[mod])\r\n\t\treturn '•';\r\n\treturn '';\r\n};\r\n\r\nconst doesVoicingValueMatch = (d: number, v: number) => {\r\n\treturn d + 1 === v;\r\n}\r\n\r\nconst isIntervalInVoicing = (interval: IntervalSpan, voicing: IVoicing, stringIndex: number) => {\r\n\tif (!voicing) return true;\r\n\tconst v = voicing.value[stringIndex];\r\n\tconst d = interval.getDegree();\r\n\tif (Array.isArray(v)) {\r\n\t\treturn v.some(n => doesVoicingValueMatch(d, n));\r\n\t}\r\n\telse if (typeof v === 'number') {\r\n\t\treturn doesVoicingValueMatch(d, v);\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nconst getFretLabelPropsAnon = (model: PodList, stringIndex: number, fretIndex: number, tuning: number[], voicing?: IVoicing): IFretLabelProps => {\r\n\tconst noteIndex = tuning[stringIndex] + fretIndex;\r\n\tconst [interval, note] = model.tryGetPodPairAtPitch(noteIndex);\r\n\r\n\tif (!note) return {};\r\n\r\n\tif (!isIntervalInVoicing(interval, voicing, stringIndex)) return {};\r\n\r\n\tconst color = interval.getColor();\r\n\tconst freq = note.getFrequency() as number;\r\n\r\n\treturn {\r\n\t\tcolor,\r\n\t\tfreq\r\n\t}\r\n}\r\n\r\nexport const getFretboardProps = (model: PodList, voicing?: IVoicing, tuning?: ITuning): IFretboardProps => {\r\n\r\n\tlet getFretLabelProps;\r\n\tif (model && model.root) {\r\n\t\tgetFretLabelProps = (stringIndex: number, fretIndex: number, tuning: number[]): IFretLabelProps =>\r\n\t\t\tgetFretLabelPropsAnon(model, stringIndex, fretIndex, tuning, voicing)\r\n\t}\r\n\r\n\treturn {\r\n\t\t...DEFAULT_FRETBOARD_PROPS,\r\n\t\ttuning: tuning ? tuning.value : DEFAULT_FRETBOARD_PROPS.tuning,\r\n\t\tgetFretLabelProps\r\n\t}\r\n}\r\n","import ArrayUtils from \"../../core/general/Array.utils\";\r\n\r\nexport enum VoicingId {\r\n    None = 'None',\r\n    Chord_Triad_CShape_1 = 'Chord_Triad_CShape_1',\r\n    Chord_Triad_AShape_1 = 'Chord_Triad_AShape_1',\r\n    Chord_Triad_GShape_1 = 'Chord_Triad_GShape_1',\r\n    Chord_Triad_EShape_1 = 'Chord_Triad_EShape_1',\r\n    Chord_Triad_DShape_1 = 'Chord_Triad_DShape_1',\r\n    Chord_Sixth_CShape_1 = 'Chord_Sixth_CShape_1',\r\n    Chord_Sixth_AShape_1 = 'Chord_Sixth_AShape_1',\r\n    Chord_Sixth_GShape_1 = 'Chord_Sixth_GShape_1',\r\n    Chord_Sixth_EShape_1 = 'Chord_Sixth_EShape_1',\r\n    Chord_Sixth_DShape_1 = 'Chord_Sixth_DShape_1',\r\n    Chord_Seventh_CShape_1 = 'Chord_Seventh_CShape_1',\r\n    Chord_Seventh_AShape_1 = 'Chord_Seventh_AShape_1',\r\n    Chord_Seventh_GShape_1 = 'Chord_Seventh_GShape_1',\r\n    Chord_Seventh_EShape_1 = 'Chord_Seventh_EShape_1',\r\n    Chord_Seventh_DShape_1 = 'Chord_Seventh_DShape_1',\r\n    Scale_DoubleOctave_CShape_1 = 'Scale_DoubleOctave_CShape_1',\r\n    Scale_DoubleOctave_CShape_2 = 'Scale_DoubleOctave_CShape_2',\r\n    Scale_DoubleOctave_AShape_1 = 'Scale_DoubleOctave_AShape_1',\r\n    Scale_DoubleOctave_GShape_1 = 'Scale_DoubleOctave_GShape_1',\r\n    Scale_DoubleOctave_EShape_1 = 'Scale_DoubleOctave_EShape_1',\r\n    Scale_DoubleOctave_EShape_2 = 'Scale_DoubleOctave_EShape_2',\r\n    Scale_DoubleOctave_DShape_1 = 'Scale_DoubleOctave_DShape_1',\r\n}\r\n\r\nexport interface IVoicing {\r\n    id: VoicingId;\r\n    name: string;\r\n    value: (number | number[])[]\r\n}\r\n\r\nconst formatPreset = (id: VoicingId, name: string, value: (number | number[])[]): IVoicing => ({\r\n    id,\r\n    name,\r\n    value\r\n});\r\n\r\nexport const VOICING_PRESET_MAP = new Map<VoicingId, IVoicing>([\r\n    // Triads\r\n    [VoicingId.Chord_Triad_CShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_CShape_1,\r\n        'C Shape Triad',\r\n        [3, 1, 5, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Triad_AShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_AShape_1,\r\n        'C Shape Triad',\r\n        [5, 3, 1, 5, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Triad_GShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_GShape_1,\r\n        'C Shape Triad',\r\n        [1, 5, 1, 5, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Triad_EShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_EShape_1,\r\n        'C Shape Triad',\r\n        [1, 5, 3, 1, 5, 1]\r\n    )],\r\n    [VoicingId.Chord_Triad_DShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_DShape_1,\r\n        'C Shape Triad',\r\n        [3, 1, 5, 1, null, null]\r\n    )],\r\n    // Sixths\r\n    [VoicingId.Chord_Sixth_CShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_CShape_1,\r\n        'A Shape 6th Chord',\r\n        [3, 6, 5, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Sixth_AShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_AShape_1,\r\n        'A Shape 6th Chord',\r\n        [5, 3, 6, 5, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Sixth_GShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_GShape_1,\r\n        'A Shape 6th Chord',\r\n        [6, 5, 1, 5, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Sixth_EShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_EShape_1,\r\n        'A Shape 6th Chord',\r\n        [1, 5, 3, 6, 5, 1]\r\n    )],\r\n    [VoicingId.Chord_Sixth_DShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_DShape_1,\r\n        'A Shape 6th Chord',\r\n        [3, 6, 5, 1, null, null]\r\n    )],\r\n    // Sevenths\r\n    [VoicingId.Chord_Seventh_CShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_CShape_1,\r\n        'G Shape 7th Chord',\r\n        [3, 7, 5, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Seventh_AShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_AShape_1,\r\n        'G Shape 7th Chord',\r\n        [5, 3, 7, 5, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Seventh_GShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_GShape_1,\r\n        'G Shape 7th Chord',\r\n        [7, 5, 1, 5, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Seventh_EShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_EShape_1,\r\n        'G Shape 7th Chord',\r\n        [1, 5, 3, 7, 5, 1]\r\n    )],\r\n    [VoicingId.Chord_Seventh_DShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_DShape_1,\r\n        'G Shape 7th Chord',\r\n        [3, 7, 5, 1, null, null]\r\n    )],\r\n    // CAGED Scales\r\n    [VoicingId.Scale_DoubleOctave_EShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_EShape_1,\r\n        'E Shape Scale (Locrian)',\r\n        [[1, 2, 3], [6, 7], [3, 4, 5], [7, 1, 2], [4, 5, 6], [1, 2, 3]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_EShape_2, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_EShape_2,\r\n        'E Shape Scale (Ionian)',\r\n        [[7, 1, 2], [5, 6], [2, 3, 4], [6, 7, 1], [3, 4, 5], [1, 2]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_DShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_DShape_1,\r\n        'D Shape Scale (Dorian)',\r\n        [[1, 2, 3], [5, 6, 7], [2, 3, 4], [6, 7, 1], [4, 5], [1, 2, 3]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_CShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_CShape_1,\r\n        'C Shape Scale (Phrygian)',\r\n        [[1, 2, 3], [5, 6, 7], [3, 4], [7, 1, 2], [4, 5, 6], [1, 2, 3]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_CShape_2, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_CShape_2,\r\n        'C Shape Scale (Lydian)',\r\n        [[7, 1, 2], [4, 5, 6], [2, 3], [6, 7, 1], [3, 4, 5], [1, 2]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_AShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_AShape_1,\r\n        'A Shape Scale (Mixolydian)',\r\n        [[1, 2], [5, 6, 7], [2, 3, 4], [6, 7, 1], [3, 4, 5], [1, 2]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_GShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_GShape_1,\r\n        'G Shape Scale (Aeolian)',\r\n        [[1, 2, 3], [5, 6, 7], [2, 3, 4], [7, 1], [4, 5, 6], [1, 2, 3]]\r\n    )]\r\n])\r\n\r\nexport const VOICING_PRESETS = ArrayUtils.mapToArray(VOICING_PRESET_MAP);\r\n"],"names":["StyledDropdownInput","styled","props","value","setValue","options","idProperty","displayProperty","className","onChange","e","target","selectedIndex","map","v","i","key","name","StyledPageBody","StyledPageTitle","theme","utils","border","text","primary","secondary","title","subtitle","children","StyledCard","surface","card","action","rest","StyledInputRow","$y","dark3","label","y","Chord","id","undefined","CHORD_PRESET_MAP","PodList","fromValue","Model","CHORD_PRESETS","arePodListsEqual","reducePodList","IntervalSpan","INTERVAL_PRESET_MAP","getName","reduced","reducePod","pod","noteIndex","d","degreeIntervals","CORE_INTERVALS","pIvl","loIvl","hiIvl","length","ivl","quality","INTERVAL_QUALITY","offset","symbol","count","Math","abs","repeat","getRatio","p","baseline","TuningUtils","toFixed","getColor","this","equals","IntervalId","isInSuperset","superset","listContainsSubset","getSupersets","result","chords","preset","push","modelName","values","scales","SCALE_PRESETS","Pod","INTERVAL_PRESETS","arePodsEqual","presetMap","presetId","root","get","Error","modelId","tags","podList","intervals","applyRoot","B","notes","notePods","addPods","Note","console","error","getIntervalListString","join","containsSubset","subset","getSubchords","getSuperchords","getSubscales","getSuperscales","getPreview","tryGetPodPairAtPitch","index","getIndexOfPodAtPitch","StyledFretLabel","$bgColor","$fgColor","color","freq","onClick","Fret","tuning","stringIndex","fretIndex","showFretNumbers","showFretDots","getFretLabelProps","classes","isLowString","isHighString","fretLabelProps","getDotsForFret","userProps","DEFAULT_FRETBOARD_PROPS","fretRange","lo","numFrets","numStrings","fretboardStyles","gridTemplateColumns","getFretRatios","n","gridTemplateRows","style","hi","allFrets","s","f","getFrets","TuningId","formatPreset","TUNING_PRESET_MAP","Map","Standard","StandardBass","DropD","FRETBOARD_TUNING_VALUES","ArrayUtils","DOTTED_FRET_INDICES","FRET_SIZE_RATIO","pow","ratios","fretNumber","mod","doesVoicingValueMatch","getFretLabelPropsAnon","model","voicing","interval","note","getDegree","Array","isArray","some","isIntervalInVoicing","getFrequency","getFretboardProps","VoicingId","VOICING_PRESET_MAP","Chord_Triad_CShape_1","Chord_Triad_AShape_1","Chord_Triad_GShape_1","Chord_Triad_EShape_1","Chord_Triad_DShape_1","Chord_Sixth_CShape_1","Chord_Sixth_AShape_1","Chord_Sixth_GShape_1","Chord_Sixth_EShape_1","Chord_Sixth_DShape_1","Chord_Seventh_CShape_1","Chord_Seventh_AShape_1","Chord_Seventh_GShape_1","Chord_Seventh_EShape_1","Chord_Seventh_DShape_1","Scale_DoubleOctave_EShape_1","Scale_DoubleOctave_EShape_2","Scale_DoubleOctave_DShape_1","Scale_DoubleOctave_CShape_1","Scale_DoubleOctave_CShape_2","Scale_DoubleOctave_AShape_1","Scale_DoubleOctave_GShape_1","VOICING_PRESETS"],"sourceRoot":""}