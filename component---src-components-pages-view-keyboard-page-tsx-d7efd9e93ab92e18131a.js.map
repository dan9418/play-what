{"version":3,"file":"component---src-components-pages-view-keyboard-page-tsx-d7efd9e93ab92e18131a.js","mappings":"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","sources":["webpack://play-what/./src/components/inputs/NumericInput.tsx","webpack://play-what/./src/components/pages/view/CardSection.tsx","webpack://play-what/./src/components/pages/view/DetailsCol.tsx","webpack://play-what/./src/components/layout/Modal.tsx","webpack://play-what/./src/components/pages/view/MainCol.tsx","webpack://play-what/./src/components/pages/view/MaximizeButton.tsx","webpack://play-what/./src/components/inputs/ColorSchemeInput.tsx","webpack://play-what/./src/components/pages/view/NotesCol.tsx","webpack://play-what/./src/components/pages/view/TabCard.tsx","webpack://play-what/./src/components/pages/view/KeyboardCol.tsx","webpack://play-what/./src/components/pages/view/keyboard.page.tsx","webpack://play-what/./src/components/pages/view/useModelQueryParams.tsx","webpack://play-what/./src/components/pages/view/useModelState.tsx","webpack://play-what/./src/core/routing/Routing.utils.ts","webpack://play-what/./src/viewers/keyboard/Keyboard.defaults.ts","webpack://play-what/./src/viewers/keyboard/Keyboard.styles.tsx","webpack://play-what/./src/viewers/keyboard/KeyboardKey.tsx","webpack://play-what/./src/viewers/keyboard/Keyboard.tsx"],"sourcesContent":["import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport Icon from \"../ui/Icon\";\r\nimport ButtonInput from \"./ButtonInput\";\r\n\r\nexport const StyledNumbericInput = styled.div`\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\r\n\tinput, button {\r\n\t\theight: 32px;\r\n\t\tpadding: 0;\r\n\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t}\r\n\r\n\tbutton {\r\n\t\twidth: 32px;\r\n\t\tborder: 1px solid ${({ theme }) => theme.utils.border};\r\n\t\tsvg, svg * {\r\n\t\t\tfill: white;\r\n\t\t}\r\n\r\n\t\tbackground-color: ${({ theme }) => theme.status.interactive};\r\n\t\tcolor: white;\r\n\t\t&:hover {\r\n\t\t\tbackground-color: ${({ theme }) => theme.status.active};\r\n\t\t}\r\n\r\n\t\t:first-child {\r\n\t\t\tborder-right: none;\r\n\t\t\tborder-radius: 8px 0 0 8px;\r\n\t\t}\r\n\t\t:last-child {\r\n\t\t\tborder-left: none;\r\n\t\t\tborder-radius: 0 8px 8px 0\r\n\t\t}\r\n\t}\r\n\r\n\tinput {\r\n\t\twidth: 48px;\r\n\t\tcursor: pointer;\r\n\t\tborder: none;\r\n\t\tfont-weight: bold;\r\n\t\ttext-align: center;\r\n\t\tbackground-color: white;\r\n\t\t&:hover {\r\n\t\t\tbackground-color: ${({ theme }) => theme.status.highlight};\r\n\t\t}\r\n\r\n\t\tborder: 1px solid ${({ theme }) => theme.utils.border};\r\n\t}\r\n    \r\n\tfont-size: 110%;\r\n\tcursor: pointer;\r\n`;\r\n\r\ninterface INumericInputProps {\r\n\tvalue: number;\r\n\tsetValue: (number) => void;\r\n\tmin?: number;\r\n\tmax?: number;\r\n}\r\n\r\nconst NumericInput: React.FC<INumericInputProps> = ({ value, setValue, ...rest }) => {\r\n\tconst onChange = e => setValue(parseInt(e.target.value));\r\n\r\n\tconst onDown = () => {\r\n\t\tlet newVal = value - 1;\r\n\t\tif (typeof rest.min !== 'undefined') {\r\n\t\t\tnewVal = Math.max(rest.min, newVal);\r\n\t\t}\r\n\t\tsetValue(newVal);\r\n\t};\r\n\r\n\tconst onUp = () => {\r\n\t\tlet newVal = value + 1;\r\n\t\tif (typeof rest.max !== 'undefined') {\r\n\t\t\tnewVal = Math.min(rest.max, newVal);\r\n\t\t}\r\n\t\tsetValue(newVal);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<StyledNumbericInput>\r\n\t\t\t<ButtonInput onClick={onDown}><Icon iconId=\"minus\" size={12} /></ButtonInput>\r\n\t\t\t<input type=\"number\" value={value} onChange={null} {...rest} />\r\n\t\t\t<ButtonInput onClick={onUp}><Icon iconId=\"plus\" size={12} /></ButtonInput>\r\n\t\t</StyledNumbericInput>\r\n\t);\r\n}\r\n\r\nexport default NumericInput;\r\n","import styled from 'styled-components';\r\nimport React from \"react\";\r\n\r\nconst StyledCardSection = styled.div`\r\n    h3 {\r\n        text-transform: uppercase;\r\n        font-size: 80%;\r\n        margin-bottom: 8px;\r\n        color: ${props => props.theme.text.secondary};\r\n    }\r\n    & > .content {\r\n        background: ${props => props.theme.surface.bg};\r\n        border-radius: 8px;\r\n        padding: 8px;\r\n    }\r\n`;\r\n\r\nconst CardSection = ({ title, children }) => {\r\n    return (\r\n        <StyledCardSection>\r\n            <h3>{title}</h3>\r\n            <div className=\"content\">\r\n                {children}\r\n            </div>\r\n        </StyledCardSection>\r\n    );\r\n}\r\n\r\nexport default CardSection;\r\n","import { Link } from \"gatsby\";\r\nimport React from \"react\";\r\nimport styled from 'styled-components';\r\nimport Chord from \"../../../core/models/Chord\";\r\nimport { IModelConfig } from \"../../../core/models/Model.constants\";\r\nimport Scale from \"../../../core/models/Scale\";\r\nimport { getModelRoute } from \"../../../core/routing/Routing.utils\";\r\nimport CardSection from \"./CardSection\";\r\nimport { MODEL_TYPE_OPTIONS } from \"./NotesCol\";\r\n\r\nconst StyledDetailsCol = styled.div`\r\n    display: grid;\r\n    gap: 16px;\r\n    grid-template-columns: 1fr;\r\n    @media(min-width: 512px) {\r\n        grid-template-columns: 1fr 1fr;\r\n    }\r\n    \r\n    .name {\r\n        font-size: 140%;\r\n        display: block;\r\n        padding: 8px;\r\n        \r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        flex-direction: column;\r\n    }\r\n    .info {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        \r\n        .item {\r\n            margin: 8px;\r\n            text-align: center;\r\n            .note {\r\n                font-weight: bold;\r\n                font-size: 120%;\r\n            }\r\n            .interval {\r\n                color: ${props => props.theme.text.secondary};\r\n            }\r\n        }\r\n    }\r\n    .notes, .instrument {\r\n        \r\n        min-height: 128px;\r\n\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        flex-direction: column;\r\n    }\r\n    .inst-name {\r\n        font-weight: bold;\r\n        font-size: 140%;\r\n        text-align: center;\r\n        padding: 8px;\r\n    }\r\n    .tuning {\r\n        font-size: 120%;\r\n        text-align: center;\r\n        color: ${props => props.theme.text.secondary};\r\n    }\r\n`;\r\n\r\nexport interface IDetailsColProps {\r\n    modelType: typeof MODEL_TYPE_OPTIONS[0];\r\n    modelConfig;\r\n    root: IModelConfig | any;\r\n    model: Chord | Scale;\r\n    setModelType?;\r\n    setModelConfig?;\r\n    setRoot?;\r\n    setModel?;\r\n    instrumentName: string;\r\n    instrumentTuning: string;\r\n}\r\n\r\nconst DetailsCol: React.FC<IDetailsColProps> = props => {\r\n\r\n    const { modelType, modelConfig, root, setModelType: _setModelType, setModelConfig: _setModelConfig, setRoot: _setRoot, model, setModel, instrumentName, instrumentTuning } = props;\r\n\r\n    return (\r\n        <StyledDetailsCol>\r\n            <CardSection title=\"Notes\">\r\n                <div className=\"notes\">\r\n                    <Link to={getModelRoute(modelType.id, modelConfig.modelId, root.modelId)}\r\n                        className=\"name\"\r\n                    >{model.name}</Link>\r\n                    <div className=\"info\">\r\n                        {model.notes && model.notes.map((note, i) => (\r\n                            <div key={i} className=\"item\">\r\n                                <div className=\"note\">{note.name}</div>\r\n                                <div className=\"interval\">{model.intervals[i].getName()}</div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </CardSection>\r\n            <CardSection title=\"Instrument\">\r\n                <div className=\"instrument\">\r\n                    <div className=\"inst-name\">{instrumentName}</div>\r\n                    <div className=\"tuning\">{instrumentTuning}</div>\r\n                </div>\r\n            </CardSection>\r\n        </StyledDetailsCol>\r\n    );\r\n};\r\n\r\nexport default DetailsCol;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport ButtonInput from '../inputs/ButtonInput';\r\nimport Card, { StyledCard } from '../ui/Card';\r\nimport Icon from '../ui/Icon';\r\n\r\nconst StyledOverlay = styled.div`\r\n    //width: 100vw;\r\n    //height: 100vw;\r\n    opacity: 0.8;\r\n    background-color: black;\r\n    position: fixed;\r\n    top: 48px;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 3000;\r\n`\r\n\r\nconst StyledContainer = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    position: fixed;\r\n    top: 48px;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 3001;\r\n\r\n    & > ${StyledCard} {\r\n        width: 80%;\r\n        height: 80%;\r\n        position: relative;\r\n        padding: 64px 16px;\r\n\r\n        overflow: auto;\r\n        resize: both;\r\n\r\n        .close {\r\n            position: absolute;\r\n            top: 16px;\r\n            right: 16px;\r\n            background-color: transparent !important;\r\n        }\r\n    }\r\n`\r\n\r\nconst Modal: React.FC<any> = ({ setIsOpen, children, ...rest }) => {\r\n    return (\r\n        <>\r\n            <StyledOverlay />\r\n            <StyledContainer >\r\n                <Card {...rest} draggable=\"true\">\r\n                    <ButtonInput onClick={() => setIsOpen(false)} className=\"close\">\r\n                        <Icon iconId='close' />\r\n                    </ButtonInput>\r\n                    {children}\r\n                </Card>\r\n            </StyledContainer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Modal;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport Modal from \"../../layout/Modal\";\r\n\r\nconst StyledMainCol = styled.div`\r\n    padding: 16px;\r\n    .maximize {\r\n        background-color: transparent !important;\r\n    }\r\n`;\r\n\r\ninterface IMainColProps {\r\n    viewer: any;\r\n    isFullScreen: boolean;\r\n    setIsFullScreen: Function;\r\n}\r\n\r\nconst MainCol: React.FC<IMainColProps> = (props) => {\r\n\r\n    const { viewer, isFullScreen, setIsFullScreen } = props;\r\n\r\n    return (\r\n        <>\r\n            {isFullScreen && (\r\n                <Modal setIsOpen={setIsFullScreen}>\r\n                    <div className=\"resize\">\r\n                        {viewer}\r\n                    </div>\r\n                </Modal>\r\n            )}\r\n            <StyledMainCol>\r\n                {viewer}\r\n            </StyledMainCol>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainCol;\r\n","import React from 'react';\r\nimport ButtonInput from \"../../inputs/ButtonInput\";\r\nimport Icon from \"../../ui/Icon\";\r\nimport styled from 'styled-components';\r\n\r\nconst StyledMaximizeButton = styled(ButtonInput)`\r\n    background-color: transparent !important;\r\n`\r\n\r\nconst MaximizeButton = props => {\r\n    return (\r\n        <StyledMaximizeButton {...props}>\r\n            <Icon iconId=\"maximize\" size={24} />\r\n        </StyledMaximizeButton>\r\n    );\r\n}\r\n\r\nexport default MaximizeButton;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nconst StyledColorSchemeInput = styled.div`\r\n\tpadding: 4px 8px;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-end;\r\n    gap: 4px;\r\n\r\n    & > div {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        gap: 4px;\r\n        font-size: 80%;\r\n        color: ${props => props.theme.text.secondary};\r\n    }\r\n\r\n    input {\r\n        height: 32px;\r\n        width: 32px;\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\ninterface IColorSchemeInputProps {\r\n    value: string[];\r\n    setValue: Function;\r\n    labelFn: Function;\r\n}\r\n\r\nconst ColorSchemeInput: React.FC<IColorSchemeInputProps> = props => {\r\n    const { value, setValue, labelFn } = props;\r\n\r\n    return (\r\n        <StyledColorSchemeInput>\r\n            {value.map((v, i) => (\r\n                <div>\r\n                    <input type=\"color\"\r\n                        value={v}\r\n                        onChange={e => setValue([...value.slice(0, i), e.target.value, ...value.slice(i + 1)])}\r\n                    />\r\n                    <label>\r\n                        {labelFn(i)}\r\n                    </label>\r\n                </div>\r\n            ))}\r\n        </StyledColorSchemeInput>\r\n    );\r\n}\r\n\r\nexport default ColorSchemeInput;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport { ColorScheme, COLOR_SCHEMES, IColorScheme } from \"../../../core/color/Color.utils\";\r\nimport Chord from \"../../../core/models/Chord\";\r\nimport { ChordId, IModelConfig, ModelId, ModelType, NoteId, ScaleId } from \"../../../core/models/Model.constants\";\r\nimport { CHORD_PRESETS, NOTE_PRESETS, SCALE_PRESETS } from \"../../../core/models/Model.presets\";\r\nimport Note from \"../../../core/models/Note\";\r\nimport Scale from \"../../../core/models/Scale\";\r\nimport ColorSchemeInput from \"../../inputs/ColorSchemeInput\";\r\nimport DropdownInput from \"../../inputs/DropdownInput\";\r\nimport InputRow from \"../../ui/InputRow\";\r\nimport CardSection from \"./CardSection\";\r\n\r\nconst StyledNotesCol = styled.div`\r\n    display: grid;\r\n    gap: 16px;\r\n    grid-template-columns: 1fr;\r\n`;\r\n\r\nexport const MODEL_TYPE_OPTIONS = [\r\n    {\r\n        id: ModelType.Chord,\r\n        name: 'Chords',\r\n        value: ModelType.Chord,\r\n        data: CHORD_PRESETS\r\n    },\r\n    {\r\n        id: ModelType.Scale,\r\n        name: 'Scales',\r\n        value: ModelType.Scale,\r\n        data: SCALE_PRESETS\r\n    }\r\n]\r\n\r\nexport interface INotesColProps {\r\n    modelType: typeof MODEL_TYPE_OPTIONS[0];\r\n    modelConfig;\r\n    root: IModelConfig | any;\r\n    model: Chord | Scale;\r\n    setModelType?;\r\n    setModelConfig?;\r\n    setRoot?;\r\n    setModel?;\r\n    colorScheme: IColorScheme;\r\n    setColorScheme;\r\n    colorConfig: string[];\r\n    setColorConfig;\r\n}\r\n\r\nexport const DEFAULT_MODEL_TYPE = MODEL_TYPE_OPTIONS[0];\r\nexport const DEFAULT_MODEL_CONFIG = MODEL_TYPE_OPTIONS[0].data[0];\r\nexport const DEFAULT_ROOT = NOTE_PRESETS[0];\r\n//export const DEFAULT_MODEL = new Chord(DEFAULT_MODEL_CONFIG.modelId, { root: Note.fromId(DEFAULT_ROOT.modelId) })\r\n\r\nexport const getNewModel = (modelType: ModelType, modelId: ModelId, root: NoteId) => {\r\n    let newModel;\r\n    if (modelType === ModelType.Chord) {\r\n        newModel = new Chord(modelId as ChordId, { root: Note.fromId(root) })\r\n    }\r\n    else if (modelType === ModelType.Scale) {\r\n        newModel = new Scale(modelId as ScaleId, { root: Note.fromId(root) })\r\n    }\r\n    return newModel;\r\n}\r\n\r\nconst NotesCol: React.FC<INotesColProps> = props => {\r\n\r\n    const { modelType, modelConfig, root, setModelType: _setModelType, setModelConfig: _setModelConfig, setRoot: _setRoot, model, setModel, colorScheme, setColorScheme, colorConfig, setColorConfig } = props;\r\n    const modelOptions = modelType.data;\r\n\r\n    const setModelType = type => {\r\n        _setModelType(type);\r\n        _setModelConfig(type.data[0])\r\n    }\r\n    const setModelConfig = config => {\r\n        let newModel = getNewModel(config.modelType, config.modelId, root.modelId);\r\n        _setModelConfig(config);\r\n        setModel(newModel);\r\n    }\r\n    const setRoot = newRoot => {\r\n        let newModel = getNewModel(modelConfig.modelType, modelConfig.modelId, newRoot.modelId);\r\n        _setRoot(newRoot);\r\n        setModel(newModel);\r\n    }\r\n\r\n    //console.log('dpb', MODEL_TYPE_OPTIONS, modelType, modelOptions, modelConfig)\r\n\r\n    return (\r\n        <StyledNotesCol>\r\n            <CardSection title=\"Root\" >\r\n                <ul>\r\n                    <li>\r\n                        <InputRow label=\"Key Center\">\r\n                            <DropdownInput value={root} setValue={setRoot} options={NOTE_PRESETS} idProperty=\"modelId\" />\r\n                        </InputRow>\r\n                    </li>\r\n                </ul>\r\n            </CardSection>\r\n            <CardSection title=\"Intervals\" >\r\n                <ul>\r\n                    <li>\r\n                        <InputRow label=\"Model Type\">\r\n                            <DropdownInput value={modelType} setValue={setModelType} options={MODEL_TYPE_OPTIONS} idProperty=\"id\" />\r\n                        </InputRow>\r\n                    </li>\r\n                    <li>\r\n                        <InputRow label=\"Preset\">\r\n                            <DropdownInput value={modelConfig} setValue={setModelConfig} options={modelOptions} idProperty=\"modelId\" />\r\n                        </InputRow>\r\n                    </li>\r\n                </ul>\r\n            </CardSection>\r\n            <CardSection title=\"Colors\" >\r\n                <ul>\r\n                    <li>\r\n                        <InputRow label=\"Color Scheme\">\r\n                            <DropdownInput value={colorScheme} setValue={setColorScheme} options={COLOR_SCHEMES} idProperty=\"id\" />\r\n                        </InputRow>\r\n                    </li>\r\n                    <li>\r\n                        <InputRow label=\"Color Config\">\r\n                            <ColorSchemeInput value={colorConfig} setValue={setColorConfig} labelFn={colorScheme.labelFn} />\r\n                        </InputRow>\r\n                    </li>\r\n                </ul>\r\n            </CardSection>\r\n        </StyledNotesCol>\r\n    );\r\n};\r\n\r\nexport default NotesCol;\r\n","import React, { useState } from \"react\";\r\nimport styled from 'styled-components';\r\nimport { StyledCard } from \"../../ui/Card\";\r\n\r\nconst StyledTabCard = styled(StyledCard)`\r\n    padding: 0;\r\n    \r\n    .content {\r\n        padding: 16px;\r\n    }\r\n    .fake-border {\r\n        position: relative;\r\n        width: 100%;\r\n        bottom: 2px;\r\n        border-bottom: 2px solid ${props => props.theme.surface.bg};\r\n    }\r\n    > ul {\r\n        display: flex;\r\n        align-items: center;\r\n        overflow: auto;\r\n        \r\n        button {\r\n            position: relative;\r\n            z-index: 1000;\r\n            padding: 16px 16px 12px;\r\n            appearance: none;\r\n            border: none;\r\n            cursor: pointer;\r\n            background-color: ${props => props.theme.surface.card};\r\n            border-bottom: 2px solid transparent;\r\n            border-radius: 8px 8px 0 0;\r\n            border-bottom: 2px solid ${props => props.theme.surface.bg};\r\n\r\n            @media(min-width: 512px) {\r\n                font-size: 120%;\r\n            }\r\n\r\n            color: ${props => props.theme.text.secondary};\r\n\r\n            &:hover {\r\n                border-bottom: 2px solid  ${props => props.theme.action.interactive};\r\n                color: ${props => props.theme.text.primary};\r\n            }\r\n            \r\n            &.active {\r\n                border-color: ${props => props.theme.action.active};\r\n                font-weight: bold;\r\n                color: ${props => props.theme.text.primary};\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst TabCard: React.FC<any> = ({ tabs }) => {\r\n    const [index, setIndex] = useState(0);\r\n\r\n    return (\r\n        <StyledTabCard>\r\n            <ul>\r\n                {tabs.map((t, i) => (\r\n                    <li key={t.text}>\r\n                        <button\r\n                            type=\"button\"\r\n                            onClick={() => setIndex(i)}\r\n                            className={i === index ? 'active' : ''}\r\n                        >\r\n                            {t.text}\r\n                        </button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            <div className=\"fake-border\" />\r\n            <div className=\"content\">\r\n                {tabs[index].content}\r\n            </div>\r\n        </StyledTabCard>\r\n    );\r\n};\r\n\r\nexport default TabCard;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport DEFAULT_KEYBOARD_PROPS from \"../../../viewers/keyboard/Keyboard.defaults\";\r\nimport NumericInput from \"../../inputs/NumericInput\";\r\nimport InputRow from \"../../ui/InputRow\";\r\nimport CardSection from \"./CardSection\";\r\n\r\nconst StyledKeyboardCol = styled.div`\r\n\r\n`;\r\n\r\n\r\nexport interface IKeyboardColProps {\r\n    keyRange;\r\n    setKeyRange;\r\n    model;\r\n}\r\n\r\nexport const DEFAULT_KEY_RANGE = DEFAULT_KEYBOARD_PROPS.keyRange as [number, number];\r\n\r\nconst KeyboardCol: React.FC<IKeyboardColProps> = ({ keyRange, setKeyRange }) => {\r\n\r\n    const [keyLo, keyHi] = keyRange;\r\n\r\n    return (\r\n        <StyledKeyboardCol>\r\n            <CardSection title=\"Range\" >\r\n                <ul>\r\n                    <li>\r\n                        <InputRow label=\"Low Key\">\r\n                            <NumericInput value={keyLo} min={-88} max={keyHi} setValue={v => setKeyRange([v, keyHi])} />\r\n                        </InputRow>\r\n                    </li>\r\n                    <li>\r\n                        <InputRow label=\"High Key\">\r\n                            <NumericInput value={keyHi} min={keyLo} max={88} setValue={v => setKeyRange([keyLo, v])} />\r\n                        </InputRow>\r\n                    </li>\r\n                </ul>\r\n            </CardSection>\r\n        </StyledKeyboardCol>\r\n    );\r\n};\r\n\r\nexport default KeyboardCol;\r\n","import React, { useState } from \"react\";\r\nimport styled from 'styled-components';\r\nimport { COLOR_SCHEMES } from \"../../../core/color/Color.utils\";\r\nimport Keyboard from \"../../../viewers/keyboard/Keyboard\";\r\nimport ColumnManager, { StyledColumnManager } from \"../../column-manager/ColumnManager\";\r\nimport PageLayout from \"../../layout/PageLayout\";\r\nimport { StyledCard } from \"../../ui/Card\";\r\nimport DetailsCol from \"./DetailsCol\";\r\nimport KeyboardCol, { DEFAULT_KEY_RANGE } from \"./KeyboardCol\";\r\nimport MainCol from \"./MainCol\";\r\nimport MaximizeButton from \"./MaximizeButton\";\r\nimport NotesCol from \"./NotesCol\";\r\nimport TabCard from \"./TabCard\";\r\nimport useModelQueryParams from \"./useModelQueryParams\";\r\nimport { useModelState } from \"./useModelState\";\r\n\r\nconst StyledKeyboardPage = styled(PageLayout)``;\r\n\r\nconst Page: React.FC = () => {\r\n\r\n    const [qpModelType, qpModelId, qpRootId] = useModelQueryParams();\r\n    const modelState = useModelState(qpModelType, qpModelId, qpRootId);\r\n    const {\r\n        modelType,\r\n        setModelType,\r\n        modelConfig,\r\n        setModelConfig,\r\n        root,\r\n        setRoot,\r\n        model,\r\n        setModel\r\n    } = modelState;\r\n\r\n    const [keyRange, setKeyRange] = useState<[number, number]>(DEFAULT_KEY_RANGE);\r\n    const [isFullScreen, setIsFullScreen] = useState(false);\r\n    const [colorScheme, _setColorScheme] = useState(COLOR_SCHEMES[1]);\r\n    const [colorConfig, setColorConfig] = useState(colorScheme.defaultConfig);\r\n\r\n    const setColorScheme = cs => { _setColorScheme(cs); setColorConfig(cs.defaultConfig) }\r\n\r\n    const instrumentColProps = {\r\n        model,\r\n        keyRange,\r\n        setKeyRange,\r\n    }\r\n\r\n    const notesColProps = {\r\n        modelType,\r\n        setModelType,\r\n        modelConfig,\r\n        setModelConfig,\r\n        root,\r\n        setRoot,\r\n        model,\r\n        setModel,\r\n        colorScheme,\r\n        setColorScheme,\r\n        colorConfig,\r\n        setColorConfig,\r\n        instrumentName: 'Keyboard',\r\n        instrumentTuning: ''\r\n    }\r\n\r\n    const mainColProps = {\r\n        title: 'Keyboard',\r\n        isFullScreen,\r\n        setIsFullScreen,\r\n        viewer: <Keyboard\r\n            {...instrumentColProps}\r\n            {...notesColProps}\r\n            colorMapFn={props => {\r\n                const { noteIndex, model } = props;\r\n                const [interval, note] = model.tryGetPodPairAtPitch(noteIndex);\r\n\r\n                const cs = COLOR_SCHEMES.find(cs => cs.id === colorScheme.id);\r\n\r\n                if (!cs) return;\r\n\r\n                const color = cs.fn(note, interval, colorConfig);\r\n\r\n                return color;\r\n            }}\r\n        />\r\n    };\r\n\r\n    return (\r\n        <StyledKeyboardPage title=\"Keyboard\" action={<MaximizeButton onClick={() => setIsFullScreen(true)} />}>\r\n            <ColumnManager desktop={[\"1fr\", \"1fr\"]} >\r\n                <MainCol {...mainColProps} />\r\n                <TabCard\r\n                    tabs={[\r\n                        {\r\n                            text: 'Summary',\r\n                            content: <DetailsCol {...notesColProps} />\r\n                        },\r\n                        {\r\n                            text: 'Notes',\r\n                            content: <NotesCol {...notesColProps} />\r\n                        },\r\n                        {\r\n                            text: 'Instrument',\r\n                            content: <KeyboardCol {...instrumentColProps} />\r\n                        }\r\n                    ]}\r\n                />\r\n            </ColumnManager>\r\n        </StyledKeyboardPage>\r\n    );\r\n};\r\n\r\nexport default Page;\r\n","import { useQueryParam } from \"use-query-params\";\r\n\r\nconst useModelQueryParams = () => {\r\n    const [qpModelType] = useQueryParam('modelType');\r\n    const [qpModelId] = useQueryParam('modelId');\r\n    const [qpRootId] = useQueryParam('rootId');\r\n\r\n    return [qpModelType, qpModelId, qpRootId];\r\n}\r\n\r\nexport default useModelQueryParams;\r\n","import { useState } from \"react\";\r\nimport { NOTE_PRESETS } from \"../../../core/models/Model.presets\";\r\nimport { DEFAULT_MODEL_CONFIG, DEFAULT_MODEL_TYPE, DEFAULT_ROOT, getNewModel, MODEL_TYPE_OPTIONS } from \"./NotesCol\";\r\n\r\nconst getInitModelType = (qpModelType?: string) => {\r\n    const found = MODEL_TYPE_OPTIONS.find(type => type.id && type.id === qpModelType);\r\n    return found || DEFAULT_MODEL_TYPE;\r\n}\r\n\r\nconst getInitModelConfig = (modelType, qpModelId?: string) => {\r\n    const found = modelType.data.find(preset => preset.modelId === qpModelId);\r\n    return found || DEFAULT_MODEL_CONFIG;\r\n}\r\n\r\nconst getInitRoot = (qpRootId?: string) => {\r\n    const found = NOTE_PRESETS.find(note => note.modelId === qpRootId);\r\n    return found || DEFAULT_ROOT;\r\n}\r\n\r\nexport const useModelState = (initModelType, initModelId, initRootId) => {\r\n    const [modelType, setModelType] = useState(getInitModelType(initModelType));\r\n    const [modelConfig, setModelConfig] = useState(getInitModelConfig(modelType, initModelId));\r\n\r\n    const [root, setRoot] = useState(getInitRoot(initRootId));\r\n    const [model, setModel] = useState(getNewModel(modelType.id, modelConfig.modelId, root.modelId));\r\n\r\n    return {\r\n        modelType,\r\n        setModelType,\r\n        modelConfig,\r\n        setModelConfig,\r\n        root,\r\n        setRoot,\r\n        model,\r\n        setModel\r\n    }\r\n}\r\n","import { ModelId, ModelType, NoteId } from \"../models/Model.constants\";\r\n\r\nexport const getModelRoute = (\r\n  modelType: ModelType,\r\n  modelId?: ModelId,\r\n  rootId?: NoteId\r\n) => {\r\n  const modelSuffix = modelId ? `/${modelId}` : \"\";\r\n  const rootSuffix = rootId ? `/root/${rootId}` : \"\";\r\n\r\n  return `/browse/${modelType}${modelSuffix}${rootSuffix}/`;\r\n};\r\n","import Chord from \"../../core/models/Chord\";\r\nimport Scale from \"../../core/models/Scale\";\r\n\r\nexport enum KeyType {\r\n\tBlack = 'black',\r\n\tWhite = 'white'\r\n}\r\n\r\nexport interface IKeyboardProps {\r\n\tkeyRange: [number, number];\r\n\thideLabel?: boolean;\r\n\tmodel?: Chord | Scale;\r\n\tcolorMapFn?: (fretProps: IKeyboardKeyProps) => string | undefined;\r\n}\r\n\r\nexport interface IKeyboardKeyProps extends IKeyboardProps {\r\n\tnoteIndex: number;\r\n\tscale: number;\r\n\tkeyType: KeyType;\r\n}\r\n\r\nexport const BLACK_KEY_INDICES = [0, 2, 4, 5, 7, 9, 11];\r\n\r\nexport const getKeyColor = (props: IKeyboardKeyProps): string | undefined => {\r\n\tconst { noteIndex, model } = props;\r\n\r\n\tconst [interval, note] = model.tryGetPodPairAtPitch(noteIndex);\r\n\r\n\tif (!note) return;\r\n\r\n\treturn interval.getColor();\r\n}\r\n\r\nconst DEFAULT_KEYBOARD_PROPS = {\r\n\tkeyRange: [-12, 12],\r\n\tcolorMapFn: getKeyColor\r\n};\r\n\r\nexport default DEFAULT_KEYBOARD_PROPS;\r\n","import styled from 'styled-components';\r\n\r\nconst StyledKeyboard = styled.div`\r\n    display: inline-flex;\r\n\twidth: 100%;\r\n\t//min-width: 100px;\r\n    font-size: 12px;\r\n\ttext-align: center;\r\n\tfont-family: sans-serif;\r\n\tmargin: 16px 0;\r\n\r\n    .center {\r\n        text-align: center;\r\n    }\r\n\r\n    /* Key Container */\r\n\r\n    .white-key-container {\r\n        display: inline-block;\r\n    }\r\n\r\n    .black-key-container {\r\n        display: inline-block;\r\n        width: 0px;\r\n    }\r\n\r\n    /* Key */\r\n\r\n    .keyboard-key {\r\n        vertical-align: top;\r\n        position: relative;\r\n        display: inline-flex;\r\n        justify-content: center;\r\n        cursor: pointer;\r\n    }\r\n\r\n    .white-key {\r\n        box-shadow: 0 0 1px 1px black inset;\r\n        border-radius: 0 0 5% 5%;\r\n    }\r\n\r\n    /*.white-key:hover {\r\n        box-shadow: 0 0 1px 2px black inset;\r\n    }*/\r\n\r\n    .black-key {\r\n        box-shadow: 0 0 1px 2px #333 inset;\r\n        z-index: 10;\r\n        border-radius: 0 0 10% 10%;\r\n    }\r\n\r\n    /*.black-key:hover {\r\n        background-color: #333;\r\n        box-shadow: 0 0 1px 2px black inset;\r\n    }*/\r\n\r\n    /* Colors (applied only in absence of degree class) */\r\n\r\n    .white {\r\n        background-color: white;\r\n        color: black;\r\n    }\r\n\r\n    .black {\r\n        background-color: black;\r\n        color: white;\r\n    }\r\n\r\n\r\n    /* Label */\r\n\r\n    .white-key .keyboard-key-label {\r\n        position: absolute;\r\n        height: 100%;\r\n        width: 100%;\r\n        border-radius: 0 0 5% 5%;\r\n        box-shadow: 0 0 1px 1px black inset;\r\n\r\n        padding-bottom: 4px;\r\n        display: flex;\r\n        align-items: flex-end;\r\n        justify-content: center;\r\n    }\r\n\r\n    /*.white-key .keyboard-key-label:hover {\r\n        box-shadow: 0 0 1px 2px black inset;\r\n    }*/\r\n\r\n    .black-key .keyboard-key-label {\r\n        bottom: 105%;\r\n        position: absolute;\r\n        color: black;\r\n    }\r\n`;\r\n\r\nexport default StyledKeyboard;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport ColorUtils from \"../../core/color/Color.utils\";\r\nimport { IKeyboardKeyProps, KeyType } from './Keyboard.defaults';\r\n\r\n// Key dimensions relative to white key width\r\nconst KEY__DIMS = {\r\n\tWhW_WhH: 4.6875, // White key width to white key height\r\n\tWhW_BlW: 0.6250, // White key width to black key width\r\n\tWhW_BlH: 2.9688 // White key width to black hey height\r\n}\r\n\r\nconst getScaleStyles = (keyType, scale) => {\r\n\tswitch (keyType) {\r\n\t\tcase KeyType.White:\r\n\t\t\treturn {\r\n\t\t\t\twidth: scale + 'px',\r\n\t\t\t\theight: KEY__DIMS.WhW_WhH * scale + 'px'\r\n\t\t\t};\r\n\t\tcase KeyType.Black:\r\n\t\t\treturn {\r\n\t\t\t\twidth: KEY__DIMS.WhW_BlW * scale + 'px',\r\n\t\t\t\theight: KEY__DIMS.WhW_BlH * scale + 'px',\r\n\t\t\t\tright: .5 * KEY__DIMS.WhW_BlW * scale + 'px'\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn {\r\n\t\t\t\twidth: '0px',\r\n\t\t\t\theight: '0px'\r\n\t\t\t};\r\n\t}\r\n}\r\n\r\nconst StyledKey = styled.div`\r\n\tbackground-color: ${({ $color }) => $color ? $color : 'transparent'};\r\n\tcolor: ${({ $color }) => ColorUtils.getFgColor($color)};\r\n`;\r\n\r\nconst StyledKeyLabel = styled.div`\r\n\tcolor: ${({ $color }) => ColorUtils.getFgColor($color)};\r\n`;\r\n\r\nconst KeyboardKey: React.FC<IKeyboardKeyProps> = props => {\r\n\r\n\tconst { keyType, noteIndex, scale, hideLabel, model, colorMapFn } = props;\r\n\r\n\tconst bgColor = colorMapFn(props);\r\n\r\n\tconst scaleStyles = getScaleStyles(keyType, scale);\r\n\tconst classes = ['keyboard-key', `${keyType}-key`, keyType];\r\n\r\n\tconst colorStyles = {\r\n\t\tbackgroundColor: bgColor ? bgColor : ''\r\n\t}\r\n\r\n\tconst keyStyles = keyType === KeyType.White ? scaleStyles : { ...scaleStyles, ...colorStyles };\r\n\tconst labelStyles = keyType === KeyType.White ? colorStyles : {};\r\n\r\n\treturn (\r\n\t\t<StyledKey className={`${keyType}-key-container`}>\r\n\t\t\t<div className={classes.join(' ')} style={keyStyles} >\r\n\t\t\t\t<StyledKeyLabel className='keyboard-key-label' style={labelStyles} $color={bgColor}>\r\n\t\t\t\t\t{null}\r\n\t\t\t\t</StyledKeyLabel>\r\n\t\t\t</div>\r\n\t\t</StyledKey>\r\n\t);\r\n}\r\n\r\nexport default KeyboardKey;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport NumberUtils from \"../../core/general/Number.utils\";\r\nimport DEFAULT_PROPS, { BLACK_KEY_INDICES, IKeyboardProps, KeyType } from \"./Keyboard.defaults\";\r\nimport StyledKeyboard from \"./Keyboard.styles\";\r\nimport KeyboardKey from \"./KeyboardKey\";\r\n\r\nconst getKeyboardKeys = (props: IKeyboardProps, viewerWidth: number) => {\r\n\tconst { keyRange } = props;\r\n\tconst [lo, hi] = keyRange;\r\n\tconst keys = [];\r\n\r\n\tlet numBlackKeys = 0;\r\n\tlet numWhiteKeys = 0;\r\n\tfor (let i = lo; i <= hi; i++) {\r\n\t\tconst keyType = BLACK_KEY_INDICES.includes(NumberUtils.modulo(i, 12)) ? KeyType.White : KeyType.Black;\r\n\t\tif (keyType === KeyType.Black) { numBlackKeys++ } else { numWhiteKeys++; }\r\n\t}\r\n\r\n\tfor (let i = lo; i <= hi; i++) {\r\n\t\tconst keyType = BLACK_KEY_INDICES.includes(NumberUtils.modulo(i, 12)) ? KeyType.White : KeyType.Black;\r\n\r\n\t\tkeys.push(\r\n\t\t\t<KeyboardKey\r\n\t\t\t\tkeyType={keyType}\r\n\t\t\t\tkey={i}\r\n\t\t\t\tnoteIndex={i}\r\n\t\t\t\tscale={viewerWidth / numWhiteKeys}\r\n\t\t\t\t{...props}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n\treturn keys;\r\n}\r\n\r\nconst Keyboard: React.FC<IKeyboardProps> = (userProps) => {\r\n\r\n\tconst props = { ...DEFAULT_PROPS, ...userProps };\r\n\r\n\tconst [dims, setDims] = useState([128, 128]);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst resetDimensions = (e) => {\r\n\t\t\tconst el = document.getElementById('keyboard');\r\n\t\t\tsetDims([el.clientWidth, el.clientHeight])\r\n\t\t}\r\n\t\tresetDimensions(null);\r\n\t\twindow.addEventListener('resize', resetDimensions);\r\n\t\treturn () => window.removeEventListener('resize', resetDimensions);\r\n\t}, [])\r\n\r\n\treturn (\r\n\t\t<StyledKeyboard className='keyboard' id='keyboard'>\r\n\t\t\t{getKeyboardKeys(props, dims[0])}\r\n\t\t</StyledKeyboard>\r\n\t);\r\n}\r\n\r\nexport default Keyboard;\r\n"],"names":["StyledNumbericInput","styled","theme","utils","border","status","interactive","active","highlight","value","setValue","rest","React","ButtonInput","onClick","newVal","min","Math","max","Icon","iconId","size","type","onChange","StyledCardSection","props","text","secondary","surface","bg","title","children","className","StyledDetailsCol","modelType","modelConfig","root","model","setModelType","setModelConfig","setRoot","instrumentName","setModel","instrumentTuning","CardSection","Link","to","getModelRoute","id","modelId","name","notes","map","note","i","key","intervals","getName","StyledOverlay","StyledContainer","StyledCard","setIsOpen","Card","draggable","StyledMainCol","viewer","isFullScreen","setIsFullScreen","Modal","StyledMaximizeButton","withConfig","StyledColorSchemeInput","labelFn","v","e","slice","target","StyledNotesCol","MODEL_TYPE_OPTIONS","ModelType","data","CHORD_PRESETS","SCALE_PRESETS","DEFAULT_MODEL_TYPE","DEFAULT_MODEL_CONFIG","DEFAULT_ROOT","NOTE_PRESETS","getNewModel","newModel","Chord","Note","Scale","_setModelType","_setModelConfig","_setRoot","colorScheme","setColorScheme","colorConfig","setColorConfig","modelOptions","InputRow","label","DropdownInput","newRoot","options","idProperty","config","COLOR_SCHEMES","ColorSchemeInput","StyledTabCard","card","action","primary","tabs","useState","index","setIndex","t","content","StyledKeyboardCol","DEFAULT_KEY_RANGE","DEFAULT_KEYBOARD_PROPS","keyRange","setKeyRange","keyLo","keyHi","NumericInput","StyledKeyboardPage","PageLayout","useModelQueryParams","qpModelType","qpModelId","qpRootId","modelState","useModelState","_setColorScheme","defaultConfig","instrumentColProps","notesColProps","cs","mainColProps","Keyboard","colorMapFn","noteIndex","tryGetPodPairAtPitch","interval","fn","MaximizeButton","ColumnManager","desktop","MainCol","TabCard","DetailsCol","NotesCol","KeyboardCol","useQueryParam","initModelType","initModelId","initRootId","find","preset","getInitModelConfig","rootId","KeyType","BLACK_KEY_INDICES","getColor","KEY__DIMS","StyledKey","$color","ColorUtils","StyledKeyLabel","keyType","scale","bgColor","hideLabel","scaleStyles","width","height","right","getScaleStyles","classes","colorStyles","backgroundColor","keyStyles","labelStyles","join","style","userProps","DEFAULT_PROPS","dims","setDims","useEffect","resetDimensions","el","document","getElementById","clientWidth","clientHeight","window","addEventListener","removeEventListener","StyledKeyboard","viewerWidth","lo","hi","keys","numWhiteKeys","NumberUtils","push","KeyboardKey","getKeyboardKeys"],"sourceRoot":""}