{"version":3,"file":"component---src-pages-view-keyboard-tsx-c0bf2e4d595cb6b9c6bd.js","mappings":"wLAKaA,EAAsBC,EAAAA,QAAAA,IAAAA,WAAH,4EAAGA,CAAH,8jBAgBV,qBAAGC,MAAkBC,MAAMC,UAK3B,qBAAGF,MAAkBG,OAAOC,eAG3B,qBAAGJ,MAAkBG,OAAOE,UAqB5B,qBAAGL,MAAkBG,OAAOG,aAG7B,qBAAGN,MAAkBC,MAAMC,UA0CjD,IA5BmD,SAAC,GAAkC,IAAhCK,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,SAAaC,GAAW,YAmBpF,OACCC,EAAAA,cAACZ,EAAD,KACCY,EAAAA,cAACC,EAAAA,EAAD,CAAaC,QAlBA,WACd,IAAIC,EAASN,EAAQ,OACG,IAAbE,EAAKK,MACfD,EAASE,KAAKC,IAAIP,EAAKK,IAAKD,IAE7BL,EAASK,KAasBH,EAAAA,cAACO,EAAAA,GAAD,CAAMC,OAAO,QAAQC,KAAM,MACzDT,EAAAA,cAAAA,QAAAA,OAAAA,OAAAA,CAAOU,KAAK,SAASb,MAAOA,EAAOc,SAAU,MAAUZ,IACvDC,EAAAA,cAACC,EAAAA,EAAD,CAAaC,QAZF,WACZ,IAAIC,EAASN,EAAQ,OACG,IAAbE,EAAKO,MACfH,EAASE,KAAKD,IAAIL,EAAKO,IAAKH,IAE7BL,EAASK,KAOoBH,EAAAA,cAACO,EAAAA,GAAD,CAAMC,OAAO,OAAOC,KAAM,S,mCCvFnDG,E,QAAkBvB,QAAAA,IAAAA,WAAH,sEAAGA,CAAH,8FAOc,SAAAwB,GAAK,OAAIA,EAAMvB,MAAMC,MAAMC,UAc9D,IAViC,SAAC,GAAyB,IAAvBsB,EAAsB,EAAtBA,MAAsB,EAAfC,SAEvC,OACIf,EAAAA,cAACY,EAAD,KACIZ,EAAAA,cAAAA,KAAAA,KAAKc,M,gJCZXE,EAAgB3B,EAAAA,QAAAA,IAAAA,WAAH,+DAAGA,CAAH,sGAab4B,EAAkB5B,EAAAA,QAAAA,IAAAA,WAAH,iEAAGA,CAAH,2SAWX6B,EAAAA,IAkCV,EAhB6B,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,SAAarB,GAAW,YAC/D,OACIC,EAAAA,cAAAA,EAAAA,SAAAA,KACIA,EAAAA,cAACgB,EAAD,MACAhB,EAAAA,cAACiB,EAAD,KACIjB,EAAAA,cAACqB,EAAAA,GAAD,iBAAUtB,EAAV,CAAgBuB,UAAU,SACtBtB,EAAAA,cAACC,EAAAA,EAAD,CAAaC,QAAS,kBAAMiB,GAAU,IAAQI,UAAU,SACpDvB,EAAAA,cAACO,EAAAA,GAAD,CAAMC,OAAO,WAEhBY,M,UCjDfI,EAAgBnC,EAAAA,QAAAA,IAAAA,WAAH,kEAAGA,CAAH,yDAuCnB,EA5ByC,SAACwB,GACtC,OAAwCY,EAAAA,EAAAA,WAAS,GAA1CC,EAAP,KAAqBC,EAArB,KAEQb,EAAkBD,EAAlBC,MAAOc,EAAWf,EAAXe,OAEf,OACI5B,EAAAA,cAAAA,EAAAA,SAAAA,KACK0B,GACG1B,EAAAA,cAAC6B,EAAD,CAAOV,UAAWQ,GACd3B,EAAAA,cAAAA,MAAAA,CAAKuB,UAAU,UACVK,IAIb5B,EAAAA,cAACwB,EAAD,KACIxB,EAAAA,cAAC8B,EAAAA,EAAD,CAAWhB,MAAM,OAAOC,SAAS,QACjCf,EAAAA,cAACqB,EAAAA,GAAD,CAAMP,MAAOA,EAAOS,UAAU,OAC1BQ,OAAQ/B,EAAAA,cAACC,EAAAA,EAAD,CAAasB,UAAU,WAAWrB,QAAS,kBAAMyB,GAAgB,KACrE3B,EAAAA,cAACO,EAAAA,GAAD,CAAMC,OAAO,eAGhBoB,O,gQCtCRI,EAAgB,SAACC,EAAsBC,EAAkBC,GAIlE,MAAM,WAAYF,EAAlB,IAA+BC,GAFZC,EAAM,SAAYA,EAAW,K,wCCU9CC,EAAiB/C,EAAAA,QAAAA,IAAAA,WAAH,oEAAGA,CAAH,MAIPgD,EAAqB,CAC9B,CACIC,GAAIC,EAAAA,GAAAA,MACJC,KAAM,SACN3C,MAAO0C,EAAAA,GAAAA,MACPE,KAAMC,EAAAA,IAEV,CACIJ,GAAIC,EAAAA,GAAAA,MACJC,KAAM,SACN3C,MAAO0C,EAAAA,GAAAA,MACPE,KAAME,EAAAA,KAeDC,EAAqBP,EAAmB,GACxCQ,EAAuBR,EAAmB,GAAGI,KAAK,GAClDK,EAAeC,EAAAA,GAAAA,GAGfC,EAAc,SAACf,EAAsBC,EAAkBe,GAChE,IAAIC,EAOJ,OANIjB,IAAcM,EAAAA,GAAAA,MACdW,EAAW,IAAIC,EAAAA,EAAMjB,EAAoB,CAAEe,KAAMG,EAAAA,EAAAA,OAAYH,KAExDhB,IAAcM,EAAAA,GAAAA,QACnBW,EAAW,IAAIG,EAAAA,EAAMnB,EAAoB,CAAEe,KAAMG,EAAAA,EAAAA,OAAYH,MAE1DC,GA0DX,EAvD2C,SAAArC,GAEvC,IAAQoB,EAAmIpB,EAAnIoB,UAAWqB,EAAwHzC,EAAxHyC,YAAaL,EAA2GpC,EAA3GoC,KAAoBM,EAAuF1C,EAArG2C,aAA6CC,EAAwD5C,EAAxE6C,eAA0CC,EAA8B9C,EAAvC+C,QAAmBC,EAAoBhD,EAApBgD,MAAOC,EAAajD,EAAbiD,SACxHC,EAAe9B,EAAUQ,KAmB/B,OAFAuB,QAAQC,IAAI,MAAO5B,EAAoBJ,EAAW8B,EAAcT,GAG5DtD,EAAAA,cAACoC,EAAD,KACIpC,EAAAA,cAAC8B,EAAAA,EAAD,CAAWhB,MAAM,QAAQC,SAAS,QAClCf,EAAAA,cAACqB,EAAAA,GAAD,CAAMP,MAAM,SACRd,EAAAA,cAACkE,EAAAA,GAAD,CAAMC,GAAInC,EAAcC,EAAUK,GAAIgB,EAAYpB,QAASe,EAAKf,UAAW2B,EAAMrB,OAErFxC,EAAAA,cAACqB,EAAAA,GAAD,CAAMP,MAAM,QACRd,EAAAA,cAAAA,KAAAA,KACIA,EAAAA,cAAAA,KAAAA,KACIA,EAAAA,cAACoE,EAAAA,EAAD,CAAUC,MAAM,cACZrE,EAAAA,cAACsE,EAAAA,EAAD,CAAezE,MAAOoD,EAAMnD,SAlBpC,SAAAyE,GACZ,IAAIrB,EAAWF,EAAYM,EAAYrB,UAAWqB,EAAYpB,QAASqC,EAAQrC,SAC/EyB,EAASY,GACTT,EAASZ,IAe0DsB,QAASzB,EAAAA,GAAc0B,WAAW,gBAKjGzE,EAAAA,cAACqB,EAAAA,GAAD,CAAMP,MAAM,aACRd,EAAAA,cAAAA,KAAAA,KACIA,EAAAA,cAAAA,KAAAA,KACIA,EAAAA,cAACoE,EAAAA,EAAD,CAAUC,MAAM,cACZrE,EAAAA,cAACsE,EAAAA,EAAD,CAAezE,MAAOoC,EAAWnC,SApCpC,SAAAY,GACjB6C,EAAc7C,GACd+C,EAAgB/C,EAAK+B,KAAK,KAkCmD+B,QAASnC,EAAoBoC,WAAW,SAGzGzE,EAAAA,cAAAA,KAAAA,KACIA,EAAAA,cAACoE,EAAAA,EAAD,CAAUC,MAAM,UACZrE,EAAAA,cAACsE,EAAAA,EAAD,CAAezE,MAAOyD,EAAaxD,SArCpC,SAAA4E,GACnB,IAAIxB,EAAWF,EAAY0B,EAAOzC,UAAWyC,EAAOxC,QAASe,EAAKf,SAClEuB,EAAgBiB,GAChBZ,EAASZ,IAkCwEsB,QAAST,EAAcU,WAAW,mB,mCChG3H,IAR4B,WAKxB,MAAO,EAJeE,EAAAA,EAAAA,IAAc,aAApC,IACoBA,EAAAA,EAAAA,IAAc,WAAlC,IACmBA,EAAAA,EAAAA,IAAc,UAAjC,M,uFCcSC,EAAgB,SAACC,EAAeC,EAAaC,GACtD,IAhBsBC,EAULC,EAMjB,GAAkCxD,EAAAA,EAAAA,WAhBZuD,EAgBsCH,EAf9CxC,EAAAA,GAAAA,MAAwB,SAAA3B,GAAI,OAAIA,EAAK4B,IAAM5B,EAAK4B,KAAO0C,MACrDpC,EAAAA,KAcTX,EAAP,KAAkBuB,EAAlB,KACA,GAAsC/B,EAAAA,EAAAA,UAZf,SAACQ,EAAWiD,GAEnC,OADcjD,EAAUQ,KAAK0C,MAAK,SAAAC,GAAM,OAAIA,EAAOlD,UAAYgD,MAC/CrC,EAAAA,GAU+BwC,CAAmBpD,EAAW6C,IAAtExB,EAAP,KAAoBI,EAApB,KAEA,GAAwBjC,EAAAA,EAAAA,WATPwD,EAS4BF,EAR/BhC,EAAAA,GAAAA,MAAkB,SAAAuC,GAAI,OAAIA,EAAKpD,UAAY+C,MACzCnC,EAAAA,KAOTG,EAAP,KAAaW,EAAb,KACA,GAA0BnC,EAAAA,EAAAA,WAASuB,EAAAA,EAAAA,IAAYf,EAAUK,GAAIgB,EAAYpB,QAASe,EAAKf,UAEvF,MAAO,CACHD,UAAAA,EACAuB,aAAAA,EACAF,YAAAA,EACAI,eAAAA,EACAT,KAAAA,EACAW,QAAAA,EACAC,MATJ,KAUIC,SAVJ,Q,gKChBEyB,EAAoBlG,EAAAA,QAAAA,IAAAA,WAAH,yEAAGA,CAAH,MAWVmG,EAAoBC,EAAAA,GAAAA,SA2BjC,EAzBiD,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAEnDC,EAAgBF,EAAvB,GAAcG,EAASH,EAAvB,GAEA,OACI1F,EAAAA,cAACuF,EAAD,KACIvF,EAAAA,cAAC8B,EAAAA,EAAD,CAAWhB,MAAM,aAAaC,SAAS,aACvCf,EAAAA,cAACqB,EAAAA,GAAD,CAAMP,MAAM,SACRd,EAAAA,cAAAA,KAAAA,KACIA,EAAAA,cAAAA,KAAAA,KACIA,EAAAA,cAACoE,EAAAA,EAAD,CAAUC,MAAM,WACZrE,EAAAA,cAAC8F,EAAAA,EAAD,CAAcjG,MAAO+F,EAAOxF,KAAM,GAAIE,IAAKuF,EAAO/F,SAAU,SAAAiG,GAAC,OAAIJ,EAAY,CAACI,EAAGF,SAGzF7F,EAAAA,cAAAA,KAAAA,KACIA,EAAAA,cAACoE,EAAAA,EAAD,CAAUC,MAAM,YACZrE,EAAAA,cAAC8F,EAAAA,EAAD,CAAcjG,MAAOgG,EAAOzF,IAAKwF,EAAOtF,IAAK,GAAIR,SAAU,SAAAiG,GAAC,OAAIJ,EAAY,CAACC,EAAOG,a,wCC1B1GC,EAAqB3G,EAAAA,QAAAA,IAAAA,WAAH,4EAAGA,CAAH,0FAIlB4G,EAAAA,EACc/E,EAAAA,ICdpB,EDsB+B,WAE3B,OAA2CgF,EAAAA,EAAAA,KAApClB,EAAP,KAAoBE,EAApB,KAA+BD,EAA/B,KACMkB,GAAavB,EAAAA,EAAAA,GAAcI,EAAaE,EAAWD,GAErDhD,EAQAkE,EARAlE,UACAuB,EAOA2C,EAPA3C,aACAF,EAMA6C,EANA7C,YACAI,EAKAyC,EALAzC,eACAT,EAIAkD,EAJAlD,KACAW,EAGAuC,EAHAvC,QACAC,EAEAsC,EAFAtC,MACAC,EACAqC,EADArC,SAGJ,GAAgCrC,EAAAA,EAAAA,UAA2B+D,GAErDY,EAAqB,CACvBvC,MAAAA,EACA6B,SAJJ,KAKIC,YALJ,MAQMU,EAAgB,CAClBpE,UAAAA,EACAuB,aAAAA,EACAF,YAAAA,EACAI,eAAAA,EACAT,KAAAA,EACAW,QAAAA,EACAC,MAAAA,EACAC,SAAAA,GAGEwC,EAAe,CACjBxF,MAAO,WACPc,OAAQ5B,EAAAA,cAACuG,EAAAA,EAAD,iBACAH,EACAC,KAIZ,OACIrG,EAAAA,cAACgG,EAAD,KACIhG,EAAAA,cAACwG,EAAAA,EAAD,CAAeC,OAAQ,CAAC,MAAO,OAAQC,QAAS,CAAC,MAAO,MAAO,QAC3D1G,EAAAA,cAAC2G,EAAgBP,GACjBpG,EAAAA,cAAC4G,EAAAA,EAAYN,GACbtG,EAAAA,cAAC6G,EAAAA,GAAaR","sources":["webpack://play-what/./src/components/inputs/NumericInput.tsx","webpack://play-what/./src/components/pages/view/ColHeader.tsx","webpack://play-what/./src/components/layout/Modal.tsx","webpack://play-what/./src/components/pages/view/MainCol.tsx","webpack://play-what/./src/core/routing/Routing.utils.ts","webpack://play-what/./src/components/pages/view/NotesCol.tsx","webpack://play-what/./src/components/pages/view/useModelQueryParams.tsx","webpack://play-what/./src/components/pages/view/useModelState.tsx","webpack://play-what/./src/components/pages/view/KeyboardCol.tsx","webpack://play-what/./src/components/pages/view/KeyboardPage.tsx","webpack://play-what/./src/pages/view/keyboard.tsx"],"sourcesContent":["import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport Icon from \"../ui/Icon\";\r\nimport ButtonInput from \"./ButtonInput\";\r\n\r\nexport const StyledNumbericInput = styled.div`\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\r\n\tinput, button {\r\n\t\theight: 32px;\r\n\t\tpadding: 0;\r\n\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t}\r\n\r\n\tbutton {\r\n\t\twidth: 32px;\r\n\t\tborder: 1px solid ${({ theme }) => theme.utils.border};\r\n\t\tsvg, svg * {\r\n\t\t\tfill: white;\r\n\t\t}\r\n\r\n\t\tbackground-color: ${({ theme }) => theme.status.interactive};\r\n\t\tcolor: white;\r\n\t\t&:hover {\r\n\t\t\tbackground-color: ${({ theme }) => theme.status.active};\r\n\t\t}\r\n\r\n\t\t:first-child {\r\n\t\t\tborder-right: none;\r\n\t\t\tborder-radius: 8px 0 0 8px;\r\n\t\t}\r\n\t\t:last-child {\r\n\t\t\tborder-left: none;\r\n\t\t\tborder-radius: 0 8px 8px 0\r\n\t\t}\r\n\t}\r\n\r\n\tinput {\r\n\t\twidth: 48px;\r\n\t\tcursor: pointer;\r\n\t\tborder: none;\r\n\t\tfont-weight: bold;\r\n\t\ttext-align: center;\r\n\t\tbackground-color: white;\r\n\t\t&:hover {\r\n\t\t\tbackground-color: ${({ theme }) => theme.status.highlight};\r\n\t\t}\r\n\r\n\t\tborder: 1px solid ${({ theme }) => theme.utils.border};\r\n\t}\r\n    \r\n\tfont-size: 110%;\r\n\tcursor: pointer;\r\n`;\r\n\r\ninterface INumericInputProps {\r\n\tvalue: number;\r\n\tsetValue: (number) => void;\r\n\tmin?: number;\r\n\tmax?: number;\r\n}\r\n\r\nconst NumericInput: React.FC<INumericInputProps> = ({ value, setValue, ...rest }) => {\r\n\tconst onChange = e => setValue(parseInt(e.target.value));\r\n\r\n\tconst onDown = () => {\r\n\t\tlet newVal = value - 1;\r\n\t\tif (typeof rest.min !== 'undefined') {\r\n\t\t\tnewVal = Math.max(rest.min, newVal);\r\n\t\t}\r\n\t\tsetValue(newVal);\r\n\t};\r\n\r\n\tconst onUp = () => {\r\n\t\tlet newVal = value + 1;\r\n\t\tif (typeof rest.max !== 'undefined') {\r\n\t\t\tnewVal = Math.min(rest.max, newVal);\r\n\t\t}\r\n\t\tsetValue(newVal);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<StyledNumbericInput>\r\n\t\t\t<ButtonInput onClick={onDown}><Icon iconId=\"minus\" size={12} /></ButtonInput>\r\n\t\t\t<input type=\"number\" value={value} onChange={null} {...rest} />\r\n\t\t\t<ButtonInput onClick={onUp}><Icon iconId=\"plus\" size={12} /></ButtonInput>\r\n\t\t</StyledNumbericInput>\r\n\t);\r\n}\r\n\r\nexport default NumericInput;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nconst StyledColHeader = styled.div`\r\n    h2 {\r\n        text-align: center;\r\n        padding-bottom: 8px;\r\n        margin-bottom: 16px;\r\n        //font-weight: normal;\r\n        //color: ${props => props.theme.text.secondary};\r\n        border-bottom: 1px solid ${props => props.theme.utils.border};\r\n    }\r\n`;\r\n\r\nconst ColHeader: React.FC<any> = ({ title, subTitle }) => {\r\n\r\n    return (\r\n        <StyledColHeader>\r\n            <h2>{title}</h2>\r\n            {/*<h3>{subTitle}</h3>*/}\r\n        </StyledColHeader>\r\n    );\r\n};\r\n\r\nexport default ColHeader;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport ButtonInput from '../inputs/ButtonInput';\r\nimport Card, { StyledCard } from '../ui/Card';\r\nimport Icon from '../ui/Icon';\r\n\r\nconst StyledOverlay = styled.div`\r\n    //width: 100vw;\r\n    //height: 100vw;\r\n    opacity: 0.8;\r\n    background-color: black;\r\n    position: fixed;\r\n    top: 48px;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 3000;\r\n`\r\n\r\nconst StyledContainer = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    position: fixed;\r\n    top: 48px;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 3001;\r\n\r\n    & > ${StyledCard} {\r\n        width: 80%;\r\n        height: 80%;\r\n        position: relative;\r\n        padding: 64px 16px;\r\n\r\n        overflow: auto;\r\n        resize: both;\r\n\r\n        .close {\r\n            position: absolute;\r\n            top: 16px;\r\n            right: 16px;\r\n            background-color: transparent !important;\r\n        }\r\n    }\r\n`\r\n\r\nconst Modal: React.FC<any> = ({ setIsOpen, children, ...rest }) => {\r\n    return (\r\n        <>\r\n            <StyledOverlay />\r\n            <StyledContainer >\r\n                <Card {...rest} draggable=\"true\">\r\n                    <ButtonInput onClick={() => setIsOpen(false)} className=\"close\">\r\n                        <Icon iconId='close' />\r\n                    </ButtonInput>\r\n                    {children}\r\n                </Card>\r\n            </StyledContainer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { useState } from \"react\";\r\nimport styled from 'styled-components';\r\nimport ButtonInput from \"../../inputs/ButtonInput\";\r\nimport Modal from \"../../layout/Modal\";\r\nimport Card from \"../../ui/Card\";\r\nimport Icon from \"../../ui/Icon\";\r\nimport ColHeader from \"./ColHeader\";\r\n\r\nconst StyledMainCol = styled.div`\r\n    .maximize {\r\n        background-color: transparent !important;\r\n    }\r\n`;\r\n\r\ninterface IMainColProps {\r\n    title: string;\r\n    viewer: any;\r\n}\r\n\r\nconst MainCol: React.FC<IMainColProps> = (props) => {\r\n    const [isFullScreen, setIsFullScreen] = useState(false);\r\n\r\n    const { title, viewer } = props;\r\n\r\n    return (\r\n        <>\r\n            {isFullScreen && (\r\n                <Modal setIsOpen={setIsFullScreen}>\r\n                    <div className=\"resize\">\r\n                        {viewer}\r\n                    </div>\r\n                </Modal>\r\n            )}\r\n            <StyledMainCol>\r\n                <ColHeader title=\"View\" subTitle=\"...\" />\r\n                <Card title={title} className=\"view\"\r\n                    action={<ButtonInput className=\"maximize\" onClick={() => setIsFullScreen(true)}>\r\n                        <Icon iconId=\"maximize\" />\r\n                    </ButtonInput>}\r\n                >\r\n                    {viewer}\r\n                </Card>\r\n            </StyledMainCol>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainCol;\r\n","import { ModelId, ModelType, NoteId } from \"../models/Model.constants\";\r\n\r\nexport const getModelRoute = (modelType: ModelType, modelId: ModelId, rootId?: NoteId) => {\r\n\r\n    const rootSuffix = rootId ? `/root/${rootId}` : '';\r\n\r\n    return `/browse/${modelType}/${modelId}${rootSuffix}`;\r\n}\r\n","import { Link } from \"gatsby\";\r\nimport React from \"react\";\r\nimport styled from 'styled-components';\r\nimport Chord from \"../../../core/models/Chord\";\r\nimport { ChordId, IModelConfig, ModelId, ModelType, NoteId, ScaleId } from \"../../../core/models/Model.constants\";\r\nimport { CHORD_PRESETS, NOTE_PRESETS, SCALE_PRESETS } from \"../../../core/models/Model.presets\";\r\nimport Note from \"../../../core/models/Note\";\r\nimport Scale from \"../../../core/models/Scale\";\r\nimport { getModelRoute } from \"../../../core/routing/Routing.utils\";\r\nimport DropdownInput from \"../../inputs/DropdownInput\";\r\nimport Card from \"../../ui/Card\";\r\nimport InputRow from \"../../ui/InputRow\";\r\nimport ColHeader from \"./ColHeader\";\r\n\r\nconst StyledNotesCol = styled.div`\r\n    \r\n`;\r\n\r\nexport const MODEL_TYPE_OPTIONS = [\r\n    {\r\n        id: ModelType.Chord,\r\n        name: 'Chords',\r\n        value: ModelType.Chord,\r\n        data: CHORD_PRESETS\r\n    },\r\n    {\r\n        id: ModelType.Scale,\r\n        name: 'Scales',\r\n        value: ModelType.Scale,\r\n        data: SCALE_PRESETS\r\n    }\r\n]\r\n\r\nexport interface INotesColProps {\r\n    modelType: typeof MODEL_TYPE_OPTIONS[0];\r\n    modelConfig;\r\n    root: IModelConfig | any;\r\n    model: Chord | Scale;\r\n    setModelType?;\r\n    setModelConfig?;\r\n    setRoot?;\r\n    setModel?;\r\n}\r\n\r\nexport const DEFAULT_MODEL_TYPE = MODEL_TYPE_OPTIONS[0];\r\nexport const DEFAULT_MODEL_CONFIG = MODEL_TYPE_OPTIONS[0].data[0];\r\nexport const DEFAULT_ROOT = NOTE_PRESETS[0];\r\n//export const DEFAULT_MODEL = new Chord(DEFAULT_MODEL_CONFIG.modelId, { root: Note.fromId(DEFAULT_ROOT.modelId) })\r\n\r\nexport const getNewModel = (modelType: ModelType, modelId: ModelId, root: NoteId) => {\r\n    let newModel;\r\n    if (modelType === ModelType.Chord) {\r\n        newModel = new Chord(modelId as ChordId, { root: Note.fromId(root) })\r\n    }\r\n    else if (modelType === ModelType.Scale) {\r\n        newModel = new Scale(modelId as ScaleId, { root: Note.fromId(root) })\r\n    }\r\n    return newModel;\r\n}\r\n\r\nconst NotesCol: React.FC<INotesColProps> = props => {\r\n\r\n    const { modelType, modelConfig, root, setModelType: _setModelType, setModelConfig: _setModelConfig, setRoot: _setRoot, model, setModel } = props;\r\n    const modelOptions = modelType.data;\r\n\r\n    const setModelType = type => {\r\n        _setModelType(type);\r\n        _setModelConfig(type.data[0])\r\n    }\r\n    const setModelConfig = config => {\r\n        let newModel = getNewModel(config.modelType, config.modelId, root.modelId);\r\n        _setModelConfig(config);\r\n        setModel(newModel);\r\n    }\r\n    const setRoot = newRoot => {\r\n        let newModel = getNewModel(modelConfig.modelType, modelConfig.modelId, newRoot.modelId);\r\n        _setRoot(newRoot);\r\n        setModel(newModel);\r\n    }\r\n\r\n    console.log('dpb', MODEL_TYPE_OPTIONS, modelType, modelOptions, modelConfig)\r\n\r\n    return (\r\n        <StyledNotesCol>\r\n            <ColHeader title=\"Notes\" subTitle=\"...\" />\r\n            <Card title=\"Notes\">\r\n                <Link to={getModelRoute(modelType.id, modelConfig.modelId, root.modelId)}>{model.name}</Link>\r\n            </Card>\r\n            <Card title=\"Root\">\r\n                <ul>\r\n                    <li>\r\n                        <InputRow label=\"Key Center\">\r\n                            <DropdownInput value={root} setValue={setRoot} options={NOTE_PRESETS} idProperty=\"modelId\" />\r\n                        </InputRow>\r\n                    </li>\r\n                </ul>\r\n            </Card>\r\n            <Card title=\"Intervals\">\r\n                <ul>\r\n                    <li>\r\n                        <InputRow label=\"Model Type\">\r\n                            <DropdownInput value={modelType} setValue={setModelType} options={MODEL_TYPE_OPTIONS} idProperty=\"id\" />\r\n                        </InputRow>\r\n                    </li>\r\n                    <li>\r\n                        <InputRow label=\"Preset\">\r\n                            <DropdownInput value={modelConfig} setValue={setModelConfig} options={modelOptions} idProperty=\"modelId\" />\r\n                        </InputRow>\r\n                    </li>\r\n                </ul>\r\n            </Card>\r\n        </StyledNotesCol>\r\n    );\r\n};\r\n\r\nexport default NotesCol;\r\n","import { useQueryParam } from \"use-query-params\";\r\n\r\nconst useModelQueryParams = () => {\r\n    const [qpModelType] = useQueryParam('modelType');\r\n    const [qpModelId] = useQueryParam('modelId');\r\n    const [qpRootId] = useQueryParam('rootId');\r\n\r\n    return [qpModelType, qpModelId, qpRootId];\r\n}\r\n\r\nexport default useModelQueryParams;\r\n","import { useState } from \"react\";\r\nimport { NOTE_PRESETS } from \"../../../core/models/Model.presets\";\r\nimport { DEFAULT_MODEL_CONFIG, DEFAULT_MODEL_TYPE, DEFAULT_ROOT, getNewModel, MODEL_TYPE_OPTIONS } from \"./NotesCol\";\r\n\r\nconst getInitModelType = (qpModelType?: string) => {\r\n    const found = MODEL_TYPE_OPTIONS.find(type => type.id && type.id === qpModelType);\r\n    return found || DEFAULT_MODEL_TYPE;\r\n}\r\n\r\nconst getInitModelConfig = (modelType, qpModelId?: string) => {\r\n    const found = modelType.data.find(preset => preset.modelId === qpModelId);\r\n    return found || DEFAULT_MODEL_CONFIG;\r\n}\r\n\r\nconst getInitRoot = (qpRootId?: string) => {\r\n    const found = NOTE_PRESETS.find(note => note.modelId === qpRootId);\r\n    return found || DEFAULT_ROOT;\r\n}\r\n\r\nexport const useModelState = (initModelType, initModelId, initRootId) => {\r\n    const [modelType, setModelType] = useState(getInitModelType(initModelType));\r\n    const [modelConfig, setModelConfig] = useState(getInitModelConfig(modelType, initModelId));\r\n\r\n    const [root, setRoot] = useState(getInitRoot(initRootId));\r\n    const [model, setModel] = useState(getNewModel(modelType.id, modelConfig.modelId, root.modelId));\r\n\r\n    return {\r\n        modelType,\r\n        setModelType,\r\n        modelConfig,\r\n        setModelConfig,\r\n        root,\r\n        setRoot,\r\n        model,\r\n        setModel\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport DEFAULT_KEYBOARD_PROPS from \"../../../viewers/keyboard/Keyboard.defaults\";\r\nimport NumericInput from \"../../inputs/NumericInput\";\r\nimport Card from \"../../ui/Card\";\r\nimport InputRow from \"../../ui/InputRow\";\r\nimport ColHeader from \"./ColHeader\";\r\n\r\nconst StyledKeyboardCol = styled.div`\r\n\r\n`;\r\n\r\n\r\nexport interface IKeyboardColProps {\r\n    keyRange;\r\n    setKeyRange;\r\n    model;\r\n}\r\n\r\nexport const DEFAULT_KEY_RANGE = DEFAULT_KEYBOARD_PROPS.keyRange as [number, number];\r\n\r\nconst KeyboardCol: React.FC<IKeyboardColProps> = ({ keyRange, setKeyRange }) => {\r\n\r\n    const [keyLo, keyHi] = keyRange;\r\n\r\n    return (\r\n        <StyledKeyboardCol>\r\n            <ColHeader title=\"Instrument\" subTitle=\"Keyboard\" />\r\n            <Card title=\"Range\">\r\n                <ul>\r\n                    <li>\r\n                        <InputRow label=\"Low Key\">\r\n                            <NumericInput value={keyLo} min={-88} max={keyHi} setValue={v => setKeyRange([v, keyHi])} />\r\n                        </InputRow>\r\n                    </li>\r\n                    <li>\r\n                        <InputRow label=\"High Key\">\r\n                            <NumericInput value={keyHi} min={keyLo} max={88} setValue={v => setKeyRange([keyLo, v])} />\r\n                        </InputRow>\r\n                    </li>\r\n                </ul>\r\n            </Card >\r\n        </StyledKeyboardCol>\r\n    );\r\n};\r\n\r\nexport default KeyboardCol;\r\n","import React, { useState } from \"react\";\r\nimport styled from 'styled-components';\r\nimport Keyboard from \"../../../viewers/keyboard/Keyboard\";\r\nimport ColumnManager, { StyledColumnManager } from \"../../column-manager/ColumnManager\";\r\nimport { StyledCard } from \"../../ui/Card\";\r\nimport KeyboardCol, { DEFAULT_KEY_RANGE } from \"./KeyboardCol\";\r\nimport MainCol from \"./MainCol\";\r\nimport NotesCol from \"./NotesCol\";\r\nimport useModelQueryParams from \"./useModelQueryParams\";\r\nimport { useModelState } from \"./useModelState\";\r\n\r\nconst StyledKeyboardPage = styled.div`\r\n    min-height: 95vh;\r\n    padding: 16px;\r\n\r\n    ${StyledColumnManager} {\r\n        & > div > ${StyledCard}:not(:last-child) {\r\n            margin-bottom: 16px;\r\n        }\r\n    }\r\n`;\r\n\r\n\r\n\r\nconst KeyboardPage: React.FC = () => {\r\n\r\n    const [qpModelType, qpModelId, qpRootId] = useModelQueryParams();\r\n    const modelState = useModelState(qpModelType, qpModelId, qpRootId);\r\n    const {\r\n        modelType,\r\n        setModelType,\r\n        modelConfig,\r\n        setModelConfig,\r\n        root,\r\n        setRoot,\r\n        model,\r\n        setModel\r\n    } = modelState;\r\n\r\n    const [keyRange, setKeyRange] = useState<[number, number]>(DEFAULT_KEY_RANGE);\r\n\r\n    const instrumentColProps = {\r\n        model,\r\n        keyRange,\r\n        setKeyRange\r\n    }\r\n\r\n    const notesColProps = {\r\n        modelType,\r\n        setModelType,\r\n        modelConfig,\r\n        setModelConfig,\r\n        root,\r\n        setRoot,\r\n        model,\r\n        setModel\r\n    }\r\n\r\n    const mainColProps = {\r\n        title: 'Keyboard',\r\n        viewer: <Keyboard\r\n            {...instrumentColProps}\r\n            {...notesColProps}\r\n        />\r\n    };\r\n\r\n    return (\r\n        <StyledKeyboardPage>\r\n            <ColumnManager tablet={[\"1fr\", \"2fr\"]} desktop={[\"1fr\", \"2fr\", \"1fr\"]}>\r\n                <KeyboardCol {...instrumentColProps} />\r\n                <MainCol {...mainColProps} />\r\n                <NotesCol {...notesColProps} />\r\n            </ColumnManager>\r\n        </StyledKeyboardPage>\r\n    );\r\n};\r\n\r\nexport default KeyboardPage;\r\n","import KeyboardPage from \"../../components/pages/view/KeyboardPage\";\r\n\r\nexport default KeyboardPage;\r\n"],"names":["StyledNumbericInput","styled","theme","utils","border","status","interactive","active","highlight","value","setValue","rest","React","ButtonInput","onClick","newVal","min","Math","max","Icon","iconId","size","type","onChange","StyledColHeader","props","title","subTitle","StyledOverlay","StyledContainer","StyledCard","setIsOpen","children","Card","draggable","className","StyledMainCol","useState","isFullScreen","setIsFullScreen","viewer","Modal","ColHeader","action","getModelRoute","modelType","modelId","rootId","StyledNotesCol","MODEL_TYPE_OPTIONS","id","ModelType","name","data","CHORD_PRESETS","SCALE_PRESETS","DEFAULT_MODEL_TYPE","DEFAULT_MODEL_CONFIG","DEFAULT_ROOT","NOTE_PRESETS","getNewModel","root","newModel","Chord","Note","Scale","modelConfig","_setModelType","setModelType","_setModelConfig","setModelConfig","_setRoot","setRoot","model","setModel","modelOptions","console","log","Link","to","InputRow","label","DropdownInput","newRoot","options","idProperty","config","useQueryParam","useModelState","initModelType","initModelId","initRootId","qpModelType","qpRootId","qpModelId","find","preset","getInitModelConfig","note","StyledKeyboardCol","DEFAULT_KEY_RANGE","DEFAULT_KEYBOARD_PROPS","keyRange","setKeyRange","keyLo","keyHi","NumericInput","v","StyledKeyboardPage","StyledColumnManager","useModelQueryParams","modelState","instrumentColProps","notesColProps","mainColProps","Keyboard","ColumnManager","tablet","desktop","KeyboardCol","MainCol","NotesCol"],"sourceRoot":""}