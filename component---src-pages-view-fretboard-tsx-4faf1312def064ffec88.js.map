{"version":3,"file":"component---src-pages-view-fretboard-tsx-4faf1312def064ffec88.js","mappings":"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","sources":["webpack://play-what/./src/components/column-manager/ColumnManager.tsx","webpack://play-what/./src/components/inputs/NumericInput.tsx","webpack://play-what/./src/core/routing/Routing.utils.ts","webpack://play-what/./src/components/pages/view/DetailsCol.tsx","webpack://play-what/./src/components/layout/Modal.tsx","webpack://play-what/./src/components/pages/view/MainCol.tsx","webpack://play-what/./src/components/pages/view/NotesCol.tsx","webpack://play-what/./src/components/pages/view/TabCard.tsx","webpack://play-what/./src/components/pages/view/useModelQueryParams.tsx","webpack://play-what/./src/components/pages/view/useModelState.tsx","webpack://play-what/./src/components/pages/view/FretboardCol.tsx","webpack://play-what/./src/components/pages/view/FretboardPage.tsx","webpack://play-what/./src/pages/view/fretboard.tsx"],"sourcesContent":["import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledColumnManager = styled.div`\r\n    display: grid;\r\n    gap: 16px;\r\n    grid-template-columns: 1fr;\r\n\r\n    ${({ $tablet }) => $tablet ? `\r\n        @media(min-width: 512px) {\r\n            grid-template-columns: ${$tablet.join(' ')}\r\n        }\r\n    ` : ''}\r\n\r\n    ${({ $desktop }) => $desktop ? `\r\n        @media(min-width: 1024px) {\r\n            grid-template-columns: ${$desktop.join(' ')}\r\n        }\r\n    ` : ``}\r\n   \r\n`;\r\n\r\nconst ColumnManager: React.FC<any> = ({ children, tablet, desktop }) => {\r\n    return (\r\n        <StyledColumnManager $tablet={tablet} $desktop={desktop}>\r\n            {children}\r\n        </StyledColumnManager >\r\n    );\r\n};\r\n\r\nexport default ColumnManager;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport Icon from \"../ui/Icon\";\r\nimport ButtonInput from \"./ButtonInput\";\r\n\r\nexport const StyledNumbericInput = styled.div`\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\r\n\tinput, button {\r\n\t\theight: 32px;\r\n\t\tpadding: 0;\r\n\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t}\r\n\r\n\tbutton {\r\n\t\twidth: 32px;\r\n\t\tborder: 1px solid ${({ theme }) => theme.utils.border};\r\n\t\tsvg, svg * {\r\n\t\t\tfill: white;\r\n\t\t}\r\n\r\n\t\tbackground-color: ${({ theme }) => theme.status.interactive};\r\n\t\tcolor: white;\r\n\t\t&:hover {\r\n\t\t\tbackground-color: ${({ theme }) => theme.status.active};\r\n\t\t}\r\n\r\n\t\t:first-child {\r\n\t\t\tborder-right: none;\r\n\t\t\tborder-radius: 8px 0 0 8px;\r\n\t\t}\r\n\t\t:last-child {\r\n\t\t\tborder-left: none;\r\n\t\t\tborder-radius: 0 8px 8px 0\r\n\t\t}\r\n\t}\r\n\r\n\tinput {\r\n\t\twidth: 48px;\r\n\t\tcursor: pointer;\r\n\t\tborder: none;\r\n\t\tfont-weight: bold;\r\n\t\ttext-align: center;\r\n\t\tbackground-color: white;\r\n\t\t&:hover {\r\n\t\t\tbackground-color: ${({ theme }) => theme.status.highlight};\r\n\t\t}\r\n\r\n\t\tborder: 1px solid ${({ theme }) => theme.utils.border};\r\n\t}\r\n    \r\n\tfont-size: 110%;\r\n\tcursor: pointer;\r\n`;\r\n\r\ninterface INumericInputProps {\r\n\tvalue: number;\r\n\tsetValue: (number) => void;\r\n\tmin?: number;\r\n\tmax?: number;\r\n}\r\n\r\nconst NumericInput: React.FC<INumericInputProps> = ({ value, setValue, ...rest }) => {\r\n\tconst onChange = e => setValue(parseInt(e.target.value));\r\n\r\n\tconst onDown = () => {\r\n\t\tlet newVal = value - 1;\r\n\t\tif (typeof rest.min !== 'undefined') {\r\n\t\t\tnewVal = Math.max(rest.min, newVal);\r\n\t\t}\r\n\t\tsetValue(newVal);\r\n\t};\r\n\r\n\tconst onUp = () => {\r\n\t\tlet newVal = value + 1;\r\n\t\tif (typeof rest.max !== 'undefined') {\r\n\t\t\tnewVal = Math.min(rest.max, newVal);\r\n\t\t}\r\n\t\tsetValue(newVal);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<StyledNumbericInput>\r\n\t\t\t<ButtonInput onClick={onDown}><Icon iconId=\"minus\" size={12} /></ButtonInput>\r\n\t\t\t<input type=\"number\" value={value} onChange={null} {...rest} />\r\n\t\t\t<ButtonInput onClick={onUp}><Icon iconId=\"plus\" size={12} /></ButtonInput>\r\n\t\t</StyledNumbericInput>\r\n\t);\r\n}\r\n\r\nexport default NumericInput;\r\n","import { ModelId, ModelType, NoteId } from \"../models/Model.constants\";\r\n\r\nexport const getModelRoute = (modelType: ModelType, modelId: ModelId, rootId?: NoteId) => {\r\n\r\n    const rootSuffix = rootId ? `/root/${rootId}` : '';\r\n\r\n    return `/browse/${modelType}/${modelId}${rootSuffix}`;\r\n}\r\n","import { Link } from \"gatsby\";\r\nimport React from \"react\";\r\nimport styled from 'styled-components';\r\nimport Chord from \"../../../core/models/Chord\";\r\nimport { IModelConfig } from \"../../../core/models/Model.constants\";\r\nimport Scale from \"../../../core/models/Scale\";\r\nimport { getModelRoute } from \"../../../core/routing/Routing.utils\";\r\nimport { MODEL_TYPE_OPTIONS } from \"./NotesCol\";\r\n\r\nconst StyledDetailsCol = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    gap: 16px;\r\n    .name {\r\n        font-size: 140%;\r\n        display: block;\r\n        padding: 8px;\r\n        \r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        flex-direction: column;\r\n    }\r\n    .info {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        \r\n        .item {\r\n            margin: 8px;\r\n            text-align: center;\r\n            .note {\r\n                font-weight: bold;\r\n                font-size: 120%;\r\n            }\r\n            .interval {\r\n                color: ${props => props.theme.text.secondary};\r\n            }\r\n        }\r\n    }\r\n    .instrument {\r\n        .inst-name {\r\n            font-weight: bold;\r\n            font-size: 140%;\r\n            text-align: center;\r\n            padding: 8px;\r\n        }\r\n        .tuning {\r\n            font-size: 120%;\r\n            text-align: center;\r\n            color: ${props => props.theme.text.secondary};\r\n        }\r\n    }\r\n`;\r\n\r\nexport interface IDetailsColProps {\r\n    modelType: typeof MODEL_TYPE_OPTIONS[0];\r\n    modelConfig;\r\n    root: IModelConfig | any;\r\n    model: Chord | Scale;\r\n    setModelType?;\r\n    setModelConfig?;\r\n    setRoot?;\r\n    setModel?;\r\n    instrumentName: string;\r\n    instrumentTuning: string;\r\n}\r\n\r\nconst DetailsCol: React.FC<IDetailsColProps> = props => {\r\n\r\n    const { modelType, modelConfig, root, setModelType: _setModelType, setModelConfig: _setModelConfig, setRoot: _setRoot, model, setModel, instrumentName, instrumentTuning } = props;\r\n\r\n    return (\r\n        <StyledDetailsCol>\r\n            <div className=\"notes\">\r\n                <h3>Notes</h3>\r\n                <Link to={getModelRoute(modelType.id, modelConfig.modelId, root.modelId)}\r\n                    className=\"name\"\r\n                >{model.name}</Link>\r\n                <div className=\"info\">\r\n                    {model.notes && model.notes.map((note, i) => (\r\n                        <div key={i} className=\"item\">\r\n                            <div className=\"note\">{note.name}</div>\r\n                            <div className=\"interval\">{model.intervals[i].getName()}</div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n            <div className=\"instrument\">\r\n                <h3>Instrument</h3>\r\n                <div className=\"inst-name\">{instrumentName}</div>\r\n                <div className=\"tuning\">{instrumentTuning}</div>\r\n            </div>\r\n        </StyledDetailsCol>\r\n    );\r\n};\r\n\r\nexport default DetailsCol;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport ButtonInput from '../inputs/ButtonInput';\r\nimport Card, { StyledCard } from '../ui/Card';\r\nimport Icon from '../ui/Icon';\r\n\r\nconst StyledOverlay = styled.div`\r\n    //width: 100vw;\r\n    //height: 100vw;\r\n    opacity: 0.8;\r\n    background-color: black;\r\n    position: fixed;\r\n    top: 48px;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 3000;\r\n`\r\n\r\nconst StyledContainer = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    position: fixed;\r\n    top: 48px;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 300100000000000;\r\n\r\n    & > ${StyledCard} {\r\n        width: 80%;\r\n        height: 80%;\r\n        position: relative;\r\n        padding: 64px 16px;\r\n\r\n        overflow: auto;\r\n        resize: both;\r\n\r\n        .close {\r\n            position: absolute;\r\n            top: 16px;\r\n            right: 16px;\r\n            background-color: transparent !important;\r\n        }\r\n    }\r\n`\r\n\r\nconst Modal: React.FC<any> = ({ setIsOpen, children, ...rest }) => {\r\n    return (\r\n        <>\r\n            <StyledOverlay />\r\n            <StyledContainer >\r\n                <Card {...rest} draggable=\"true\">\r\n                    <ButtonInput onClick={() => setIsOpen(false)} className=\"close\">\r\n                        <Icon iconId='close' />\r\n                    </ButtonInput>\r\n                    {children}\r\n                </Card>\r\n            </StyledContainer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Modal;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport Modal from \"../../layout/Modal\";\r\n\r\nconst StyledMainCol = styled.div`\r\n    padding: 16px;\r\n    .maximize {\r\n        background-color: transparent !important;\r\n    }\r\n`;\r\n\r\ninterface IMainColProps {\r\n    viewer: any;\r\n    isFullScreen: boolean;\r\n    setIsFullScreen: Function;\r\n}\r\n\r\nconst MainCol: React.FC<IMainColProps> = (props) => {\r\n\r\n    const { viewer, isFullScreen, setIsFullScreen } = props;\r\n\r\n    return (\r\n        <>\r\n            {isFullScreen && (\r\n                <Modal setIsOpen={setIsFullScreen}>\r\n                    <div className=\"resize\">\r\n                        {viewer}\r\n                    </div>\r\n                </Modal>\r\n            )}\r\n            <StyledMainCol>\r\n                {viewer}\r\n            </StyledMainCol>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainCol;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport Chord from \"../../../core/models/Chord\";\r\nimport { ChordId, IModelConfig, ModelId, ModelType, NoteId, ScaleId } from \"../../../core/models/Model.constants\";\r\nimport { CHORD_PRESETS, NOTE_PRESETS, SCALE_PRESETS } from \"../../../core/models/Model.presets\";\r\nimport Note from \"../../../core/models/Note\";\r\nimport Scale from \"../../../core/models/Scale\";\r\nimport DropdownInput from \"../../inputs/DropdownInput\";\r\nimport Card, { CardHeader } from \"../../ui/Card\";\r\nimport InputRow from \"../../ui/InputRow\";\r\n\r\nconst StyledNotesCol = styled.div`\r\n    .header:not(:first-child) {\r\n        margin-top: 16px;\r\n    }\r\n`;\r\n\r\nexport const MODEL_TYPE_OPTIONS = [\r\n    {\r\n        id: ModelType.Chord,\r\n        name: 'Chords',\r\n        value: ModelType.Chord,\r\n        data: CHORD_PRESETS\r\n    },\r\n    {\r\n        id: ModelType.Scale,\r\n        name: 'Scales',\r\n        value: ModelType.Scale,\r\n        data: SCALE_PRESETS\r\n    }\r\n]\r\n\r\nexport interface INotesColProps {\r\n    modelType: typeof MODEL_TYPE_OPTIONS[0];\r\n    modelConfig;\r\n    root: IModelConfig | any;\r\n    model: Chord | Scale;\r\n    setModelType?;\r\n    setModelConfig?;\r\n    setRoot?;\r\n    setModel?;\r\n}\r\n\r\nexport const DEFAULT_MODEL_TYPE = MODEL_TYPE_OPTIONS[0];\r\nexport const DEFAULT_MODEL_CONFIG = MODEL_TYPE_OPTIONS[0].data[0];\r\nexport const DEFAULT_ROOT = NOTE_PRESETS[0];\r\n//export const DEFAULT_MODEL = new Chord(DEFAULT_MODEL_CONFIG.modelId, { root: Note.fromId(DEFAULT_ROOT.modelId) })\r\n\r\nexport const getNewModel = (modelType: ModelType, modelId: ModelId, root: NoteId) => {\r\n    let newModel;\r\n    if (modelType === ModelType.Chord) {\r\n        newModel = new Chord(modelId as ChordId, { root: Note.fromId(root) })\r\n    }\r\n    else if (modelType === ModelType.Scale) {\r\n        newModel = new Scale(modelId as ScaleId, { root: Note.fromId(root) })\r\n    }\r\n    return newModel;\r\n}\r\n\r\nconst NotesCol: React.FC<INotesColProps> = props => {\r\n\r\n    const { modelType, modelConfig, root, setModelType: _setModelType, setModelConfig: _setModelConfig, setRoot: _setRoot, model, setModel } = props;\r\n    const modelOptions = modelType.data;\r\n\r\n    const setModelType = type => {\r\n        _setModelType(type);\r\n        _setModelConfig(type.data[0])\r\n    }\r\n    const setModelConfig = config => {\r\n        let newModel = getNewModel(config.modelType, config.modelId, root.modelId);\r\n        _setModelConfig(config);\r\n        setModel(newModel);\r\n    }\r\n    const setRoot = newRoot => {\r\n        let newModel = getNewModel(modelConfig.modelType, modelConfig.modelId, newRoot.modelId);\r\n        _setRoot(newRoot);\r\n        setModel(newModel);\r\n    }\r\n\r\n    //console.log('dpb', MODEL_TYPE_OPTIONS, modelType, modelOptions, modelConfig)\r\n\r\n    return (\r\n        <StyledNotesCol>\r\n            <CardHeader title=\"Root\" />\r\n            <ul>\r\n                <li>\r\n                    <InputRow label=\"Key Center\">\r\n                        <DropdownInput value={root} setValue={setRoot} options={NOTE_PRESETS} idProperty=\"modelId\" />\r\n                    </InputRow>\r\n                </li>\r\n            </ul>\r\n\r\n            <CardHeader title=\"Intervals\" />\r\n            <ul>\r\n                <li>\r\n                    <InputRow label=\"Model Type\">\r\n                        <DropdownInput value={modelType} setValue={setModelType} options={MODEL_TYPE_OPTIONS} idProperty=\"id\" />\r\n                    </InputRow>\r\n                </li>\r\n                <li>\r\n                    <InputRow label=\"Preset\">\r\n                        <DropdownInput value={modelConfig} setValue={setModelConfig} options={modelOptions} idProperty=\"modelId\" />\r\n                    </InputRow>\r\n                </li>\r\n            </ul>\r\n        </StyledNotesCol>\r\n    );\r\n};\r\n\r\nexport default NotesCol;\r\n","import React, { useState } from \"react\";\r\nimport styled from 'styled-components';\r\nimport { StyledCard } from \"../../ui/Card\";\r\n\r\nconst StyledTabCard = styled(StyledCard)`\r\n    padding: 0;\r\n    min-height: 256px;\r\n    \r\n    .content {\r\n        padding: 16px;\r\n    }\r\n    .fake-border {\r\n        position: relative;\r\n        width: 100%;\r\n        bottom: 2px;\r\n        border-bottom: 2px solid #EEE;\r\n        margin-bottom: 8px;\r\n    }\r\n    > ul {\r\n        display: flex;\r\n        align-items: center;\r\n        overflow: auto;\r\n        \r\n        button {\r\n            position: relative;\r\n            z-index: 100000000;\r\n            padding: 16px 16px 12px;\r\n            appearance: none;\r\n            border: none;\r\n            cursor: pointer;\r\n            background-color: ${props => props.theme.surface.card};\r\n            border-bottom: 2px solid transparent;\r\n            border-radius: 8px 8px 0 0;\r\n            border-bottom: 2px solid #EEE;\r\n\r\n            font-size: 120%;\r\n\r\n            color: ${props => props.theme.text.secondary};\r\n\r\n            &:hover {\r\n                border-bottom: 2px solid  ${props => props.theme.action.interactive};\r\n                color: ${props => props.theme.text.primary};\r\n            }\r\n            \r\n            &.active {\r\n                border-color: ${props => props.theme.action.active};\r\n                font-weight: bold;\r\n                color: ${props => props.theme.text.primary};\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst TabCard: React.FC<any> = ({ tabs }) => {\r\n    const [index, setIndex] = useState(0);\r\n\r\n    return (\r\n        <StyledTabCard>\r\n            <ul>\r\n                {tabs.map((t, i) => (\r\n                    <li key={t.text}>\r\n                        <button\r\n                            type=\"button\"\r\n                            onClick={() => setIndex(i)}\r\n                            className={i === index ? 'active' : ''}\r\n                        >\r\n                            {t.text}\r\n                        </button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            <div className=\"fake-border\" />\r\n            <div className=\"content\">\r\n                {tabs[index].content}\r\n            </div>\r\n        </StyledTabCard>\r\n    );\r\n};\r\n\r\nexport default TabCard;\r\n","import { useQueryParam } from \"use-query-params\";\r\n\r\nconst useModelQueryParams = () => {\r\n    const [qpModelType] = useQueryParam('modelType');\r\n    const [qpModelId] = useQueryParam('modelId');\r\n    const [qpRootId] = useQueryParam('rootId');\r\n\r\n    return [qpModelType, qpModelId, qpRootId];\r\n}\r\n\r\nexport default useModelQueryParams;\r\n","import { useState } from \"react\";\r\nimport { NOTE_PRESETS } from \"../../../core/models/Model.presets\";\r\nimport { DEFAULT_MODEL_CONFIG, DEFAULT_MODEL_TYPE, DEFAULT_ROOT, getNewModel, MODEL_TYPE_OPTIONS } from \"./NotesCol\";\r\n\r\nconst getInitModelType = (qpModelType?: string) => {\r\n    const found = MODEL_TYPE_OPTIONS.find(type => type.id && type.id === qpModelType);\r\n    return found || DEFAULT_MODEL_TYPE;\r\n}\r\n\r\nconst getInitModelConfig = (modelType, qpModelId?: string) => {\r\n    const found = modelType.data.find(preset => preset.modelId === qpModelId);\r\n    return found || DEFAULT_MODEL_CONFIG;\r\n}\r\n\r\nconst getInitRoot = (qpRootId?: string) => {\r\n    const found = NOTE_PRESETS.find(note => note.modelId === qpRootId);\r\n    return found || DEFAULT_ROOT;\r\n}\r\n\r\nexport const useModelState = (initModelType, initModelId, initRootId) => {\r\n    const [modelType, setModelType] = useState(getInitModelType(initModelType));\r\n    const [modelConfig, setModelConfig] = useState(getInitModelConfig(modelType, initModelId));\r\n\r\n    const [root, setRoot] = useState(getInitRoot(initRootId));\r\n    const [model, setModel] = useState(getNewModel(modelType.id, modelConfig.modelId, root.modelId));\r\n\r\n    return {\r\n        modelType,\r\n        setModelType,\r\n        modelConfig,\r\n        setModelConfig,\r\n        root,\r\n        setRoot,\r\n        model,\r\n        setModel\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport { FRETBOARD_TUNING_VALUES, TuningId } from \"../../../viewers/fretboard/Fretboard.tuning\";\r\nimport { DEFAULT_FRETBOARD_PROPS } from \"../../../viewers/fretboard/Fretboard.utils\";\r\nimport { VoicingId, VOICING_PRESETS } from \"../../../viewers/fretboard/Fretboard.voicing\";\r\nimport DropdownInput from \"../../inputs/DropdownInput\";\r\nimport NumericInput from \"../../inputs/NumericInput\";\r\nimport Card, { CardHeader } from \"../../ui/Card\";\r\nimport InputRow from \"../../ui/InputRow\";\r\n\r\nconst StyledFretboardCol = styled.div`\r\n    .header:not(:first-child) {\r\n        margin-top: 16px;\r\n    }\r\n`;\r\n\r\nconst VOICING_OPTIONS = [\r\n    {\r\n        id: VoicingId.None,\r\n        name: '---',\r\n        value: undefined\r\n    },\r\n    ...VOICING_PRESETS\r\n];\r\n\r\nexport interface IFretboardColProps {\r\n    voicing;\r\n    tuning;\r\n    fretRange;\r\n    setVoicing;\r\n    setTuning;\r\n    setFretRange;\r\n    model;\r\n}\r\n\r\nexport const DEFAULT_VOICING = VOICING_OPTIONS[0];\r\nexport const DEFAULT_TUNING = FRETBOARD_TUNING_VALUES[0];\r\nexport const DEFAULT_FRET_RANGE = DEFAULT_FRETBOARD_PROPS.fretRange;\r\n\r\nconst FretboardCol: React.FC<IFretboardColProps> = ({ model, voicing, tuning, fretRange, setVoicing, setTuning, setFretRange }) => {\r\n\r\n    const filteredVoicings = VOICING_OPTIONS.filter(v => {\r\n        if (!v.value) return true;\r\n        const containsNonModelIntervals = v.value.some(x => x && !model.intervals.find(ivl => ivl.pod[1] + 1 === x));\r\n        return !containsNonModelIntervals;\r\n    });\r\n\r\n    const [fretLo, fretHi] = fretRange;\r\n\r\n    return (\r\n        <StyledFretboardCol>\r\n            <CardHeader title=\"Tuning\" />\r\n            <ul>\r\n                <li>\r\n                    <InputRow label=\"Preset\">\r\n                        <DropdownInput value={tuning} setValue={setTuning} options={FRETBOARD_TUNING_VALUES} />\r\n                    </InputRow>\r\n                </li>\r\n                {tuning.id === TuningId.Standard &&\r\n                    <li>\r\n                        <InputRow label=\"Voicing\">\r\n                            <DropdownInput value={voicing} setValue={setVoicing} options={filteredVoicings} />\r\n                        </InputRow>\r\n                    </li>\r\n                }\r\n            </ul>\r\n            <CardHeader title=\"Range\" />\r\n            <ul>\r\n                <li>\r\n                    <InputRow label=\"Low Fret\">\r\n                        <NumericInput value={fretLo} min={0} max={fretHi} setValue={v => setFretRange([v, fretHi])} />\r\n                    </InputRow>\r\n                </li>\r\n                <li>\r\n                    <InputRow label=\"High Fret\">\r\n                        <NumericInput value={fretHi} min={fretLo} max={24} setValue={v => setFretRange([fretLo, v])} />\r\n                    </InputRow>\r\n                </li>\r\n            </ul>\r\n        </StyledFretboardCol>\r\n    );\r\n};\r\n\r\nexport default FretboardCol;\r\n","import React, { useState } from \"react\";\r\nimport styled from 'styled-components';\r\nimport Fretboard from \"../../../viewers/fretboard/Fretboard\";\r\nimport ColumnManager, { StyledColumnManager } from \"../../column-manager/ColumnManager\";\r\nimport ButtonInput from \"../../inputs/ButtonInput\";\r\nimport PageTitle from \"../../layout/PageTitle\";\r\nimport { StyledCard } from \"../../ui/Card\";\r\nimport Icon from \"../../ui/Icon\";\r\nimport DetailsCol from \"./DetailsCol\";\r\nimport FretboardCol, { DEFAULT_FRET_RANGE, DEFAULT_TUNING, DEFAULT_VOICING } from \"./FretboardCol\";\r\nimport MainCol from \"./MainCol\";\r\nimport NotesCol from \"./NotesCol\";\r\nimport TabCard from \"./TabCard\";\r\nimport useModelQueryParams from \"./useModelQueryParams\";\r\nimport { useModelState } from \"./useModelState\";\r\n\r\nconst StyledFretboardPage = styled.div`\r\n    min-height: 95vh;\r\n    padding: 16px;\r\n    .maximize {\r\n        background-color: transparent !important;\r\n    }\r\n\r\n    ${StyledColumnManager} {\r\n        & > div > ${StyledCard}:not(:last-child) {\r\n            margin-bottom: 16px;\r\n        }\r\n    }\r\n\r\n    ${StyledColumnManager} {\r\n        margin-top: 16px;\r\n    }\r\n`;\r\n\r\nconst FretboardPage: React.FC = () => {\r\n\r\n    const [qpModelType, qpModelId, qpRootId] = useModelQueryParams();\r\n    const modelState = useModelState(qpModelType, qpModelId, qpRootId);\r\n    const {\r\n        modelType,\r\n        setModelType,\r\n        modelConfig,\r\n        setModelConfig,\r\n        root,\r\n        setRoot,\r\n        model,\r\n        setModel\r\n    } = modelState;\r\n\r\n    const [voicing, setVoicing] = useState(DEFAULT_VOICING);\r\n    const [tuning, setTuning] = useState(DEFAULT_TUNING);\r\n    const [fretRange, setFretRange] = useState(DEFAULT_FRET_RANGE);\r\n    const [isFullScreen, setIsFullScreen] = useState(false);\r\n\r\n    const instrumentColProps = {\r\n        model,\r\n        voicing,\r\n        setVoicing,\r\n        tuning,\r\n        setTuning,\r\n        fretRange,\r\n        setFretRange\r\n    }\r\n\r\n    const notesColProps = {\r\n        modelType,\r\n        setModelType,\r\n        modelConfig,\r\n        setModelConfig,\r\n        root,\r\n        setRoot,\r\n        model,\r\n        setModel,\r\n        instrumentName: 'Guitar',\r\n        instrumentTuning: instrumentColProps.tuning.name\r\n    }\r\n\r\n    const mainColProps = {\r\n        isFullScreen,\r\n        setIsFullScreen,\r\n        viewer: <Fretboard\r\n            {...instrumentColProps}\r\n            {...notesColProps}\r\n            tuning={instrumentColProps.tuning.value}\r\n        />\r\n    };\r\n\r\n    return (\r\n        <StyledFretboardPage>\r\n            <PageTitle title=\"Fretboard\" subtitle={model.name}\r\n                action={\r\n                    <ButtonInput className=\"maximize\" onClick={() => setIsFullScreen(true)}>\r\n                        <Icon iconId=\"maximize\" size={24} />\r\n                    </ButtonInput>\r\n                }\r\n            />\r\n            <ColumnManager desktop={[\"1fr\", \"1fr\"]}>\r\n                <MainCol {...mainColProps} />\r\n                <TabCard\r\n                    tabs={[\r\n                        {\r\n                            text: 'Summary',\r\n                            content: <DetailsCol {...notesColProps} />\r\n                        },\r\n                        {\r\n                            text: 'Notes',\r\n                            content: <NotesCol {...notesColProps} />\r\n                        },\r\n                        {\r\n                            text: 'Instrument',\r\n                            content: <FretboardCol {...instrumentColProps} />\r\n                        }\r\n                    ]}\r\n                />\r\n            </ColumnManager>\r\n        </StyledFretboardPage>\r\n    );\r\n};\r\n\r\nexport default FretboardPage;\r\n","import FretboardPage from \"../../components/pages/view/FretboardPage\";\r\n\r\nexport default FretboardPage;\r\n"],"names":["StyledColumnManager","styled","$tablet","join","$desktop","children","tablet","desktop","React","StyledNumbericInput","theme","utils","border","status","interactive","active","highlight","value","setValue","rest","ButtonInput","onClick","newVal","min","Math","max","Icon","iconId","size","type","onChange","getModelRoute","modelType","modelId","rootId","StyledDetailsCol","props","text","secondary","modelConfig","root","model","setModelType","setModelConfig","setRoot","instrumentName","setModel","instrumentTuning","className","Link","to","id","name","notes","map","note","i","key","intervals","getName","StyledOverlay","StyledContainer","StyledCard","setIsOpen","Card","draggable","StyledMainCol","viewer","isFullScreen","setIsFullScreen","Modal","StyledNotesCol","MODEL_TYPE_OPTIONS","ModelType","data","CHORD_PRESETS","SCALE_PRESETS","DEFAULT_MODEL_TYPE","DEFAULT_MODEL_CONFIG","DEFAULT_ROOT","NOTE_PRESETS","getNewModel","newModel","Chord","Note","Scale","_setModelType","_setModelConfig","_setRoot","modelOptions","CardHeader","title","InputRow","label","DropdownInput","newRoot","options","idProperty","config","StyledTabCard","withConfig","surface","card","action","primary","tabs","useState","index","setIndex","t","content","useQueryParam","useModelState","initModelType","initModelId","initRootId","qpModelType","qpRootId","qpModelId","find","preset","getInitModelConfig","StyledFretboardCol","VOICING_OPTIONS","VoicingId","undefined","VOICING_PRESETS","DEFAULT_VOICING","DEFAULT_TUNING","FRETBOARD_TUNING_VALUES","DEFAULT_FRET_RANGE","DEFAULT_FRETBOARD_PROPS","voicing","tuning","fretRange","setVoicing","setTuning","setFretRange","filteredVoicings","filter","v","some","x","ivl","pod","fretLo","fretHi","TuningId","NumericInput","StyledFretboardPage","useModelQueryParams","modelState","instrumentColProps","notesColProps","mainColProps","Fretboard","PageTitle","subtitle","ColumnManager","MainCol","TabCard","DetailsCol","NotesCol","FretboardCol"],"sourceRoot":""}