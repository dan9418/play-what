{"version":3,"file":"component---src-components-pages-browse-scales-page-tsx-3ac35665a5bb24547979.js","mappings":"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","sources":["webpack://play-what/./src/components/collection/CollectionCard.tsx","webpack://play-what/./src/components/collection/CollectionTable.tsx","webpack://play-what/./src/components/column-manager/ColumnManager.tsx","webpack://play-what/./src/components/pages/browse/scales.page.tsx","webpack://play-what/./src/components/ui/Card.tsx","webpack://play-what/./src/components/ui/List.styles.tsx","webpack://play-what/./src/components/ui/List.tsx","webpack://play-what/./src/components/ui/Table.tsx","webpack://play-what/./src/core/routing/Routing.utils.ts"],"sourcesContent":["import { Link } from \"gatsby\";\r\nimport React from \"react\";\r\nimport { useRootSuffix } from \"../../contexts/PagePropsContext\";\r\nimport Chord from \"../../core/models/Chord\";\r\nimport { CHORD_PRESETS, SCALE_PRESETS } from \"../../core/models/Model.presets\";\r\nimport Scale from \"../../core/models/Scale\";\r\nimport Card from \"../ui/Card\";\r\nimport CollectionTable, { ICollectionTableProps } from \"./CollectionTable\";\r\n\r\nconst CollectionCard: React.FC<any> = ({ title, data }) => {\r\n    return (\r\n        <Card title={title} >\r\n            <CollectionTable data={data} />\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default CollectionCard;\r\n","import React from \"react\";\r\nimport { css } from \"styled-components\";\r\nimport { useRoot, useRootId } from \"../../contexts/PagePropsContext\";\r\nimport Chord from \"../../core/models/Chord\";\r\nimport {\r\n  IModelConfig,\r\n  ModelType,\r\n  NoteId,\r\n} from \"../../core/models/Model.constants\";\r\nimport Note from \"../../core/models/Note\";\r\nimport Scale from \"../../core/models/Scale\";\r\nimport { getModelRoute } from \"../../core/routing/Routing.utils\";\r\nimport { Table } from \"../ui/Table\";\r\n\r\nconst tableStyles = css`\r\n  width: 100%;\r\n  margin: auto;\r\n  border-collapse: collapse;\r\n  white-space: nowrap;\r\n\r\n  td {\r\n    &:not(:first-child) {\r\n      font-size: 80%;\r\n    }\r\n  }\r\n\r\n  td,\r\n  th {\r\n    line-height: 32px;\r\n    text-align: center;\r\n\r\n    &:not(:first-child) {\r\n      width: 32px;\r\n      height: 32px;\r\n\r\n      display: none;\r\n      @media (min-width: 512px) {\r\n        display: table-cell;\r\n      }\r\n    }\r\n\r\n    &:first-child {\r\n      text-align: left;\r\n      padding: 0 8px;\r\n    }\r\n  }\r\n\r\n  td {\r\n    //border-right: 1px solid ${(props) => props.theme.utils.border};\r\n    //border-bottom: 1px solid ${(props) => props.theme.utils.border};\r\n    &.active {\r\n      background-color: ${(props) => props.theme.surface.bg};\r\n    }\r\n  }\r\n\r\n  thead {\r\n    text-transform: uppercase;\r\n    font-size: 80%;\r\n\r\n    @media (max-width: 511px) {\r\n      display: none;\r\n    }\r\n    tr th {\r\n      background-color: ${(props) => props.theme.surface.nav};\r\n      color: ${({ theme }) => theme.text.inverted};\r\n    }\r\n\r\n    th:first-child {\r\n      border-radius: 8px 0 0 8px;\r\n    }\r\n    th:last-child {\r\n      border-radius: 0 8px 8px 0;\r\n    }\r\n  }\r\n\r\n  a {\r\n    display: block;\r\n  }\r\n`;\r\n\r\nexport interface ICollectionTableProps {\r\n  data: IModelConfig[];\r\n  semitones?: number[];\r\n}\r\n\r\nconst SEMITONES = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\r\n\r\nconst getSemitoneCol = (\r\n  model: Chord | Scale,\r\n  h: number,\r\n  semitones: number[],\r\n  root?: Note\r\n) => {\r\n  const index = model.intervals.findIndex((ivl) => ivl.pod[0] + 1 === h);\r\n  const className = semitones.includes(h) ? \"active\" : undefined;\r\n  if (index < 0) {\r\n    return {\r\n      className,\r\n      content: \"\",\r\n    };\r\n  }\r\n  const mod = root ? (model.notes as Note[])[index] : model.intervals[index];\r\n  return {\r\n    className,\r\n    content: mod.getName(),\r\n  };\r\n};\r\n\r\nconst CollectionTable: React.FC<ICollectionTableProps> = ({\r\n  data,\r\n  semitones = [],\r\n}) => {\r\n  const rootId = useRootId();\r\n  const root = useRoot();\r\n  return (\r\n    <Table\r\n      styles={tableStyles}\r\n      thead={[\r\n        {\r\n          cols: [\r\n            \"Name\",\r\n            {\r\n              colSpan: 12,\r\n              content: root ? \"Notes\" : \"Intervals\",\r\n            },\r\n          ],\r\n        },\r\n      ]}\r\n      tbody={data.map((d, i) => {\r\n        const cl = d.modelType === ModelType.Chord ? Chord : Scale;\r\n        // @ts-ignore\r\n        const model = new cl(d.modelId, { root });\r\n        return {\r\n          cols: [\r\n            {\r\n              link: getModelRoute(\r\n                model.modelType,\r\n                model.modelId,\r\n                rootId as NoteId\r\n              ),\r\n              content: model.getName(),\r\n            },\r\n            ...SEMITONES.map((h, i) =>\r\n              getSemitoneCol(model, h, semitones, root)\r\n            ),\r\n          ],\r\n        };\r\n      })}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CollectionTable;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledColumnManager = styled.div`\r\n    display: grid;\r\n    gap: 16px;\r\n    grid-template-columns: 1fr;\r\n\r\n    ${({ $tablet }) => $tablet ? `\r\n        @media(min-width: 512px) {\r\n            grid-template-columns: ${$tablet.join(' ')}\r\n        }\r\n    ` : ''}\r\n\r\n    ${({ $desktop }) => $desktop ? `\r\n        @media(min-width: 1024px) {\r\n            grid-template-columns: ${$desktop.join(' ')}\r\n        }\r\n    ` : ``}\r\n   \r\n`;\r\n\r\nexport interface IColumnManagerProps {\r\n    tablet?: string[];\r\n    desktop?: string[];\r\n}\r\n\r\nconst ColumnManager: React.FC<any> = ({ children, tablet, desktop }) => {\r\n    return (\r\n        <StyledColumnManager $tablet={tablet} $desktop={desktop}>\r\n            {children}\r\n        </StyledColumnManager >\r\n    );\r\n};\r\n\r\nexport default ColumnManager;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useRootId } from \"../../../contexts/PagePropsContext\";\r\nimport {\r\n  ModelType,\r\n  NoteId,\r\n  ScaleId,\r\n} from \"../../../core/models/Model.constants\";\r\nimport { SCALE_PRESETS } from \"../../../core/models/Model.presets\";\r\nimport { getModelRoute } from \"../../../core/routing/Routing.utils\";\r\nimport CollectionCard from \"../../collection/CollectionCard\";\r\nimport ColumnManager from \"../../column-manager/ColumnManager\";\r\nimport PageLayout from \"../../layout/PageLayout\";\r\nimport Card from \"../../ui/Card\";\r\nimport { SimpleList } from \"../../ui/List\";\r\n\r\nconst StyledScalesPage = styled(PageLayout)`\r\n  .intro {\r\n    padding: 0 16px;\r\n    margin-bottom: 16px;\r\n  }\r\n\r\n  h3,\r\n  p {\r\n    margin: 16px 0;\r\n  }\r\n`;\r\n\r\nconst ScalesPage: React.FC<any> = (props) => {\r\n  const rootId = useRootId();\r\n\r\n  return (\r\n    <StyledScalesPage title=\"Scales\" subtitle=\"The foundation of melody\">\r\n      <div>\r\n        <p className=\"intro\">\r\n          A scale is a collection of musical notes, which are generally played\r\n          sequentially and ordered by pitch. Scales are defined by their first\r\n          note (the <em>root</em>) and its relationship to the following notes (\r\n          <em>intervals</em>).\r\n        </p>\r\n        <p className=\"intro\">\r\n          In their most common form, scales contain seven notes spanning a\r\n          single octave. These seven <em>degrees</em> are lettered A-G.\r\n        </p>\r\n        <h2>Modes</h2>\r\n        <p className=\"intro\">\r\n          A <em>mode</em> is simply a rotation of any given scale.\r\n        </p>\r\n        {/*<h3>Types of Scales</h3>\r\n                    <ul>\r\n                        <li><a href=\"#diatonic\">Diatonic</a></li>\r\n                        <li><a href=\"#pentatonic\">Pentatonic</a></li>\r\n                        <li><a href=\"#blues\">Blues</a></li>\r\n                        <li><a href=\"#bebop\">Bebop</a></li>\r\n                    ]} />*/}\r\n      </div>\r\n      <ColumnManager desktop={[\"2fr\", \"1fr\"]}>\r\n        <ColumnManager>\r\n          <CollectionCard title=\"All Scales\" data={SCALE_PRESETS} />\r\n        </ColumnManager>\r\n        <ColumnManager>\r\n          <Card title=\"Common Scales\" id=\"common\">\r\n            <SimpleList\r\n              items={[\r\n                [\r\n                  \"Major (Ionian)\",\r\n                  getModelRoute(ModelType.Scale, ScaleId.Ionian, rootId),\r\n                ],\r\n                [\r\n                  \"Natural Minor (Aeolian)\",\r\n                  getModelRoute(ModelType.Scale, ScaleId.Aeolian, rootId),\r\n                ],\r\n                [\r\n                  \"Melodic Minor\",\r\n                  getModelRoute(ModelType.Scale, ScaleId.MelodicMinor, rootId),\r\n                ],\r\n                [\r\n                  \"Harmonic Minor\",\r\n                  getModelRoute(ModelType.Scale, ScaleId.HarmonicMinor, rootId),\r\n                ],\r\n                [\r\n                  \"Major Pentatonic\",\r\n                  getModelRoute(\r\n                    ModelType.Scale,\r\n                    ScaleId.MajorPentatonic,\r\n                    rootId\r\n                  ),\r\n                ],\r\n                [\r\n                  \"Minor Pentatonic\",\r\n                  getModelRoute(\r\n                    ModelType.Scale,\r\n                    ScaleId.MinorPentatonic,\r\n                    rootId\r\n                  ),\r\n                ],\r\n              ]}\r\n            />\r\n          </Card>\r\n          <Card title=\"Diatonic Modes\" id=\"diatonic\">\r\n            <p>\r\n              Diatonic scales are by far the most common type in Western music.\r\n              They are defined by a specific sequence of seven intervals\r\n              containing five whole-steps and two half-steps. The most common\r\n              form of the diatonic scale is the Major scale (AKA the Ionian\r\n              mode), which follows the pattern W-W-W-H-W-W-H.\r\n            </p>\r\n            <h3>Examples</h3>\r\n            <SimpleList\r\n              items={[\r\n                [\r\n                  \"Ionian\",\r\n                  getModelRoute(ModelType.Scale, ScaleId.Ionian, rootId),\r\n                ],\r\n                [\r\n                  \"Dorian\",\r\n                  getModelRoute(ModelType.Scale, ScaleId.Dorian, rootId),\r\n                ],\r\n                [\r\n                  \"Phrygian\",\r\n                  getModelRoute(ModelType.Scale, ScaleId.Phrygian, rootId),\r\n                ],\r\n                [\r\n                  \"Lydian\",\r\n                  getModelRoute(ModelType.Scale, ScaleId.Lydian, rootId),\r\n                ],\r\n                [\r\n                  \"Mixolydian\",\r\n                  getModelRoute(ModelType.Scale, ScaleId.Mixolydian, rootId),\r\n                ],\r\n                [\r\n                  \"Aeolian\",\r\n                  getModelRoute(ModelType.Scale, ScaleId.Aeolian, rootId),\r\n                ],\r\n                [\r\n                  \"Locrian\",\r\n                  getModelRoute(ModelType.Scale, ScaleId.Locrian, rootId),\r\n                ],\r\n              ]}\r\n            />\r\n          </Card>\r\n          <Card title=\"Harmonic Minor Modes\" id=\"harmonic\">\r\n            <p>\r\n              The Harmonic Minor scale is a slight variation of the Natural\r\n              Minor scale (which itself is just a mode of the Diatonic scale).\r\n              The only difference is that the seventh degree is raised a\r\n              half-step, creating a Major 7th interval instead of a Minor 7th.\r\n              This slight variation to the diatonic scale creates seven more\r\n              unique modes.\r\n            </p>\r\n            <h3>Examples</h3>\r\n            <SimpleList\r\n              items={[\r\n                [\r\n                  \"Harmonic Minor\",\r\n                  getModelRoute(ModelType.Scale, ScaleId.Ionian, rootId),\r\n                ],\r\n                [\r\n                  \"Locrian 6\",\r\n                  getModelRoute(ModelType.Scale, ScaleId.Locrian6, rootId),\r\n                ],\r\n                [\r\n                  \"Ionian #5\",\r\n                  getModelRoute(ModelType.Scale, ScaleId.IonianSharp5, rootId),\r\n                ],\r\n                [\r\n                  \"Dorian #4\",\r\n                  getModelRoute(ModelType.Scale, ScaleId.DorianSharp4, rootId),\r\n                ],\r\n                [\r\n                  \"Phrygian Dominant\",\r\n                  getModelRoute(\r\n                    ModelType.Scale,\r\n                    ScaleId.PhrygianDominant,\r\n                    rootId\r\n                  ),\r\n                ],\r\n                [\r\n                  \"Lydian #2\",\r\n                  getModelRoute(ModelType.Scale, ScaleId.LydianSharp2, rootId),\r\n                ],\r\n                [\r\n                  \"Super Locrian bb7\",\r\n                  getModelRoute(\r\n                    ModelType.Scale,\r\n                    ScaleId.SuperLocrianDoubleFlat7,\r\n                    rootId\r\n                  ),\r\n                ],\r\n              ]}\r\n            />\r\n          </Card>\r\n          <Card title=\"Melodic Minor Modes\" id=\"melodic\">\r\n            <p>\r\n              The Melodic Minor scale is formed by making one additional change\r\n              to the Harmonic Minor scale. We simply raise the sixth degree by a\r\n              half-step, creating a Major 6th interval instead of a Major 7th.\r\n              This variation also creates seven unique modes.\r\n            </p>\r\n            <h3>Examples</h3>\r\n            <SimpleList\r\n              items={[\r\n                [\r\n                  \"Melodic Minor\",\r\n                  getModelRoute(ModelType.Scale, ScaleId.MelodicMinor, rootId),\r\n                ],\r\n                [\r\n                  \"Dorian b2\",\r\n                  getModelRoute(ModelType.Scale, ScaleId.DorianFlat2, rootId),\r\n                ],\r\n                [\r\n                  \"Lydian #5\",\r\n                  getModelRoute(ModelType.Scale, ScaleId.LydianSharp5, rootId),\r\n                ],\r\n                [\r\n                  \"Lydian Dominant\",\r\n                  getModelRoute(\r\n                    ModelType.Scale,\r\n                    ScaleId.LydianDominiant,\r\n                    rootId\r\n                  ),\r\n                ],\r\n                [\r\n                  \"Mixolydian b6\",\r\n                  getModelRoute(\r\n                    ModelType.Scale,\r\n                    ScaleId.MixolydianFlatSix,\r\n                    rootId\r\n                  ),\r\n                ],\r\n                [\r\n                  \"Aeolian b5\",\r\n                  getModelRoute(ModelType.Scale, ScaleId.AeolianFlat5, rootId),\r\n                ],\r\n                [\r\n                  \"Super Locrian (Altered)\",\r\n                  getModelRoute(ModelType.Scale, ScaleId.SuperLocrian, rootId),\r\n                ],\r\n              ]}\r\n            />\r\n          </Card>\r\n          <Card title=\"Pentatonic Modes\" id=\"pentatonic\">\r\n            <p>\r\n              Pentatonic scales contain only five notes and are often a subset\r\n              of diatonic scales. For example, the Major Pentatonic scale is the\r\n              same as a Major Diatonic scale without the 4th and 7th degrees.\r\n            </p>\r\n            <h3>Examples</h3>\r\n            <SimpleList\r\n              items={[\r\n                [\r\n                  \"Major Pentatonic\",\r\n                  getModelRoute(\r\n                    ModelType.Scale,\r\n                    ScaleId.MajorPentatonic,\r\n                    rootId\r\n                  ),\r\n                ],\r\n                [\r\n                  \"Egyptian\",\r\n                  getModelRoute(ModelType.Scale, ScaleId.Egyptian, rootId),\r\n                ],\r\n                [\r\n                  \"Man Gong\",\r\n                  getModelRoute(ModelType.Scale, ScaleId.ManGong, rootId),\r\n                ],\r\n                [\r\n                  \"Ritusen\",\r\n                  getModelRoute(ModelType.Scale, ScaleId.Ritusen, rootId),\r\n                ],\r\n                [\r\n                  \"Minor Pentatonic\",\r\n                  getModelRoute(\r\n                    ModelType.Scale,\r\n                    ScaleId.MinorPentatonic,\r\n                    rootId\r\n                  ),\r\n                ],\r\n              ]}\r\n            />\r\n          </Card>\r\n          <Card title=\"Blues Scales\" id=\"blues\">\r\n            <p>Blues scales are pentatonic scales with an extra \"blue\" note.</p>\r\n            <h3>Examples</h3>\r\n            <SimpleList\r\n              items={[\r\n                [\r\n                  \"Major Blues\",\r\n                  getModelRoute(ModelType.Scale, ScaleId.MajorBlues, rootId),\r\n                ],\r\n                [\r\n                  \"Minor Blues\",\r\n                  getModelRoute(ModelType.Scale, ScaleId.MinorBlues, rootId),\r\n                ],\r\n              ]}\r\n            />\r\n          </Card>\r\n          <Card title=\"Bebop Scales\" id=\"bebop\">\r\n            <p>\r\n              Bebop scales are diatonic scales with an extra chomatic passing\r\n              note.\r\n            </p>\r\n            <h3>Examples</h3>\r\n            <SimpleList\r\n              items={[\r\n                [\r\n                  \"Major Bebop\",\r\n                  getModelRoute(ModelType.Scale, ScaleId.MajorBebop, rootId),\r\n                ],\r\n                [\r\n                  \"Dominant Bebop\",\r\n                  getModelRoute(ModelType.Scale, ScaleId.DominantBebop, rootId),\r\n                ],\r\n              ]}\r\n            />\r\n          </Card>\r\n        </ColumnManager>\r\n      </ColumnManager>\r\n    </StyledScalesPage>\r\n  );\r\n};\r\n\r\nexport default ScalesPage;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledCard = styled.div`\r\n    background: ${props => props.theme.surface.card};\r\n    width: 100%;\r\n    border-radius: 16px;\r\n    padding: 16px;\r\n\r\n    .header {\r\n        margin-bottom: 16px;\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 8px;\r\n        justify-content: space-between;\r\n    }\r\n`;\r\n\r\nexport const CardHeader: React.FC<any> = ({ title, level = 2, action = null }) => {\r\n    const AsTag: any = `h${level}`;\r\n    return (\r\n        <div className=\"header\">\r\n            <AsTag>{title}</AsTag>\r\n            {action}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Card: React.FC<any> = ({ title, subtitle, action, children, level, ...rest }) => {\r\n    return (\r\n        <StyledCard {...rest}>\r\n            {title &&\r\n                <CardHeader title={title} action={action} level={level} />\r\n            }\r\n            {subtitle &&\r\n                <CardHeader title={subtitle} level={level + 1} />\r\n            }\r\n            {children}\r\n        </StyledCard >\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import { css } from 'styled-components';\r\n\r\nexport const LIST_STYLES_1 = css`\r\n    li {\r\n        margin-left: 8px;\r\n        &:not(:first-child) {\r\n            margin-top: 4px;\r\n        }\r\n    }\r\n    h1, h2, h3, h4, h5, h6, h7 {\r\n        font-weight: bold;\r\n    }\r\n    section {\r\n        margin-left: 8px;\r\n        &:not(:first-child) {\r\n            margin-top: 24px;\r\n        }\r\n    }\r\n    ul {\r\n        &:not(:first-child) {\r\n            margin-top: 8px;\r\n            margin-left: 8px;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const LIST_STYLES_2 = css`\r\n    li {\r\n        list-style-type: disc;\r\n        margin: 8px 0 8px 16px;\r\n    }\r\n`;\r\n","import { Link } from \"gatsby\";\r\nimport React from \"react\";\r\nimport { LIST_STYLES_2 } from \"./List.styles\";\r\n\r\nexport interface IListItem {\r\n    text: string;\r\n    link?: string;\r\n}\r\n\r\nexport interface IList {\r\n    title?: string;\r\n    subtitle?: string;\r\n    lists?: IList[];\r\n    items?: | IListItem[];\r\n}\r\n\r\nexport interface IListProps extends IList {\r\n    level?: number;\r\n    prefix?: string;\r\n    styles?: any;\r\n}\r\n\r\nconst Heading: React.FC<any> = ({ title, subtitle, level }) => {\r\n    const Title = `h${level}` as any;\r\n    const Subtitle = `h${level + 1}` as any;\r\n    return (\r\n        <>\r\n            {title && <Title>{title}</Title>}\r\n            {subtitle && <Subtitle>{subtitle}</Subtitle>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport const List: React.FC<IListProps> = ({ title, subtitle, items, lists, level = 1, prefix = '', styles }) => {\r\n    return (\r\n        // @ts-ignore\r\n        <section css={styles}>\r\n            <Heading title={title} subtitle={subtitle} level={level} />\r\n            <ul>\r\n                {items && items.length > 0 && (\r\n                    items.map(({ text, link }) => (\r\n                        <li key={text}>{\r\n                            link ? <Link to={`${prefix}${link}`}>{text}</Link> : text\r\n                        }</li>\r\n                    ))\r\n                )}\r\n                {lists && (\r\n                    <li>\r\n                        {lists.map(l => <List {...l} key={l.title} level={level + 1} prefix={prefix} />)}\r\n                    </li>\r\n                )}\r\n            </ul>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport const SimpleList: React.FC<{ items: (string | [string, string])[] }> = ({ items }) => {\r\n    const formattedItems: IListItem[] = items.map(item => {\r\n        if (Array.isArray(item)) {\r\n            const [text, link] = item;\r\n            return {\r\n                text,\r\n                link\r\n            }\r\n        }\r\n        return {\r\n            text: item\r\n        }\r\n    })\r\n    return (\r\n        <List items={formattedItems} styles={LIST_STYLES_2} />\r\n    );\r\n}\r\n","import { Link } from \"gatsby\";\r\nimport React, { Fragment, ReactNode } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledTable = styled.table``;\r\n\r\ntype TOmit = undefined | null | false;\r\n\r\nconst getIsTypeOmit = (data: any): data is TOmit =>\r\n  data === undefined || data === null || data === false;\r\n\r\n// Col\r\n\r\nexport interface IColConfig {\r\n  isHeader?: boolean;\r\n  content: any;\r\n  colSpan?: number;\r\n  className?: string;\r\n  link?: string;\r\n}\r\n\r\ninterface IColProps extends IColConfig {\r\n  index: number;\r\n}\r\n\r\ntype TCol = string | number | IColConfig | ReactNode;\r\n\r\nconst Col: React.FC<IColProps> = ({\r\n  index,\r\n  isHeader,\r\n  content,\r\n  colSpan,\r\n  className,\r\n  link,\r\n}) => {\r\n  const ColTag = isHeader ? \"th\" : \"td\";\r\n  const WrapperTag = link ? Link : Fragment;\r\n  const wrapperProps: any = link ? { to: link } : {};\r\n\r\n  return (\r\n    <ColTag colSpan={colSpan} className={className}>\r\n      <WrapperTag {...wrapperProps}>{content || \"\"}</WrapperTag>\r\n    </ColTag>\r\n  );\r\n};\r\n\r\n// Row\r\n\r\nexport interface IRowConfig {\r\n  cols: (TCol | TOmit)[];\r\n  className?: string;\r\n  isHeader?: boolean;\r\n  headerColIndicies?: number[];\r\n}\r\n\r\nconst getIsConfig = (col: TCol): col is IColConfig =>\r\n  typeof col === \"object\" && col !== null && col.hasOwnProperty(\"content\");\r\n\r\nconst Row: React.FC<IRowConfig> = ({\r\n  cols,\r\n  isHeader,\r\n  className,\r\n  headerColIndicies = [],\r\n}) => {\r\n  return (\r\n    <tr className={className}>\r\n      {cols.map((col: any, i) => {\r\n        if (getIsTypeOmit(col)) return null;\r\n        const isConfig = getIsConfig(col);\r\n        const colConfig = !isConfig ? { content: col } : col;\r\n        return (\r\n          <Col\r\n            key={i}\r\n            index={i}\r\n            isHeader={isHeader || headerColIndicies.includes(i)}\r\n            {...colConfig}\r\n          />\r\n        );\r\n      })}\r\n    </tr>\r\n  );\r\n};\r\n\r\n// Table Section\r\n\r\ninterface ITableSectionConfig {\r\n  Tag: \"thead\" | \"tfoot\" | \"tbody\";\r\n  rows: (IRowConfig | TOmit)[];\r\n  headerColIndicies?: number[];\r\n}\r\n\r\nconst TableSection: React.FC<ITableSectionConfig> = ({\r\n  Tag,\r\n  rows,\r\n  headerColIndicies,\r\n}) => (\r\n  <Tag>\r\n    {rows.map((row, i) => {\r\n      if (getIsTypeOmit(row)) return null;\r\n      return (\r\n        <Row\r\n          key={i}\r\n          isHeader={Tag !== \"tbody\"}\r\n          headerColIndicies={headerColIndicies}\r\n          {...row}\r\n        />\r\n      );\r\n    })}\r\n  </Tag>\r\n);\r\n\r\n// Table\r\n\r\ninterface IColGroup {\r\n  span?: number;\r\n  className?: string;\r\n}\r\n\r\nexport interface ITableConfig {\r\n  thead?: (IRowConfig | TOmit)[];\r\n  tfoot?: (IRowConfig | TOmit)[];\r\n  tbody: (IRowConfig | TOmit)[];\r\n  styles?: any;\r\n  caption?: string;\r\n  colGroups?: IColGroup[];\r\n  className?: string;\r\n  headerColIndicies?: number[];\r\n}\r\n\r\nexport const Table: React.FC<ITableConfig> = ({\r\n  thead,\r\n  tfoot,\r\n  tbody,\r\n  styles,\r\n  colGroups,\r\n  caption,\r\n  headerColIndicies,\r\n  className,\r\n}) => {\r\n  return (\r\n    <StyledTable css={styles} className={className}>\r\n      {colGroups && (\r\n        <colgroup>\r\n          {colGroups.map((cg, i) => (\r\n            <col key={i} {...cg} />\r\n          ))}\r\n        </colgroup>\r\n      )}\r\n      {caption && <caption>{caption}</caption>}\r\n      {thead && (\r\n        <TableSection\r\n          Tag=\"thead\"\r\n          rows={thead}\r\n          headerColIndicies={headerColIndicies}\r\n        />\r\n      )}\r\n      {tfoot && (\r\n        <TableSection\r\n          Tag=\"tfoot\"\r\n          rows={tfoot}\r\n          headerColIndicies={headerColIndicies}\r\n        />\r\n      )}\r\n      {tbody && (\r\n        <TableSection\r\n          Tag=\"tbody\"\r\n          rows={tbody}\r\n          headerColIndicies={headerColIndicies}\r\n        />\r\n      )}\r\n    </StyledTable>\r\n  );\r\n};\r\n","import { ModelId, ModelType, NoteId } from \"../models/Model.constants\";\r\n\r\nexport const getModelRoute = (\r\n  modelType: ModelType,\r\n  modelId?: ModelId,\r\n  rootId?: NoteId\r\n) => {\r\n  const modelSuffix = modelId ? `/${modelId}` : \"\";\r\n  const rootSuffix = rootId ? `/root/${rootId}` : \"\";\r\n\r\n  return `/browse/${modelType}${modelSuffix}${rootSuffix}/`;\r\n};\r\n"],"names":["title","data","React","Card","CollectionTable","tableStyles","css","props","theme","surface","bg","nav","text","inverted","SEMITONES","semitones","rootId","useRootId","root","useRoot","Table","styles","thead","cols","colSpan","content","tbody","map","d","i","model","modelType","ModelType","Chord","Scale","modelId","link","getModelRoute","getName","h","index","intervals","findIndex","ivl","pod","className","includes","undefined","notes","getSemitoneCol","StyledColumnManager","styled","$tablet","join","$desktop","children","tablet","desktop","StyledScalesPage","PageLayout","displayName","componentId","subtitle","ColumnManager","CollectionCard","SCALE_PRESETS","id","SimpleList","items","ScaleId","StyledCard","card","CardHeader","level","action","AsTag","rest","LIST_STYLES_1","LIST_STYLES_2","Heading","Title","Subtitle","List","lists","prefix","length","key","Link","to","l","formattedItems","item","Array","isArray","StyledTable","getIsTypeOmit","Col","isHeader","ColTag","WrapperTag","Fragment","wrapperProps","Row","headerColIndicies","col","isConfig","hasOwnProperty","getIsConfig","colConfig","TableSection","Tag","rows","row","tfoot","colGroups","caption","cg"],"sourceRoot":""}