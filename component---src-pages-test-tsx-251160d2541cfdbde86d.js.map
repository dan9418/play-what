{"version":3,"file":"component---src-pages-test-tsx-251160d2541cfdbde86d.js","mappings":"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","sources":["webpack://play-what/./src/components/_shared/layout/PageBody.tsx","webpack://play-what/./src/core/models/Interval.ts","webpack://play-what/./src/components/test/AllIntervalsFromAllRoots.tsx","webpack://play-what/./src/components/test/TestPage.tsx","webpack://play-what/./src/pages/test.tsx"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const StyledPageBody = styled.div`\r\n\twidth: 100%;\r\n\t//max-width: 1920px;\r\n\tmax-width: 1024px;\r\n\tmin-height: calc(100vh - 96px);\r\n    \r\n\tmargin: auto;\r\n\tpadding: 16px;\r\n`\r\n","import { DEFAULT_DEGREE_COLOR_SCHEME } from \"../theory/Degree.constants\";\r\nimport TuningUtils from \"../tuning/Tuning.utils\";\r\nimport Model from \"./Model\";\r\nimport { IntervalId, INTERVAL_QUALITY, IPod } from './Model.constants';\r\nimport { CHORD_PRESETS, CORE_INTERVALS, INTERVAL_PRESETS, INTERVAL_PRESET_MAP, SCALE_PRESETS } from './Model.presets';\r\nimport Pod from \"./Pod\";\r\nimport { arePodsEqual, listContainsSubset, reducePod } from \"./Pod.static\";\r\n\r\nexport default class IntervalSpan extends Pod {\r\n\r\n    id: IntervalId;\r\n    offset: number;\r\n\r\n    constructor(id: IntervalId) {\r\n        super(INTERVAL_PRESET_MAP.get(id));\r\n    }\r\n\r\n    static fromValue = (value: IPod) => Model.fromValue(INTERVAL_PRESETS, IntervalSpan, value, arePodsEqual, reducePod);\r\n\r\n    getColor(): string | undefined {\r\n        return this.equals(new IntervalSpan(IntervalId.P1)) ?\r\n            'red' : '#333';\r\n\r\n        return DEFAULT_DEGREE_COLOR_SCHEME[this.pod[1]];\r\n    }\r\n\r\n    getName() {\r\n        const reduced = reducePod(this.pod);\r\n\r\n        const [noteIndex, d] = reduced;\r\n        const degreeIntervals = CORE_INTERVALS[d];\r\n        if (!degreeIntervals) return '?';\r\n\r\n        const pIvl = degreeIntervals[0];\r\n        const loIvl = pIvl;\r\n        const hiIvl = degreeIntervals[degreeIntervals.length - 1];\r\n\r\n        // determine core interval and quality\r\n        let ivl = null;\r\n        let quality = null;\r\n        if (degreeIntervals.length === 1) {\r\n            ivl = pIvl; // perfect\r\n            quality = INTERVAL_QUALITY.perfect;\r\n        }\r\n        else if (noteIndex <= loIvl.value[0]) {\r\n            ivl = loIvl; // minor\r\n            quality = INTERVAL_QUALITY.min;\r\n        }\r\n        else if (noteIndex >= hiIvl.value[0]) {\r\n            ivl = hiIvl; // major\r\n            quality = INTERVAL_QUALITY.maj;\r\n        }\r\n\r\n        const offset = ivl.value[0] - reduced[0];\r\n\r\n        this.offset = offset;\r\n\r\n        if (offset === 0) return `${quality.symbol}${d + 1}`;\r\n        else if (offset > 0) quality = INTERVAL_QUALITY.dim; // dim\r\n        else if (offset < 0) quality = INTERVAL_QUALITY.aug; // aug\r\n\r\n        const count = Math.abs(offset);\r\n        const qualityStr = quality.symbol.repeat(count);\r\n\r\n        const value = `${qualityStr}${d + 1}`;\r\n\r\n        /*if (isExtended) {\r\n            console.log('x', value);\r\n            if (value === 'm2') value = 'b9'\r\n            else if (value === 'M2') value = '9'\r\n            else if (value === 'm3') value = '#9'\r\n            else if (value === 'M3') value = 'b11'\r\n            else if (value === 'P4') value = '11'\r\n            else if (value === 'A4' || value === 'd5') value = '#11'\r\n            else if (value === 'm6') value = 'b13'\r\n            else if (value === 'M6') value = '13'\r\n            else if (value === 'm7') value = '#13'\r\n        }*/\r\n\r\n        return value;\r\n    }\r\n\r\n    getRatio() {\r\n        const [p] = this.pod;\r\n\r\n        const baseline = TuningUtils.getFrequency(0);\r\n        const compareTo = TuningUtils.getFrequency(p);\r\n\r\n        const ratio = compareTo / baseline;\r\n\r\n        return `1:${ratio.toFixed(2)}`;\r\n    }\r\n\r\n    isInSuperset(superset: IPod[]) {\r\n        if (superset.length <= 1) return false;\r\n        return listContainsSubset(superset, [this.pod]);\r\n    }\r\n\r\n    getSupersets() {\r\n        const result = [];\r\n\r\n        const chords = CHORD_PRESETS.filter(preset =>\r\n            this.isInSuperset(preset.value)\r\n        );\r\n\r\n        if (chords.length) {\r\n            result.push({\r\n                modelName: 'Chords',\r\n                values: chords\r\n            });\r\n        }\r\n\r\n        const scales = SCALE_PRESETS.filter(preset =>\r\n            this.isInSuperset(preset.value)\r\n        );\r\n\r\n        if (scales.length) {\r\n            result.push({\r\n                modelName: 'Scales',\r\n                values: scales\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n}\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport IntervalSpan from \"../../core/models/Interval\";\r\nimport { ACCIDENTAL_VALUES, IPod } from \"../../core/models/Model.constants\";\r\nimport { INTERVAL_PRESETS } from \"../../core/models/Model.presets\";\r\nimport Note from \"../../core/models/Note\";\r\nimport { addPods } from \"../../core/models/Pod.static\";\r\nimport { DEGREE_PRESETS } from \"../../core/theory/Degree.constants\";\r\nimport { DIATONIC_VALUES } from \"../../core/theory/Diatonic.constants\";\r\n\r\nconst FIRST_OCTAVE_INTERVALS = INTERVAL_PRESETS.filter(ivl => ivl.value[0] < 12);\r\nconst ACCIDENTALS = ACCIDENTAL_VALUES.filter(a => Math.abs(a.value) < 2);\r\nconst SHOW_PODS = false;\r\n\r\nconst StyledTest = styled.div`\r\n    height: 100%;\r\n    width: 100%;\r\n    overflow: auto; \r\n        \r\n    table {\r\n        border-collapse: collapse;\r\n\r\n        td, th {\r\n            border: 1px solid ${({ theme }) => theme.utils.border};\r\n\r\n            height: 40px;\r\n            width: 40px;\r\n            display: inline-flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n        }\r\n        th {\r\n            text-align: left;\r\n            white-space: nowrap;\r\n        }\r\n\r\n        th {\r\n            background-color: ${({ theme }) => theme.utils.hoverDark};\r\n        }\r\n\r\n        .pod {\r\n            color: ${props => props.theme.text.secondary};\r\n            font-size: 80%;\r\n        }\r\n\r\n        .invalid {\r\n            color: ${({ theme }) => theme.status.negative};\r\n            font-weight: bold;\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nconst getRoots = () => {\r\n    const roots = [];\r\n    DEGREE_PRESETS.forEach((degree) => {\r\n        const spelling = degree.id;\r\n        const d = degree.value;\r\n\r\n        const diatonicPitch = DIATONIC_VALUES[d].value[0];\r\n        ACCIDENTALS.forEach((accidental) => {\r\n            const a = accidental.symbol;\r\n            const offset = accidental.value;\r\n\r\n            const rootName = `${spelling}${a}`;\r\n            const rootPod: IPod = [diatonicPitch + offset, d];\r\n\r\n            const intervals = FIRST_OCTAVE_INTERVALS.map(ivl => {\r\n                const ivlPod = addPods(rootPod, ivl.value);\r\n                let note;\r\n                let isInvalid = false;\r\n\r\n                try {\r\n                    note = new Note(ivlPod);\r\n                }\r\n                catch (e) {\r\n                    isInvalid = true;\r\n                }\r\n\r\n                //const isInvalid = ivlName.length > 5;\r\n\r\n                return {\r\n                    name: note ? note.name : '?',\r\n                    pod: ivlPod,\r\n                    isInvalid\r\n                }\r\n            })\r\n\r\n            roots.push({\r\n                name: rootName,\r\n                pod: rootPod,\r\n                intervals\r\n            });\r\n        });\r\n    });\r\n    return roots;\r\n}\r\n\r\nconst AllIntervalsFromAllRoots: React.FC<any> = () => {\r\n    const roots = getRoots();\r\n    return (\r\n        <StyledTest>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Root</th>\r\n                        {\r\n                            FIRST_OCTAVE_INTERVALS.map(ivl => {\r\n                                return <th colSpan={SHOW_PODS ? 2 : 1} key={ivl.id}>{IntervalSpan.fromValue(ivl.value).getName()}</th>\r\n                            })\r\n                        }\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        roots.map(r => {\r\n                            return (\r\n                                <tr key={r.name}>\r\n                                    <th>{r.name}</th>\r\n                                    {SHOW_PODS && <th>{JSON.stringify(r.pod)}</th>}\r\n                                    {\r\n                                        r.intervals.map(ivl => {\r\n                                            return <>\r\n                                                <td key={ivl.id + 'n'} className={ivl.isInvalid ? 'invalid' : ''}>\r\n                                                    {ivl.name}\r\n                                                </td>\r\n                                                {SHOW_PODS &&\r\n                                                    <td key={ivl.id + 'p'} className=\"pod\">\r\n                                                        {JSON.stringify(ivl.pod)}\r\n                                                    </td>}\r\n                                            </>\r\n                                        })\r\n                                    }\r\n                                </tr>\r\n                            );\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </StyledTest>\r\n    );\r\n};\r\n\r\nexport default AllIntervalsFromAllRoots;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport { StyledPageBody } from \"../_shared/layout/PageBody\";\r\nimport AllIntervalsFromAllRoots from \"./AllIntervalsFromAllRoots\";\r\n\r\nconst StyledTestPage = styled(StyledPageBody)`\r\n    max-width: unset;\r\n    margin: auto;\r\n\r\n    h1, h2 {\r\n        margin: 16px 0;\r\n    }\r\n`;\r\n\r\nconst TestPage: React.FC<any> = () => {\r\n\r\n    return (\r\n        <StyledTestPage>\r\n            <h1>Tests</h1>\r\n            <h2>All Intervals From All Roots</h2>\r\n            <AllIntervalsFromAllRoots />\r\n        </StyledTestPage>\r\n    );\r\n};\r\n\r\nexport default TestPage;\r\n","import TestPage from \"../components/test/TestPage\";\r\n\r\nexport default TestPage;\r\n"],"names":["StyledPageBody","styled","IntervalSpan","id","INTERVAL_PRESET_MAP","getColor","this","equals","IntervalId","getName","reduced","reducePod","pod","noteIndex","d","degreeIntervals","CORE_INTERVALS","pIvl","loIvl","hiIvl","length","ivl","quality","INTERVAL_QUALITY","value","offset","symbol","count","Math","abs","repeat","getRatio","p","baseline","TuningUtils","toFixed","isInSuperset","superset","listContainsSubset","getSupersets","result","chords","CHORD_PRESETS","preset","push","modelName","values","scales","SCALE_PRESETS","Pod","fromValue","Model","INTERVAL_PRESETS","arePodsEqual","FIRST_OCTAVE_INTERVALS","ACCIDENTALS","ACCIDENTAL_VALUES","a","SHOW_PODS","StyledTest","theme","utils","border","hoverDark","props","text","secondary","status","negative","roots","DEGREE_PRESETS","degree","spelling","diatonicPitch","DIATONIC_VALUES","forEach","accidental","rootName","rootPod","intervals","map","note","ivlPod","addPods","isInvalid","Note","e","name","getRoots","colSpan","key","r","className","StyledTestPage"],"sourceRoot":""}