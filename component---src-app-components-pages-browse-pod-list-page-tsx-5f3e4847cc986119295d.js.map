{"version":3,"file":"component---src-app-components-pages-browse-pod-list-page-tsx-5f3e4847cc986119295d.js","mappings":"4LAUA,MAAMA,GAAoBC,EAAAA,EAAAA,SAAOC,EAAAA,GAAW,YAAAC,YAAAA,kCAAAC,YAAAA,gBAAlBH,CAAkB,MA6C5C,UA3C+CI,IAC7C,MAAM,WAAEC,EAAU,SAAEC,EAAQ,OAAEC,GAAWH,EAAMI,YAEzCC,GAAgBC,EAAAA,EAAAA,GAAUL,EAAYC,GACtCK,GAAiBD,EAAAA,EAAAA,GAAUE,EAAAA,GAAAA,KAAiBL,GAE5CM,GAAQC,EAAAA,EAAAA,IAAcL,EAAeE,GAE3C,OACEI,EAAAA,cAAChB,EAAiB,CAACc,MAAOA,GACxBE,EAAAA,cAACC,EAAAA,EAAa,MA6BI,C,yDC1CjB,MAAMC,EAAsBjB,EAAAA,QAAAA,IAAAA,WAAU,6EAAVA,CAAU,6DAKzCkB,IAAAA,IAAC,QAAEC,GAAS,SACZA,EAAO,aAEDC,EAAAA,EAAAA,OAAiB,0CACUD,EAAQE,KAAK,KAAI,oBAG9C,EAAE,IAENC,IAAAA,IAAC,SAAEC,GAAU,SACbA,EAAQ,aAEFH,EAAAA,EAAAA,QAAkB,0CACSG,EAASF,KAAK,KAAI,sBAG7C,IAoBV,IAZqDG,IAI9C,IAJ+C,OACpDC,EAAM,QACNC,EAAO,SACPC,GACD,EACC,OACEZ,EAAAA,cAACE,EAAmB,CAACE,QAASM,EAAQF,SAAUG,GAC7CC,EACmB,C,6IC5BnB,MAAMC,EAAoC,kBAC5CC,EAAAA,KAAa,OACbC,EAAAA,KAKQpB,EAAY,CAACL,EAAyBC,KACjD,OAAQD,GACN,KAAKO,EAAAA,GAAAA,KACH,OAAOmB,EAAAA,GAAAA,IAAoBzB,GAC7B,KAAKM,EAAAA,GAAAA,SACH,OAAOoB,EAAAA,GAAAA,IAAwB1B,GACjC,KAAKM,EAAAA,GAAAA,MACH,OAAOqB,EAAAA,GAAAA,IAAqB3B,GAC9B,KAAKM,EAAAA,GAAAA,MACH,OAAOsB,EAAAA,GAAAA,IAAqB5B,GAAqB,C,wKCzBvD,MAqCa6B,EAAU,CAACC,EAASC,IAGV,CAFXD,EAAE,GAAKC,EAAE,GACTD,EAAE,GAAKC,EAAE,IAiBRC,EAAY,SAACF,EAASG,QAAG,IAAHA,IAAAA,EAAMC,EAAAA,IAGvC,MAAO,CAFGC,EAAAA,EAAAA,OAAmBL,EAAE,GAAIG,EAAI,IAC7BE,EAAAA,EAAAA,OAAmBL,EAAE,GAAIG,EAAI,IAEzC,EAgCaG,EAAaC,GACjBF,EAAAA,EAAAA,OAAmBE,EAAI,GAAIH,EAAAA,GAAAA,IAiBvB1B,EAAgB,CAC3BL,EACAE,KAEUA,EAAoBA,EAAeiC,KAAI,IAAM,IACrDnC,EAAcmC,I,qBC5HlB,MAAMC,EAAgB,CACrBC,EAAG,IACHC,GAAI,IACJC,EAAG,IACHC,GAAI,IACJC,EAAG,IACHC,GAAI,GACJC,EAAG,GACHC,GAAI,GACJC,EAAG,GACHC,GAAI,EACJC,EAAG,EACHC,GAAI,EACJC,EAAG,GAGEC,EAAS,CAACvB,EAAWC,KACjBD,EAAIC,EAAKA,GAAKA,EAqBxB,KACCsB,SACAC,UApBiB,CAACxB,EAAWC,EAAWwB,IAIjCF,EAD4DvB,EAFpD,GAEmEC,EAFnE,GAGSwB,GAHT,EAoBfC,SAdiBC,IACjB,IAAIC,EAAM,GACV,IAAK,MAAMC,KAAKC,OAAOC,KAAKtB,GAAgB,CAC3C,IAAIuB,EAAIC,KAAKC,MAAMP,EAAIlB,EAAcoB,IAGrC,GAFAF,GAAKK,EAAIvB,EAAcoB,GACvBD,GAAOC,EAAEM,OAAOH,GACN,IAANL,EAAS,OAAOC,CACrB,CACA,OAAOA,CAAG,E","sources":["webpack://play-what/./src/app/components/pages/browse/pod-list.page.tsx","webpack://play-what/./src/app/components/shared/layout/ColumnManager.tsx","webpack://play-what/./src/core/Core.derived.ts","webpack://play-what/./src/core/Pod.utils.ts","webpack://play-what/./src/core/primitives/Number.utils.ts"],"sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { PresetType } from \"../../../../core/Core.constants\";\r\nimport { AnyPodListPreset, getPreset } from \"../../../../core/Core.derived\";\r\nimport { INotePreset } from \"../../../../core/Note.constants\";\r\nimport { getRootedName } from \"../../../../core/Pod.utils\";\r\nimport ColumnManager from \"../../shared/layout/ColumnManager\";\r\nimport PageLayout from \"../../shared/layout/PageLayout\";\r\nimport { ModelPageProps } from \"../../shared/utils/PagePropsContext\";\r\n\r\nconst StyledPodlistPage = styled(PageLayout)``;\r\n\r\nconst PodListPage: React.FC<ModelPageProps> = (props) => {\r\n  const { presetType, presetId, rootId } = props.pageContext;\r\n\r\n  const podListPreset = getPreset(presetType, presetId) as AnyPodListPreset;\r\n  const rootNotePreset = getPreset(PresetType.Note, rootId) as INotePreset;\r\n\r\n  const title = getRootedName(podListPreset, rootNotePreset);\r\n\r\n  return (\r\n    <StyledPodlistPage title={title}>\r\n      <ColumnManager>\r\n        {/*<ColumnManager tablet={[\"300px\", \"auto\"]}>\r\n          <RootCard />\r\n          <DetailsCard\r\n            podListPreset={podListPreset}\r\n            rootNotePreset={rootNotePreset}\r\n          />\r\n        </ColumnManager>\r\n        {presetType === PresetType.Scale && (\r\n          <RomanNumeralsCard\r\n            podListPreset={podListPreset}\r\n            rootNotePreset={rootNotePreset}\r\n          />\r\n        )}\r\n        {presetType === PresetType.Scale && (\r\n          <ModeCard\r\n            podListPreset={podListPreset}\r\n            rootNotePreset={rootNotePreset}\r\n          />\r\n        )}\r\n        <FretboardCard\r\n          podListPreset={podListPreset}\r\n          rootNotePreset={rootNotePreset}\r\n        />\r\n        <RelatedCard\r\n          podListPreset={podListPreset}\r\n          rootNotePreset={rootNotePreset}\r\n        />*/}\r\n      </ColumnManager>\r\n    </StyledPodlistPage>\r\n  );\r\n};\r\n\r\nexport default PodListPage;\r\n","import React, { PropsWithChildren } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { MediaQuery } from \"../../../styles/breakpoint\";\r\n\r\ninterface IStyledColumnManagerProps {\r\n  $tablet?: string[];\r\n  $desktop?: string[];\r\n}\r\n\r\nexport const StyledColumnManager = styled.div<IStyledColumnManagerProps>`\r\n  display: grid;\r\n  gap: 16px;\r\n  grid-template-columns: 1fr;\r\n\r\n  ${({ $tablet }) =>\r\n    $tablet\r\n      ? `\r\n        ${MediaQuery.Tablet} {\r\n            grid-template-columns: ${$tablet.join(\" \")}\r\n        }\r\n    `\r\n      : \"\"}\r\n\r\n  ${({ $desktop }) =>\r\n    $desktop\r\n      ? `\r\n        ${MediaQuery.Desktop} {\r\n            grid-template-columns: ${$desktop.join(\" \")}\r\n        }\r\n    `\r\n      : ``}\r\n`;\r\n\r\nexport interface IColumnManagerProps extends PropsWithChildren {\r\n  tablet?: string[];\r\n  desktop?: string[];\r\n}\r\n\r\nconst ColumnManager: React.FC<IColumnManagerProps> = ({\r\n  tablet,\r\n  desktop,\r\n  children,\r\n}) => {\r\n  return (\r\n    <StyledColumnManager $tablet={tablet} $desktop={desktop}>\r\n      {children}\r\n    </StyledColumnManager>\r\n  );\r\n};\r\n\r\nexport default ColumnManager;\r\n","import {\r\n  ChordId,\r\n  CHORD_PRESETS,\r\n  CHORD_PRESET_MAP,\r\n  IChordPreset,\r\n} from \"./Chord.constants\";\r\nimport { PresetType } from \"./Core.constants\";\r\nimport { IntervalId, INTERVAL_PRESET_MAP } from \"./Interval.constants\";\r\nimport { NoteId, NOTE_PRESET_MAP } from \"./Note.constants\";\r\nimport {\r\n  IScalePreset,\r\n  ScaleId,\r\n  SCALE_PRESETS,\r\n  SCALE_PRESET_MAP,\r\n} from \"./Scale.constants\";\r\n\r\nexport type AnyPodListPreset = IChordPreset | IScalePreset;\r\n\r\nexport const POD_LIST_PRESETS: AnyPodListPreset[] = [\r\n  ...SCALE_PRESETS,\r\n  ...CHORD_PRESETS,\r\n];\r\n\r\nexport type PresetId = NoteId | IntervalId | ChordId | ScaleId;\r\n\r\nexport const getPreset = (presetType?: PresetType, presetId?: PresetId) => {\r\n  switch (presetType) {\r\n    case PresetType.Note:\r\n      return NOTE_PRESET_MAP.get(presetId as NoteId);\r\n    case PresetType.Interval:\r\n      return INTERVAL_PRESET_MAP.get(presetId as IntervalId);\r\n    case PresetType.Chord:\r\n      return CHORD_PRESET_MAP.get(presetId as ChordId);\r\n    case PresetType.Scale:\r\n      return SCALE_PRESET_MAP.get(presetId as ScaleId);\r\n  }\r\n};\r\n\r\n// export const logPresetJson = () => {\r\n//   console.log(\"pw-presets notes\", JSON.stringify(NOTE_PRESETS));\r\n//   console.log(\"pw-presets intervals\", JSON.stringify(INTERVAL_PRESETS));\r\n//   console.log(\"pw-presets chords\", JSON.stringify(CHORD_PRESETS));\r\n//   console.log(\"pw-presets scales\", JSON.stringify(SCALE_PRESETS));\r\n// };\r\n","import { CHORD_PRESETS } from \"./Chord.constants\";\r\nimport { AnyPodListPreset } from \"./Core.derived\";\r\nimport { INotePreset } from \"./Note.constants\";\r\nimport { IPod, MAX_POD } from \"./Pod.constants\";\r\nimport NumberUtils from \"./primitives/Number.utils\";\r\nimport { SCALE_PRESETS } from \"./Scale.constants\";\r\n\r\n// Search\r\n\r\nconst isPodAtPitch = (\r\n  pod: IPod,\r\n  p: number,\r\n  matchOctave = false\r\n): IPod | null => {\r\n  const pitchOffset = 0;\r\n  const target = p - pitchOffset;\r\n  let a = pod[0];\r\n  let b = target;\r\n  if (!matchOctave) {\r\n    a = NumberUtils.modulo(a, 12);\r\n    b = NumberUtils.modulo(b, 12);\r\n  }\r\n  return a === b ? pod : null;\r\n};\r\n\r\nexport const getIndexOfPodAtPitch = (\r\n  A: IPod[],\r\n  p: number,\r\n  matchOctave: boolean\r\n): number | null => {\r\n  const pod = A.findIndex((a) => isPodAtPitch(a, p, matchOctave));\r\n  return pod !== -1 ? pod : null;\r\n};\r\n\r\n/*static sort = (podList: IPod[]) => {\r\n    return podList.sort((a, b) => {\r\n        if (a[0] < b[0]) return -1;\r\n        else if (a[0] > b[0]) return 1;\r\n        else {\r\n            if (a[1] < b[1]) return -1;\r\n            else if (a[1] > b[1]) return 1;\r\n            else return 0;\r\n        }\r\n    });\r\n}*/\r\n\r\nexport const addPods = (a: IPod, b: IPod): IPod => {\r\n  const p = a[0] + b[0];\r\n  const d = a[1] + b[1];\r\n  const result: IPod = [p, d];\r\n  return result;\r\n};\r\n\r\nexport const subtractPods = (a: IPod, b: IPod): IPod => {\r\n  const p = a[0] - b[0];\r\n  const d = a[1] - b[1];\r\n  const result: IPod = [p, d];\r\n  return result;\r\n};\r\n\r\nexport const addPodList = (a: IPod, B: IPod[]): IPod[] => {\r\n  const result = B.map((b) => addPods(a, b));\r\n  return result;\r\n};\r\n\r\nexport const reducePod = (a: IPod, max = MAX_POD): IPod => {\r\n  const p = NumberUtils.modulo(a[0], max[0]);\r\n  const d = NumberUtils.modulo(a[1], max[1]);\r\n  return [p, d];\r\n};\r\n\r\nexport const arePodsEqual = (a: IPod, b: IPod): boolean => {\r\n  if (!a || !b || a.length !== 2 || b.length !== 2) return false;\r\n  return a[0] === b[0] && a[1] === b[1];\r\n};\r\n\r\nexport const reducePodList = (A: IPod[]): IPod[] => {\r\n  return A.map((a) => reducePod(a));\r\n};\r\n\r\nexport const arePodListsEqual = (A: IPod[], B: IPod[]): boolean => {\r\n  if (!A || !B || A.length !== B.length) return false;\r\n  for (let i = 0; i < A.length; i++) {\r\n    const a = A[i];\r\n    const b = B[i];\r\n    if (!arePodsEqual(a, b)) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const listContainsSubset = (\r\n  podList: IPod[],\r\n  subset: IPod[]\r\n): boolean => {\r\n  for (let i = 0; i < subset.length; i++) {\r\n    if (!podList.find((x) => x[0] === subset[i][0] && x[1] === subset[i][1]))\r\n      return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const getDegree = (pod: IPod) => {\r\n  return NumberUtils.modulo(pod[1], MAX_POD[1]);\r\n};\r\n\r\nexport const getShortName = (str) =>\r\n  str\r\n    .replace(\"Major\", \"Maj\")\r\n    .replace(\"Minor\", \"Min\")\r\n    .replace(\"Augmented\", \"Aug\")\r\n    .replace(\"Diminished\", \"Dim\")\r\n    .replace(\"Suspended\", \"Sus\")\r\n    .replace(\"Dominant\", \"Dom\")\r\n    .replace(\"Pentatonic\", \"Pent\")\r\n    .replace(\"st\", \"\")\r\n    .replace(\"nd\", \"\")\r\n    .replace(\"rd\", \"\")\r\n    .replace(\"th\", \"\");\r\n\r\nexport const getRootedName = (\r\n  podListPreset: AnyPodListPreset,\r\n  rootNotePreset?: INotePreset\r\n) => {\r\n  return `${rootNotePreset ? `${rootNotePreset.name} ` : \"\"}${\r\n    podListPreset.name\r\n  }`;\r\n};\r\n\r\nexport const isInSuperset = (intervalPods: IPod[], superset: IPod[]) => {\r\n  if (superset.length <= intervalPods.length) return false;\r\n  return listContainsSubset(superset, intervalPods);\r\n};\r\n\r\nexport const containsSubset = (intervalPods: IPod[], subset: IPod[]) => {\r\n  if (subset.length >= intervalPods.length) return false;\r\n  return listContainsSubset(intervalPods, subset);\r\n};\r\n\r\nexport const getSubchords = (intervalPods: IPod[]) => {\r\n  return CHORD_PRESETS.filter((preset) =>\r\n    containsSubset(intervalPods, preset.value)\r\n  );\r\n};\r\n\r\nexport const getSuperchords = (intervalPods: IPod[]) => {\r\n  return CHORD_PRESETS.filter((preset) =>\r\n    isInSuperset(intervalPods, preset.value)\r\n  );\r\n};\r\n\r\nexport const getSubscales = (intervalPods: IPod[]) => {\r\n  return SCALE_PRESETS.filter((preset) =>\r\n    containsSubset(intervalPods, preset.value)\r\n  );\r\n};\r\n\r\nexport const getSuperscales = (intervalPods: IPod[]) => {\r\n  return SCALE_PRESETS.filter((preset) =>\r\n    isInSuperset(intervalPods, preset.value)\r\n  );\r\n};\r\n\r\nexport const getAllRelated = (intervalPods: IPod[]) => {\r\n  return [\r\n    ...getSubchords(intervalPods),\r\n    ...getSubscales(intervalPods),\r\n    ...getSuperchords(intervalPods),\r\n    ...getSuperscales(intervalPods),\r\n  ];\r\n};\r\n\r\n// applyRoot(root: IPod) {\r\n//   let notePods;\r\n//   try {\r\n//     notePods = this.intervalPods.map((ivl) => addPods(root, ivl));\r\n//   } catch (e) {\r\n//     console.error(e);\r\n//     throw new Error(\"Unable to apply root\");\r\n//   }\r\n//   this.root = root;\r\n//   this.notePods = notePods;\r\n//   this.name = `${\"ROOT\"} ${this.name}`;\r\n//   return this;\r\n// }\r\n\r\nexport const tryGetPodPairAtPitch = (\r\n  intervalPods: IPod[],\r\n  notePods: IPod[],\r\n  noteIndex: number\r\n): [IPod, IPod] | [undefined, undefined] => {\r\n  if (!notePods) return [undefined, undefined];\r\n\r\n  const index = getIndexOfPodAtPitch(notePods, noteIndex, false);\r\n\r\n  if (index == null) return [undefined, undefined];\r\n\r\n  return [intervalPods[index], (notePods as IPod[])[index]];\r\n};\r\n\r\nexport const getNotePods = (\r\n  rootPod: IPod,\r\n  intervalPods: IPod[],\r\n  octave = 4\r\n): IPod[] => {\r\n  const notePods = intervalPods.map((ivl) => {\r\n    const notePod = addPods(rootPod, ivl);\r\n    return [\r\n      (octave - 4) * 12 + NumberUtils.modulo(notePod[0], 12),\r\n      notePod[1],\r\n    ] as IPod;\r\n  });\r\n  return notePods;\r\n};\r\n","const ROMAN_NUMERAL = {\r\n\tM: 1000,\r\n\tCM: 900,\r\n\tD: 500,\r\n\tCD: 400,\r\n\tC: 100,\r\n\tXC: 90,\r\n\tL: 50,\r\n\tXL: 40,\r\n\tX: 10,\r\n\tIX: 9,\r\n\tV: 5,\r\n\tIV: 4,\r\n\tI: 1\r\n} as const;\r\n\r\nconst modulo = (a: number, b: number): number => {\r\n\treturn ((a % b) + b) % b;\r\n}\r\n\r\nconst moduloSum = (a: number, b: number, divisor: number): number => {\r\n\tconst offset = 0;\r\n\tconst subtraction = false;\r\n\tconst dividend = (subtraction) ? ((a - offset) - (b - offset)) : ((a - offset) + (b - offset));\r\n\treturn modulo(dividend, divisor) + offset;\r\n};\r\n\r\nconst romanize = (n: number): string => {\r\n\tlet str = '';\r\n\tfor (const i of Object.keys(ROMAN_NUMERAL)) {\r\n\t\tvar q = Math.floor(n / ROMAN_NUMERAL[i]);\r\n\t\tn -= q * ROMAN_NUMERAL[i];\r\n\t\tstr += i.repeat(q);\r\n\t\tif (n === 0) return str;\r\n\t}\r\n\treturn str;\r\n}\r\n\r\nexport default {\r\n\tmodulo,\r\n\tmoduloSum,\r\n\tromanize\r\n};\r\n"],"names":["StyledPodlistPage","styled","PageLayout","displayName","componentId","props","presetType","presetId","rootId","pageContext","podListPreset","getPreset","rootNotePreset","PresetType","title","getRootedName","React","ColumnManager","StyledColumnManager","_ref","$tablet","MediaQuery","join","_ref2","$desktop","_ref3","tablet","desktop","children","POD_LIST_PRESETS","SCALE_PRESETS","CHORD_PRESETS","NOTE_PRESET_MAP","INTERVAL_PRESET_MAP","CHORD_PRESET_MAP","SCALE_PRESET_MAP","addPods","a","b","reducePod","max","MAX_POD","NumberUtils","getDegree","pod","name","ROMAN_NUMERAL","M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I","modulo","moduloSum","divisor","romanize","n","str","i","Object","keys","q","Math","floor","repeat"],"sourceRoot":""}