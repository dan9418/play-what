{"version":3,"file":"component---src-pages-test-tsx-e463abd6a51163191974.js","mappings":"2JAEaA,E,KAAiBC,GAAAA,IAAH,uJ,yKCQrBC,EAAyBC,EAAAA,GAAAA,QAAwB,SAAAC,GAAG,OAAIA,EAAIC,MAAM,GAAK,MAEvEC,GAAiBL,EAAAA,EAAAA,IAAOD,EAAAA,EAAPC,CAAH,i0BAwBY,qBAAGM,MAAkBC,MAAMC,aAIrB,SAAAC,GAAK,OAAIA,EAAMH,MAAMC,MAAMG,UAGjC,qBAAGJ,MAAkBC,MAAMC,aAItC,SAAAC,GAAK,OAAIA,EAAMH,MAAMK,KAAKC,aAK1B,qBAAGN,MAAkBO,OAAOC,SClDjD,EDiGgC,WAC5B,IAAMC,EAzCO,WACb,IAAMA,EAAQ,GAoCd,OAnCAC,EAAAA,GAAAA,SAAuB,SAACC,GACpB,IAAMC,EAAWD,EAAOE,GAClBC,EAAIH,EAAOb,MAEXiB,EAAgBC,EAAAA,EAAgBF,GAAGhB,MAAM,GAC/CmB,EAAAA,GAAAA,SAA0B,SAACC,GACvB,IAAMC,EAAID,EAAWE,OACfC,EAASH,EAAWpB,MAIpBwB,EAAQ,GAAMV,EAAWO,EACzBI,EAAgB,CAACR,EAAgBM,EAAQP,GAEzCU,EAAY7B,EAAuB8B,KAAI,SAAA5B,GACzC,IAAM6B,EAASC,EAAAA,EAAAA,QAAcJ,EAAS1B,EAAIC,OACpC8B,EAAUC,EAAAA,EAAAA,QAAaH,GAK7B,MAAO,CACHI,KAAMF,EACNG,IAAKL,EACLM,UALcJ,EAAQK,OAAS,MASvCxB,EAAMyB,KAAK,CACPJ,KAAMR,EACNS,IAAKR,EACLC,UAAAA,UAILf,EAIO0B,GACd,OACI,gBAACpC,EAAD,KACI,uBAAKqC,UAAU,aACX,6BACI,6BACI,0BACI,sBAAIC,QAAS,GAAb,QAEI1C,EAAuB8B,KAAI,SAAA5B,GACvB,OAAO,sBAAIwC,QAAS,EAAGC,IAAKzC,EAAIgB,IAAKhB,EAAIgB,SAKzD,6BAEQJ,EAAMgB,KAAI,SAAAc,GACN,OACI,sBAAID,IAAKC,EAAET,MACP,0BAAKS,EAAET,MACP,0BAAKU,KAAKC,UAAUF,EAAER,MAElBQ,EAAEf,UAAUC,KAAI,SAAA5B,GACZ,OAAO,gCACH,sBAAIyC,IAAKzC,EAAIgB,GAAK,IAAKuB,UAAWvC,EAAImC,UAAY,UAAY,IACzDnC,EAAIiC,MAET,sBAAIQ,IAAKzC,EAAIgB,GAAK,IAAKuB,UAAU,OAC5BI,KAAKC,UAAU5C,EAAIkC","sources":["webpack://play-what/./src/components/_shared/layout/PageBody.tsx","webpack://play-what/./src/components/test/TestPage.tsx","webpack://play-what/./src/pages/test.tsx"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const StyledPageBody = styled.div`\r\n\twidth: 100%;\r\n\t//max-width: 1920px;\r\n\tmax-width: 1024px;\r\n    \r\n\tmargin: auto;\r\n\tpadding: 16px;\r\n\r\n    overflow: auto;\r\n`\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport Model from \"../../core/models/Model\";\r\nimport { ACCIDENTAL_VALUES, IPod } from \"../../core/models/Model.constants\";\r\nimport { INTERVAL_PRESETS } from \"../../core/models/Model.presets\";\r\nimport Note from \"../../core/models/Note\";\r\nimport { DEGREE_PRESETS } from \"../../core/theory/Degree.constants\";\r\nimport { DIATONIC_VALUES } from \"../../core/theory/Diatonic.constants\";\r\nimport { StyledPageBody } from \"../_shared/layout/PageBody\";\r\n\r\nconst FIRST_OCTAVE_INTERVALS = INTERVAL_PRESETS.filter(ivl => ivl.value[0] < 12);\r\n\r\nconst StyledTestPage = styled(StyledPageBody)`\r\n    max-width: unset;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    .container {\r\n        height: 100%;\r\n        width: 100%;\r\n        overflow: auto; \r\n    }\r\n        \r\n    table {\r\n        border-collapse: collapse;\r\n\r\n        td, th {\r\n            padding: 4px;\r\n        }\r\n        th {\r\n            text-align: left;\r\n        }\r\n\r\n        thead th {\r\n            background-color: ${({ theme }) => theme.utils.hoverDark};\r\n        }\r\n\r\n        tbody td:nth-child(2), tbody th:nth-child(2) {\r\n            border-right: 1px solid ${props => props.theme.utils.border};\r\n        }\r\n        tr:nth-child(2n+1) {\r\n            background-color: ${({ theme }) => theme.utils.hoverDark};\r\n        }\r\n\r\n        .pod {\r\n            color: ${props => props.theme.text.secondary};\r\n            font-size: 80%;\r\n        }\r\n\r\n        .invalid {\r\n            color: ${({ theme }) => theme.status.error};\r\n            font-weight: bold;\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nconst getRoots = () => {\r\n    const roots = [];\r\n    DEGREE_PRESETS.forEach((degree) => {\r\n        const spelling = degree.id;\r\n        const d = degree.value;\r\n\r\n        const diatonicPitch = DIATONIC_VALUES[d].value[0];\r\n        ACCIDENTAL_VALUES.forEach((accidental) => {\r\n            const a = accidental.symbol;\r\n            const offset = accidental.value;\r\n\r\n            const invalidSymbol = offset > 0 ? 'b' : offset < 0 ? '#' : null;\r\n\r\n            const rootName = `${spelling}${a}`;\r\n            const rootPod: IPod = [diatonicPitch + offset, d];\r\n\r\n            const intervals = FIRST_OCTAVE_INTERVALS.map(ivl => {\r\n                const ivlPod = Model.addPods(rootPod, ivl.value);\r\n                const ivlName = Note.getName(ivlPod);\r\n\r\n                //const isInvalid = ivlName.includes(invalidSymbol);\r\n                const isInvalid = ivlName.length > 5;\r\n\r\n                return {\r\n                    name: ivlName,\r\n                    pod: ivlPod,\r\n                    isInvalid\r\n                }\r\n            })\r\n\r\n            roots.push({\r\n                name: rootName,\r\n                pod: rootPod,\r\n                intervals\r\n            });\r\n        });\r\n    });\r\n    return roots;\r\n}\r\n\r\nconst TestPage: React.FC<any> = () => {\r\n    const roots = getRoots();\r\n    return (\r\n        <StyledTestPage>\r\n            <div className=\"container\">\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th colSpan={2}>Root</th>\r\n                            {\r\n                                FIRST_OCTAVE_INTERVALS.map(ivl => {\r\n                                    return <th colSpan={2} key={ivl.id}>{ivl.id}</th>\r\n                                })\r\n                            }\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            roots.map(r => {\r\n                                return (\r\n                                    <tr key={r.name}>\r\n                                        <th>{r.name}</th>\r\n                                        <th>{JSON.stringify(r.pod)}</th>\r\n                                        {\r\n                                            r.intervals.map(ivl => {\r\n                                                return <>\r\n                                                    <td key={ivl.id + 'n'} className={ivl.isInvalid ? 'invalid' : ''}>\r\n                                                        {ivl.name}\r\n                                                    </td>\r\n                                                    <td key={ivl.id + 'p'} className=\"pod\">\r\n                                                        {JSON.stringify(ivl.pod)}\r\n                                                    </td>\r\n                                                </>\r\n                                            })\r\n                                        }\r\n                                    </tr>\r\n                                );\r\n                            })\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </StyledTestPage>\r\n    );\r\n};\r\n\r\nexport default TestPage;\r\n","import TestPage from \"../components/test/TestPage\";\r\n\r\nexport default TestPage;\r\n"],"names":["StyledPageBody","styled","FIRST_OCTAVE_INTERVALS","INTERVAL_PRESETS","ivl","value","StyledTestPage","theme","utils","hoverDark","props","border","text","secondary","status","error","roots","DEGREE_PRESETS","degree","spelling","id","d","diatonicPitch","DIATONIC_VALUES","ACCIDENTAL_VALUES","accidental","a","symbol","offset","rootName","rootPod","intervals","map","ivlPod","Model","ivlName","Note","name","pod","isInvalid","length","push","getRoots","className","colSpan","key","r","JSON","stringify"],"sourceRoot":""}