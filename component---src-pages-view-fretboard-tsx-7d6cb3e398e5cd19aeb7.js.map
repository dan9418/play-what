{"version":3,"file":"component---src-pages-view-fretboard-tsx-7d6cb3e398e5cd19aeb7.js","mappings":"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","sources":["webpack://play-what/./src/components/column-manager/ColumnManager.tsx","webpack://play-what/./src/components/inputs/DropdownInput.tsx","webpack://play-what/./src/components/inputs/NumericInput.tsx","webpack://play-what/./src/components/ui/Card.tsx","webpack://play-what/./src/components/ui/InputRow.tsx","webpack://play-what/./src/components/layout/Modal.tsx","webpack://play-what/./src/components/pages/view/FretboardPage.tsx","webpack://play-what/./src/pages/view/fretboard.tsx","webpack://play-what/./src/viewers/fretboard/Fretboard.styles.tsx","webpack://play-what/./src/viewers/fretboard/FretLabel.tsx","webpack://play-what/./src/viewers/fretboard/Fretboard.tsx","webpack://play-what/./src/viewers/fretboard/Fretboard.tuning.ts","webpack://play-what/./src/viewers/fretboard/Fretboard.utils.ts","webpack://play-what/./src/viewers/fretboard/Fretboard.voicing.ts"],"sourcesContent":["import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledColumnManager = styled.div`\r\n    display: grid;\r\n    gap: 16px;\r\n    grid-template-columns: 1fr;\r\n\r\n    ${({ $tablet }) => $tablet ? `\r\n        @media(min-width: 512px) {\r\n            grid-template-columns: ${$tablet.join(' ')}\r\n        }\r\n    ` : ''}\r\n\r\n    ${({ $desktop }) => $desktop ? `\r\n        @media(min-width: 1024px) {\r\n            grid-template-columns: ${$desktop.join(' ')}\r\n        }\r\n    ` : ``}\r\n   \r\n`;\r\n\r\nconst ColumnManager: React.FC<any> = ({ children, tablet, desktop }) => {\r\n    return (\r\n        <StyledColumnManager $tablet={tablet} $desktop={desktop}>\r\n            {children}\r\n        </StyledColumnManager >\r\n    );\r\n};\r\n\r\nexport default ColumnManager;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nconst StyledDropdownInput = styled.select`\r\n\tfont-size: 110%;\r\n    min-width: 128px;\r\n\r\n\tpadding: 4px 8px;\r\n\r\n    cursor: pointer;\r\n    border-radius: 4px;\r\n\r\n\toption {\r\n\t\tcursor: pointer;\r\n\t}\r\n`;\r\n\r\ninterface IDropdownInputProps {\r\n\tvalue: any;\r\n\tsetValue: Function;\r\n\toptions: any[];\r\n\tidProperty?: string;\r\n\tdisplayProperty?: string;\r\n}\r\n\r\nconst DropdownInput: React.FC<IDropdownInputProps> = props => {\r\n\tconst { value, setValue, options, idProperty, displayProperty } = props;\r\n\r\n\treturn (\r\n\t\t<StyledDropdownInput\r\n\t\t\tclassName='dropdown-input'\r\n\t\t\tonChange={e => setValue(options[e.target.selectedIndex], e.target.selectedIndex)}\r\n\t\t\tvalue={value ? value[idProperty || 'id'] : ''}\r\n\t\t>\r\n\t\t\t{(options || []).map((v, i) => (\r\n\t\t\t\t<option key={i} value={v[idProperty || 'id']}>{displayProperty ? v[displayProperty] : v.name}</option>\r\n\t\t\t))}\r\n\t\t</StyledDropdownInput>\r\n\t);\r\n}\r\n\r\nexport default DropdownInput;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport Icon from \"../ui/Icon\";\r\nimport ButtonInput from \"./ButtonInput\";\r\n\r\nexport const StyledNumbericInput = styled.div`\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\r\n\tinput, button {\r\n\t\theight: 32px;\r\n\t\tpadding: 0;\r\n\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t}\r\n\r\n\tbutton {\r\n\t\twidth: 32px;\r\n\t\tborder: 1px solid ${({ theme }) => theme.utils.border};\r\n\t\tsvg, svg * {\r\n\t\t\tfill: white;\r\n\t\t}\r\n\r\n\t\tbackground-color: ${({ theme }) => theme.status.interactive};\r\n\t\tcolor: white;\r\n\t\t&:hover {\r\n\t\t\tbackground-color: ${({ theme }) => theme.status.active};\r\n\t\t}\r\n\r\n\t\t:first-child {\r\n\t\t\tborder-right: none;\r\n\t\t\tborder-radius: 8px 0 0 8px;\r\n\t\t}\r\n\t\t:last-child {\r\n\t\t\tborder-left: none;\r\n\t\t\tborder-radius: 0 8px 8px 0\r\n\t\t}\r\n\t}\r\n\r\n\tinput {\r\n\t\twidth: 48px;\r\n\t\tcursor: pointer;\r\n\t\tborder: none;\r\n\t\tfont-weight: bold;\r\n\t\ttext-align: center;\r\n\t\tbackground-color: white;\r\n\t\t&:hover {\r\n\t\t\tbackground-color: ${({ theme }) => theme.status.highlight};\r\n\t\t}\r\n\r\n\t\tborder: 1px solid ${({ theme }) => theme.utils.border};\r\n\t}\r\n    \r\n\tfont-size: 110%;\r\n\tcursor: pointer;\r\n`;\r\n\r\ninterface INumericInputProps {\r\n\tvalue: number;\r\n\tsetValue: (number) => void;\r\n\tmin?: number;\r\n\tmax?: number;\r\n}\r\n\r\nconst NumericInput: React.FC<INumericInputProps> = ({ value, setValue, ...rest }) => {\r\n\tconst onChange = e => setValue(parseInt(e.target.value));\r\n\r\n\tconst onDown = () => {\r\n\t\tlet newVal = value - 1;\r\n\t\tif (typeof rest.min !== 'undefined') {\r\n\t\t\tnewVal = Math.max(rest.min, newVal);\r\n\t\t}\r\n\t\tsetValue(newVal);\r\n\t};\r\n\r\n\tconst onUp = () => {\r\n\t\tlet newVal = value + 1;\r\n\t\tif (typeof rest.max !== 'undefined') {\r\n\t\t\tnewVal = Math.min(rest.max, newVal);\r\n\t\t}\r\n\t\tsetValue(newVal);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<StyledNumbericInput>\r\n\t\t\t<ButtonInput onClick={onDown}><Icon iconId=\"minus\" size={12} /></ButtonInput>\r\n\t\t\t<input type=\"number\" value={value} onChange={null} {...rest} />\r\n\t\t\t<ButtonInput onClick={onUp}><Icon iconId=\"plus\" size={12} /></ButtonInput>\r\n\t\t</StyledNumbericInput>\r\n\t);\r\n}\r\n\r\nexport default NumericInput;\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledCard = styled.div`\r\n    background: ${props => props.theme.surface.card};\r\n    width: 100%;\r\n    border-radius: 16px;\r\n    padding: 16px;\r\n\r\n    .header {\r\n        margin-bottom: 16px;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n    }\r\n`;\r\n\r\nexport const CardHeader = ({ title, action = null }) => (\r\n    <div className=\"header\">\r\n        <h2>{title}</h2>\r\n        {action}\r\n    </div>\r\n);\r\n\r\nconst Card: React.FC<any> = ({ title, action, children, ...rest }) => {\r\n    return (\r\n        <StyledCard {...rest}>\r\n            {title &&\r\n                <CardHeader title={title} action={action} />\r\n            }\r\n            {children}\r\n        </StyledCard >\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledInputRow = styled.div`\r\n    display: flex;\r\n    align-items: flex-start;\r\n    flex-direction: column;\r\n    width: 100%;\r\n\r\n    ${props => props.$y ? '' : `\r\n        @media(min-width: 512px) {\r\n            align-items: center;\r\n            flex-direction: row;\r\n            justify-content: space-between;\r\n            //margin-bottom: 8px;\r\n        }\r\n    `}\r\n\r\n    > label {\r\n        color: ${({ theme }) => theme.dark3};\r\n        font-weight: bold;\r\n        margin: 8px;\r\n        white-space: nowrap;\r\n    }\r\n`;\r\n\r\nconst InputRow = ({ label, children, y = false, ...rest }) => {\r\n    return (\r\n        <StyledInputRow $y={y} {...rest}>\r\n            <label>{label}</label>\r\n            <div>\r\n                {children}\r\n            </div>\r\n        </StyledInputRow>\r\n    );\r\n}\r\n\r\nexport default InputRow;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport ButtonInput from '../inputs/ButtonInput';\r\nimport Card, { StyledCard } from '../ui/Card';\r\nimport Icon from '../ui/Icon';\r\n\r\nconst StyledOverlay = styled.div`\r\n    //width: 100vw;\r\n    //height: 100vw;\r\n    opacity: 0.8;\r\n    background-color: black;\r\n    position: fixed;\r\n    top: 48px;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 3000;\r\n`\r\n\r\nconst StyledContainer = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    position: fixed;\r\n    top: 48px;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 3001;\r\n\r\n    & > ${StyledCard} {\r\n        margin: 16px;\r\n        position: relative;\r\n        padding: 64px 16px;\r\n\r\n        overflow: auto;\r\n        resize: both;\r\n\r\n        .close {\r\n            position: absolute;\r\n            top: 16px;\r\n            right: 16px;\r\n            background-color: transparent !important;\r\n        }\r\n    }\r\n`\r\n\r\nconst Modal: React.FC<any> = ({ setIsOpen, children, ...rest }) => {\r\n    return (\r\n        <>\r\n            <StyledOverlay />\r\n            <StyledContainer >\r\n                <Card {...rest} draggable=\"true\">\r\n                    <ButtonInput onClick={() => setIsOpen(false)} className=\"close\">\r\n                        <Icon iconId='close' />\r\n                    </ButtonInput>\r\n                    {children}\r\n                </Card>\r\n            </StyledContainer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { useState } from \"react\";\r\nimport styled from 'styled-components';\r\nimport Chord from \"../../../core/models/Chord\";\r\nimport { ModelType } from \"../../../core/models/Model.constants\";\r\nimport { CHORD_PRESETS, NOTE_PRESETS, SCALE_PRESETS } from \"../../../core/models/Model.presets\";\r\nimport Note from \"../../../core/models/Note\";\r\nimport Scale from \"../../../core/models/Scale\";\r\nimport THEME from \"../../../styles/theme\";\r\nimport Fretboard from \"../../../viewers/fretboard/Fretboard\";\r\nimport { FRETBOARD_TUNING_VALUES, TuningId } from \"../../../viewers/fretboard/Fretboard.tuning\";\r\nimport { DEFAULT_FRETBOARD_PROPS } from \"../../../viewers/fretboard/Fretboard.utils\";\r\nimport { VoicingId, VOICING_PRESETS } from \"../../../viewers/fretboard/Fretboard.voicing\";\r\nimport ColumnManager, { StyledColumnManager } from \"../../column-manager/ColumnManager\";\r\nimport ButtonInput from \"../../inputs/ButtonInput\";\r\nimport DropdownInput from \"../../inputs/DropdownInput\";\r\nimport NumericInput from \"../../inputs/NumericInput\";\r\nimport Modal from \"../../layout/Modal\";\r\nimport Card, { StyledCard } from \"../../ui/Card\";\r\nimport Icon from \"../../ui/Icon\";\r\nimport InputRow from \"../../ui/InputRow\";\r\n\r\nconst StyledFretboardpage = styled.div`\r\n    min-height: 95vh;\r\n    padding: 16px;\r\n\r\n    .view-header {\r\n        padding: 0 16px;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n\r\n        color: ${({ theme }) => theme.text.primary};\r\n        line-height: 48px;\r\n        font-size: 140%;\r\n        font-weight: bold;\r\n\r\n        position: fixed;\r\n        top: 48px;\r\n        left: 0;\r\n        right: 0;\r\n        z-index: 2001;\r\n        height: 48px;\r\n        background-color: ${({ theme }) => theme.surface.card};\r\n        border-bottom: 1px solid ${({ theme }) => theme.utils.border};\r\n    }\r\n    \r\n    \r\n\r\n    .maximize {\r\n        background-color: transparent !important;\r\n    }\r\n\r\n    ${StyledColumnManager} {\r\n        & > div > ${StyledCard}:not(:last-child) {\r\n            margin-bottom: 16px;\r\n        }\r\n    }\r\n`;\r\n\r\nconst VOICING_OPTIONS = [\r\n    {\r\n        id: VoicingId.None,\r\n        name: '---',\r\n        value: undefined\r\n    },\r\n    ...VOICING_PRESETS\r\n];\r\n\r\nconst TYPE_OPTIONS = [\r\n    {\r\n        id: ModelType.Chord,\r\n        name: 'Chords',\r\n        value: ModelType.Chord,\r\n        data: CHORD_PRESETS\r\n    },\r\n    {\r\n        id: ModelType.Scale,\r\n        name: 'Scales',\r\n        value: ModelType.Chord,\r\n        data: SCALE_PRESETS\r\n    }\r\n]\r\n\r\nconst Fretboardpage: React.FC<any> = () => {\r\n\r\n    // Notes\r\n    const [modelType, _setModelType] = useState(TYPE_OPTIONS[0]);\r\n    const modelOptions = modelType.data;\r\n    const [modelConfig, setModelConfig] = useState(modelOptions[0]);\r\n    const [root, setRoot] = useState(NOTE_PRESETS[0]);\r\n    const [isFullScreen, setIsFullScreen] = useState(false);\r\n\r\n    const setModelType = type => { _setModelType(type); setModelConfig(type.data[0]) }\r\n\r\n    let model;\r\n    if (modelType.id === ModelType.Chord) {\r\n        model = new Chord(modelConfig.modelId, { root: Note.fromId(root.modelId) })\r\n    }\r\n    else if (modelType.id === ModelType.Scale) {\r\n        model = new Scale(modelConfig.modelId, { root: Note.fromId(root.modelId) })\r\n    }\r\n\r\n    const filteredVoicings = VOICING_OPTIONS.filter(v => {\r\n        if (!v.value) return true;\r\n        const containsNonModelIntervals = v.value.some(x => x && !model.intervals.find(ivl => ivl.pod[1] + 1 === x));\r\n        return !containsNonModelIntervals;\r\n    });\r\n\r\n    // Fretboard\r\n    const [voicing, setVoicing] = useState(filteredVoicings[0]);\r\n    const [tuning, setTuning] = useState(FRETBOARD_TUNING_VALUES[0]);\r\n    const [fretRange, setFretRange] = useState(DEFAULT_FRETBOARD_PROPS.fretRange);\r\n    const [fretLo, fretHi] = fretRange;\r\n\r\n    return (\r\n        <StyledFretboardpage>\r\n            {isFullScreen && (\r\n                <Modal setIsOpen={setIsFullScreen}>\r\n                    <div className=\"resize\">\r\n                        <Fretboard\r\n                            model={model}\r\n                            voicing={voicing}\r\n                            tuning={tuning.value}\r\n                            fretRange={fretRange}\r\n                        />\r\n                    </div>\r\n                </Modal>\r\n            )}\r\n            <div className=\"view-header\">\r\n                <span>Instrument</span>\r\n                <span>View</span>\r\n                <span>Notes</span>\r\n            </div>\r\n            <ColumnManager tablet={[\"1fr\", \"2fr\"]} desktop={[\"1fr\", \"2fr\", \"1fr\"]}>\r\n                <div>\r\n                    <Card title=\"Tuning\">\r\n                        <ul className=\"edit\">\r\n                            <li>\r\n                                <InputRow label=\"Preset\">\r\n                                    <DropdownInput value={tuning} setValue={setTuning} options={FRETBOARD_TUNING_VALUES} />\r\n                                </InputRow>\r\n                            </li>\r\n                            {tuning.id === TuningId.Standard &&\r\n                                <li>\r\n                                    <InputRow label=\"Voicing\">\r\n                                        <DropdownInput value={voicing} setValue={setVoicing} options={filteredVoicings} />\r\n                                    </InputRow>\r\n                                </li>\r\n                            }\r\n                        </ul>\r\n                    </Card >\r\n                    <Card title=\"Range\">\r\n                        <ul className=\"edit\">\r\n                            <li>\r\n                                <InputRow label=\"Low Fret\">\r\n                                    <NumericInput value={fretLo} min={0} max={fretHi} setValue={v => setFretRange([v, fretHi])} />\r\n                                </InputRow>\r\n                            </li>\r\n                            <li>\r\n                                <InputRow label=\"High Fret\">\r\n                                    <NumericInput value={fretHi} min={fretLo} max={24} setValue={v => setFretRange([fretLo, v])} />\r\n                                </InputRow>\r\n                            </li>\r\n                        </ul>\r\n                    </Card >\r\n                </div>\r\n                <div>\r\n                    <Card title=\"Fretboard\" className=\"view\"\r\n                        action={<ButtonInput className=\"maximize\" onClick={() => setIsFullScreen(true)}>\r\n                            <Icon iconId=\"maximize\" />\r\n                        </ButtonInput>}\r\n                    >\r\n                        <Fretboard\r\n                            model={model}\r\n                            voicing={voicing}\r\n                            tuning={tuning.value}\r\n                            fretRange={fretRange}\r\n                        />\r\n                    </Card>\r\n                </div>\r\n\r\n                <div>\r\n                    <Card title=\"Root\">\r\n                        <ul className=\"edit\">\r\n                            <li>\r\n                                <InputRow label=\"Key Center\">\r\n                                    <DropdownInput value={root} setValue={setRoot} options={NOTE_PRESETS} />\r\n                                </InputRow>\r\n                            </li>\r\n                        </ul>\r\n                    </Card>\r\n                    <Card title=\"Intervals\">\r\n                        <ul className=\"edit\">\r\n                            <li>\r\n                                <InputRow label=\"Model Type\">\r\n                                    <DropdownInput value={modelType} setValue={setModelType} options={TYPE_OPTIONS} />\r\n                                </InputRow>\r\n                            </li>\r\n                            <li>\r\n                                <InputRow label=\"Preset\">\r\n                                    <DropdownInput value={modelConfig} setValue={setModelConfig} options={modelOptions} />\r\n                                </InputRow>\r\n                            </li>\r\n                        </ul>\r\n                    </Card>\r\n                </div>\r\n            </ColumnManager>\r\n        </StyledFretboardpage>\r\n    );\r\n};\r\n\r\nexport default Fretboardpage;\r\n","import FretboardPage from \"../../components/pages/view/FretboardPage\";\r\n\r\nexport default FretboardPage;\r\n","import styled from 'styled-components';\r\n\r\nconst StyledFretboard = styled.div`\r\n    display: inline-grid;\r\n\twidth: 100%;\r\n\tbackground-image: radial-gradient(ellipse, #E8DBB8 0%, #D0B27C 100%);\r\n\tfont-size: 90%;\r\n\tmargin: 16px 0;\r\n\r\n    .fret {\r\n        display: inline-flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        position: relative;\r\n        border-right: 2px solid darkgrey;\r\n    }\r\n\r\n    .fret.open {\r\n        border-right: 3px solid grey;\r\n        background-color: #D0B27C;;\r\n    }\r\n\r\n    /* Used to maintain aspect ratio */\r\n\r\n    .fret::before {\r\n        content: \"\";\r\n        display: block;\r\n        height: 0;\r\n        width: 0;\r\n        margin-top: calc(1/2 * 100%);\r\n    }\r\n\r\n    /* Fret String */\r\n\r\n    .fret-string {\r\n        border-top: 1px solid grey;\r\n        width: 100%;\r\n    }\r\n\r\n    /* Fret Numbers */\r\n\r\n    .fret-number {\r\n        position: absolute;\r\n        bottom: 100%;\r\n    }\r\n\r\n    /* Fret Dots */\r\n\r\n    .fret-dots {\r\n        position: absolute;\r\n        top: 95%;\r\n        font-size: 16px;\r\n        white-space: nowrap;\r\n    }\r\n\r\n    .fret-number, .fret-dots {\r\n        color: #888;\r\n    }\r\n`;\r\n\r\nexport default StyledFretboard;\r\n","\r\nimport * as React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { IFretProps } from \"./Fretboard.utils\";\r\n\r\nconst StyledFretLabel = styled.div`\r\n\tposition: absolute;\r\n\theight: 60%;\r\n\taspect-ratio: 1;\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\tborder-radius: 100%;\r\n\tbackground-color: ${({ $bgColor }) => $bgColor ? $bgColor : 'transparent'};\r\n\tcolor: ${({ $fgColor }) => $fgColor ? $fgColor : ''};\r\n\r\n\tcursor: pointer;\r\n\t&:hover {\r\n\t\theight: 80%;\r\n\t}\r\n`;\r\n\r\n\r\nconst FretLabel: React.FC<IFretProps> = props => {\r\n\r\n\tconst bgColor = props.colorMapFn(props);\r\n\r\n\tlet fgColor = 'white';\r\n\r\n\treturn (\r\n\t\t<StyledFretLabel $bgColor={bgColor} $fgColor={fgColor} onClick={null} className=\"fret-label\">\r\n\t\t\t{null}\r\n\t\t</StyledFretLabel>\r\n\t);\r\n};\r\n\r\nexport default FretLabel;\r\n","import * as React from \"react\";\r\nimport StyledFretboard from \"./Fretboard.styles\";\r\nimport { DEFAULT_FRETBOARD_PROPS, getDotsForFret, getFretRatios, IFretboardProps, IFretProps } from \"./Fretboard.utils\";\r\nimport FretLabel from \"./FretLabel\";\r\n\r\nexport const Fret: React.FC<IFretProps> = props => {\r\n\r\n\tconst { tuning, stringIndex, fretIndex, showFretNumbers, showFretDots } = props;\r\n\r\n\tconst classes = ['fret'];\r\n\tif (fretIndex === 0)\r\n\t\tclasses.push('open');\r\n\r\n\tconst isLowString = stringIndex === tuning.length - 1;\r\n\tconst isHighString = stringIndex === 0;\r\n\r\n\treturn (\r\n\t\t<div className={classes.join(' ')}>\r\n\t\t\t<div className=\"fret-number\">\r\n\t\t\t\t{showFretNumbers && isHighString && fretIndex > 0 && fretIndex}\r\n\t\t\t</div>\r\n\t\t\t<div className='fret-string' />\r\n\t\t\t<FretLabel {...props} />\r\n\t\t\t<div className=\"fret-dots\">\r\n\t\t\t\t{showFretDots && isLowString && fretIndex > 0 && getDotsForFret(fretIndex)}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst getFrets = (props: IFretboardProps) => {\r\n\tconst { fretRange, tuning } = props;\r\n\tconst [lo, hi] = fretRange;\r\n\r\n\tconst allFrets = [];\r\n\tfor (let s = 0; s < tuning.length; s++) {\r\n\t\tfor (let f = lo; f <= hi; f++) {\r\n\t\t\tallFrets.push(\r\n\t\t\t\t<Fret\r\n\t\t\t\t\tkey={`s${s}-f${f}`}\r\n\t\t\t\t\tstringIndex={s}\r\n\t\t\t\t\tfretIndex={f}\r\n\t\t\t\t\ttuning={tuning}\r\n\t\t\t\t\t{...props}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\treturn allFrets;\r\n};\r\n\r\nconst Fretboard: React.FC<IFretboardProps> = (userProps) => {\r\n\tconst props = { ...DEFAULT_FRETBOARD_PROPS, ...userProps };\r\n\r\n\tconst [lo, hi] = props.fretRange;\r\n\tconst numFrets = hi - lo + 1;\r\n\tconst numStrings = props.tuning.length;\r\n\tconst gridTemplateColumns = getFretRatios(numFrets).map(n => n + 'fr').join(' ');\r\n\tconst gridTemplateRows = `repeat(${numStrings}, 1fr)`;\r\n\tconst fretboardStyles = {\r\n\t\tgridTemplateColumns,\r\n\t\tgridTemplateRows\r\n\t};\r\n\r\n\treturn (\r\n\t\t<StyledFretboard className='fretboard' style={fretboardStyles}>\r\n\t\t\t{getFrets(props)}\r\n\t\t</StyledFretboard>\r\n\t);\r\n};\r\n\r\nexport default Fretboard;\r\n","import ArrayUtils from \"../../core/general/Array.utils\";\r\nimport Note from '../../core/models/Note';\r\nimport { NoteId } from './../../core/models/Model.constants';\r\n\r\nexport enum TuningId {\r\n    Standard = 'standard',\r\n    StandardSeven = 'standard-seven',\r\n    StandardBass = 'standard-bass',\r\n    Flat = 'flat',\r\n    DoubleFlat = 'double-flat',\r\n    DropD = 'drop-d',\r\n    DADGAD = 'dadgad',\r\n    Banjo = 'banjo',\r\n    Violin = 'violin',\r\n    OpenA = 'open-a',\r\n    OpenB = 'open-b',\r\n    OpenC = 'open-c',\r\n    OpenD = 'open-d',\r\n    OpenE = 'open-e',\r\n    OpenF = 'open-f',\r\n    OpenG = 'open-g',\r\n}\r\n\r\nexport interface ITuning {\r\n    id: TuningId;\r\n    name: string;\r\n    value: number[]\r\n}\r\n\r\nconst formatPreset = (id: TuningId, name: string, value: number[]): ITuning => ({\r\n    id,\r\n    name,\r\n    value\r\n});\r\n\r\nconst getPitch = (noteId: NoteId, octave: number): number => Note.getNote(noteId, octave).pod[0];\r\n\r\nexport const TUNING_PRESET_MAP = new Map<TuningId, ITuning>([\r\n    [TuningId.Standard, formatPreset(\r\n        TuningId.Standard,\r\n        'Standard',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.Flat, formatPreset(\r\n        TuningId.Flat,\r\n        'Flat',\r\n        [\r\n            getPitch(NoteId.Eb, 5),\r\n            getPitch(NoteId.Bb, 4),\r\n            getPitch(NoteId.Gb, 4),\r\n            getPitch(NoteId.Db, 4),\r\n            getPitch(NoteId.Ab, 3),\r\n            getPitch(NoteId.Eb, 3)\r\n        ]\r\n    )],\r\n    [TuningId.DoubleFlat, formatPreset(\r\n        TuningId.DoubleFlat,\r\n        'Double Flat',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.F, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.StandardSeven, formatPreset(\r\n        TuningId.StandardSeven,\r\n        'Standard 7-String',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3),\r\n            getPitch(NoteId.B, 3)\r\n        ]\r\n    )],\r\n    [TuningId.StandardBass, formatPreset(\r\n        TuningId.StandardBass,\r\n        'Standard Bass',\r\n        [\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3),\r\n            getPitch(NoteId.A, 2),\r\n            getPitch(NoteId.E, 2)\r\n        ]\r\n    )],\r\n    [TuningId.DropD, formatPreset(\r\n        TuningId.DropD,\r\n        'Drop D',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.DADGAD, formatPreset(\r\n        TuningId.DADGAD,\r\n        'DADGAD',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    // Unconfirmed\r\n    [TuningId.Banjo, formatPreset(\r\n        TuningId.Banjo,\r\n        'Banjo',\r\n        [\r\n            getPitch(NoteId.G, 5),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    // Unconfirmed\r\n    [TuningId.Violin, formatPreset(\r\n        TuningId.Violin,\r\n        'Violin',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 4)\r\n        ]\r\n    )],\r\n    [TuningId.OpenA, formatPreset(\r\n        TuningId.OpenA,\r\n        'Open A',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.E, 4),\r\n            getPitch(NoteId.Cs, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenB, formatPreset(\r\n        TuningId.OpenB,\r\n        'Open B',\r\n        [\r\n            getPitch(NoteId.Ds, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Fs, 4),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Fs, 3),\r\n            getPitch(NoteId.B, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenC, formatPreset(\r\n        TuningId.OpenC,\r\n        'Open C',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.C, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenD, formatPreset(\r\n        TuningId.OpenD,\r\n        'Open D',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.Fs, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenE, formatPreset(\r\n        TuningId.OpenE,\r\n        'Open E',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Gs, 4),\r\n            getPitch(NoteId.E, 4),\r\n            getPitch(NoteId.B, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenF, formatPreset(\r\n        TuningId.OpenF,\r\n        'Open F',\r\n        [\r\n            getPitch(NoteId.F, 5),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.F, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.F, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenG, formatPreset(\r\n        TuningId.OpenG,\r\n        'Open G',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )]\r\n]);\r\n\r\nexport const FRETBOARD_TUNING_VALUES = ArrayUtils.mapToArray(TUNING_PRESET_MAP);\r\n","import Chord from '../../core/models/Chord';\r\nimport IntervalSpan from '../../core/models/Interval';\r\nimport { IModelConfig } from '../../core/models/Model.constants';\r\nimport Note from '../../core/models/Note';\r\nimport Scale from '../../core/models/Scale';\r\nimport { ITuning, TuningId, TUNING_PRESET_MAP } from './Fretboard.tuning';\r\nimport { IVoicing } from './Fretboard.voicing';\r\n\r\nexport interface IFretLabelProps {\r\n\tnote?: Note;\r\n\tcolor?: string;\r\n\tfreq?: number;\r\n}\r\n\r\nexport interface IFretboardProps {\r\n\tfretRange?: [number, number];\r\n\tshowFretDots?: boolean;\r\n\tshowFretNumbers?: boolean;\r\n\tcolorMapFn?: (fretProps: IFretProps) => string | undefined;\r\n\tvoicing?: IVoicing,\r\n\ttuning?: number[]; // ITuning,\r\n\tmodel?: Chord | Scale;\r\n}\r\n\r\nexport interface IFretProps extends IFretboardProps {\r\n\tstringIndex: number;\r\n\tfretIndex: number;\r\n}\r\n\r\nexport const DOTTED_FRET_INDICES = [true, false, false, true, false, true, false, true, false, true, false, false];\r\n\r\nexport const FRET_SIZE_RATIO = Math.pow((1 / 2), (1 / 12));\r\n\r\nconst isIntervalInVoicing = (interval: IntervalSpan, voicing: IVoicing, stringIndex: number) => {\r\n\tif (!voicing || !voicing.value) return true;\r\n\tconst v = voicing.value[stringIndex];\r\n\tconst d = interval.getDegree();\r\n\tif (Array.isArray(v)) {\r\n\t\treturn v.some(n => doesVoicingValueMatch(d, n));\r\n\t}\r\n\telse if (typeof v === 'number') {\r\n\t\treturn doesVoicingValueMatch(d, v);\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nexport const getFretColor = (props: IFretProps): string | undefined => {\r\n\tconst { stringIndex, fretIndex, tuning, model, voicing } = props;\r\n\tconst noteIndex = tuning[stringIndex] + fretIndex;\r\n\tconst [interval, note] = model.tryGetPodPairAtPitch(noteIndex);\r\n\r\n\tif (!note) return;\r\n\r\n\tif (voicing && !isIntervalInVoicing(interval, voicing, stringIndex)) {\r\n\t\treturn `#00000033`\r\n\t}\r\n\r\n\treturn interval.getColor();\r\n}\r\n\r\nexport const DEFAULT_FRETBOARD_PROPS: IFretboardProps = {\r\n\tfretRange: [1, 12],\r\n\ttuning: TUNING_PRESET_MAP.get(TuningId.Standard).value,\r\n\tshowFretDots: true,\r\n\tshowFretNumbers: true,\r\n\tcolorMapFn: getFretColor\r\n};\r\n\r\nexport const getFretRatios = (numFrets: number): number[] => {\r\n\tconst ratios = [];\r\n\tfor (let i = 1; i <= numFrets; i++) {\r\n\t\tratios.push((i <= 1) ? 1 : ratios[i - 2] * FRET_SIZE_RATIO);\r\n\t}\r\n\treturn ratios;\r\n};\r\n\r\nexport const getDotsForFret = (fretNumber: number): string => {\r\n\tconst mod = fretNumber % 12;\r\n\tif (mod === 0)\r\n\t\treturn '• •';\r\n\telse if (DOTTED_FRET_INDICES[mod])\r\n\t\treturn '•';\r\n\treturn '';\r\n};\r\n\r\nconst doesVoicingValueMatch = (d: number, v: number) => {\r\n\treturn d + 1 === v;\r\n}\r\n","import ArrayUtils from \"../../core/general/Array.utils\";\r\n\r\nexport enum VoicingId {\r\n    None = 'None',\r\n    Chord_Triad_CShape_1 = 'Chord_Triad_CShape_1',\r\n    Chord_Triad_AShape_1 = 'Chord_Triad_AShape_1',\r\n    Chord_Triad_GShape_1 = 'Chord_Triad_GShape_1',\r\n    Chord_Triad_EShape_1 = 'Chord_Triad_EShape_1',\r\n    Chord_Triad_DShape_1 = 'Chord_Triad_DShape_1',\r\n    Chord_Sixth_CShape_1 = 'Chord_Sixth_CShape_1',\r\n    Chord_Sixth_AShape_1 = 'Chord_Sixth_AShape_1',\r\n    Chord_Sixth_GShape_1 = 'Chord_Sixth_GShape_1',\r\n    Chord_Sixth_EShape_1 = 'Chord_Sixth_EShape_1',\r\n    Chord_Sixth_DShape_1 = 'Chord_Sixth_DShape_1',\r\n    Chord_Seventh_CShape_1 = 'Chord_Seventh_CShape_1',\r\n    Chord_Seventh_AShape_1 = 'Chord_Seventh_AShape_1',\r\n    Chord_Seventh_GShape_1 = 'Chord_Seventh_GShape_1',\r\n    Chord_Seventh_EShape_1 = 'Chord_Seventh_EShape_1',\r\n    Chord_Seventh_DShape_1 = 'Chord_Seventh_DShape_1',\r\n    Chord_Shell_E_37 = 'Chord_Shell_E_37',\r\n    Chord_Shell_E_73 = 'Chord_Shell_E_73',\r\n    Chord_Shell_A_37 = 'Chord_Shell_A_37',\r\n    Chord_Shell_A_73 = 'Chord_Shell_A_73',\r\n    Chord_Shell_D_37 = 'Chord_Shell_D_37',\r\n    Chord_Shell_D_73 = 'Chord_Shell_D_73',\r\n    Scale_DoubleOctave_CShape_1 = 'Scale_DoubleOctave_CShape_1',\r\n    Scale_DoubleOctave_CShape_2 = 'Scale_DoubleOctave_CShape_2',\r\n    Scale_DoubleOctave_AShape_1 = 'Scale_DoubleOctave_AShape_1',\r\n    Scale_DoubleOctave_GShape_1 = 'Scale_DoubleOctave_GShape_1',\r\n    Scale_DoubleOctave_EShape_1 = 'Scale_DoubleOctave_EShape_1',\r\n    Scale_DoubleOctave_EShape_2 = 'Scale_DoubleOctave_EShape_2',\r\n    Scale_DoubleOctave_DShape_1 = 'Scale_DoubleOctave_DShape_1',\r\n}\r\n\r\nexport interface IVoicing {\r\n    id: VoicingId;\r\n    name: string;\r\n    value: (number | number[])[]\r\n}\r\n\r\nconst formatPreset = (id: VoicingId, name: string, value: (number | number[])[]): IVoicing => ({\r\n    id,\r\n    name,\r\n    value\r\n});\r\n\r\nexport const VOICING_PRESET_MAP = new Map<VoicingId, IVoicing>([\r\n    // Triads\r\n    [VoicingId.Chord_Triad_CShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_CShape_1,\r\n        'C Shape Triad',\r\n        [3, 1, 5, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Triad_AShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_AShape_1,\r\n        'A Shape Triad',\r\n        [5, 3, 1, 5, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Triad_GShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_GShape_1,\r\n        'G Shape Triad',\r\n        [1, 5, 1, 5, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Triad_EShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_EShape_1,\r\n        'E Shape Triad',\r\n        [1, 5, 3, 1, 5, 1]\r\n    )],\r\n    [VoicingId.Chord_Triad_DShape_1, formatPreset(\r\n        VoicingId.Chord_Triad_DShape_1,\r\n        'D Shape Triad',\r\n        [3, 1, 5, 1, null, null]\r\n    )],\r\n    // Sixths\r\n    [VoicingId.Chord_Sixth_CShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_CShape_1,\r\n        'C Shape 6th Chord',\r\n        [3, 6, 5, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Sixth_AShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_AShape_1,\r\n        'A Shape 6th Chord',\r\n        [5, 3, 6, 5, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Sixth_GShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_GShape_1,\r\n        'G Shape 6th Chord',\r\n        [6, 5, 1, 5, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Sixth_EShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_EShape_1,\r\n        'E Shape 6th Chord',\r\n        [1, 5, 3, 6, 5, 1]\r\n    )],\r\n    [VoicingId.Chord_Sixth_DShape_1, formatPreset(\r\n        VoicingId.Chord_Sixth_DShape_1,\r\n        'D Shape 6th Chord',\r\n        [3, 6, 5, 1, null, null]\r\n    )],\r\n    // Sevenths\r\n    [VoicingId.Chord_Seventh_CShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_CShape_1,\r\n        'C Shape 7th Chord',\r\n        [3, 7, 5, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Seventh_AShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_AShape_1,\r\n        'A Shape 7th Chord',\r\n        [5, 3, 7, 5, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Seventh_GShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_GShape_1,\r\n        'G Shape 7th Chord',\r\n        [7, 5, 1, 5, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Seventh_EShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_EShape_1,\r\n        'E Shape 7th Chord',\r\n        [1, 5, 3, 7, 5, 1]\r\n    )],\r\n    [VoicingId.Chord_Seventh_DShape_1, formatPreset(\r\n        VoicingId.Chord_Seventh_DShape_1,\r\n        'D Shape 7th Chord',\r\n        [3, 7, 5, 1, null, null]\r\n    )],\r\n    // Shells\r\n    [VoicingId.Chord_Shell_E_37, formatPreset(\r\n        VoicingId.Chord_Shell_E_37,\r\n        'Shell E 3-7',\r\n        [null, null, null, 7, 3, 1]\r\n    )],\r\n    [VoicingId.Chord_Shell_E_73, formatPreset(\r\n        VoicingId.Chord_Shell_E_73,\r\n        'Shell E 7-3',\r\n        [null, null, 3, 7, null, 1]\r\n    )],\r\n    [VoicingId.Chord_Shell_A_37, formatPreset(\r\n        VoicingId.Chord_Shell_A_37,\r\n        'Shell A 3-7',\r\n        [null, null, 7, 3, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Shell_A_73, formatPreset(\r\n        VoicingId.Chord_Shell_A_73,\r\n        'Shell A 7-3',\r\n        [null, 3, 7, null, 1, null]\r\n    )],\r\n    [VoicingId.Chord_Shell_D_37, formatPreset(\r\n        VoicingId.Chord_Shell_D_37,\r\n        'Shell D 3-7',\r\n        [null, 7, 3, 1, null, null]\r\n    )],\r\n    [VoicingId.Chord_Shell_D_73, formatPreset(\r\n        VoicingId.Chord_Shell_D_73,\r\n        'Shell D 7-3',\r\n        [3, 7, null, 1, null, null]\r\n    )],\r\n    // CAGED Scales\r\n    [VoicingId.Scale_DoubleOctave_EShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_EShape_1,\r\n        'E Shape Scale (Locrian)',\r\n        [[1, 2, 3], [6, 7], [3, 4, 5], [7, 1, 2], [4, 5, 6], [1, 2, 3]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_EShape_2, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_EShape_2,\r\n        'E Shape Scale (Ionian)',\r\n        [[7, 1, 2], [5, 6], [2, 3, 4], [6, 7, 1], [3, 4, 5], [1, 2]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_DShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_DShape_1,\r\n        'D Shape Scale (Dorian)',\r\n        [[1, 2, 3], [5, 6, 7], [2, 3, 4], [6, 7, 1], [4, 5], [1, 2, 3]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_CShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_CShape_1,\r\n        'C Shape Scale (Phrygian)',\r\n        [[1, 2, 3], [5, 6, 7], [3, 4], [7, 1, 2], [4, 5, 6], [1, 2, 3]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_CShape_2, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_CShape_2,\r\n        'C Shape Scale (Lydian)',\r\n        [[7, 1, 2], [4, 5, 6], [2, 3], [6, 7, 1], [3, 4, 5], [1, 2]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_AShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_AShape_1,\r\n        'A Shape Scale (Mixolydian)',\r\n        [[1, 2], [5, 6, 7], [2, 3, 4], [6, 7, 1], [3, 4, 5], [1, 2]]\r\n    )],\r\n    [VoicingId.Scale_DoubleOctave_GShape_1, formatPreset(\r\n        VoicingId.Scale_DoubleOctave_GShape_1,\r\n        'G Shape Scale (Aeolian)',\r\n        [[1, 2, 3], [5, 6, 7], [2, 3, 4], [7, 1], [4, 5, 6], [1, 2, 3]]\r\n    )]\r\n])\r\n\r\nexport const VOICING_PRESETS = ArrayUtils.mapToArray(VOICING_PRESET_MAP);\r\n"],"names":["StyledColumnManager","styled","$tablet","join","$desktop","children","tablet","desktop","React","StyledDropdownInput","props","value","setValue","options","idProperty","displayProperty","className","onChange","e","target","selectedIndex","map","v","i","key","name","StyledNumbericInput","theme","utils","border","status","interactive","active","highlight","rest","ButtonInput","onClick","newVal","min","Math","max","Icon","iconId","size","type","StyledCard","surface","card","CardHeader","title","action","StyledInputRow","$y","dark3","label","y","StyledOverlay","StyledContainer","setIsOpen","Card","draggable","StyledFretboardpage","text","primary","VOICING_OPTIONS","id","VoicingId","undefined","VOICING_PRESETS","TYPE_OPTIONS","ModelType","data","CHORD_PRESETS","SCALE_PRESETS","model","useState","modelType","_setModelType","modelOptions","modelConfig","setModelConfig","NOTE_PRESETS","root","setRoot","isFullScreen","setIsFullScreen","Chord","modelId","Note","Scale","filteredVoicings","filter","some","x","intervals","find","ivl","pod","voicing","setVoicing","FRETBOARD_TUNING_VALUES","tuning","setTuning","DEFAULT_FRETBOARD_PROPS","fretRange","setFretRange","fretLo","fretHi","Modal","Fretboard","ColumnManager","InputRow","DropdownInput","TuningId","NumericInput","StyledFretLabel","$bgColor","$fgColor","bgColor","colorMapFn","Fret","stringIndex","fretIndex","showFretNumbers","showFretDots","classes","push","isLowString","length","isHighString","FretLabel","getDotsForFret","userProps","lo","numFrets","numStrings","fretboardStyles","gridTemplateColumns","getFretRatios","n","gridTemplateRows","StyledFretboard","style","hi","allFrets","s","f","getFrets","formatPreset","getPitch","noteId","octave","TUNING_PRESET_MAP","Map","Standard","NoteId","Flat","DoubleFlat","StandardSeven","StandardBass","DropD","DADGAD","Banjo","Violin","OpenA","OpenB","OpenC","OpenD","OpenE","OpenF","OpenG","ArrayUtils","DOTTED_FRET_INDICES","FRET_SIZE_RATIO","pow","noteIndex","tryGetPodPairAtPitch","interval","d","getDegree","Array","isArray","doesVoicingValueMatch","isIntervalInVoicing","getColor","ratios","fretNumber","mod","VOICING_PRESET_MAP","Chord_Triad_CShape_1","Chord_Triad_AShape_1","Chord_Triad_GShape_1","Chord_Triad_EShape_1","Chord_Triad_DShape_1","Chord_Sixth_CShape_1","Chord_Sixth_AShape_1","Chord_Sixth_GShape_1","Chord_Sixth_EShape_1","Chord_Sixth_DShape_1","Chord_Seventh_CShape_1","Chord_Seventh_AShape_1","Chord_Seventh_GShape_1","Chord_Seventh_EShape_1","Chord_Seventh_DShape_1","Chord_Shell_E_37","Chord_Shell_E_73","Chord_Shell_A_37","Chord_Shell_A_73","Chord_Shell_D_37","Chord_Shell_D_73","Scale_DoubleOctave_EShape_1","Scale_DoubleOctave_EShape_2","Scale_DoubleOctave_DShape_1","Scale_DoubleOctave_CShape_1","Scale_DoubleOctave_CShape_2","Scale_DoubleOctave_AShape_1","Scale_DoubleOctave_GShape_1"],"sourceRoot":""}