{"version":3,"file":"0239f6cf0d563deb0c24e35672976e4da85e0c3d-b0c9b82827ff537b63e6.js","mappings":"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","sources":["webpack://play-what/./src/app/components/shared/ui/Card.tsx","webpack://play-what/./src/core/IntervalQuality.constants.ts","webpack://play-what/./src/core/Interval.utils.ts","webpack://play-what/./src/app/components/shared/ui/Table.tsx","webpack://play-what/./src/app/components/pages/browse/cards/CollectionTable.tsx","webpack://play-what/./src/app/components/pages/browse/cards/CollectionCard.tsx","webpack://play-what/./src/app/components/pages/browse/CollectionPage.tsx","webpack://play-what/./src/app/components/shared/layout/ColumnManager.tsx","webpack://play-what/./src/core/Accidental.constants.ts","webpack://play-what/./src/core/Diatonic.constants.ts","webpack://play-what/./src/core/Note.utils.ts","webpack://play-what/./src/core/Pod.utils.ts","webpack://play-what/./src/core/Routing.utils.ts","webpack://play-what/./src/core/primitives/Number.utils.ts"],"sourcesContent":["import React, { PropsWithChildren } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface ICardHeaderProps {\r\n  title: string;\r\n  level?: number;\r\n  action?: any;\r\n}\r\n\r\nexport const StyledCardHeader = styled.div`\r\n  margin-bottom: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport const CardHeader: React.FC<ICardHeaderProps> = ({\r\n  title,\r\n  level = 2,\r\n  action = null,\r\n}) => {\r\n  const AsTag: any = `h${level}`;\r\n  return (\r\n    <StyledCardHeader>\r\n      <AsTag>{title}</AsTag>\r\n      {action}\r\n    </StyledCardHeader>\r\n  );\r\n};\r\n\r\nexport interface ICardProps extends PropsWithChildren<any> {\r\n  title?: string;\r\n  subtitle?: string;\r\n  action?: any;\r\n  level?: number;\r\n}\r\n\r\nexport const StyledCard = styled.div`\r\n  background: ${(props) => props.theme?.surface?.card};\r\n  width: 100%;\r\n  border-radius: 16px;\r\n  padding: 16px;\r\n`;\r\n\r\nconst Card: React.FC<ICardProps> = ({\r\n  title,\r\n  subtitle,\r\n  action,\r\n  children,\r\n  level = 1,\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <StyledCard {...rest}>\r\n      {title && <CardHeader title={title} action={action} level={level} />}\r\n      {subtitle && <CardHeader title={subtitle} level={level + 1} />}\r\n      {children}\r\n    </StyledCard>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import ArrayUtils from \"./primitives/Array.utils\";\r\nimport { IPreset, PresetMap } from \"./Core.constants\";\r\n\r\nexport enum IntervalQualityId {\r\n  Diminished = \"diminished\",\r\n  Minor = \"minor\",\r\n  Perfect = \"perfect\",\r\n  Major = \"major\",\r\n  Augmented = \"augmented\",\r\n}\r\n\r\nexport interface IIntervalQualityPreset extends IPreset<IntervalQualityId> {\r\n  symbol: string;\r\n  down?: IntervalQualityId;\r\n  up?: IntervalQualityId;\r\n}\r\n\r\nexport const INTERVAL_QUALITY_PRESET_MAP: PresetMap<\r\n  IntervalQualityId,\r\n  IIntervalQualityPreset\r\n> = new Map([\r\n  [\r\n    IntervalQualityId.Diminished,\r\n    {\r\n      presetId: IntervalQualityId.Diminished,\r\n      name: \"Diminished\",\r\n      symbol: \"d\",\r\n      down: undefined,\r\n      up: IntervalQualityId.Minor,\r\n    },\r\n  ],\r\n  [\r\n    IntervalQualityId.Minor,\r\n    {\r\n      presetId: IntervalQualityId.Minor,\r\n      name: \"Minor\",\r\n      symbol: \"m\",\r\n      down: IntervalQualityId.Diminished,\r\n      up: IntervalQualityId.Major,\r\n    },\r\n  ],\r\n  [\r\n    IntervalQualityId.Perfect,\r\n    {\r\n      presetId: IntervalQualityId.Perfect,\r\n      name: \"Perfect\",\r\n      symbol: \"P\",\r\n      down: IntervalQualityId.Diminished,\r\n      up: IntervalQualityId.Augmented,\r\n    },\r\n  ],\r\n  [\r\n    IntervalQualityId.Major,\r\n    {\r\n      presetId: IntervalQualityId.Major,\r\n      name: \"Major\",\r\n      symbol: \"M\",\r\n      down: IntervalQualityId.Minor,\r\n      up: IntervalQualityId.Augmented,\r\n    },\r\n  ],\r\n  [\r\n    IntervalQualityId.Augmented,\r\n    {\r\n      presetId: IntervalQualityId.Augmented,\r\n      name: \"Augmented\",\r\n      symbol: \"A\",\r\n      down: IntervalQualityId.Major,\r\n      up: undefined,\r\n    },\r\n  ],\r\n]);\r\n\r\nexport const INTERVAL_QUALITY_PRESETS = ArrayUtils.mapToArray(\r\n  INTERVAL_QUALITY_PRESET_MAP\r\n);\r\n","import { getFrequency } from \"./Frequency.utils\";\r\nimport {\r\n  CORE_INTERVALS,\r\n  getExtensionInversionId,\r\n  IIntervalPreset,\r\n  IntervalId,\r\n  INTERVAL_PRESET_MAP,\r\n} from \"./Interval.constants\";\r\nimport {\r\n  IIntervalQualityPreset,\r\n  IntervalQualityId,\r\n  INTERVAL_QUALITY_PRESET_MAP,\r\n} from \"./IntervalQuality.constants\";\r\nimport { IPod, MAX_POD } from \"./Pod.constants\";\r\nimport { reducePod } from \"./Pod.utils\";\r\n\r\nconst getIsExtended = (pod: IPod): boolean => {\r\n  return pod[0] > MAX_POD[0] || pod[1] > MAX_POD[1];\r\n};\r\n\r\nexport const getName = (pod: IPod) => {\r\n  const reduced = reducePod(pod);\r\n\r\n  const [noteIndex, d] = reduced;\r\n  const degreeIntervals = CORE_INTERVALS[d] as IIntervalPreset[];\r\n  if (!degreeIntervals) return \"?\";\r\n\r\n  const pIvl = degreeIntervals[0];\r\n  const loIvl = pIvl;\r\n  const hiIvl = degreeIntervals[degreeIntervals.length - 1];\r\n\r\n  // determine core interval and quality\r\n  let ivl: IIntervalPreset | undefined;\r\n  let quality: IIntervalQualityPreset | undefined;\r\n  if (degreeIntervals.length === 1) {\r\n    ivl = pIvl; // perfect\r\n    quality = INTERVAL_QUALITY_PRESET_MAP.get(\r\n      IntervalQualityId.Perfect\r\n    ) as IIntervalQualityPreset;\r\n  } else if (noteIndex <= loIvl.pod[0]) {\r\n    ivl = loIvl; // minor\r\n    quality = INTERVAL_QUALITY_PRESET_MAP.get(\r\n      IntervalQualityId.Minor\r\n    ) as IIntervalQualityPreset;\r\n  } else if (noteIndex >= hiIvl.pod[0]) {\r\n    ivl = hiIvl; // major\r\n    quality = INTERVAL_QUALITY_PRESET_MAP.get(\r\n      IntervalQualityId.Major\r\n    ) as IIntervalQualityPreset;\r\n  }\r\n\r\n  const offset = (ivl as IIntervalPreset).pod[0] - reduced[0];\r\n\r\n  if (offset === 0)\r\n    return `${(quality as IIntervalQualityPreset).symbol}${d + 1}`;\r\n  else if (offset > 0)\r\n    quality = INTERVAL_QUALITY_PRESET_MAP.get(\r\n      IntervalQualityId.Diminished\r\n    ) as IIntervalQualityPreset;\r\n  // dim\r\n  else if (offset < 0)\r\n    quality = INTERVAL_QUALITY_PRESET_MAP.get(\r\n      IntervalQualityId.Augmented\r\n    ) as IIntervalQualityPreset; // aug\r\n\r\n  const count = Math.abs(offset);\r\n  const qualityStr = (quality as IIntervalQualityPreset).symbol.repeat(count);\r\n\r\n  let value = `${qualityStr}${d + 1}`;\r\n\r\n  const isExtended = getIsExtended(pod);\r\n\r\n  if (isExtended) {\r\n    value = getExtensionInversionId(value as IntervalId);\r\n  }\r\n\r\n  return value;\r\n};\r\n\r\nexport const getNameFromId = (presetId: IntervalId) => {\r\n  return (INTERVAL_PRESET_MAP.get(presetId) as IIntervalPreset).name || \"\";\r\n};\r\n\r\nexport const getRatio = (pod: IPod) => {\r\n  const [p] = pod;\r\n\r\n  const baseline = getFrequency(0);\r\n  const compareTo = getFrequency(p);\r\n\r\n  const ratio = compareTo / baseline;\r\n\r\n  return `1:${ratio.toFixed(2)}`;\r\n};\r\n","import { Link } from \"gatsby\";\r\nimport React, { Fragment, ReactNode } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledTable = styled.table``;\r\n\r\ntype TOmit = undefined | null | false;\r\n\r\nconst getIsTypeOmit = (data: any): data is TOmit =>\r\n  data === undefined || data === null || data === false;\r\n\r\n// Col\r\n\r\nexport interface IColConfig {\r\n  isHeader?: boolean;\r\n  content: any;\r\n  colSpan?: number;\r\n  className?: string;\r\n  link?: string;\r\n}\r\n\r\ninterface IColProps extends IColConfig {\r\n  index: number;\r\n}\r\n\r\ntype TCol = string | number | IColConfig | ReactNode;\r\n\r\nconst Col: React.FC<IColProps> = ({\r\n  index,\r\n  isHeader,\r\n  content,\r\n  colSpan,\r\n  className,\r\n  link,\r\n}) => {\r\n  const ColTag = isHeader ? \"th\" : \"td\";\r\n  const WrapperTag = link ? Link : Fragment;\r\n  const wrapperProps: any = link ? { to: link } : {};\r\n\r\n  return (\r\n    <ColTag colSpan={colSpan} className={className}>\r\n      <WrapperTag {...wrapperProps}>{content || \"\"}</WrapperTag>\r\n    </ColTag>\r\n  );\r\n};\r\n\r\n// Row\r\n\r\nexport interface IRowConfig {\r\n  cols: (TCol | TOmit)[];\r\n  className?: string;\r\n  isHeader?: boolean;\r\n  headerColIndicies?: number[];\r\n}\r\n\r\nconst getIsConfig = (col: TCol): col is IColConfig =>\r\n  typeof col === \"object\" && col !== null && col.hasOwnProperty(\"content\");\r\n\r\nconst Row: React.FC<IRowConfig> = ({\r\n  cols,\r\n  isHeader,\r\n  className,\r\n  headerColIndicies = [],\r\n}) => {\r\n  return (\r\n    <tr className={className}>\r\n      {cols.map((col: any, i) => {\r\n        if (getIsTypeOmit(col)) return null;\r\n        const isConfig = getIsConfig(col);\r\n        const colConfig = !isConfig ? { content: col } : col;\r\n        return (\r\n          <Col\r\n            key={i}\r\n            index={i}\r\n            isHeader={isHeader || headerColIndicies.includes(i)}\r\n            {...colConfig}\r\n          />\r\n        );\r\n      })}\r\n    </tr>\r\n  );\r\n};\r\n\r\n// Table Section\r\n\r\ninterface ITableSectionConfig {\r\n  Tag: \"thead\" | \"tfoot\" | \"tbody\";\r\n  rows: (IRowConfig | TOmit)[];\r\n  headerColIndicies?: number[];\r\n}\r\n\r\nconst TableSection: React.FC<ITableSectionConfig> = ({\r\n  Tag,\r\n  rows,\r\n  headerColIndicies,\r\n}) => (\r\n  <Tag>\r\n    {rows.map((row, i) => {\r\n      if (getIsTypeOmit(row)) return null;\r\n      return (\r\n        <Row\r\n          key={i}\r\n          isHeader={Tag !== \"tbody\"}\r\n          headerColIndicies={headerColIndicies}\r\n          {...row}\r\n        />\r\n      );\r\n    })}\r\n  </Tag>\r\n);\r\n\r\n// Table\r\n\r\ninterface IColGroup {\r\n  span?: number;\r\n  className?: string;\r\n}\r\n\r\nexport interface ITableConfig {\r\n  thead?: (IRowConfig | TOmit)[];\r\n  tfoot?: (IRowConfig | TOmit)[];\r\n  tbody: (IRowConfig | TOmit)[];\r\n  styles?: any;\r\n  caption?: string;\r\n  colGroups?: IColGroup[];\r\n  className?: string;\r\n  headerColIndicies?: number[];\r\n}\r\n\r\nexport const Table: React.FC<ITableConfig> = ({\r\n  thead,\r\n  tfoot,\r\n  tbody,\r\n  styles,\r\n  colGroups,\r\n  caption,\r\n  headerColIndicies,\r\n  className,\r\n}) => {\r\n  return (\r\n    <StyledTable css={styles} className={className}>\r\n      {colGroups && (\r\n        <colgroup>\r\n          {colGroups.map((cg, i) => (\r\n            <col key={i} {...cg} />\r\n          ))}\r\n        </colgroup>\r\n      )}\r\n      {caption && <caption>{caption}</caption>}\r\n      {thead && (\r\n        <TableSection\r\n          Tag=\"thead\"\r\n          rows={thead}\r\n          headerColIndicies={headerColIndicies}\r\n        />\r\n      )}\r\n      {tfoot && (\r\n        <TableSection\r\n          Tag=\"tfoot\"\r\n          rows={tfoot}\r\n          headerColIndicies={headerColIndicies}\r\n        />\r\n      )}\r\n      {tbody && (\r\n        <TableSection\r\n          Tag=\"tbody\"\r\n          rows={tbody}\r\n          headerColIndicies={headerColIndicies}\r\n        />\r\n      )}\r\n    </StyledTable>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { css } from \"styled-components\";\r\nimport { PresetType } from \"../../../../../core/Core.constants\";\r\nimport { AnyPodListPreset } from \"../../../../../core/Core.derived\";\r\nimport { getName as getIntervalName } from \"../../../../../core/Interval.utils\";\r\nimport { INotePreset, NoteId } from \"../../../../../core/Note.constants\";\r\nimport { getName as getNoteName } from \"../../../../../core/Note.utils\";\r\nimport { IPod } from \"../../../../../core/Pod.constants\";\r\nimport { addPods, getRootedName } from \"../../../../../core/Pod.utils\";\r\nimport { getModelRoute } from \"../../../../../core/Routing.utils\";\r\nimport { Breakpoint, MediaQuery } from \"../../../../styles/breakpoint\";\r\nimport { Table } from \"../../../shared/ui/Table\";\r\n\r\nconst SEMITONES = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\r\n\r\nconst tableStyles = css`\r\n  width: 100%;\r\n  margin: auto;\r\n  border-collapse: collapse;\r\n  white-space: nowrap;\r\n\r\n  td {\r\n    &:not(:first-child) {\r\n      font-size: 80%;\r\n    }\r\n  }\r\n\r\n  td,\r\n  th {\r\n    line-height: 32px;\r\n    text-align: center;\r\n\r\n    &:not(:first-child) {\r\n      width: 32px;\r\n      height: 32px;\r\n\r\n      display: none;\r\n      ${MediaQuery.Tablet} {\r\n        display: table-cell;\r\n      }\r\n    }\r\n\r\n    &:first-child {\r\n      text-align: left;\r\n      padding: 0 8px;\r\n    }\r\n  }\r\n\r\n  td {\r\n    //border-right: 1px solid ${(props) => props.theme?.utils?.border};\r\n    //border-bottom: 1px solid ${(props) => props.theme?.utils?.border};\r\n    &.active {\r\n      background-color: ${(props) => props.theme?.surface?.bg};\r\n    }\r\n  }\r\n\r\n  thead {\r\n    text-transform: uppercase;\r\n    font-size: 80%;\r\n\r\n    @media (max-width: ${Breakpoint.Tablet - 1}px) {\r\n      display: none;\r\n    }\r\n    tr th {\r\n      background-color: ${(props) => props.theme?.surface?.nav};\r\n      color: ${({ theme }) => theme?.text?.inverted};\r\n    }\r\n\r\n    th:first-child {\r\n      border-radius: 8px 0 0 8px;\r\n    }\r\n    th:last-child {\r\n      border-radius: 0 8px 8px 0;\r\n    }\r\n  }\r\n\r\n  a {\r\n    display: block;\r\n  }\r\n`;\r\n\r\nconst getSemitoneCol = (\r\n  pods: IPod[],\r\n  h: number,\r\n  semitones: number[],\r\n  rootNotePreset?: INotePreset\r\n) => {\r\n  const index = pods.findIndex((ivl) => ivl[0] + 1 === h);\r\n  const className = semitones.includes(h) ? \"active\" : undefined;\r\n  if (index < 0) {\r\n    return {\r\n      className,\r\n      content: \"\",\r\n    };\r\n  }\r\n  const text = rootNotePreset\r\n    ? getNoteName(addPods(rootNotePreset.pod, pods[index]))\r\n    : getIntervalName(pods[index]);\r\n  return {\r\n    className,\r\n    content: text,\r\n  };\r\n};\r\n\r\nexport interface ICollectionTableProps {\r\n  data: AnyPodListPreset[];\r\n  rootNotePreset?: INotePreset;\r\n  semitones?: number[];\r\n  presetType: PresetType;\r\n}\r\n\r\nconst CollectionTable: React.FC<ICollectionTableProps> = ({\r\n  data,\r\n  semitones = [],\r\n  rootNotePreset,\r\n  presetType,\r\n}) => {\r\n  return (\r\n    <Table\r\n      styles={tableStyles}\r\n      thead={[\r\n        {\r\n          cols: [\r\n            \"Name\",\r\n            {\r\n              colSpan: 12,\r\n              content: rootNotePreset ? \"Notes\" : \"Intervals\",\r\n            },\r\n          ],\r\n        },\r\n      ]}\r\n      tbody={data.map((d, i) => {\r\n        return {\r\n          cols: [\r\n            {\r\n              link: getModelRoute(\r\n                presetType,\r\n                d.presetId,\r\n                rootNotePreset ? (rootNotePreset.presetId as NoteId) : undefined\r\n              ),\r\n              content: getRootedName(d, rootNotePreset),\r\n            },\r\n            ...SEMITONES.map((h, i) =>\r\n              getSemitoneCol(d.pods, h, semitones, rootNotePreset)\r\n            ),\r\n          ],\r\n        };\r\n      })}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CollectionTable;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { PresetType } from \"../../../../../core/Core.constants\";\r\nimport { AnyPodListPreset } from \"../../../../../core/Core.derived\";\r\nimport Card, { ICardProps } from \"../../../shared/ui/Card\";\r\nimport CollectionTable from \"./CollectionTable\";\r\n\r\nexport interface ICollectionCardProps extends ICardProps {\r\n  data: AnyPodListPreset[];\r\n  description?: string;\r\n  presetType: PresetType;\r\n}\r\n\r\nconst StyledCollectionCard = styled(Card)`\r\n  p {\r\n    margin: 16px 0;\r\n  }\r\n`;\r\n\r\nconst CollectionCard: React.FC<ICollectionCardProps> = ({\r\n  description,\r\n  data,\r\n  presetType,\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <StyledCollectionCard {...rest}>\r\n      {description && <p>{description}</p>}\r\n      <CollectionTable presetType={presetType} data={data} />\r\n    </StyledCollectionCard>\r\n  );\r\n};\r\n\r\nexport default CollectionCard;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { PresetType } from \"../../../../core/Core.constants\";\r\nimport ColumnManager from \"../../shared/layout/ColumnManager\";\r\nimport PageLayout from \"../../shared/layout/PageLayout\";\r\nimport CollectionCard, { ICollectionCardProps } from \"./cards/CollectionCard\";\r\n\r\nconst StyledCollectionPage = styled(PageLayout)`\r\n  .intro {\r\n    padding: 0 16px;\r\n    margin-bottom: 16px;\r\n  }\r\n`;\r\n\r\nexport interface ICollectionPageCard\r\n  extends Omit<ICollectionCardProps, \"presetType\"> {}\r\n\r\nexport interface ICollectionPageProps {\r\n  title: string;\r\n  subtitle: string;\r\n  intro: string;\r\n  presetType: PresetType;\r\n  cards: ICollectionPageCard[];\r\n}\r\n\r\nconst CollectionPage: React.FC<ICollectionPageProps> = ({\r\n  title,\r\n  subtitle,\r\n  intro,\r\n  presetType,\r\n  cards,\r\n}) => {\r\n  return (\r\n    <StyledCollectionPage title={title} subtitle={subtitle}>\r\n      <div>\r\n        <p className=\"intro\">{intro}</p>\r\n      </div>\r\n      <ColumnManager>\r\n        <ColumnManager>\r\n          {cards.map((card) => {\r\n            const { title, description, data } = card;\r\n            return (\r\n              <CollectionCard\r\n                presetType={presetType}\r\n                title={title}\r\n                description={description}\r\n                data={data}\r\n              />\r\n            );\r\n          })}\r\n        </ColumnManager>\r\n      </ColumnManager>\r\n    </StyledCollectionPage>\r\n  );\r\n};\r\n\r\nexport default CollectionPage;\r\n","import React, { PropsWithChildren } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { MediaQuery } from \"../../../styles/breakpoint\";\r\n\r\ninterface IStyledColumnManagerProps {\r\n  $tablet?: string[];\r\n  $desktop?: string[];\r\n}\r\n\r\nexport const StyledColumnManager = styled.div<IStyledColumnManagerProps>`\r\n  display: grid;\r\n  gap: 16px;\r\n  grid-template-columns: 1fr;\r\n\r\n  ${({ $tablet }) =>\r\n    $tablet\r\n      ? `\r\n        ${MediaQuery.Tablet} {\r\n            grid-template-columns: ${$tablet.join(\" \")}\r\n        }\r\n    `\r\n      : \"\"}\r\n\r\n  ${({ $desktop }) =>\r\n    $desktop\r\n      ? `\r\n        ${MediaQuery.Desktop} {\r\n            grid-template-columns: ${$desktop.join(\" \")}\r\n        }\r\n    `\r\n      : ``}\r\n`;\r\n\r\nexport interface IColumnManagerProps extends PropsWithChildren {\r\n  tablet?: string[];\r\n  desktop?: string[];\r\n}\r\n\r\nconst ColumnManager: React.FC<IColumnManagerProps> = ({\r\n  tablet,\r\n  desktop,\r\n  children,\r\n}) => {\r\n  return (\r\n    <StyledColumnManager $tablet={tablet} $desktop={desktop}>\r\n      {children}\r\n    </StyledColumnManager>\r\n  );\r\n};\r\n\r\nexport default ColumnManager;\r\n","import ArrayUtils from \"./primitives/Array.utils\";\r\nimport { IPreset, PresetMap } from \"./Core.constants\";\r\n\r\nexport enum AccidentalId {\r\n  DoubleFlat = \"double-flat\",\r\n  Flat = \"flat\",\r\n  Natural = \"natural\",\r\n  Sharp = \"sharp\",\r\n  DoubleSharp = \"double-sharp\",\r\n}\r\n\r\nexport interface IAccidentalPreset extends IPreset<AccidentalId> {\r\n  symbol: string;\r\n  offset: number;\r\n}\r\n\r\nexport const ACCIDENTAL_PRESET_MAP: PresetMap<AccidentalId, IAccidentalPreset> =\r\n  new Map([\r\n    [\r\n      AccidentalId.DoubleFlat,\r\n      {\r\n        presetId: AccidentalId.DoubleFlat,\r\n        name: \"Double Flat\",\r\n        symbol: \"bb\",\r\n        offset: -2,\r\n      },\r\n    ],\r\n    [\r\n      AccidentalId.Flat,\r\n      {\r\n        presetId: AccidentalId.Flat,\r\n        name: \"Flat\",\r\n        symbol: \"b\",\r\n        offset: -1,\r\n      },\r\n    ],\r\n    [\r\n      AccidentalId.Natural,\r\n      {\r\n        presetId: AccidentalId.Natural,\r\n        name: \"Natural\",\r\n        symbol: \"♮\",\r\n        offset: 0,\r\n      },\r\n    ],\r\n    [\r\n      AccidentalId.Sharp,\r\n      {\r\n        presetId: AccidentalId.Sharp,\r\n        name: \"Sharp\",\r\n        symbol: \"#\",\r\n        offset: 1,\r\n      },\r\n    ],\r\n    [\r\n      AccidentalId.DoubleSharp,\r\n      {\r\n        presetId: AccidentalId.DoubleSharp,\r\n        name: \"Double Sharp\",\r\n        symbol: \"##\",\r\n        offset: 2,\r\n      },\r\n    ],\r\n  ]);\r\n\r\nexport const ACCIDENTAL_PRESETS = ArrayUtils.mapToArray(ACCIDENTAL_PRESET_MAP);\r\n","import { PresetMap } from \"./Core.constants\";\r\nimport { ROOT_DEGREE } from \"./Degree.constants\";\r\nimport { ROOT_PITCH } from \"./Pitch.constants\";\r\nimport { IPodPreset } from \"./Pod.constants\";\r\nimport ArrayUtils from \"./primitives/Array.utils\";\r\n\r\nexport enum DiatonicId {\r\n  Tonic = \"tonic\",\r\n  Supertonic = \"supertonic\",\r\n  Mediant = \"mediant\",\r\n  Subdominant = \"submediant\",\r\n  Dominant = \"dominant\",\r\n  Submediant = \"submediant\",\r\n  Subtonic = \"subtonic\",\r\n}\r\n\r\nexport interface IDiatonicPreset extends IPodPreset<DiatonicId> {}\r\n\r\nexport const DIATONIC_PRESET_MAP: PresetMap<DiatonicId, IDiatonicPreset> =\r\n  new Map([\r\n    [\r\n      DiatonicId.Tonic,\r\n      {\r\n        presetId: DiatonicId.Tonic,\r\n        name: \"Tonic\",\r\n        pod: [0, 0],\r\n      },\r\n    ],\r\n    [\r\n      DiatonicId.Supertonic,\r\n      {\r\n        presetId: DiatonicId.Supertonic,\r\n        name: \"Supertonic\",\r\n        pod: [2, 1],\r\n      },\r\n    ],\r\n    [\r\n      DiatonicId.Mediant,\r\n      {\r\n        presetId: DiatonicId.Mediant,\r\n        name: \"Mediant\",\r\n        pod: [4, 2],\r\n      },\r\n    ],\r\n    [\r\n      DiatonicId.Subdominant,\r\n      {\r\n        presetId: DiatonicId.Subdominant,\r\n        name: \"Subdominant\",\r\n        pod: [5, 3],\r\n      },\r\n    ],\r\n    [\r\n      DiatonicId.Dominant,\r\n      {\r\n        presetId: DiatonicId.Dominant,\r\n        name: \"Dominant\",\r\n        pod: [7, 4],\r\n      },\r\n    ],\r\n    [\r\n      DiatonicId.Submediant,\r\n      {\r\n        presetId: DiatonicId.Submediant,\r\n        name: \"Submediant\",\r\n        pod: [9, 5],\r\n      },\r\n    ],\r\n    [\r\n      DiatonicId.Subtonic,\r\n      {\r\n        presetId: DiatonicId.Subtonic,\r\n        name: \"Subtonic\",\r\n        pod: [11, 6],\r\n      },\r\n    ],\r\n  ]);\r\n\r\nexport const DIATONIC_PRESETS = ArrayUtils.mapToArray(DIATONIC_PRESET_MAP);\r\n\r\nexport const ROOT_SCALE = DIATONIC_PRESETS.map((preset, i) => [\r\n  ROOT_PITCH + preset.pod[0],\r\n  ROOT_DEGREE + preset.pod[1],\r\n]);\r\n","import {\r\n  AccidentalId,\r\n  ACCIDENTAL_PRESET_MAP,\r\n  IAccidentalPreset,\r\n} from \"./Accidental.constants\";\r\nimport { DegreeId, DEGREE_PRESETS } from \"./Degree.constants\";\r\nimport { ROOT_SCALE } from \"./Diatonic.constants\";\r\nimport { getFrequency as getFrequencyFromPitch } from \"./Frequency.utils\";\r\nimport {\r\n  INotePreset,\r\n  NoteId,\r\n  NOTE_PRESETS,\r\n  NOTE_PRESET_MAP,\r\n} from \"./Note.constants\";\r\nimport { IPod, MAX_POD } from \"./Pod.constants\";\r\nimport { arePodsEqual, getDegree, reducePod } from \"./Pod.utils\";\r\nimport NumberUtils from \"./primitives/Number.utils\";\r\n\r\ninterface INoteNameOptions {\r\n  includeOctave?: boolean;\r\n}\r\n\r\ninterface INoteNameParts {\r\n  spelling: string;\r\n  accidental: string;\r\n  octave: number;\r\n}\r\n\r\nexport const getNoteFromPod = (pod: IPod) => {\r\n  return NOTE_PRESETS.find((note) => arePodsEqual(note, pod));\r\n};\r\n\r\nexport const getNoteWithOctave = (noteId: NoteId, octave: number): IPod => {\r\n  const notePreset = NOTE_PRESET_MAP.get(noteId) as INotePreset;\r\n  return [\r\n    (octave - 4) * 12 + NumberUtils.modulo(notePreset.pod[0], 12),\r\n    notePreset.pod[1],\r\n  ];\r\n};\r\n\r\n// export const  fromId = (presetId: string, octave = 4) => {\r\n//   let sharps = (presetId.match(/-sharp/g) || []).length;\r\n//   let flats = (presetId.match(/-flat/g) || []).length;\r\n//   const nativeNoteId = presetId.slice(0, 1) as NoteId;\r\n//   const nativePod = (NOTE_PRESET_MAP.get(nativeNoteId) as IModelConfig).value;\r\n//   const octaveBasePitch =\r\n//     typeof octave === \"undefined\" ? 0 : (octave - 4) * 12;\r\n//   const pitch = octaveBasePitch + nativePod[0] + sharps - flats;\r\n//   const pod = [pitch, nativePod[1]] as IPod;\r\n//   //const pod = [NumberUtils.modulo(nativePod[0] + sharps - flats, 12), nativePod[1]] as IPod;\r\n//   const note = new Note(pod);\r\n//   note.modelType = ModelType.Pod;\r\n//   note.presetType = PresetType.Note;\r\n//   note.presetId = presetId as any;\r\n//   note.name = getName();\r\n//   note.pod = pod as IPod;\r\n//   // @ts-ignore TODO\r\n//   note.value = note.pod;\r\n//   return note;\r\n// };\r\n\r\nexport const getAccidentalOffset = (pod: IPod): number => {\r\n  const [p, d] = reducePod(pod);\r\n\r\n  let offset = p - ROOT_SCALE[d][0];\r\n\r\n  // If offset spans more than half an octave, it's going the wrong way\r\n  // TODO need to formally confirm this\r\n  if (offset > 5) offset = offset - 12;\r\n  if (offset < -5) offset = offset + 12;\r\n\r\n  // Examples\r\n  // if (d === 0 && offset === 11) offset = offset - 12;\r\n  // if (d === 0 && offset === 10) offset = offset - 12;\r\n  // if (d === 0 && offset === 9) offset = offset - 12;\r\n  // if (d === 1 && offset === 9) offset = offset - 12;\r\n  // if (d === 1 && offset === 8) offset = offset - 12;\r\n  // if (d === 5 && offset === -9) offset = offset + 12;\r\n  // if (d === 6 && offset === -11) offset = offset + 12;\r\n  // if (d === 6 && offset === -10) offset = offset + 12;\r\n  // if (d === 6 && offset === -9) offset = offset + 12;\r\n  //console.log(`${p} - ${ROOT_SCALE[d][0]} = ${offset}, d = ${d}`);\r\n\r\n  return offset;\r\n};\r\n\r\nexport const getAccidentalString = (pod: IPod): string => {\r\n  const offset = getAccidentalOffset(pod);\r\n  if (offset > 0) {\r\n    return (\r\n      ACCIDENTAL_PRESET_MAP.get(AccidentalId.Sharp) as IAccidentalPreset\r\n    ).symbol.repeat(offset);\r\n  } else if (offset < 0) {\r\n    return (\r\n      ACCIDENTAL_PRESET_MAP.get(AccidentalId.Flat) as IAccidentalPreset\r\n    ).symbol.repeat(-offset);\r\n  }\r\n  return \"\";\r\n};\r\n\r\nexport const getPitch = (pod: IPod): number => {\r\n  return pod[0];\r\n};\r\n\r\nexport const getPitchClass = (pod: IPod): number => {\r\n  return NumberUtils.modulo(getPitch(pod), MAX_POD[0]);\r\n};\r\n\r\nexport const getOctave = (pod: IPod): number => {\r\n  const midi = true;\r\n  const raw = Math.floor(getPitch(pod) / 12);\r\n  return midi ? raw + 4 : raw;\r\n};\r\n\r\nexport const getDegreeId = (pod: IPod): DegreeId => {\r\n  const degree = getDegree(pod);\r\n  return DEGREE_PRESETS[degree].id;\r\n};\r\n\r\nexport const getSpelling = (pod: IPod): string => {\r\n  return getDegreeId(pod);\r\n};\r\n\r\nexport const getNameParts = (pod: IPod): INoteNameParts => {\r\n  const spelling = getSpelling(pod);\r\n  const accidental = getAccidentalString(pod);\r\n  const octave = getOctave(pod);\r\n  return { spelling, accidental, octave };\r\n};\r\n\r\nexport const getName = (pod: IPod, options: INoteNameOptions = {}): string => {\r\n  const { spelling, accidental, octave } = getNameParts(pod);\r\n\r\n  const o = options.includeOctave ? octave : \"\";\r\n  return `${spelling}${accidental}${o}`;\r\n};\r\n\r\nexport const getFrequency = (pod: IPod, format = false) => {\r\n  const f = getFrequencyFromPitch(getPitch(pod));\r\n  return format ? `${f.toFixed(0)} Hz` : f;\r\n};\r\n","import { CHORD_PRESETS } from \"./Chord.constants\";\r\nimport { AnyPodListPreset } from \"./Core.derived\";\r\nimport { INotePreset } from \"./Note.constants\";\r\nimport { getName } from \"./Note.utils\";\r\nimport { IPod, MAX_POD } from \"./Pod.constants\";\r\nimport NumberUtils from \"./primitives/Number.utils\";\r\nimport { SCALE_PRESETS } from \"./Scale.constants\";\r\n\r\n// Search\r\n\r\nconst isPodAtPitch = (\r\n  pod: IPod,\r\n  p: number,\r\n  matchOctave = false\r\n): IPod | null => {\r\n  const pitchOffset = 0;\r\n  const target = p - pitchOffset;\r\n  let a = pod[0];\r\n  let b = target;\r\n  if (!matchOctave) {\r\n    a = NumberUtils.modulo(a, 12);\r\n    b = NumberUtils.modulo(b, 12);\r\n  }\r\n  return a === b ? pod : null;\r\n};\r\n\r\nexport const getIndexOfPodAtPitch = (\r\n  A: IPod[],\r\n  p: number,\r\n  matchOctave: boolean\r\n): number | null => {\r\n  const pod = A.findIndex((a) => isPodAtPitch(a, p, matchOctave));\r\n  return pod !== -1 ? pod : null;\r\n};\r\n\r\n/*static sort = (podList: IPod[]) => {\r\n    return podList.sort((a, b) => {\r\n        if (a[0] < b[0]) return -1;\r\n        else if (a[0] > b[0]) return 1;\r\n        else {\r\n            if (a[1] < b[1]) return -1;\r\n            else if (a[1] > b[1]) return 1;\r\n            else return 0;\r\n        }\r\n    });\r\n}*/\r\n\r\nexport const addPods = (a: IPod, b: IPod): IPod => {\r\n  const p = a[0] + b[0];\r\n  const d = a[1] + b[1];\r\n  const result: IPod = [p, d];\r\n  return result;\r\n};\r\n\r\nexport const subtractPods = (a: IPod, b: IPod): IPod => {\r\n  const p = a[0] - b[0];\r\n  const d = a[1] - b[1];\r\n  const result: IPod = [p, d];\r\n  return result;\r\n};\r\n\r\nexport const addPodList = (a: IPod, B: IPod[]): IPod[] => {\r\n  const result = B.map((b) => addPods(a, b));\r\n  return result;\r\n};\r\n\r\nexport const reducePod = (a: IPod, max = MAX_POD): IPod => {\r\n  const p = NumberUtils.modulo(a[0], max[0]);\r\n  const d = NumberUtils.modulo(a[1], max[1]);\r\n  return [p, d];\r\n};\r\n\r\nexport const arePodsEqual = (a: IPod, b: IPod): boolean => {\r\n  if (!a || !b || a.length !== 2 || b.length !== 2) return false;\r\n  return a[0] === b[0] && a[1] === b[1];\r\n};\r\n\r\nexport const reducePodList = (A: IPod[]): IPod[] => {\r\n  return A.map((a) => reducePod(a));\r\n};\r\n\r\nexport const arePodListsEqual = (A: IPod[], B: IPod[]): boolean => {\r\n  if (!A || !B || A.length !== B.length) return false;\r\n  for (let i = 0; i < A.length; i++) {\r\n    const a = A[i];\r\n    const b = B[i];\r\n    if (!arePodsEqual(a, b)) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const listContainsSubset = (\r\n  podList: IPod[],\r\n  subset: IPod[]\r\n): boolean => {\r\n  for (let i = 0; i < subset.length; i++) {\r\n    if (!podList.find((x) => x[0] === subset[i][0] && x[1] === subset[i][1]))\r\n      return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const getDegree = (pod: IPod) => {\r\n  return NumberUtils.modulo(pod[1], MAX_POD[1]);\r\n};\r\n\r\nexport const getShortName = (str) =>\r\n  str\r\n    .replace(\"Major\", \"Maj\")\r\n    .replace(\"Minor\", \"Min\")\r\n    .replace(\"Augmented\", \"Aug\")\r\n    .replace(\"Diminished\", \"Dim\")\r\n    .replace(\"Suspended\", \"Sus\")\r\n    .replace(\"Dominant\", \"Dom\")\r\n    .replace(\"Pentatonic\", \"Pent\")\r\n    .replace(\"st\", \"\")\r\n    .replace(\"nd\", \"\")\r\n    .replace(\"rd\", \"\")\r\n    .replace(\"th\", \"\");\r\n\r\nexport const getRootedName = (\r\n  podListPreset: AnyPodListPreset,\r\n  rootNotePreset?: INotePreset\r\n) => {\r\n  return `${rootNotePreset ? `${getName(rootNotePreset.pod)} ` : \"\"}${\r\n    podListPreset.name\r\n  }`;\r\n};\r\n\r\nexport const isInSuperset = (intervalPods: IPod[], superset: IPod[]) => {\r\n  if (superset.length <= intervalPods.length) return false;\r\n  return listContainsSubset(superset, intervalPods);\r\n};\r\n\r\nexport const containsSubset = (intervalPods: IPod[], subset: IPod[]) => {\r\n  if (subset.length >= intervalPods.length) return false;\r\n  return listContainsSubset(intervalPods, subset);\r\n};\r\n\r\nexport const getSubchords = (intervalPods: IPod[]) => {\r\n  return CHORD_PRESETS.filter((preset) =>\r\n    containsSubset(intervalPods, preset.value)\r\n  );\r\n};\r\n\r\nexport const getSuperchords = (intervalPods: IPod[]) => {\r\n  return CHORD_PRESETS.filter((preset) =>\r\n    isInSuperset(intervalPods, preset.value)\r\n  );\r\n};\r\n\r\nexport const getSubscales = (intervalPods: IPod[]) => {\r\n  return SCALE_PRESETS.filter((preset) =>\r\n    containsSubset(intervalPods, preset.value)\r\n  );\r\n};\r\n\r\nexport const getSuperscales = (intervalPods: IPod[]) => {\r\n  return SCALE_PRESETS.filter((preset) =>\r\n    isInSuperset(intervalPods, preset.value)\r\n  );\r\n};\r\n\r\nexport const getAllRelated = (intervalPods: IPod[]) => {\r\n  return [\r\n    ...getSubchords(intervalPods),\r\n    ...getSubscales(intervalPods),\r\n    ...getSuperchords(intervalPods),\r\n    ...getSuperscales(intervalPods),\r\n  ];\r\n};\r\n\r\n// applyRoot(root: IPod) {\r\n//   let notePods;\r\n//   try {\r\n//     notePods = this.intervalPods.map((ivl) => addPods(root, ivl));\r\n//   } catch (e) {\r\n//     console.error(e);\r\n//     throw new Error(\"Unable to apply root\");\r\n//   }\r\n//   this.root = root;\r\n//   this.notePods = notePods;\r\n//   this.name = `${\"ROOT\"} ${this.name}`;\r\n//   return this;\r\n// }\r\n\r\nexport const tryGetPodPairAtPitch = (\r\n  intervalPods: IPod[],\r\n  notePods: IPod[],\r\n  noteIndex: number\r\n): [IPod, IPod] | [undefined, undefined] => {\r\n  if (!notePods) return [undefined, undefined];\r\n\r\n  const index = getIndexOfPodAtPitch(notePods, noteIndex, false);\r\n\r\n  if (index == null) return [undefined, undefined];\r\n\r\n  return [intervalPods[index], (notePods as IPod[])[index]];\r\n};\r\n\r\nexport const getNotePods = (\r\n  rootPod: IPod,\r\n  intervalPods: IPod[],\r\n  octave = 4\r\n): IPod[] => {\r\n  const notePods = intervalPods.map((ivl) => {\r\n    const notePod = addPods(rootPod, ivl);\r\n    return [\r\n      (octave - 4) * 12 + NumberUtils.modulo(notePod[0], 12),\r\n      notePod[1],\r\n    ] as IPod;\r\n  });\r\n  return notePods;\r\n};\r\n","import { PresetType } from \"./Core.constants\";\r\nimport { PresetId } from \"./Core.derived\";\r\nimport { NoteId } from \"./Note.constants\";\r\n\r\nexport const getModelRoute = (\r\n  presetType: PresetType,\r\n  presetId?: PresetId,\r\n  rootId?: NoteId\r\n) => {\r\n  const modelSuffix = presetId ? `/${presetId}` : \"\";\r\n  const rootSuffix = rootId ? `/root/${rootId}` : \"\";\r\n\r\n  return `/browse/${presetType}${modelSuffix}${rootSuffix}/`;\r\n};\r\n","const ROMAN_NUMERAL = {\r\n\tM: 1000,\r\n\tCM: 900,\r\n\tD: 500,\r\n\tCD: 400,\r\n\tC: 100,\r\n\tXC: 90,\r\n\tL: 50,\r\n\tXL: 40,\r\n\tX: 10,\r\n\tIX: 9,\r\n\tV: 5,\r\n\tIV: 4,\r\n\tI: 1\r\n} as const;\r\n\r\nconst modulo = (a: number, b: number): number => {\r\n\treturn ((a % b) + b) % b;\r\n}\r\n\r\nconst moduloSum = (a: number, b: number, divisor: number): number => {\r\n\tconst offset = 0;\r\n\tconst subtraction = false;\r\n\tconst dividend = (subtraction) ? ((a - offset) - (b - offset)) : ((a - offset) + (b - offset));\r\n\treturn modulo(dividend, divisor) + offset;\r\n};\r\n\r\nconst romanize = (n: number): string => {\r\n\tlet str = '';\r\n\tfor (const i of Object.keys(ROMAN_NUMERAL)) {\r\n\t\tvar q = Math.floor(n / ROMAN_NUMERAL[i]);\r\n\t\tn -= q * ROMAN_NUMERAL[i];\r\n\t\tstr += i.repeat(q);\r\n\t\tif (n === 0) return str;\r\n\t}\r\n\treturn str;\r\n}\r\n\r\nexport default {\r\n\tmodulo,\r\n\tmoduloSum,\r\n\tromanize\r\n};\r\n"],"names":["StyledCardHeader","styled","CardHeader","_ref","title","level","action","AsTag","React","StyledCard","props","theme","_props$theme","surface","_props$theme$surface","card","_ref2","subtitle","children","rest","IntervalQualityId","INTERVAL_QUALITY_PRESET_MAP","Map","Diminished","presetId","name","symbol","down","undefined","up","Minor","Major","Perfect","Augmented","ArrayUtils","getName","pod","reduced","reducePod","noteIndex","d","degreeIntervals","CORE_INTERVALS","pIvl","loIvl","hiIvl","length","ivl","quality","get","offset","count","Math","abs","value","repeat","isExtended","MAX_POD","getIsExtended","getExtensionInversionId","StyledTable","getIsTypeOmit","data","Col","index","isHeader","content","colSpan","className","link","ColTag","WrapperTag","Link","Fragment","wrapperProps","to","Row","cols","headerColIndicies","map","col","i","isConfig","hasOwnProperty","getIsConfig","colConfig","key","includes","TableSection","_ref3","Tag","rows","row","Table","_ref4","thead","tfoot","tbody","styles","colGroups","caption","cg","SEMITONES","tableStyles","css","MediaQuery","bg","Breakpoint","_props$theme2","_props$theme2$surface","nav","text","_theme$text","inverted","semitones","rootNotePreset","presetType","getModelRoute","getRootedName","h","pods","findIndex","getNoteName","addPods","getIntervalName","getSemitoneCol","StyledCollectionCard","Card","description","CollectionTable","StyledCollectionPage","PageLayout","intro","cards","ColumnManager","CollectionCard","StyledColumnManager","$tablet","join","$desktop","tablet","desktop","AccidentalId","ACCIDENTAL_PRESET_MAP","DoubleFlat","Flat","Natural","Sharp","DoubleSharp","DiatonicId","DIATONIC_PRESET_MAP","Tonic","Supertonic","Mediant","Subdominant","Dominant","Submediant","Subtonic","ROOT_SCALE","preset","ROOT_PITCH","ROOT_DEGREE","getAccidentalString","p","getAccidentalOffset","getPitch","getSpelling","degree","getDegree","DEGREE_PRESETS","id","getDegreeId","getNameParts","spelling","accidental","octave","raw","floor","getOctave","options","includeOctave","a","b","max","NumberUtils","podListPreset","rootId","ROMAN_NUMERAL","M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I","modulo","moduloSum","divisor","romanize","n","str","Object","keys","q"],"sourceRoot":""}