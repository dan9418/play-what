{"version":3,"file":"component---src-pages-view-fretboard-tsx-66f8b61d4d532f2578b6.js","mappings":"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","sources":["webpack://play-what/./src/components/inputs/NumericInput.tsx","webpack://play-what/./src/components/pages/view/FretboardPage.tsx","webpack://play-what/./src/pages/view/fretboard.tsx"],"sourcesContent":["import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport Icon from \"../ui/Icon\";\r\nimport ButtonInput from \"./ButtonInput\";\r\n\r\nexport const StyledNumbericInput = styled.div`\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\r\n\tinput, button {\r\n\t\theight: 32px;\r\n\t\tpadding: 0;\r\n\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t}\r\n\r\n\tbutton {\r\n\t\twidth: 32px;\r\n\t\tborder: 1px solid ${({ theme }) => theme.utils.border};\r\n\t\tsvg, svg * {\r\n\t\t\tfill: white;\r\n\t\t}\r\n\r\n\t\tbackground-color: ${({ theme }) => theme.status.interactive};\r\n\t\tcolor: white;\r\n\t\t&:hover {\r\n\t\t\tbackground-color: ${({ theme }) => theme.status.active};\r\n\t\t}\r\n\r\n\t\t:first-child {\r\n\t\t\tborder-right: none;\r\n\t\t\tborder-radius: 8px 0 0 8px;\r\n\t\t}\r\n\t\t:last-child {\r\n\t\t\tborder-left: none;\r\n\t\t\tborder-radius: 0 8px 8px 0\r\n\t\t}\r\n\t}\r\n\r\n\tinput {\r\n\t\twidth: 48px;\r\n\t\tcursor: pointer;\r\n\t\tborder: none;\r\n\t\tfont-weight: bold;\r\n\t\ttext-align: center;\r\n\t\tbackground-color: white;\r\n\t\t&:hover {\r\n\t\t\tbackground-color: ${({ theme }) => theme.status.highlight};\r\n\t\t}\r\n\r\n\t\tborder: 1px solid ${({ theme }) => theme.utils.border};\r\n\t}\r\n    \r\n\tfont-size: 110%;\r\n\tcursor: pointer;\r\n`;\r\n\r\ninterface INumericInputProps {\r\n\tvalue: number;\r\n\tsetValue: (number) => void;\r\n\tmin?: number;\r\n\tmax?: number;\r\n}\r\n\r\nconst NumericInput: React.FC<INumericInputProps> = ({ value, setValue, ...rest }) => {\r\n\tconst onChange = e => setValue(parseInt(e.target.value));\r\n\r\n\tconst onDown = () => {\r\n\t\tlet newVal = value - 1;\r\n\t\tif (typeof rest.min !== 'undefined') {\r\n\t\t\tnewVal = Math.max(rest.min, newVal);\r\n\t\t}\r\n\t\tsetValue(newVal);\r\n\t};\r\n\r\n\tconst onUp = () => {\r\n\t\tlet newVal = value + 1;\r\n\t\tif (typeof rest.max !== 'undefined') {\r\n\t\t\tnewVal = Math.min(rest.max, newVal);\r\n\t\t}\r\n\t\tsetValue(newVal);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<StyledNumbericInput>\r\n\t\t\t<ButtonInput onClick={onDown}><Icon iconId=\"minus\" size={12} /></ButtonInput>\r\n\t\t\t<input type=\"number\" value={value} onChange={null} {...rest} />\r\n\t\t\t<ButtonInput onClick={onUp}><Icon iconId=\"plus\" size={12} /></ButtonInput>\r\n\t\t</StyledNumbericInput>\r\n\t);\r\n}\r\n\r\nexport default NumericInput;\r\n","import React, { useState } from \"react\";\r\nimport styled from 'styled-components';\r\nimport Chord from \"../../../core/models/Chord\";\r\nimport { ModelType } from \"../../../core/models/Model.constants\";\r\nimport { CHORD_PRESETS, NOTE_PRESETS, SCALE_PRESETS } from \"../../../core/models/Model.presets\";\r\nimport Note from \"../../../core/models/Note\";\r\nimport Scale from \"../../../core/models/Scale\";\r\nimport THEME from \"../../../styles/theme\";\r\nimport Fretboard from \"../../../viewers/fretboard/Fretboard\";\r\nimport { FRETBOARD_TUNING_VALUES, TuningId } from \"../../../viewers/fretboard/Fretboard.tuning\";\r\nimport { DEFAULT_FRETBOARD_PROPS } from \"../../../viewers/fretboard/Fretboard.utils\";\r\nimport { VoicingId, VOICING_PRESETS } from \"../../../viewers/fretboard/Fretboard.voicing\";\r\nimport ButtonInput from \"../../inputs/ButtonInput\";\r\nimport DropdownInput from \"../../inputs/DropdownInput\";\r\nimport NumericInput from \"../../inputs/NumericInput\";\r\nimport PageTitle from \"../../layout/PageTitle\";\r\nimport Card, { StyledCard } from \"../../ui/Card\";\r\nimport Icon from \"../../ui/Icon\";\r\nimport InputRow from \"../../ui/InputRow\";\r\n\r\nconst StyledFretboardpage = styled.div`\r\n    max-width: 1024px;\r\n    margin: 20px auto;\r\n    \r\n    .resize {\r\n        overflow: auto;\r\n        resize: both;\r\n        padding: 26px;\r\n        border: 1px solid ${THEME.brand.accent};\r\n    }\r\n\r\n    ${StyledCard} {\r\n        margin: 16px auto;\r\n    }\r\n`;\r\n\r\nconst VOICING_OPTIONS = [\r\n    {\r\n        id: VoicingId.None,\r\n        name: '---',\r\n        value: undefined\r\n    },\r\n    ...VOICING_PRESETS\r\n];\r\n\r\nconst TYPE_OPTIONS = [\r\n    {\r\n        id: ModelType.Chord,\r\n        name: 'Chords',\r\n        value: ModelType.Chord,\r\n        data: CHORD_PRESETS\r\n    },\r\n    {\r\n        id: ModelType.Scale,\r\n        name: 'Scales',\r\n        value: ModelType.Chord,\r\n        data: SCALE_PRESETS\r\n    }\r\n]\r\n\r\nconst Fretboardpage: React.FC<any> = () => {\r\n\r\n    // Notes\r\n    const [modelType, _setModelType] = useState(TYPE_OPTIONS[0]);\r\n    const modelOptions = modelType.data;\r\n    const [modelConfig, setModelConfig] = useState(modelOptions[0]);\r\n    const [root, setRoot] = useState(NOTE_PRESETS[0]);\r\n\r\n    const setModelType = type => { _setModelType(type); setModelConfig(type.data[0]) }\r\n\r\n    let model;\r\n    if (modelType.id === ModelType.Chord) {\r\n        model = new Chord(modelConfig.modelId, { root: Note.fromId(root.modelId) })\r\n    }\r\n    else if (modelType.id === ModelType.Scale) {\r\n        model = new Scale(modelConfig.modelId, { root: Note.fromId(root.modelId) })\r\n    }\r\n\r\n    const filteredVoicings = VOICING_OPTIONS.filter(v => {\r\n        if (!v.value) return true;\r\n        const containsNonModelIntervals = v.value.some(x => x && !model.intervals.find(ivl => ivl.pod[1] + 1 === x));\r\n        return !containsNonModelIntervals;\r\n    });\r\n\r\n    // UI\r\n    const [isEditingFretboard, setIsEditingFretboard] = useState(false);\r\n    const [isEditingNotes, setIsEditingNotes] = useState(false);\r\n\r\n    // Fretboard\r\n    const [voicing, setVoicing] = useState(filteredVoicings[0]);\r\n    const [tuning, setTuning] = useState(FRETBOARD_TUNING_VALUES[0]);\r\n    const [fretRange, setFretRange] = useState(DEFAULT_FRETBOARD_PROPS.fretRange);\r\n    const [fretLo, fretHi] = fretRange;\r\n\r\n    return (\r\n        <StyledFretboardpage>\r\n            <PageTitle title=\"View\" subtitle=\"Fretboard\" />\r\n            <Card title=\"Configure Instrument\" action={\r\n                <ButtonInput isLink onClick={() => setIsEditingFretboard(!isEditingFretboard)}>\r\n                    <Icon iconId={isEditingFretboard ? 'down' : 'next'} />\r\n                </ButtonInput>\r\n            }>\r\n                {isEditingFretboard &&\r\n                    <ul className=\"edit\">\r\n                        <li>\r\n                            <InputRow label=\"Tuning\">\r\n                                <DropdownInput value={tuning} setValue={setTuning} options={FRETBOARD_TUNING_VALUES} />\r\n                            </InputRow>\r\n                        </li>\r\n                        {tuning.id === TuningId.Standard &&\r\n                            <li>\r\n                                <InputRow label=\"Voicing\">\r\n                                    <DropdownInput value={voicing} setValue={setVoicing} options={filteredVoicings} />\r\n                                </InputRow>\r\n                            </li>\r\n                        }\r\n                        <li>\r\n                            <InputRow label=\"Low Fret\">\r\n                                <NumericInput value={fretLo} min={0} max={fretHi} setValue={v => setFretRange([v, fretHi])} />\r\n                            </InputRow>\r\n                        </li>\r\n                        <li>\r\n                            <InputRow label=\"High Fret\">\r\n                                <NumericInput value={fretHi} min={fretLo} max={24} setValue={v => setFretRange([fretLo, v])} />\r\n                            </InputRow>\r\n                        </li>\r\n                    </ul>\r\n                }\r\n\r\n            </Card >\r\n            <Card title=\"Configure Notes\" action={\r\n                <ButtonInput isLink onClick={() => setIsEditingNotes(!isEditingNotes)}>\r\n                    <Icon iconId={isEditingNotes ? 'down' : 'next'} />\r\n                </ButtonInput>\r\n            }>\r\n                {isEditingNotes ?\r\n                    <ul className=\"edit\">\r\n                        <li>\r\n                            <InputRow label=\"Model Type\">\r\n                                <DropdownInput value={modelType} setValue={setModelType} options={TYPE_OPTIONS} />\r\n                            </InputRow>\r\n                        </li>\r\n                        <li>\r\n                            <InputRow label=\"Preset\">\r\n                                <DropdownInput value={modelConfig} setValue={setModelConfig} options={modelOptions} />\r\n                            </InputRow>\r\n                        </li>\r\n                        <li>\r\n                            <InputRow label=\"Root\">\r\n                                <DropdownInput value={root} setValue={setRoot} options={NOTE_PRESETS} />\r\n                            </InputRow>\r\n                        </li>\r\n                    </ul>\r\n                    : null}\r\n\r\n            </Card >\r\n            <Card title=\"\" className=\"resize\">\r\n                <Fretboard\r\n                    model={model}\r\n                    voicing={voicing}\r\n                    tuning={tuning.value}\r\n                    fretRange={fretRange}\r\n                />\r\n            </Card >\r\n        </StyledFretboardpage>\r\n    );\r\n};\r\n\r\nexport default Fretboardpage;\r\n","import FretboardPage from \"../../components/pages/view/FretboardPage\";\r\n\r\nexport default FretboardPage;\r\n"],"names":["StyledNumbericInput","styled","theme","utils","border","status","interactive","active","highlight","value","setValue","rest","React","ButtonInput","onClick","newVal","min","Math","max","Icon","iconId","size","type","onChange","StyledFretboardpage","THEME","StyledCard","VOICING_OPTIONS","id","VoicingId","name","undefined","VOICING_PRESETS","TYPE_OPTIONS","ModelType","data","CHORD_PRESETS","SCALE_PRESETS","model","useState","modelType","_setModelType","modelOptions","modelConfig","setModelConfig","NOTE_PRESETS","root","setRoot","Chord","modelId","Note","Scale","filteredVoicings","filter","v","some","x","intervals","find","ivl","pod","isEditingFretboard","setIsEditingFretboard","isEditingNotes","setIsEditingNotes","voicing","setVoicing","FRETBOARD_TUNING_VALUES","tuning","setTuning","DEFAULT_FRETBOARD_PROPS","fretRange","setFretRange","fretLo","fretHi","PageTitle","title","subtitle","Card","action","isLink","className","InputRow","label","DropdownInput","options","TuningId","NumericInput","Fretboard"],"sourceRoot":""}