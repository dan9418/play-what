{"version":3,"file":"component---src-pages-view-index-tsx-ceb9a1a59c5db4fc7860.js","mappings":"+IAEaA,E,QAAiBC,QAAAA,IAAAA,WAAH,oEAAGA,CAAH,0F,4PCSrBC,EAAiBD,EAAAA,QAAAA,IAAAA,WAAH,oEAAGA,CAAH,iDAMPE,EAAqB,CAC9B,CACIC,GAAIC,EAAAA,GAAAA,MACJC,KAAM,SACNC,MAAOF,EAAAA,GAAAA,MACPG,KAAMC,EAAAA,IAEV,CACIL,GAAIC,EAAAA,GAAAA,MACJC,KAAM,SACNC,MAAOF,EAAAA,GAAAA,MACPG,KAAME,EAAAA,KAeDC,EAAqBR,EAAmB,GACxCS,EAAuBT,EAAmB,GAAGK,KAAK,GAClDK,EAAeC,EAAAA,GAAAA,GAGfC,EAAc,SAACC,EAAsBC,EAAkBC,GAChE,IAAIC,EAOJ,OANIH,IAAcX,EAAAA,GAAAA,MACdc,EAAW,IAAIC,EAAAA,EAAMH,EAAoB,CAAEC,KAAMG,EAAAA,EAAAA,OAAYH,KAExDF,IAAcX,EAAAA,GAAAA,QACnBc,EAAW,IAAIG,EAAAA,EAAML,EAAoB,CAAEC,KAAMG,EAAAA,EAAAA,OAAYH,MAE1DC,GAqDX,KAlD2C,SAAAI,GAEvC,IAAQP,EAAmIO,EAAnIP,UAAWQ,EAAwHD,EAAxHC,YAAaN,EAA2GK,EAA3GL,KAAoBO,EAAuFF,EAArGG,aAA6CC,EAAwDJ,EAAxEK,eAA0CC,EAA8BN,EAAvCO,QAA0BC,GAAaR,EAApBS,MAAoBT,EAAbQ,UACxHE,EAAejB,EAAUR,KAmB/B,OACI0B,EAAAA,cAAChC,EAAD,KACIgC,EAAAA,cAACC,EAAAA,GAAD,CAAYC,MAAM,SAClBF,EAAAA,cAAAA,KAAAA,KACIA,EAAAA,cAAAA,KAAAA,KACIA,EAAAA,cAACG,EAAAA,EAAD,CAAUC,MAAM,cACZJ,EAAAA,cAACK,EAAAA,EAAD,CAAehC,MAAOW,EAAMsB,SAdhC,SAAAC,GACZ,IAAItB,EAAWJ,EAAYS,EAAYR,UAAWQ,EAAYP,QAASwB,EAAQxB,SAC/EY,EAASY,GACTV,EAASZ,IAWsDuB,QAAS5B,EAAAA,GAAc6B,WAAW,eAK7FT,EAAAA,cAACC,EAAAA,GAAD,CAAYC,MAAM,cAClBF,EAAAA,cAAAA,KAAAA,KACIA,EAAAA,cAAAA,KAAAA,KACIA,EAAAA,cAACG,EAAAA,EAAD,CAAUC,MAAM,cACZJ,EAAAA,cAACK,EAAAA,EAAD,CAAehC,MAAOS,EAAWwB,SAhChC,SAAAI,GACjBnB,EAAcmB,GACdjB,EAAgBiB,EAAKpC,KAAK,KA8B+CkC,QAASvC,EAAoBwC,WAAW,SAGzGT,EAAAA,cAAAA,KAAAA,KACIA,EAAAA,cAACG,EAAAA,EAAD,CAAUC,MAAM,UACZJ,EAAAA,cAACK,EAAAA,EAAD,CAAehC,MAAOiB,EAAagB,SAjChC,SAAAK,GACnB,IAAI1B,EAAWJ,EAAY8B,EAAO7B,UAAW6B,EAAO5B,QAASC,EAAKD,SAClEU,EAAgBkB,GAChBd,EAASZ,IA8BoEuB,QAAST,EAAcU,WAAW,kB,kNCtFjHG,GAAiB7C,EAAAA,EAAAA,SAAOD,EAAAA,GAAV+C,WAAA,oEAAG9C,CAAH,6NACd+C,EAAAA,EAIAC,EAAAA,GACsBC,EAAAA,EAAAA,OAAAA,UAEIA,EAAAA,EAAAA,OAAAA,OACAA,EAAAA,EAAAA,OAAAA,WAgB1BC,GAAepC,EAAAA,EAAAA,IAAYV,EAAAA,GAAAA,MAAiB+C,EAAAA,EAAAA,SAAkBC,EAAAA,GAAAA,GAE9DC,EAAyB,CAC3BtB,MAAOmB,EACPI,iBAAiB,EACjBC,cAAc,GC3ClB,ED8CgC,WAE5B,OACItB,EAAAA,cAACY,EAAD,KACIZ,EAAAA,cAACuB,EAAAA,EAAD,CAAWrB,MAAM,cAAcsB,SAAS,yBACxCxB,EAAAA,cAACyB,EAAAA,EAAD,CAAeC,QAAS,CAAC,MAAO,QAC5B1B,EAAAA,cAAC2B,EAAAA,GAAD,CAAMC,GAAG,oBACL5B,EAAAA,cAAC6B,EAAAA,GAAD,CAAM3B,MAAM,UACRF,EAAAA,cAAC8B,EAAAA,EAAD,iBACQV,EADR,CAEIW,OAAQC,EAAAA,GAAAA,IAAsBC,EAAAA,GAAAA,UAAmB5D,WAI7D2B,EAAAA,cAAC2B,EAAAA,GAAD,CAAMC,GAAG,mBACL5B,EAAAA,cAAC6B,EAAAA,GAAD,CAAM3B,MAAM,YACRF,EAAAA,cAACkC,EAAAA,EAAD,CACIpC,MAAOmB,EACPkB,SAAUC,EAAAA,GAAAA,iB,6EENtC,EA1DwBrE,EAAAA,QAAAA,IAAAA,WAAH,2EAAGA,CAAH,4lB,UCGfsE,EAAkBtE,EAAAA,QAAAA,IAAAA,WAAH,qEAAGA,CAAH,2JAQA,gBAAGuE,EAAH,EAAGA,SAAH,OAAkBA,GAAsB,iBACnD,gBAAGC,EAAH,EAAGA,SAAH,OAAkBA,GAAsB,MAsBlD,EAbwC,SAAAlD,GAEvC,IAAMmD,EAAUnD,EAAMoD,WAAWpD,GAIjC,OACCW,EAAAA,cAACqC,EAAD,CAAiBC,SAAUE,EAASD,SAHvB,QAG0CG,QAAS,KAAMC,UAAU,cAC9E,OC1BSC,EAA6B,SAAAvD,GAEzC,IAAQ0C,EAAkE1C,EAAlE0C,OAAQc,EAA0DxD,EAA1DwD,YAAaC,EAA6CzD,EAA7CyD,UAAWzB,EAAkChC,EAAlCgC,gBAAiBC,EAAiBjC,EAAjBiC,aAEnDyB,EAAU,CAAC,QACC,IAAdD,GACHC,EAAQC,KAAK,QAEd,IAAMC,EAAcJ,IAAgBd,EAAOmB,OAAS,EAC9CC,EAA+B,IAAhBN,EAErB,OACC7C,EAAAA,cAAAA,MAAAA,CAAK2C,UAAWI,EAAQK,KAAK,MAC5BpD,EAAAA,cAAAA,MAAAA,CAAK2C,UAAU,eACbtB,GAAmB8B,GAAgBL,EAAY,GAAKA,GAEtD9C,EAAAA,cAAAA,MAAAA,CAAK2C,UAAU,gBACf3C,EAAAA,cAACqD,EAAchE,GACfW,EAAAA,cAAAA,MAAAA,CAAK2C,UAAU,aACbrB,GAAgB2B,GAAeH,EAAY,IAAKQ,EAAAA,EAAAA,IAAeR,MA+CpE,EApB6C,SAACS,GAC7C,IAAMlE,EAAK,iBAAQmE,EAAAA,GAA4BD,GAE/C,EAAiBlE,EAAMoE,UAAhBC,EAAP,KACMC,EADN,KACsBD,EAAK,EACrBE,EAAavE,EAAM0C,OAAOmB,OAG1BW,EAAkB,CACvBC,qBAH2BC,EAAAA,EAAAA,IAAcJ,GAAUK,KAAI,SAAAC,GAAC,OAAIA,EAAI,QAAMb,KAAK,KAI3Ec,iBAHqB,UAAaN,EAAb,UAMtB,OACC5D,EAAAA,cAACmE,EAAD,CAAiBxB,UAAU,YAAYyB,MAAOP,GAnC/B,SAACxE,GAKjB,IAJA,IAAQoE,EAAsBpE,EAAtBoE,UAAW1B,EAAW1C,EAAX0C,OACZ2B,EAAUD,EAAjB,GAAWY,EAAMZ,EAAjB,GAEMa,EAAW,GACRC,EAAI,EAAGA,EAAIxC,EAAOmB,OAAQqB,IAClC,IAAK,IAAIC,EAAId,EAAIc,GAAKH,EAAIG,IACzBF,EAAStB,KACRhD,EAAAA,cAAC4C,EAAD,eACC6B,IAAG,IAAMF,EAAN,KAAYC,EACf3B,YAAa0B,EACbzB,UAAW0B,EACXzC,OAAQA,GACJ1C,KAKR,OAAOiF,EAkBJI,CAASrF,M,0GC9DD4C,E,+BAAZ,SAAYA,GAAAA,EAAAA,SAAAA,WAAAA,EAAAA,cAAAA,iBAAAA,EAAAA,aAAAA,gBAAAA,EAAAA,KAAAA,OAAAA,EAAAA,WAAAA,cAAAA,EAAAA,MAAAA,SAAAA,EAAAA,OAAAA,SAAAA,EAAAA,MAAAA,QAAAA,EAAAA,OAAAA,SAAAA,EAAAA,MAAAA,SAAAA,EAAAA,MAAAA,SAAAA,EAAAA,MAAAA,SAAAA,EAAAA,MAAAA,SAAAA,EAAAA,MAAAA,SAAAA,EAAAA,MAAAA,SAAAA,EAAAA,MAAAA,SAAZ,CAAYA,IAAAA,EAAAA,KAyBZ,IAAM0C,EAAe,SAACzG,EAAcE,EAAcC,GAA7B,MAA2D,CAC5EH,GAAAA,EACAE,KAAAA,EACAC,MAAAA,IAGEuG,EAAW,SAACC,EAAgBC,GAAjB,OAA4C3F,EAAAA,EAAAA,QAAa0F,EAAQC,GAAQC,IAAI,IAEjF/C,EAAoB,IAAIgD,IAAuB,CACxD,CAAC/C,EAASgD,SAAUN,EAChB1C,EAASgD,SACT,WACA,CACIL,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,MAG3B,CAACc,EAASiD,KAAMP,EACZ1C,EAASiD,KACT,OACA,CACIN,EAASzD,EAAAA,GAAAA,GAAW,GACpByD,EAASzD,EAAAA,GAAAA,GAAW,GACpByD,EAASzD,EAAAA,GAAAA,GAAW,GACpByD,EAASzD,EAAAA,GAAAA,GAAW,GACpByD,EAASzD,EAAAA,GAAAA,GAAW,GACpByD,EAASzD,EAAAA,GAAAA,GAAW,MAG5B,CAACc,EAASkD,WAAYR,EAClB1C,EAASkD,WACT,cACA,CACIP,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,MAG3B,CAACc,EAASmD,cAAeT,EACrB1C,EAASmD,cACT,oBACA,CACIR,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,MAG3B,CAACc,EAASoD,aAAcV,EACpB1C,EAASoD,aACT,gBACA,CACIT,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,MAG3B,CAACc,EAASqD,MAAOX,EACb1C,EAASqD,MACT,SACA,CACIV,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,MAG3B,CAACc,EAASsD,OAAQZ,EACd1C,EAASsD,OACT,SACA,CACIX,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,MAI3B,CAACc,EAASuD,MAAOb,EACb1C,EAASuD,MACT,QACA,CACIZ,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,MAI3B,CAACc,EAASwD,OAAQd,EACd1C,EAASwD,OACT,SACA,CACIb,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,MAG3B,CAACc,EAASyD,MAAOf,EACb1C,EAASyD,MACT,SACA,CACId,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,GAAW,GACpByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,MAG3B,CAACc,EAAS0D,MAAOhB,EACb1C,EAAS0D,MACT,SACA,CACIf,EAASzD,EAAAA,GAAAA,GAAW,GACpByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,GAAW,GACpByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,GAAW,GACpByD,EAASzD,EAAAA,GAAAA,EAAU,MAG3B,CAACc,EAAS2D,MAAOjB,EACb1C,EAAS2D,MACT,SACA,CACIhB,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAAU,GACnByD,EAASzD,EAAAA,GAAAA,EAA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","sources":["webpack://play-what/./src/components/layout/PageBody.tsx","webpack://play-what/./src/components/pages/view/NotesCol.tsx","webpack://play-what/./src/components/pages/view/ViewPage.tsx","webpack://play-what/./src/pages/view/index.tsx","webpack://play-what/./src/viewers/fretboard/Fretboard.styles.tsx","webpack://play-what/./src/viewers/fretboard/FretLabel.tsx","webpack://play-what/./src/viewers/fretboard/Fretboard.tsx","webpack://play-what/./src/viewers/fretboard/Fretboard.tuning.ts","webpack://play-what/./src/viewers/fretboard/Fretboard.utils.ts"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const StyledPageBody = styled.div`\r\n\twidth: 100%;\r\n\t//max-width: 1920px;\r\n\tmax-width: 1024px;\r\n\tmin-height: calc(100vh - 96px);\r\n    \r\n\tmargin: auto;\r\n\tpadding: 16px;\r\n`\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport Chord from \"../../../core/models/Chord\";\r\nimport { ChordId, IModelConfig, ModelId, ModelType, NoteId, ScaleId } from \"../../../core/models/Model.constants\";\r\nimport { CHORD_PRESETS, NOTE_PRESETS, SCALE_PRESETS } from \"../../../core/models/Model.presets\";\r\nimport Note from \"../../../core/models/Note\";\r\nimport Scale from \"../../../core/models/Scale\";\r\nimport DropdownInput from \"../../inputs/DropdownInput\";\r\nimport Card, { CardHeader } from \"../../ui/Card\";\r\nimport InputRow from \"../../ui/InputRow\";\r\n\r\nconst StyledNotesCol = styled.div`\r\n    .header:not(:first-child) {\r\n        margin-top: 16px;\r\n    }\r\n`;\r\n\r\nexport const MODEL_TYPE_OPTIONS = [\r\n    {\r\n        id: ModelType.Chord,\r\n        name: 'Chords',\r\n        value: ModelType.Chord,\r\n        data: CHORD_PRESETS\r\n    },\r\n    {\r\n        id: ModelType.Scale,\r\n        name: 'Scales',\r\n        value: ModelType.Scale,\r\n        data: SCALE_PRESETS\r\n    }\r\n]\r\n\r\nexport interface INotesColProps {\r\n    modelType: typeof MODEL_TYPE_OPTIONS[0];\r\n    modelConfig;\r\n    root: IModelConfig | any;\r\n    model: Chord | Scale;\r\n    setModelType?;\r\n    setModelConfig?;\r\n    setRoot?;\r\n    setModel?;\r\n}\r\n\r\nexport const DEFAULT_MODEL_TYPE = MODEL_TYPE_OPTIONS[0];\r\nexport const DEFAULT_MODEL_CONFIG = MODEL_TYPE_OPTIONS[0].data[0];\r\nexport const DEFAULT_ROOT = NOTE_PRESETS[0];\r\n//export const DEFAULT_MODEL = new Chord(DEFAULT_MODEL_CONFIG.modelId, { root: Note.fromId(DEFAULT_ROOT.modelId) })\r\n\r\nexport const getNewModel = (modelType: ModelType, modelId: ModelId, root: NoteId) => {\r\n    let newModel;\r\n    if (modelType === ModelType.Chord) {\r\n        newModel = new Chord(modelId as ChordId, { root: Note.fromId(root) })\r\n    }\r\n    else if (modelType === ModelType.Scale) {\r\n        newModel = new Scale(modelId as ScaleId, { root: Note.fromId(root) })\r\n    }\r\n    return newModel;\r\n}\r\n\r\nconst NotesCol: React.FC<INotesColProps> = props => {\r\n\r\n    const { modelType, modelConfig, root, setModelType: _setModelType, setModelConfig: _setModelConfig, setRoot: _setRoot, model, setModel } = props;\r\n    const modelOptions = modelType.data;\r\n\r\n    const setModelType = type => {\r\n        _setModelType(type);\r\n        _setModelConfig(type.data[0])\r\n    }\r\n    const setModelConfig = config => {\r\n        let newModel = getNewModel(config.modelType, config.modelId, root.modelId);\r\n        _setModelConfig(config);\r\n        setModel(newModel);\r\n    }\r\n    const setRoot = newRoot => {\r\n        let newModel = getNewModel(modelConfig.modelType, modelConfig.modelId, newRoot.modelId);\r\n        _setRoot(newRoot);\r\n        setModel(newModel);\r\n    }\r\n\r\n    //console.log('dpb', MODEL_TYPE_OPTIONS, modelType, modelOptions, modelConfig)\r\n\r\n    return (\r\n        <StyledNotesCol>\r\n            <CardHeader title=\"Root\" />\r\n            <ul>\r\n                <li>\r\n                    <InputRow label=\"Key Center\">\r\n                        <DropdownInput value={root} setValue={setRoot} options={NOTE_PRESETS} idProperty=\"modelId\" />\r\n                    </InputRow>\r\n                </li>\r\n            </ul>\r\n\r\n            <CardHeader title=\"Intervals\" />\r\n            <ul>\r\n                <li>\r\n                    <InputRow label=\"Model Type\">\r\n                        <DropdownInput value={modelType} setValue={setModelType} options={MODEL_TYPE_OPTIONS} idProperty=\"id\" />\r\n                    </InputRow>\r\n                </li>\r\n                <li>\r\n                    <InputRow label=\"Preset\">\r\n                        <DropdownInput value={modelConfig} setValue={setModelConfig} options={modelOptions} idProperty=\"modelId\" />\r\n                    </InputRow>\r\n                </li>\r\n            </ul>\r\n        </StyledNotesCol>\r\n    );\r\n};\r\n\r\nexport default NotesCol;\r\n","import { Link } from \"gatsby\";\r\nimport React from \"react\";\r\nimport styled from 'styled-components';\r\nimport { ChordId, ModelType, NoteId } from \"../../../core/models/Model.constants\";\r\nimport THEME from \"../../../styles/theme\";\r\nimport Fretboard from \"../../../viewers/fretboard/Fretboard\";\r\nimport { TuningId, TUNING_PRESET_MAP } from \"../../../viewers/fretboard/Fretboard.tuning\";\r\nimport Keyboard from \"../../../viewers/keyboard/Keyboard\";\r\nimport DEFAULT_KEYBOARD_PROPS from \"../../../viewers/keyboard/Keyboard.defaults\";\r\nimport ColumnManager, { StyledColumnManager } from \"../../column-manager/ColumnManager\";\r\nimport { StyledPageBody } from \"../../layout/PageBody\";\r\nimport PageTitle from \"../../layout/PageTitle\";\r\nimport Card, { StyledCard } from \"../../ui/Card\";\r\nimport { getNewModel } from \"./NotesCol\";\r\n\r\nconst StyledViewPage = styled(StyledPageBody)`\r\n    ${StyledColumnManager} {\r\n        margin-top: 16px;\r\n    }\r\n\r\n    ${StyledCard} {\r\n        border: 1px solid ${THEME.status.highlight};\r\n        &:hover {\r\n            border: 1px solid ${THEME.action.active};\r\n            background-color: ${THEME.status.highlight};\r\n        }\r\n\r\n        .fretboard, .keyboard {\r\n            margin: 0;\r\n            & + a {\r\n                padding-top: 16px;\r\n                font-size: 150%;\r\n                font-weight: bold;\r\n                display: block;\r\n                text-align: right;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst COMMON_MODEL = getNewModel(ModelType.Chord, ChordId.MajTriad, NoteId.C);\r\n\r\nconst COMMON_FRETBOARD_PROPS = {\r\n    model: COMMON_MODEL,\r\n    showFretNumbers: false,\r\n    showFretDots: false\r\n}\r\n\r\nconst ViewPage: React.FC<any> = () => {\r\n\r\n    return (\r\n        <StyledViewPage>\r\n            <PageTitle title=\"Instruments\" subtitle=\"Choose an instrument\" />\r\n            <ColumnManager desktop={['1fr', '1fr']} >\r\n                <Link to='/view/fretboard/'>\r\n                    <Card title=\"Guitar\">\r\n                        <Fretboard\r\n                            {...COMMON_FRETBOARD_PROPS}\r\n                            tuning={TUNING_PRESET_MAP.get(TuningId.Standard).value}\r\n                        />\r\n                    </Card>\r\n                </Link>\r\n                <Link to='/view/keyboard/'>\r\n                    <Card title=\"Keyboard\">\r\n                        <Keyboard\r\n                            model={COMMON_MODEL}\r\n                            keyRange={DEFAULT_KEYBOARD_PROPS.keyRange as [number, number]}\r\n                        />\r\n                    </Card>\r\n                </Link>\r\n            </ColumnManager>\r\n        </StyledViewPage >\r\n    )\r\n};\r\n\r\nexport default ViewPage;\r\n","import ViewPage from \"../../components/pages/view/ViewPage\";\r\n\r\nexport default ViewPage;\r\n","import styled from 'styled-components';\r\n\r\nconst StyledFretboard = styled.div`\r\n    display: inline-grid;\r\n\twidth: 100%;\r\n\tbackground-image: radial-gradient(ellipse, #E8DBB8 0%, #D0B27C 100%);\r\n\tfont-size: 90%;\r\n\tmargin: 16px 0;\r\n\r\n    .fret {\r\n        display: inline-flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        position: relative;\r\n        border-right: 2px solid darkgrey;\r\n    }\r\n\r\n    .fret.open {\r\n        border-right: 3px solid grey;\r\n        background-color: #D0B27C;;\r\n    }\r\n\r\n    /* Used to maintain aspect ratio */\r\n\r\n    .fret::before {\r\n        content: \"\";\r\n        display: block;\r\n        height: 0;\r\n        width: 0;\r\n        margin-top: calc(1/2 * 100%);\r\n    }\r\n\r\n    /* Fret String */\r\n\r\n    .fret-string {\r\n        border-top: 1px solid grey;\r\n        width: 100%;\r\n    }\r\n\r\n    /* Fret Numbers */\r\n\r\n    .fret-number {\r\n        position: absolute;\r\n        bottom: 100%;\r\n    }\r\n\r\n    /* Fret Dots */\r\n\r\n    .fret-dots {\r\n        position: absolute;\r\n        top: 95%;\r\n        font-size: 16px;\r\n        white-space: nowrap;\r\n    }\r\n\r\n    .fret-number, .fret-dots {\r\n        color: #888;\r\n    }\r\n`;\r\n\r\nexport default StyledFretboard;\r\n","\r\nimport * as React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { IFretProps } from \"./Fretboard.utils\";\r\n\r\nconst StyledFretLabel = styled.div`\r\n\tposition: absolute;\r\n\theight: 60%;\r\n\taspect-ratio: 1;\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\tborder-radius: 100%;\r\n\tbackground-color: ${({ $bgColor }) => $bgColor ? $bgColor : 'transparent'};\r\n\tcolor: ${({ $fgColor }) => $fgColor ? $fgColor : ''};\r\n\r\n\t/*cursor: pointer;\r\n\t&:hover {\r\n\t\theight: 80%;\r\n\t}*/\r\n`;\r\n\r\n\r\nconst FretLabel: React.FC<IFretProps> = props => {\r\n\r\n\tconst bgColor = props.colorMapFn(props);\r\n\r\n\tlet fgColor = 'white';\r\n\r\n\treturn (\r\n\t\t<StyledFretLabel $bgColor={bgColor} $fgColor={fgColor} onClick={null} className=\"fret-label\">\r\n\t\t\t{null}\r\n\t\t</StyledFretLabel>\r\n\t);\r\n};\r\n\r\nexport default FretLabel;\r\n","import * as React from \"react\";\r\nimport StyledFretboard from \"./Fretboard.styles\";\r\nimport { DEFAULT_FRETBOARD_PROPS, getDotsForFret, getFretRatios, IFretboardProps, IFretProps } from \"./Fretboard.utils\";\r\nimport FretLabel from \"./FretLabel\";\r\n\r\nexport const Fret: React.FC<IFretProps> = props => {\r\n\r\n\tconst { tuning, stringIndex, fretIndex, showFretNumbers, showFretDots } = props;\r\n\r\n\tconst classes = ['fret'];\r\n\tif (fretIndex === 0)\r\n\t\tclasses.push('open');\r\n\r\n\tconst isLowString = stringIndex === tuning.length - 1;\r\n\tconst isHighString = stringIndex === 0;\r\n\r\n\treturn (\r\n\t\t<div className={classes.join(' ')}>\r\n\t\t\t<div className=\"fret-number\">\r\n\t\t\t\t{showFretNumbers && isHighString && fretIndex > 0 && fretIndex}\r\n\t\t\t</div>\r\n\t\t\t<div className='fret-string' />\r\n\t\t\t<FretLabel {...props} />\r\n\t\t\t<div className=\"fret-dots\">\r\n\t\t\t\t{showFretDots && isLowString && fretIndex > 0 && getDotsForFret(fretIndex)}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst getFrets = (props: IFretboardProps) => {\r\n\tconst { fretRange, tuning } = props;\r\n\tconst [lo, hi] = fretRange;\r\n\r\n\tconst allFrets = [];\r\n\tfor (let s = 0; s < tuning.length; s++) {\r\n\t\tfor (let f = lo; f <= hi; f++) {\r\n\t\t\tallFrets.push(\r\n\t\t\t\t<Fret\r\n\t\t\t\t\tkey={`s${s}-f${f}`}\r\n\t\t\t\t\tstringIndex={s}\r\n\t\t\t\t\tfretIndex={f}\r\n\t\t\t\t\ttuning={tuning}\r\n\t\t\t\t\t{...props}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\treturn allFrets;\r\n};\r\n\r\nconst Fretboard: React.FC<IFretboardProps> = (userProps) => {\r\n\tconst props = { ...DEFAULT_FRETBOARD_PROPS, ...userProps };\r\n\r\n\tconst [lo, hi] = props.fretRange;\r\n\tconst numFrets = hi - lo + 1;\r\n\tconst numStrings = props.tuning.length;\r\n\tconst gridTemplateColumns = getFretRatios(numFrets).map(n => n + 'fr').join(' ');\r\n\tconst gridTemplateRows = `repeat(${numStrings}, 1fr)`;\r\n\tconst fretboardStyles = {\r\n\t\tgridTemplateColumns,\r\n\t\tgridTemplateRows\r\n\t};\r\n\r\n\treturn (\r\n\t\t<StyledFretboard className='fretboard' style={fretboardStyles}>\r\n\t\t\t{getFrets(props)}\r\n\t\t</StyledFretboard>\r\n\t);\r\n};\r\n\r\nexport default Fretboard;\r\n","import ArrayUtils from \"../../core/general/Array.utils\";\r\nimport Note from '../../core/models/Note';\r\nimport { NoteId } from './../../core/models/Model.constants';\r\n\r\nexport enum TuningId {\r\n    Standard = 'standard',\r\n    StandardSeven = 'standard-seven',\r\n    StandardBass = 'standard-bass',\r\n    Flat = 'flat',\r\n    DoubleFlat = 'double-flat',\r\n    DropD = 'drop-d',\r\n    DADGAD = 'dadgad',\r\n    Banjo = 'banjo',\r\n    Violin = 'violin',\r\n    OpenA = 'open-a',\r\n    OpenB = 'open-b',\r\n    OpenC = 'open-c',\r\n    OpenD = 'open-d',\r\n    OpenE = 'open-e',\r\n    OpenF = 'open-f',\r\n    OpenG = 'open-g',\r\n}\r\n\r\nexport interface ITuning {\r\n    id: TuningId;\r\n    name: string;\r\n    value: number[]\r\n}\r\n\r\nconst formatPreset = (id: TuningId, name: string, value: number[]): ITuning => ({\r\n    id,\r\n    name,\r\n    value\r\n});\r\n\r\nconst getPitch = (noteId: NoteId, octave: number): number => Note.getNote(noteId, octave).pod[0];\r\n\r\nexport const TUNING_PRESET_MAP = new Map<TuningId, ITuning>([\r\n    [TuningId.Standard, formatPreset(\r\n        TuningId.Standard,\r\n        'Standard',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.Flat, formatPreset(\r\n        TuningId.Flat,\r\n        'Flat',\r\n        [\r\n            getPitch(NoteId.Eb, 5),\r\n            getPitch(NoteId.Bb, 4),\r\n            getPitch(NoteId.Gb, 4),\r\n            getPitch(NoteId.Db, 4),\r\n            getPitch(NoteId.Ab, 3),\r\n            getPitch(NoteId.Eb, 3)\r\n        ]\r\n    )],\r\n    [TuningId.DoubleFlat, formatPreset(\r\n        TuningId.DoubleFlat,\r\n        'Double Flat',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.F, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.StandardSeven, formatPreset(\r\n        TuningId.StandardSeven,\r\n        'Standard 7-String',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3),\r\n            getPitch(NoteId.B, 3)\r\n        ]\r\n    )],\r\n    [TuningId.StandardBass, formatPreset(\r\n        TuningId.StandardBass,\r\n        'Standard Bass',\r\n        [\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3),\r\n            getPitch(NoteId.A, 2),\r\n            getPitch(NoteId.E, 2)\r\n        ]\r\n    )],\r\n    [TuningId.DropD, formatPreset(\r\n        TuningId.DropD,\r\n        'Drop D',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.DADGAD, formatPreset(\r\n        TuningId.DADGAD,\r\n        'DADGAD',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    // Unconfirmed\r\n    [TuningId.Banjo, formatPreset(\r\n        TuningId.Banjo,\r\n        'Banjo',\r\n        [\r\n            getPitch(NoteId.G, 5),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    // Unconfirmed\r\n    [TuningId.Violin, formatPreset(\r\n        TuningId.Violin,\r\n        'Violin',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 4)\r\n        ]\r\n    )],\r\n    [TuningId.OpenA, formatPreset(\r\n        TuningId.OpenA,\r\n        'Open A',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.E, 4),\r\n            getPitch(NoteId.Cs, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenB, formatPreset(\r\n        TuningId.OpenB,\r\n        'Open B',\r\n        [\r\n            getPitch(NoteId.Ds, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Fs, 4),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Fs, 3),\r\n            getPitch(NoteId.B, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenC, formatPreset(\r\n        TuningId.OpenC,\r\n        'Open C',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.C, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenD, formatPreset(\r\n        TuningId.OpenD,\r\n        'Open D',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.A, 4),\r\n            getPitch(NoteId.Fs, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenE, formatPreset(\r\n        TuningId.OpenE,\r\n        'Open E',\r\n        [\r\n            getPitch(NoteId.E, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.Gs, 4),\r\n            getPitch(NoteId.E, 4),\r\n            getPitch(NoteId.B, 3),\r\n            getPitch(NoteId.E, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenF, formatPreset(\r\n        TuningId.OpenF,\r\n        'Open F',\r\n        [\r\n            getPitch(NoteId.F, 5),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.F, 4),\r\n            getPitch(NoteId.C, 4),\r\n            getPitch(NoteId.A, 3),\r\n            getPitch(NoteId.F, 3)\r\n        ]\r\n    )],\r\n    [TuningId.OpenG, formatPreset(\r\n        TuningId.OpenG,\r\n        'Open G',\r\n        [\r\n            getPitch(NoteId.D, 5),\r\n            getPitch(NoteId.B, 4),\r\n            getPitch(NoteId.G, 4),\r\n            getPitch(NoteId.D, 4),\r\n            getPitch(NoteId.G, 3),\r\n            getPitch(NoteId.D, 3)\r\n        ]\r\n    )]\r\n]);\r\n\r\nexport const FRETBOARD_TUNING_VALUES = ArrayUtils.mapToArray(TUNING_PRESET_MAP);\r\n","import Chord from '../../core/models/Chord';\r\nimport IntervalSpan from '../../core/models/Interval';\r\nimport { IModelConfig } from '../../core/models/Model.constants';\r\nimport Note from '../../core/models/Note';\r\nimport Scale from '../../core/models/Scale';\r\nimport { ITuning, TuningId, TUNING_PRESET_MAP } from './Fretboard.tuning';\r\nimport { IVoicing } from './Fretboard.voicing';\r\n\r\nexport interface IFretLabelProps {\r\n\tnote?: Note;\r\n\tcolor?: string;\r\n\tfreq?: number;\r\n}\r\n\r\nexport interface IFretboardProps {\r\n\tfretRange?: [number, number];\r\n\tshowFretDots?: boolean;\r\n\tshowFretNumbers?: boolean;\r\n\tcolorMapFn?: (fretProps: IFretProps) => string | undefined;\r\n\tvoicing?: IVoicing,\r\n\ttuning?: number[]; // ITuning,\r\n\tmodel?: Chord | Scale;\r\n}\r\n\r\nexport interface IFretProps extends IFretboardProps {\r\n\tstringIndex: number;\r\n\tfretIndex: number;\r\n}\r\n\r\nexport const DOTTED_FRET_INDICES = [true, false, false, true, false, true, false, true, false, true, false, false];\r\n\r\nexport const FRET_SIZE_RATIO = Math.pow((1 / 2), (1 / 12));\r\n\r\nconst isIntervalInVoicing = (interval: IntervalSpan, voicing: IVoicing, stringIndex: number) => {\r\n\tif (!voicing || !voicing.value) return true;\r\n\tconst v = voicing.value[stringIndex];\r\n\tconst d = interval.getDegree();\r\n\tif (Array.isArray(v)) {\r\n\t\treturn v.some(n => doesVoicingValueMatch(d, n));\r\n\t}\r\n\telse if (typeof v === 'number') {\r\n\t\treturn doesVoicingValueMatch(d, v);\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nexport const getFretColor = (props: IFretProps): string | undefined => {\r\n\tconst { stringIndex, fretIndex, tuning, model, voicing } = props;\r\n\tconst noteIndex = tuning[stringIndex] + fretIndex;\r\n\tconst [interval, note] = model.tryGetPodPairAtPitch(noteIndex);\r\n\r\n\tif (!note) return;\r\n\r\n\tif (voicing && !isIntervalInVoicing(interval, voicing, stringIndex)) {\r\n\t\treturn `#00000033`\r\n\t}\r\n\r\n\treturn interval.getColor();\r\n}\r\n\r\nexport const DEFAULT_FRETBOARD_PROPS: IFretboardProps = {\r\n\tfretRange: [1, 12],\r\n\ttuning: TUNING_PRESET_MAP.get(TuningId.Standard).value,\r\n\tshowFretDots: true,\r\n\tshowFretNumbers: true,\r\n\tcolorMapFn: getFretColor\r\n};\r\n\r\nexport const getFretRatios = (numFrets: number): number[] => {\r\n\tconst ratios = [];\r\n\tfor (let i = 1; i <= numFrets; i++) {\r\n\t\tratios.push((i <= 1) ? 1 : ratios[i - 2] * FRET_SIZE_RATIO);\r\n\t}\r\n\treturn ratios;\r\n};\r\n\r\nexport const getDotsForFret = (fretNumber: number): string => {\r\n\tconst mod = fretNumber % 12;\r\n\tif (mod === 0)\r\n\t\treturn '• •';\r\n\telse if (DOTTED_FRET_INDICES[mod])\r\n\t\treturn '•';\r\n\treturn '';\r\n};\r\n\r\nconst doesVoicingValueMatch = (d: number, v: number) => {\r\n\treturn d + 1 === v;\r\n}\r\n"],"names":["StyledPageBody","styled","StyledNotesCol","MODEL_TYPE_OPTIONS","id","ModelType","name","value","data","CHORD_PRESETS","SCALE_PRESETS","DEFAULT_MODEL_TYPE","DEFAULT_MODEL_CONFIG","DEFAULT_ROOT","NOTE_PRESETS","getNewModel","modelType","modelId","root","newModel","Chord","Note","Scale","props","modelConfig","_setModelType","setModelType","_setModelConfig","setModelConfig","_setRoot","setRoot","setModel","model","modelOptions","React","CardHeader","title","InputRow","label","DropdownInput","setValue","newRoot","options","idProperty","type","config","StyledViewPage","withConfig","StyledColumnManager","StyledCard","THEME","COMMON_MODEL","ChordId","NoteId","COMMON_FRETBOARD_PROPS","showFretNumbers","showFretDots","PageTitle","subtitle","ColumnManager","desktop","Link","to","Card","Fretboard","tuning","TUNING_PRESET_MAP","TuningId","Keyboard","keyRange","DEFAULT_KEYBOARD_PROPS","StyledFretLabel","$bgColor","$fgColor","bgColor","colorMapFn","onClick","className","Fret","stringIndex","fretIndex","classes","push","isLowString","length","isHighString","join","FretLabel","getDotsForFret","userProps","DEFAULT_FRETBOARD_PROPS","fretRange","lo","numFrets","numStrings","fretboardStyles","gridTemplateColumns","getFretRatios","map","n","gridTemplateRows","StyledFretboard","style","hi","allFrets","s","f","key","getFrets","formatPreset","getPitch","noteId","octave","pod","Map","Standard","Flat","DoubleFlat","StandardSeven","StandardBass","DropD","DADGAD","Banjo","Violin","OpenA","OpenB","OpenC","OpenD","OpenE","OpenF","OpenG","FRETBOARD_TUNING_VALUES","ArrayUtils","DOTTED_FRET_INDICES","FRET_SIZE_RATIO","Math","pow","voicing","noteIndex","tryGetPodPairAtPitch","interval","v","d","getDegree","Array","isArray","some","doesVoicingValueMatch","isIntervalInVoicing","getColor","ratios","i","fretNumber","mod"],"sourceRoot":""}